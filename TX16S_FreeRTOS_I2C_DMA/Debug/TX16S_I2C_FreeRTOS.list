
TX16S_I2C_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800f460  0800f460  0001f460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fae8  0800fae8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800fae8  0800fae8  0001fae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800faf0  0800faf0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800faf0  0800faf0  0001faf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800faf4  0800faf4  0001faf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800faf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009af0  20000074  0800fb6c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009b64  0800fb6c  00029b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031de4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d98  00000000  00000000  00051e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026b0  00000000  00000000  00057c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002490  00000000  00000000  0005a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007fe3  00000000  00000000  0005c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002db4c  00000000  00000000  00064743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105d60  00000000  00000000  0009228f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197fef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aadc  00000000  00000000  00198044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f448 	.word	0x0800f448

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800f448 	.word	0x0800f448

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <serialPrintf>:
#define CRLF "\r\n"

#define PRINTF_BUFFER_SIZE    128

void serialPrintf(const char * format, ...)
{
 8000930:	b40f      	push	{r0, r1, r2, r3}
 8000932:	b590      	push	{r4, r7, lr}
 8000934:	b0a5      	sub	sp, #148	; 0x94
 8000936:	af00      	add	r7, sp, #0
	va_list arglist;
	char tmp[PRINTF_BUFFER_SIZE + 1];

	snprintf(tmp, PRINTF_BUFFER_SIZE, "+%05lums: ", HAL_GetTick());
 8000938:	f002 faba 	bl	8002eb0 <HAL_GetTick>
 800093c:	4603      	mov	r3, r0
 800093e:	1d38      	adds	r0, r7, #4
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <serialPrintf+0x7c>)
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	f00e f912 	bl	800eb6c <sniprintf>
	va_start(arglist, format);
 8000948:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800094c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	vsnprintf(tmp + strlen(tmp), PRINTF_BUFFER_SIZE - strlen(tmp), format, arglist);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc56 	bl	8000204 <strlen>
 8000958:	4602      	mov	r2, r0
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	189c      	adds	r4, r3, r2
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fc4f 	bl	8000204 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 800096c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000970:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000974:	4620      	mov	r0, r4
 8000976:	f00e f959 	bl	800ec2c <vsniprintf>
	tmp[PRINTF_BUFFER_SIZE] = '\0';
 800097a:	2300      	movs	r3, #0
 800097c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	va_end(arglist);

	const char *t = tmp;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart3, (uint8_t *) t, strlen(t), 10);
 8000986:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800098a:	f7ff fc3b 	bl	8000204 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	230a      	movs	r3, #10
 8000994:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <serialPrintf+0x80>)
 800099a:	f008 fe64 	bl	8009666 <HAL_UART_Transmit>
}
 800099e:	bf00      	nop
 80009a0:	3794      	adds	r7, #148	; 0x94
 80009a2:	46bd      	mov	sp, r7
 80009a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009a8:	b004      	add	sp, #16
 80009aa:	4770      	bx	lr
 80009ac:	0800f494 	.word	0x0800f494
 80009b0:	20008e20 	.word	0x20008e20

080009b4 <TOUCH_AF_INT_Change>:

#define debugPrintf(...) do { serialPrintf(__VA_ARGS__); } while(0)
#define TRACE(f_, ...)        debugPrintf((TRACE_TIME_FORMAT f_ CRLF), TRACE_TIME_VALUE, ##__VA_ARGS__)

void TOUCH_AF_INT_Change(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <TOUCH_AF_INT_Change+0x28>)
 80009d0:	f003 fa10 	bl	8003df4 <HAL_GPIO_Init>
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021c00 	.word	0x40021c00

080009e0 <TOUCH_AF_GPIOConfig>:

static void TOUCH_AF_GPIOConfig(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = TOUCH_RST_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStructure);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <TOUCH_AF_GPIOConfig+0x5c>)
 80009fe:	f003 f9f9 	bl	8003df4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <TOUCH_AF_GPIOConfig+0x5c>)
 8000a0a:	f003 fbb7 	bl	800417c <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <TOUCH_AF_GPIOConfig+0x60>)
 8000a24:	f003 f9e6 	bl	8003df4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <TOUCH_AF_GPIOConfig+0x60>)
 8000a2e:	f003 fba5 	bl	800417c <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021400 	.word	0x40021400
 8000a40:	40021c00 	.word	0x40021c00

08000a44 <I2C_GT911_ReadRegister>:

bool I2C_GT911_ReadRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	80fb      	strh	r3, [r7, #6]
 8000a50:	4613      	mov	r3, r2
 8000a52:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Mem_Read_DMA(&hi2c1, GT911_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_16BIT, buf, len) != HAL_OK)
 8000a54:	797b      	ldrb	r3, [r7, #5]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	88fa      	ldrh	r2, [r7, #6]
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2310      	movs	r3, #16
 8000a62:	2128      	movs	r1, #40	; 0x28
 8000a64:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <I2C_GT911_ReadRegister+0x90>)
 8000a66:	f003 fe55 	bl	8004714 <HAL_I2C_Mem_Read_DMA>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d011      	beq.n	8000a94 <I2C_GT911_ReadRegister+0x50>
	{
		TRACE("I2C ERROR: GT911 ReadRegister failed");
 8000a70:	f002 fa1e 	bl	8002eb0 <HAL_GetTick>
 8000a74:	ee07 0a90 	vmov	s15, r0
 8000a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a7c:	ee17 0a90 	vmov	r0, s15
 8000a80:	f7ff fd82 	bl	8000588 <__aeabi_f2d>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <I2C_GT911_ReadRegister+0x94>)
 8000a8a:	f7ff ff51 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000a8e:	beff      	bkpt	0x00ff
		return false;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e01b      	b.n	8000acc <I2C_GT911_ReadRegister+0x88>
	}
	if (xSemaphoreTake(BinSemI2CCBHandle, I2C_TIMEOUT) != pdPASS)
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <I2C_GT911_ReadRegister+0x98>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2114      	movs	r1, #20
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00b fcf6 	bl	800c48c <xQueueSemaphoreTake>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d011      	beq.n	8000aca <I2C_GT911_ReadRegister+0x86>
	{
		TRACE("I2C ERROR: GT911 WriteRegister did not succeed");
 8000aa6:	f002 fa03 	bl	8002eb0 <HAL_GetTick>
 8000aaa:	ee07 0a90 	vmov	s15, r0
 8000aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab2:	ee17 0a90 	vmov	r0, s15
 8000ab6:	f7ff fd67 	bl	8000588 <__aeabi_f2d>
 8000aba:	4602      	mov	r2, r0
 8000abc:	460b      	mov	r3, r1
 8000abe:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <I2C_GT911_ReadRegister+0x9c>)
 8000ac0:	f7ff ff36 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000ac4:	beff      	bkpt	0x00ff
		return false;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <I2C_GT911_ReadRegister+0x88>
	}
	return true;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20008ec4 	.word	0x20008ec4
 8000ad8:	0800f4a0 	.word	0x0800f4a0
 8000adc:	200094a0 	.word	0x200094a0
 8000ae0:	0800f4d0 	.word	0x0800f4d0

08000ae4 <I2C_GT911_WriteRegister>:

bool I2C_GT911_WriteRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	80fb      	strh	r3, [r7, #6]
 8000af0:	4613      	mov	r3, r2
 8000af2:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Mem_Write_DMA(&hi2c1, GT911_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_16BIT, buf, len) != HAL_OK)
 8000af4:	797b      	ldrb	r3, [r7, #5]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	88fa      	ldrh	r2, [r7, #6]
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2310      	movs	r3, #16
 8000b02:	2128      	movs	r1, #40	; 0x28
 8000b04:	481b      	ldr	r0, [pc, #108]	; (8000b74 <I2C_GT911_WriteRegister+0x90>)
 8000b06:	f003 fcaf 	bl	8004468 <HAL_I2C_Mem_Write_DMA>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d011      	beq.n	8000b34 <I2C_GT911_WriteRegister+0x50>
	{
		TRACE("I2C ERROR: GT911 WriteRegister failed");
 8000b10:	f002 f9ce 	bl	8002eb0 <HAL_GetTick>
 8000b14:	ee07 0a90 	vmov	s15, r0
 8000b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b1c:	ee17 0a90 	vmov	r0, s15
 8000b20:	f7ff fd32 	bl	8000588 <__aeabi_f2d>
 8000b24:	4602      	mov	r2, r0
 8000b26:	460b      	mov	r3, r1
 8000b28:	4813      	ldr	r0, [pc, #76]	; (8000b78 <I2C_GT911_WriteRegister+0x94>)
 8000b2a:	f7ff ff01 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000b2e:	beff      	bkpt	0x00ff
		return false;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e01b      	b.n	8000b6c <I2C_GT911_WriteRegister+0x88>
	}
	if (xSemaphoreTake(BinSemI2CCBHandle, I2C_TIMEOUT) != pdPASS)
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <I2C_GT911_WriteRegister+0x98>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2114      	movs	r1, #20
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00b fca6 	bl	800c48c <xQueueSemaphoreTake>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d011      	beq.n	8000b6a <I2C_GT911_WriteRegister+0x86>
	{
		TRACE("I2C ERROR: GT911 WriteRegister did not succeed");
 8000b46:	f002 f9b3 	bl	8002eb0 <HAL_GetTick>
 8000b4a:	ee07 0a90 	vmov	s15, r0
 8000b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b52:	ee17 0a90 	vmov	r0, s15
 8000b56:	f7ff fd17 	bl	8000588 <__aeabi_f2d>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <I2C_GT911_WriteRegister+0x9c>)
 8000b60:	f7ff fee6 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000b64:	beff      	bkpt	0x00ff
		return false;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <I2C_GT911_WriteRegister+0x88>
	}
	return true;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20008ec4 	.word	0x20008ec4
 8000b78:	0800f508 	.word	0x0800f508
 8000b7c:	200094a0 	.word	0x200094a0
 8000b80:	0800f4d0 	.word	0x0800f4d0

08000b84 <I2C_GT911_SendConfig>:

bool I2C_GT911_SendConfig(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint8_t i = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	buf[0] = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	713b      	strb	r3, [r7, #4]
	buf[1] = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	717b      	strb	r3, [r7, #5]
	bool bResult = true;
 8000b96:	2301      	movs	r3, #1
 8000b98:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	e009      	b.n	8000bb4 <I2C_GT911_SendConfig+0x30>
		buf[0] += TOUCH_GT911_Cfg[i];//check sum
 8000ba0:	793a      	ldrb	r2, [r7, #4]
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	4927      	ldr	r1, [pc, #156]	; (8000c44 <I2C_GT911_SendConfig+0xc0>)
 8000ba6:	5ccb      	ldrb	r3, [r1, r3]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	713b      	strb	r3, [r7, #4]
	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2bb7      	cmp	r3, #183	; 0xb7
 8000bb8:	d9f2      	bls.n	8000ba0 <I2C_GT911_SendConfig+0x1c>

	buf[0] = (~buf[0]) + 1;
 8000bba:	793b      	ldrb	r3, [r7, #4]
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	713b      	strb	r3, [r7, #4]
	if (!I2C_GT911_WriteRegister(GT_CFGS_REG, (uint8_t *) TOUCH_GT911_Cfg, sizeof(TOUCH_GT911_Cfg)))
 8000bc2:	22b8      	movs	r2, #184	; 0xb8
 8000bc4:	491f      	ldr	r1, [pc, #124]	; (8000c44 <I2C_GT911_SendConfig+0xc0>)
 8000bc6:	f248 0047 	movw	r0, #32839	; 0x8047
 8000bca:	f7ff ff8b 	bl	8000ae4 <I2C_GT911_WriteRegister>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f083 0301 	eor.w	r3, r3, #1
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d010      	beq.n	8000bfc <I2C_GT911_SendConfig+0x78>
	{
		TRACE("GT911 ERROR: write config failed");
 8000bda:	f002 f969 	bl	8002eb0 <HAL_GetTick>
 8000bde:	ee07 0a90 	vmov	s15, r0
 8000be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000be6:	ee17 0a90 	vmov	r0, s15
 8000bea:	f7ff fccd 	bl	8000588 <__aeabi_f2d>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	4815      	ldr	r0, [pc, #84]	; (8000c48 <I2C_GT911_SendConfig+0xc4>)
 8000bf4:	f7ff fe9c 	bl	8000930 <serialPrintf>
		bResult = false;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	71bb      	strb	r3, [r7, #6]
	}

	if (!I2C_GT911_WriteRegister(GT_CHECK_REG, buf, 2)) //write checksum
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2202      	movs	r2, #2
 8000c00:	4619      	mov	r1, r3
 8000c02:	f248 00ff 	movw	r0, #33023	; 0x80ff
 8000c06:	f7ff ff6d 	bl	8000ae4 <I2C_GT911_WriteRegister>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f083 0301 	eor.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d010      	beq.n	8000c38 <I2C_GT911_SendConfig+0xb4>
		{
			TRACE("GT911 ERROR: write config checksum failed");
 8000c16:	f002 f94b 	bl	8002eb0 <HAL_GetTick>
 8000c1a:	ee07 0a90 	vmov	s15, r0
 8000c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c22:	ee17 0a90 	vmov	r0, s15
 8000c26:	f7ff fcaf 	bl	8000588 <__aeabi_f2d>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <I2C_GT911_SendConfig+0xc8>)
 8000c30:	f7ff fe7e 	bl	8000930 <serialPrintf>
			bResult = false;
 8000c34:	2300      	movs	r3, #0
 8000c36:	71bb      	strb	r3, [r7, #6]
		}
	return bResult;
 8000c38:	79bb      	ldrb	r3, [r7, #6]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	0800f960 	.word	0x0800f960
 8000c48:	0800f538 	.word	0x0800f538
 8000c4c:	0800f564 	.word	0x0800f564

08000c50 <touchPanelInit>:

bool touchPanelInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af02      	add	r7, sp, #8
	uint8_t tmp[4] = { 0 };
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]

	TRACE("Touchpanel init start ...");
 8000c5a:	f002 f929 	bl	8002eb0 <HAL_GetTick>
 8000c5e:	ee07 0a90 	vmov	s15, r0
 8000c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c66:	ee17 0a90 	vmov	r0, s15
 8000c6a:	f7ff fc8d 	bl	8000588 <__aeabi_f2d>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	460b      	mov	r3, r1
 8000c72:	48a9      	ldr	r0, [pc, #676]	; (8000f18 <touchPanelInit+0x2c8>)
 8000c74:	f7ff fe5c 	bl	8000930 <serialPrintf>

	TOUCH_AF_GPIOConfig(); //SET RST=OUT INT=OUT INT=LOW
 8000c78:	f7ff feb2 	bl	80009e0 <TOUCH_AF_GPIOConfig>
	//I2C_Init();

	TPRST_LOW();
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c82:	48a6      	ldr	r0, [pc, #664]	; (8000f1c <touchPanelInit+0x2cc>)
 8000c84:	f003 fa7a 	bl	800417c <HAL_GPIO_WritePin>
	TPINT_HIGH();
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	48a4      	ldr	r0, [pc, #656]	; (8000f20 <touchPanelInit+0x2d0>)
 8000c8e:	f003 fa75 	bl	800417c <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(1));
 8000c92:	2001      	movs	r0, #1
 8000c94:	f00a fc8f 	bl	800b5b6 <osDelay>

	TPRST_HIGH();
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9e:	489f      	ldr	r0, [pc, #636]	; (8000f1c <touchPanelInit+0x2cc>)
 8000ca0:	f003 fa6c 	bl	800417c <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(6));
 8000ca4:	2006      	movs	r0, #6
 8000ca6:	f00a fc86 	bl	800b5b6 <osDelay>

	TPINT_LOW();
 8000caa:	2200      	movs	r2, #0
 8000cac:	2104      	movs	r1, #4
 8000cae:	489c      	ldr	r0, [pc, #624]	; (8000f20 <touchPanelInit+0x2d0>)
 8000cb0:	f003 fa64 	bl	800417c <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(55));
 8000cb4:	2037      	movs	r0, #55	; 0x37
 8000cb6:	f00a fc7e 	bl	800b5b6 <osDelay>

	TOUCH_AF_INT_Change();  //Set INT INPUT INT=LOW
 8000cba:	f7ff fe7b 	bl	80009b4 <TOUCH_AF_INT_Change>

	osDelay(pdMS_TO_TICKS(50));
 8000cbe:	2032      	movs	r0, #50	; 0x32
 8000cc0:	f00a fc79 	bl	800b5b6 <osDelay>

	TRACE("Reading Touch registry");
 8000cc4:	f002 f8f4 	bl	8002eb0 <HAL_GetTick>
 8000cc8:	ee07 0a90 	vmov	s15, r0
 8000ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd0:	ee17 0a90 	vmov	r0, s15
 8000cd4:	f7ff fc58 	bl	8000588 <__aeabi_f2d>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4891      	ldr	r0, [pc, #580]	; (8000f24 <touchPanelInit+0x2d4>)
 8000cde:	f7ff fe27 	bl	8000930 <serialPrintf>
	if (!I2C_GT911_ReadRegister(GT_PID_REG, tmp, 4))
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f248 1040 	movw	r0, #33088	; 0x8140
 8000cec:	f7ff feaa 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00e      	beq.n	8000d1a <touchPanelInit+0xca>
	{
		TRACE("GT911 ERROR: Product ID read failed");
 8000cfc:	f002 f8d8 	bl	8002eb0 <HAL_GetTick>
 8000d00:	ee07 0a90 	vmov	s15, r0
 8000d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d08:	ee17 0a90 	vmov	r0, s15
 8000d0c:	f7ff fc3c 	bl	8000588 <__aeabi_f2d>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4884      	ldr	r0, [pc, #528]	; (8000f28 <touchPanelInit+0x2d8>)
 8000d16:	f7ff fe0b 	bl	8000930 <serialPrintf>
	}

	if (strcmp((char *) tmp, "911") == 0)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4983      	ldr	r1, [pc, #524]	; (8000f2c <touchPanelInit+0x2dc>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fa66 	bl	80001f0 <strcmp>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f040 80e1 	bne.w	8000eee <touchPanelInit+0x29e>
	{
		TRACE("GT911 chip detected");
 8000d2c:	f002 f8c0 	bl	8002eb0 <HAL_GetTick>
 8000d30:	ee07 0a90 	vmov	s15, r0
 8000d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d38:	ee17 0a90 	vmov	r0, s15
 8000d3c:	f7ff fc24 	bl	8000588 <__aeabi_f2d>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	487a      	ldr	r0, [pc, #488]	; (8000f30 <touchPanelInit+0x2e0>)
 8000d46:	f7ff fdf3 	bl	8000930 <serialPrintf>
		tmp[0] = 0x02;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	f248 0040 	movw	r0, #32832	; 0x8040
 8000d58:	f7ff fec4 	bl	8000ae4 <I2C_GT911_WriteRegister>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f083 0301 	eor.w	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d00e      	beq.n	8000d86 <touchPanelInit+0x136>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000d68:	f002 f8a2 	bl	8002eb0 <HAL_GetTick>
 8000d6c:	ee07 0a90 	vmov	s15, r0
 8000d70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d74:	ee17 0a90 	vmov	r0, s15
 8000d78:	f7ff fc06 	bl	8000588 <__aeabi_f2d>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	486c      	ldr	r0, [pc, #432]	; (8000f34 <touchPanelInit+0x2e4>)
 8000d82:	f7ff fdd5 	bl	8000930 <serialPrintf>
		}
		if (!I2C_GT911_ReadRegister(GT_CFGS_REG, tmp, 1))
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f248 0047 	movw	r0, #32839	; 0x8047
 8000d90:	f7ff fe58 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f083 0301 	eor.w	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00e      	beq.n	8000dbe <touchPanelInit+0x16e>
		{
			TRACE("GT911 ERROR: configuration register read failed");
 8000da0:	f002 f886 	bl	8002eb0 <HAL_GetTick>
 8000da4:	ee07 0a90 	vmov	s15, r0
 8000da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dac:	ee17 0a90 	vmov	r0, s15
 8000db0:	f7ff fbea 	bl	8000588 <__aeabi_f2d>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	485f      	ldr	r0, [pc, #380]	; (8000f38 <touchPanelInit+0x2e8>)
 8000dba:	f7ff fdb9 	bl	8000930 <serialPrintf>
		}

		TRACE("Chip config Ver:%x", tmp[0]);
 8000dbe:	f002 f877 	bl	8002eb0 <HAL_GetTick>
 8000dc2:	ee07 0a90 	vmov	s15, r0
 8000dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dca:	ee17 0a90 	vmov	r0, s15
 8000dce:	f7ff fbdb 	bl	8000588 <__aeabi_f2d>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	7939      	ldrb	r1, [r7, #4]
 8000dd8:	9100      	str	r1, [sp, #0]
 8000dda:	4858      	ldr	r0, [pc, #352]	; (8000f3c <touchPanelInit+0x2ec>)
 8000ddc:	f7ff fda8 	bl	8000930 <serialPrintf>
		if (tmp[0] <= GT911_CFG_NUMER)  //Config ver
 8000de0:	793b      	ldrb	r3, [r7, #4]
 8000de2:	2b6d      	cmp	r3, #109	; 0x6d
 8000de4:	d827      	bhi.n	8000e36 <touchPanelInit+0x1e6>
		{
			TRACE("Sending new config %d", GT911_CFG_NUMER);
 8000de6:	f002 f863 	bl	8002eb0 <HAL_GetTick>
 8000dea:	ee07 0a90 	vmov	s15, r0
 8000dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df2:	ee17 0a90 	vmov	r0, s15
 8000df6:	f7ff fbc7 	bl	8000588 <__aeabi_f2d>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	216d      	movs	r1, #109	; 0x6d
 8000e00:	9100      	str	r1, [sp, #0]
 8000e02:	484f      	ldr	r0, [pc, #316]	; (8000f40 <touchPanelInit+0x2f0>)
 8000e04:	f7ff fd94 	bl	8000930 <serialPrintf>
			if (!I2C_GT911_SendConfig())
 8000e08:	f7ff febc 	bl	8000b84 <I2C_GT911_SendConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f083 0301 	eor.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d00e      	beq.n	8000e36 <touchPanelInit+0x1e6>
			{
				TRACE("GT911 ERROR: sending configration failed");
 8000e18:	f002 f84a 	bl	8002eb0 <HAL_GetTick>
 8000e1c:	ee07 0a90 	vmov	s15, r0
 8000e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e24:	ee17 0a90 	vmov	r0, s15
 8000e28:	f7ff fbae 	bl	8000588 <__aeabi_f2d>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4844      	ldr	r0, [pc, #272]	; (8000f44 <touchPanelInit+0x2f4>)
 8000e32:	f7ff fd7d 	bl	8000930 <serialPrintf>
			}
		}

		if (!I2C_GT911_ReadRegister(GT911_FIRMWARE_VERSION_REG, tmp, 2))
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f248 1044 	movw	r0, #33092	; 0x8144
 8000e40:	f7ff fe00 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000e44:	4603      	mov	r3, r0
 8000e46:	f083 0301 	eor.w	r3, r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00f      	beq.n	8000e70 <touchPanelInit+0x220>
		{
			TRACE("GT911 ERROR: reading firmware version failed");
 8000e50:	f002 f82e 	bl	8002eb0 <HAL_GetTick>
 8000e54:	ee07 0a90 	vmov	s15, r0
 8000e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e5c:	ee17 0a90 	vmov	r0, s15
 8000e60:	f7ff fb92 	bl	8000588 <__aeabi_f2d>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	4837      	ldr	r0, [pc, #220]	; (8000f48 <touchPanelInit+0x2f8>)
 8000e6a:	f7ff fd61 	bl	8000930 <serialPrintf>
 8000e6e:	e01b      	b.n	8000ea8 <touchPanelInit+0x258>
		}
		else
		{
			touchGT911fwver = (tmp[1] << 8) + tmp[0];
 8000e70:	797b      	ldrb	r3, [r7, #5]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <touchPanelInit+0x2fc>)
 8000e82:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 FW version: %u", touchGT911fwver);
 8000e84:	f002 f814 	bl	8002eb0 <HAL_GetTick>
 8000e88:	ee07 0a90 	vmov	s15, r0
 8000e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e90:	ee17 0a90 	vmov	r0, s15
 8000e94:	f7ff fb78 	bl	8000588 <__aeabi_f2d>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	492b      	ldr	r1, [pc, #172]	; (8000f4c <touchPanelInit+0x2fc>)
 8000e9e:	8809      	ldrh	r1, [r1, #0]
 8000ea0:	9100      	str	r1, [sp, #0]
 8000ea2:	482b      	ldr	r0, [pc, #172]	; (8000f50 <touchPanelInit+0x300>)
 8000ea4:	f7ff fd44 	bl	8000930 <serialPrintf>
		}

		osDelay(pdMS_TO_TICKS(10));
 8000ea8:	200a      	movs	r0, #10
 8000eaa:	f00a fb84 	bl	800b5b6 <osDelay>

		tmp[0] = 0X00;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))  //end reset
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f248 0040 	movw	r0, #32832	; 0x8040
 8000ebc:	f7ff fe12 	bl	8000ae4 <I2C_GT911_WriteRegister>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f083 0301 	eor.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00e      	beq.n	8000eea <touchPanelInit+0x29a>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000ecc:	f001 fff0 	bl	8002eb0 <HAL_GetTick>
 8000ed0:	ee07 0a90 	vmov	s15, r0
 8000ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed8:	ee17 0a90 	vmov	r0, s15
 8000edc:	f7ff fb54 	bl	8000588 <__aeabi_f2d>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <touchPanelInit+0x2e4>)
 8000ee6:	f7ff fd23 	bl	8000930 <serialPrintf>
		}
		// touchGT911Flag = true;

		//TOUCH_AF_ExtiConfig();

		return true;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <touchPanelInit+0x2be>
	}
	TRACE("GT911 chip NOT FOUND");
 8000eee:	f001 ffdf 	bl	8002eb0 <HAL_GetTick>
 8000ef2:	ee07 0a90 	vmov	s15, r0
 8000ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000efa:	ee17 0a90 	vmov	r0, s15
 8000efe:	f7ff fb43 	bl	8000588 <__aeabi_f2d>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <touchPanelInit+0x304>)
 8000f08:	f7ff fd12 	bl	8000930 <serialPrintf>
	return false;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	0800f598 	.word	0x0800f598
 8000f1c:	40021400 	.word	0x40021400
 8000f20:	40021c00 	.word	0x40021c00
 8000f24:	0800f5bc 	.word	0x0800f5bc
 8000f28:	0800f5dc 	.word	0x0800f5dc
 8000f2c:	0800f608 	.word	0x0800f608
 8000f30:	0800f60c 	.word	0x0800f60c
 8000f34:	0800f628 	.word	0x0800f628
 8000f38:	0800f660 	.word	0x0800f660
 8000f3c:	0800f698 	.word	0x0800f698
 8000f40:	0800f6b4 	.word	0x0800f6b4
 8000f44:	0800f6d4 	.word	0x0800f6d4
 8000f48:	0800f708 	.word	0x0800f708
 8000f4c:	20000090 	.word	0x20000090
 8000f50:	0800f740 	.word	0x0800f740
 8000f54:	0800f760 	.word	0x0800f760

08000f58 <touchPanelDeInit>:

void touchPanelDeInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	//TOUCH_AF_ExtiStop();
	//touchGT911Flag = false;
	TRACE("touchPanelDeInit()");
 8000f5c:	f001 ffa8 	bl	8002eb0 <HAL_GetTick>
 8000f60:	ee07 0a90 	vmov	s15, r0
 8000f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f68:	ee17 0a90 	vmov	r0, s15
 8000f6c:	f7ff fb0c 	bl	8000588 <__aeabi_f2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <touchPanelDeInit+0x28>)
 8000f76:	f7ff fcdb 	bl	8000930 <serialPrintf>
	asm("bkpt 255");
 8000f7a:	beff      	bkpt	0x00ff
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0800f780 	.word	0x0800f780

08000f84 <touchPanelRead>:

void touchPanelRead()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af02      	add	r7, sp, #8
	uint8_t state = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	70bb      	strb	r3, [r7, #2]
	// if (!touchEventOccured)
	//   return;

	// touchEventOccured = false;

	uint32_t startReadStatus = HAL_GetTick();
 8000f8e:	f001 ff8f 	bl	8002eb0 <HAL_GetTick>
 8000f92:	6078      	str	r0, [r7, #4]
	do {
		if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG, &state, 1)) {
 8000f94:	1cbb      	adds	r3, r7, #2
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f248 104e 	movw	r0, #33102	; 0x814e
 8000f9e:	f7ff fd51 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	f083 0301 	eor.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d028      	beq.n	8001000 <touchPanelRead+0x7c>
			HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2104      	movs	r1, #4
 8000fb2:	48b7      	ldr	r0, [pc, #732]	; (8001290 <touchPanelRead+0x30c>)
 8000fb4:	f003 f8e2 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2110      	movs	r1, #16
 8000fbc:	48b4      	ldr	r0, [pc, #720]	; (8001290 <touchPanelRead+0x30c>)
 8000fbe:	f003 f8dd 	bl	800417c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	48b2      	ldr	r0, [pc, #712]	; (8001290 <touchPanelRead+0x30c>)
 8000fc8:	f003 f8d8 	bl	800417c <HAL_GPIO_WritePin>
			touchGT911hiccups++;
 8000fcc:	4bb1      	ldr	r3, [pc, #708]	; (8001294 <touchPanelRead+0x310>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4baf      	ldr	r3, [pc, #700]	; (8001294 <touchPanelRead+0x310>)
 8000fd6:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 I2C read XY error");
 8000fd8:	f001 ff6a 	bl	8002eb0 <HAL_GetTick>
 8000fdc:	ee07 0a90 	vmov	s15, r0
 8000fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe4:	ee17 0a90 	vmov	r0, s15
 8000fe8:	f7ff face 	bl	8000588 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	48a9      	ldr	r0, [pc, #676]	; (8001298 <touchPanelRead+0x314>)
 8000ff2:	f7ff fc9d 	bl	8000930 <serialPrintf>
			touchPanelDeInit();
 8000ff6:	f7ff ffaf 	bl	8000f58 <touchPanelDeInit>
			touchPanelInit();
 8000ffa:	f7ff fe29 	bl	8000c50 <touchPanelInit>
			return;
 8000ffe:	e18d      	b.n	800131c <touchPanelRead+0x398>
		}

		if (state & 0x80u) {
 8001000:	78bb      	ldrb	r3, [r7, #2]
 8001002:	b25b      	sxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <touchPanelRead+0x9a>
			// ready
			break;
		}
		osDelay(pdMS_TO_TICKS(1));
 8001008:	2001      	movs	r0, #1
 800100a:	f00a fad4 	bl	800b5b6 <osDelay>
	} while (HAL_GetTick() - startReadStatus < GT911_TIMEOUT);
 800100e:	f001 ff4f 	bl	8002eb0 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d9bb      	bls.n	8000f94 <touchPanelRead+0x10>
 800101c:	e000      	b.n	8001020 <touchPanelRead+0x9c>
			break;
 800101e:	bf00      	nop

	TRACE("touch state = 0x%x", state);
 8001020:	f001 ff46 	bl	8002eb0 <HAL_GetTick>
 8001024:	ee07 0a90 	vmov	s15, r0
 8001028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102c:	ee17 0a90 	vmov	r0, s15
 8001030:	f7ff faaa 	bl	8000588 <__aeabi_f2d>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	78b9      	ldrb	r1, [r7, #2]
 800103a:	9100      	str	r1, [sp, #0]
 800103c:	4897      	ldr	r0, [pc, #604]	; (800129c <touchPanelRead+0x318>)
 800103e:	f7ff fc77 	bl	8000930 <serialPrintf>
	if (state & 0x80u) {
 8001042:	78bb      	ldrb	r3, [r7, #2]
 8001044:	b25b      	sxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	f280 80c2 	bge.w	80011d0 <touchPanelRead+0x24c>
		uint8_t pointsCount = (state & 0x0Fu);
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	70fb      	strb	r3, [r7, #3]

		if (pointsCount > 0 && pointsCount <= GT911_MAX_TP) {
 8001054:	78fb      	ldrb	r3, [r7, #3]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80a1 	beq.w	800119e <touchPanelRead+0x21a>
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2b05      	cmp	r3, #5
 8001060:	f200 809d 	bhi.w	800119e <touchPanelRead+0x21a>
			if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG + 1, touchData.data, pointsCount * sizeof(TouchPoint)))
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	461a      	mov	r2, r3
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	461a      	mov	r2, r3
 8001072:	498b      	ldr	r1, [pc, #556]	; (80012a0 <touchPanelRead+0x31c>)
 8001074:	f248 104f 	movw	r0, #33103	; 0x814f
 8001078:	f7ff fce4 	bl	8000a44 <I2C_GT911_ReadRegister>
 800107c:	4603      	mov	r3, r0
 800107e:	f083 0301 	eor.w	r3, r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d028      	beq.n	80010da <touchPanelRead+0x156>
			{
				HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2104      	movs	r1, #4
 800108c:	4880      	ldr	r0, [pc, #512]	; (8001290 <touchPanelRead+0x30c>)
 800108e:	f003 f875 	bl	800417c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	487e      	ldr	r0, [pc, #504]	; (8001290 <touchPanelRead+0x30c>)
 8001098:	f003 f870 	bl	800417c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2120      	movs	r1, #32
 80010a0:	487b      	ldr	r0, [pc, #492]	; (8001290 <touchPanelRead+0x30c>)
 80010a2:	f003 f86b 	bl	800417c <HAL_GPIO_WritePin>
				touchGT911hiccups++;
 80010a6:	4b7b      	ldr	r3, [pc, #492]	; (8001294 <touchPanelRead+0x310>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	4b79      	ldr	r3, [pc, #484]	; (8001294 <touchPanelRead+0x310>)
 80010b0:	801a      	strh	r2, [r3, #0]
				TRACE("GT911 I2C data read error");
 80010b2:	f001 fefd 	bl	8002eb0 <HAL_GetTick>
 80010b6:	ee07 0a90 	vmov	s15, r0
 80010ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010be:	ee17 0a90 	vmov	r0, s15
 80010c2:	f7ff fa61 	bl	8000588 <__aeabi_f2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4876      	ldr	r0, [pc, #472]	; (80012a4 <touchPanelRead+0x320>)
 80010cc:	f7ff fc30 	bl	8000930 <serialPrintf>
				touchPanelDeInit();
 80010d0:	f7ff ff42 	bl	8000f58 <touchPanelDeInit>
				touchPanelInit();
 80010d4:	f7ff fdbc 	bl	8000c50 <touchPanelInit>
				return;
 80010d8:	e120      	b.n	800131c <touchPanelRead+0x398>
			}
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <touchPanelRead+0x324>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <touchPanelRead+0x16e>
 80010e2:	4b71      	ldr	r3, [pc, #452]	; (80012a8 <touchPanelRead+0x324>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d003      	beq.n	80010f2 <touchPanelRead+0x16e>
 80010ea:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <touchPanelRead+0x324>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d117      	bne.n	8001122 <touchPanelRead+0x19e>
			{
				touchState.event = TE_DOWN;
 80010f2:	4b6d      	ldr	r3, [pc, #436]	; (80012a8 <touchPanelRead+0x324>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
				touchState.startX = touchState.x = touchData.points[0].x;
 80010f8:	4b69      	ldr	r3, [pc, #420]	; (80012a0 <touchPanelRead+0x31c>)
 80010fa:	885b      	ldrh	r3, [r3, #2]
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b6a      	ldr	r3, [pc, #424]	; (80012a8 <touchPanelRead+0x324>)
 8001100:	805a      	strh	r2, [r3, #2]
 8001102:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <touchPanelRead+0x324>)
 8001104:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001108:	4b67      	ldr	r3, [pc, #412]	; (80012a8 <touchPanelRead+0x324>)
 800110a:	80da      	strh	r2, [r3, #6]
				touchState.startY = touchState.y = touchData.points[0].y;
 800110c:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <touchPanelRead+0x31c>)
 800110e:	889b      	ldrh	r3, [r3, #4]
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <touchPanelRead+0x324>)
 8001114:	809a      	strh	r2, [r3, #4]
 8001116:	4b64      	ldr	r3, [pc, #400]	; (80012a8 <touchPanelRead+0x324>)
 8001118:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800111c:	4b62      	ldr	r3, [pc, #392]	; (80012a8 <touchPanelRead+0x324>)
 800111e:	811a      	strh	r2, [r3, #8]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 8001120:	e055      	b.n	80011ce <touchPanelRead+0x24a>
			}
			else
			{
				touchState.deltaX = touchData.points[0].x - touchState.x;
 8001122:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <touchPanelRead+0x31c>)
 8001124:	885a      	ldrh	r2, [r3, #2]
 8001126:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <touchPanelRead+0x324>)
 8001128:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800112c:	b29b      	uxth	r3, r3
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b5c      	ldr	r3, [pc, #368]	; (80012a8 <touchPanelRead+0x324>)
 8001136:	815a      	strh	r2, [r3, #10]
				touchState.deltaY = touchData.points[0].y - touchState.y;
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <touchPanelRead+0x31c>)
 800113a:	889a      	ldrh	r2, [r3, #4]
 800113c:	4b5a      	ldr	r3, [pc, #360]	; (80012a8 <touchPanelRead+0x324>)
 800113e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001142:	b29b      	uxth	r3, r3
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	b29b      	uxth	r3, r3
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <touchPanelRead+0x324>)
 800114c:	819a      	strh	r2, [r3, #12]
				if (touchState.event == TE_SLIDE || abs(touchState.deltaX) >= SLIDE_RANGE || abs(touchState.deltaY) >= SLIDE_RANGE)
 800114e:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <touchPanelRead+0x324>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d015      	beq.n	8001182 <touchPanelRead+0x1fe>
 8001156:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <touchPanelRead+0x324>)
 8001158:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800115c:	2b00      	cmp	r3, #0
 800115e:	bfb8      	it	lt
 8001160:	425b      	neglt	r3, r3
 8001162:	b29a      	uxth	r2, r3
 8001164:	2306      	movs	r3, #6
 8001166:	b29b      	uxth	r3, r3
 8001168:	429a      	cmp	r2, r3
 800116a:	d20a      	bcs.n	8001182 <touchPanelRead+0x1fe>
 800116c:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <touchPanelRead+0x324>)
 800116e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	bfb8      	it	lt
 8001176:	425b      	neglt	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	2306      	movs	r3, #6
 800117c:	b29b      	uxth	r3, r3
 800117e:	429a      	cmp	r2, r3
 8001180:	d325      	bcc.n	80011ce <touchPanelRead+0x24a>
				{
					touchState.event = TE_SLIDE;
 8001182:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <touchPanelRead+0x324>)
 8001184:	2203      	movs	r2, #3
 8001186:	701a      	strb	r2, [r3, #0]
					touchState.x = touchData.points[0].x;
 8001188:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <touchPanelRead+0x31c>)
 800118a:	885b      	ldrh	r3, [r3, #2]
 800118c:	b21a      	sxth	r2, r3
 800118e:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <touchPanelRead+0x324>)
 8001190:	805a      	strh	r2, [r3, #2]
					touchState.y = touchData.points[0].y;
 8001192:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <touchPanelRead+0x31c>)
 8001194:	889b      	ldrh	r3, [r3, #4]
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <touchPanelRead+0x324>)
 800119a:	809a      	strh	r2, [r3, #4]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 800119c:	e017      	b.n	80011ce <touchPanelRead+0x24a>
				}
			}
		}
		else
		{
			if (touchState.event == TE_SLIDE)
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <touchPanelRead+0x324>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d103      	bne.n	80011ae <touchPanelRead+0x22a>
			{
				touchState.event = TE_SLIDE_END;
 80011a6:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <touchPanelRead+0x324>)
 80011a8:	2204      	movs	r2, #4
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e010      	b.n	80011d0 <touchPanelRead+0x24c>
			}
			else if (touchState.event == TE_DOWN)
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <touchPanelRead+0x324>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d103      	bne.n	80011be <touchPanelRead+0x23a>
			{
				touchState.event = TE_UP;
 80011b6:	4b3c      	ldr	r3, [pc, #240]	; (80012a8 <touchPanelRead+0x324>)
 80011b8:	2202      	movs	r2, #2
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e008      	b.n	80011d0 <touchPanelRead+0x24c>
			}
			else if (touchState.event != TE_SLIDE_END) {
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <touchPanelRead+0x324>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d004      	beq.n	80011d0 <touchPanelRead+0x24c>
				touchState.event = TE_NONE;
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <touchPanelRead+0x324>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e000      	b.n	80011d0 <touchPanelRead+0x24c>
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80011ce:	bf00      	nop
			}
		}
	}

	uint8_t zero = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	707b      	strb	r3, [r7, #1]
	if (!I2C_GT911_WriteRegister(GT911_READ_XY_REG, &zero, 1))
 80011d4:	1c7b      	adds	r3, r7, #1
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	f248 104e 	movw	r0, #33102	; 0x814e
 80011de:	f7ff fc81 	bl	8000ae4 <I2C_GT911_WriteRegister>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00e      	beq.n	800120c <touchPanelRead+0x288>
	{
		TRACE("GT911 ERROR: clearing XY register failed");
 80011ee:	f001 fe5f 	bl	8002eb0 <HAL_GetTick>
 80011f2:	ee07 0a90 	vmov	s15, r0
 80011f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fa:	ee17 0a90 	vmov	r0, s15
 80011fe:	f7ff f9c3 	bl	8000588 <__aeabi_f2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4829      	ldr	r0, [pc, #164]	; (80012ac <touchPanelRead+0x328>)
 8001208:	f7ff fb92 	bl	8000930 <serialPrintf>
	}

	switch (touchState.event) {
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <touchPanelRead+0x324>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d873      	bhi.n	80012fc <touchPanelRead+0x378>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <touchPanelRead+0x298>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	08001231 	.word	0x08001231
 8001220:	08001271 	.word	0x08001271
 8001224:	08001251 	.word	0x08001251
 8001228:	080012dd 	.word	0x080012dd
 800122c:	080012bd 	.word	0x080012bd
		case TE_NONE:
			TRACE("touch event = NONE"); break;
 8001230:	f001 fe3e 	bl	8002eb0 <HAL_GetTick>
 8001234:	ee07 0a90 	vmov	s15, r0
 8001238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123c:	ee17 0a90 	vmov	r0, s15
 8001240:	f7ff f9a2 	bl	8000588 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4819      	ldr	r0, [pc, #100]	; (80012b0 <touchPanelRead+0x32c>)
 800124a:	f7ff fb71 	bl	8000930 <serialPrintf>
 800124e:	e065      	b.n	800131c <touchPanelRead+0x398>
		case TE_UP:
			TRACE("touch event = UP"); break;
 8001250:	f001 fe2e 	bl	8002eb0 <HAL_GetTick>
 8001254:	ee07 0a90 	vmov	s15, r0
 8001258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125c:	ee17 0a90 	vmov	r0, s15
 8001260:	f7ff f992 	bl	8000588 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4812      	ldr	r0, [pc, #72]	; (80012b4 <touchPanelRead+0x330>)
 800126a:	f7ff fb61 	bl	8000930 <serialPrintf>
 800126e:	e055      	b.n	800131c <touchPanelRead+0x398>
		case TE_DOWN:
			TRACE("touch event = DOWN"); break;
 8001270:	f001 fe1e 	bl	8002eb0 <HAL_GetTick>
 8001274:	ee07 0a90 	vmov	s15, r0
 8001278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127c:	ee17 0a90 	vmov	r0, s15
 8001280:	f7ff f982 	bl	8000588 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <touchPanelRead+0x334>)
 800128a:	f7ff fb51 	bl	8000930 <serialPrintf>
 800128e:	e045      	b.n	800131c <touchPanelRead+0x398>
 8001290:	40021000 	.word	0x40021000
 8001294:	20000092 	.word	0x20000092
 8001298:	0800f79c 	.word	0x0800f79c
 800129c:	0800f7bc 	.word	0x0800f7bc
 80012a0:	20009458 	.word	0x20009458
 80012a4:	0800f7d8 	.word	0x0800f7d8
 80012a8:	20009648 	.word	0x20009648
 80012ac:	0800f7fc 	.word	0x0800f7fc
 80012b0:	0800f830 	.word	0x0800f830
 80012b4:	0800f84c 	.word	0x0800f84c
 80012b8:	0800f868 	.word	0x0800f868
		case TE_SLIDE_END:
			TRACE("touch event = SLIDE_END"); break;
 80012bc:	f001 fdf8 	bl	8002eb0 <HAL_GetTick>
 80012c0:	ee07 0a90 	vmov	s15, r0
 80012c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c8:	ee17 0a90 	vmov	r0, s15
 80012cc:	f7ff f95c 	bl	8000588 <__aeabi_f2d>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <touchPanelRead+0x3a0>)
 80012d6:	f7ff fb2b 	bl	8000930 <serialPrintf>
 80012da:	e01f      	b.n	800131c <touchPanelRead+0x398>
		case TE_SLIDE:
			TRACE("touch event = SLIDE"); break;
 80012dc:	f001 fde8 	bl	8002eb0 <HAL_GetTick>
 80012e0:	ee07 0a90 	vmov	s15, r0
 80012e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e8:	ee17 0a90 	vmov	r0, s15
 80012ec:	f7ff f94c 	bl	8000588 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <touchPanelRead+0x3a4>)
 80012f6:	f7ff fb1b 	bl	8000930 <serialPrintf>
 80012fa:	e00f      	b.n	800131c <touchPanelRead+0x398>
		default:
			TRACE("touch event = UNKNOWN"); break;
 80012fc:	f001 fdd8 	bl	8002eb0 <HAL_GetTick>
 8001300:	ee07 0a90 	vmov	s15, r0
 8001304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f93c 	bl	8000588 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <touchPanelRead+0x3a8>)
 8001316:	f7ff fb0b 	bl	8000930 <serialPrintf>
 800131a:	bf00      	nop
	}
}
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	0800f884 	.word	0x0800f884
 8001328:	0800f8a4 	.word	0x0800f8a4
 800132c:	0800f8c0 	.word	0x0800f8c0

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f001 fd86 	bl	8002e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f85c 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f000 fbf8 	bl	8001b30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001340:	f000 fb80 	bl	8001a44 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001344:	f000 fb50 	bl	80019e8 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8001348:	f000 fba4 	bl	8001a94 <MX_FMC_Init>
  MX_USART3_UART_Init();
 800134c:	f000 faf8 	bl	8001940 <MX_USART3_UART_Init>
  MX_LTDC_Init();
 8001350:	f000 f990 	bl	8001674 <MX_LTDC_Init>
  MX_I2C1_Init();
 8001354:	f000 f94c 	bl	80015f0 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001358:	f000 f8ce 	bl	80014f8 <MX_ADC3_Init>
  MX_DAC_Init();
 800135c:	f000 f91e 	bl	800159c <MX_DAC_Init>
  MX_SDIO_SD_Init();
 8001360:	f000 fa44 	bl	80017ec <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8001364:	f000 fa62 	bl	800182c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001368:	f000 fa96 	bl	8001898 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800136c:	f000 fabe 	bl	80018ec <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001370:	f000 fb10 	bl	8001994 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001374:	f009 fd28 	bl	800adc8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001378:	f00a f80a 	bl	800b390 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSemI2CCB */
  BinSemI2CCBHandle = osSemaphoreNew(1, 1, &BinSemI2CCB_attributes);
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <main+0x9c>)
 800137e:	2101      	movs	r1, #1
 8001380:	2001      	movs	r0, #1
 8001382:	f00a f933 	bl	800b5ec <osSemaphoreNew>
 8001386:	4603      	mov	r3, r0
 8001388:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <main+0xa0>)
 800138a:	6013      	str	r3, [r2, #0]

  /* creation of BinSemTouchINT */
  BinSemTouchINTHandle = osSemaphoreNew(1, 1, &BinSemTouchINT_attributes);
 800138c:	4a11      	ldr	r2, [pc, #68]	; (80013d4 <main+0xa4>)
 800138e:	2101      	movs	r1, #1
 8001390:	2001      	movs	r0, #1
 8001392:	f00a f92b 	bl	800b5ec <osSemaphoreNew>
 8001396:	4603      	mov	r3, r0
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <main+0xa8>)
 800139a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <main+0xac>)
 800139e:	2100      	movs	r1, #0
 80013a0:	480f      	ldr	r0, [pc, #60]	; (80013e0 <main+0xb0>)
 80013a2:	f00a f876 	bl	800b492 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <main+0xb4>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* creation of TouchTask */
  TouchTaskHandle = osThreadNew(TouchTaskEntry, NULL, &TouchTask_attributes);
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <main+0xb8>)
 80013ae:	2100      	movs	r1, #0
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <main+0xbc>)
 80013b2:	f00a f86e 	bl	800b492 <osThreadNew>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <main+0xc0>)
 80013ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013bc:	f00a f82e 	bl	800b41c <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    osDelay(pdMS_TO_TICKS(1000));
 80013c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c4:	f00a f8f7 	bl	800b5b6 <osDelay>
 80013c8:	e7fa      	b.n	80013c0 <main+0x90>
 80013ca:	bf00      	nop
 80013cc:	0800fa60 	.word	0x0800fa60
 80013d0:	200094a0 	.word	0x200094a0
 80013d4:	0800fa70 	.word	0x0800fa70
 80013d8:	200094a4 	.word	0x200094a4
 80013dc:	0800fa18 	.word	0x0800fa18
 80013e0:	080020fd 	.word	0x080020fd
 80013e4:	20008dc4 	.word	0x20008dc4
 80013e8:	0800fa3c 	.word	0x0800fa3c
 80013ec:	080021f1 	.word	0x080021f1
 80013f0:	200093c8 	.word	0x200093c8

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0a0      	sub	sp, #128	; 0x80
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013fe:	2230      	movs	r2, #48	; 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f00d fbaa 	bl	800eb5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2230      	movs	r2, #48	; 0x30
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f00d fb9b 	bl	800eb5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <SystemClock_Config+0xfc>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <SystemClock_Config+0xfc>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <SystemClock_Config+0xfc>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <SystemClock_Config+0x100>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a2a      	ldr	r2, [pc, #168]	; (80014f4 <SystemClock_Config+0x100>)
 800144c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <SystemClock_Config+0x100>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800145e:	2301      	movs	r3, #1
 8001460:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001466:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001468:	2302      	movs	r3, #2
 800146a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001470:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001472:	2306      	movs	r3, #6
 8001474:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001476:	23a8      	movs	r3, #168	; 0xa8
 8001478:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800147a:	2302      	movs	r3, #2
 800147c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800147e:	2307      	movs	r3, #7
 8001480:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001482:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001486:	4618      	mov	r0, r3
 8001488:	f005 fe68 	bl	800715c <HAL_RCC_OscConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001492:	f000 ff03 	bl	800229c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001496:	230f      	movs	r3, #15
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800149a:	2302      	movs	r3, #2
 800149c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014b2:	2105      	movs	r1, #5
 80014b4:	4618      	mov	r0, r3
 80014b6:	f006 f8c9 	bl	800764c <HAL_RCC_ClockConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014c0:	f000 feec 	bl	800229c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014c4:	2308      	movs	r3, #8
 80014c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80014c8:	2332      	movs	r3, #50	; 0x32
 80014ca:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80014cc:	2302      	movs	r3, #2
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4618      	mov	r0, r3
 80014da:	f006 fab9 	bl	8007a50 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80014e4:	f000 feda 	bl	800229c <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3780      	adds	r7, #128	; 0x80
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	463b      	mov	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <MX_ADC3_Init+0x98>)
 800150c:	4a21      	ldr	r2, [pc, #132]	; (8001594 <MX_ADC3_Init+0x9c>)
 800150e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <MX_ADC3_Init+0x98>)
 8001512:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001516:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_ADC3_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_ADC3_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_ADC3_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_ADC3_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <MX_ADC3_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_ADC3_Init+0x98>)
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <MX_ADC3_Init+0xa0>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_ADC3_Init+0x98>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_ADC3_Init+0x98>)
 8001546:	2201      	movs	r2, #1
 8001548:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_ADC3_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_ADC3_Init+0x98>)
 8001554:	2201      	movs	r2, #1
 8001556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_ADC3_Init+0x98>)
 800155a:	f001 fcd9 	bl	8002f10 <HAL_ADC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001564:	f000 fe9a 	bl	800229c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001568:	2304      	movs	r3, #4
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_ADC3_Init+0x98>)
 800157a:	f001 fd0d 	bl	8002f98 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001584:	f000 fe8a 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200093cc 	.word	0x200093cc
 8001594:	40012200 	.word	0x40012200
 8001598:	0f000001 	.word	0x0f000001

0800159c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015a2:	463b      	mov	r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_DAC_Init+0x4c>)
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <MX_DAC_Init+0x50>)
 80015ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015b0:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_DAC_Init+0x4c>)
 80015b2:	f002 f801 	bl	80035b8 <HAL_DAC_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015bc:	f000 fe6e 	bl	800229c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_DAC_Init+0x4c>)
 80015d0:	f002 f814 	bl	80035fc <HAL_DAC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015da:	f000 fe5f 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000948c 	.word	0x2000948c
 80015ec:	40007400 	.word	0x40007400

080015f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_I2C1_Init+0x78>)
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <MX_I2C1_Init+0x7c>)
 80015f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_I2C1_Init+0x78>)
 80015fc:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_I2C1_Init+0x80>)
 80015fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_I2C1_Init+0x78>)
 8001602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001606:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_I2C1_Init+0x78>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_I2C1_Init+0x78>)
 8001610:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001614:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_I2C1_Init+0x78>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <MX_I2C1_Init+0x78>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_I2C1_Init+0x78>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_I2C1_Init+0x78>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <MX_I2C1_Init+0x78>)
 8001630:	f002 fdd6 	bl	80041e0 <HAL_I2C_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800163a:	f000 fe2f 	bl	800229c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4809      	ldr	r0, [pc, #36]	; (8001668 <MX_I2C1_Init+0x78>)
 8001642:	f005 f94d 	bl	80068e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800164c:	f000 fe26 	bl	800229c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001650:	2100      	movs	r1, #0
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_I2C1_Init+0x78>)
 8001654:	f005 f980 	bl	8006958 <HAL_I2CEx_ConfigDigitalFilter>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800165e:	f000 fe1d 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20008ec4 	.word	0x20008ec4
 800166c:	40005400 	.word	0x40005400
 8001670:	00061a80 	.word	0x00061a80

08001674 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b09a      	sub	sp, #104	; 0x68
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800167a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800167e:	2234      	movs	r2, #52	; 0x34
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f00d fa6a 	bl	800eb5c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2234      	movs	r2, #52	; 0x34
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f00d fa64 	bl	800eb5c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <MX_LTDC_Init+0x170>)
 8001696:	4a54      	ldr	r2, [pc, #336]	; (80017e8 <MX_LTDC_Init+0x174>)
 8001698:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800169a:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <MX_LTDC_Init+0x170>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016a6:	4b4f      	ldr	r3, [pc, #316]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016ac:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 2;
 80016b2:	4b4c      	ldr	r3, [pc, #304]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016b4:	2202      	movs	r2, #2
 80016b6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 10;
 80016b8:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016ba:	220a      	movs	r2, #10
 80016bc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80016be:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016c0:	222a      	movs	r2, #42	; 0x2a
 80016c2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 12;
 80016c4:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80016ca:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016cc:	f240 220a 	movw	r2, #522	; 0x20a
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 284;
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016d4:	f44f 728e 	mov.w	r2, #284	; 0x11c
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016dc:	f240 220d 	movw	r2, #525	; 0x20d
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 286;
 80016e2:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016e4:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80016fa:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <MX_LTDC_Init+0x170>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001702:	4838      	ldr	r0, [pc, #224]	; (80017e4 <MX_LTDC_Init+0x170>)
 8001704:	f005 f968 	bl	80069d8 <HAL_LTDC_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800170e:	f000 fdc5 	bl	800229c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 479;
 8001716:	f240 13df 	movw	r3, #479	; 0x1df
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 271;
 8001720:	f240 130f 	movw	r3, #271	; 0x10f
 8001724:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001726:	2302      	movs	r3, #2
 8001728:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 800172a:	23ff      	movs	r3, #255	; 0xff
 800172c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001736:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001738:	2305      	movs	r3, #5
 800173a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 261120;
 800173c:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 8001740:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8001742:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001746:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001748:	f44f 7388 	mov.w	r3, #272	; 0x110
 800174c:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	481e      	ldr	r0, [pc, #120]	; (80017e4 <MX_LTDC_Init+0x170>)
 800176a:	f005 fa05 	bl	8006b78 <HAL_LTDC_ConfigLayer>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8001774:	f000 fd92 	bl	800229c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 479;
 800177c:	f240 13df 	movw	r3, #479	; 0x1df
 8001780:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 271;
 8001786:	f240 130f 	movw	r3, #271	; 0x10f
 800178a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800178c:	2302      	movs	r3, #2
 800178e:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8001790:	23ff      	movs	r3, #255	; 0xff
 8001792:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800179e:	2305      	movs	r3, #5
 80017a0:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 261120;
 80017a2:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 80017a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 80017ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80017c6:	463b      	mov	r3, r7
 80017c8:	2201      	movs	r2, #1
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_LTDC_Init+0x170>)
 80017ce:	f005 f9d3 	bl	8006b78 <HAL_LTDC_ConfigLayer>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_LTDC_Init+0x168>
  {
    Error_Handler();
 80017d8:	f000 fd60 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	3768      	adds	r7, #104	; 0x68
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20009320 	.word	0x20009320
 80017e8:	40016800 	.word	0x40016800

080017ec <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <MX_SDIO_SD_Init+0x38>)
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <MX_SDIO_SD_Init+0x3c>)
 80017f4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <MX_SDIO_SD_Init+0x38>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MX_SDIO_SD_Init+0x38>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <MX_SDIO_SD_Init+0x38>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <MX_SDIO_SD_Init+0x38>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <MX_SDIO_SD_Init+0x38>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <MX_SDIO_SD_Init+0x38>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20009508 	.word	0x20009508
 8001828:	40012c00 	.word	0x40012c00

0800182c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_SPI2_Init+0x64>)
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <MX_SPI2_Init+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_SPI2_Init+0x64>)
 8001838:	f44f 7282 	mov.w	r2, #260	; 0x104
 800183c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_SPI2_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_SPI2_Init+0x64>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_SPI2_Init+0x64>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_SPI2_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_SPI2_Init+0x64>)
 8001858:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800185c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_SPI2_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <MX_SPI2_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_SPI2_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <MX_SPI2_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_SPI2_Init+0x64>)
 8001878:	220a      	movs	r2, #10
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_SPI2_Init+0x64>)
 800187e:	f007 fb6e 	bl	8008f5e <HAL_SPI_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001888:	f000 fd08 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20008dc8 	.word	0x20008dc8
 8001894:	40003800 	.word	0x40003800

08001898 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <MX_USART1_UART_Init+0x50>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f007 fe7c 	bl	80095cc <HAL_UART_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018da:	f000 fcdf 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20009414 	.word	0x20009414
 80018e8:	40011000 	.word	0x40011000

080018ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <MX_USART2_UART_Init+0x50>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 80018f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_USART2_UART_Init+0x4c>)
 8001924:	f007 fe52 	bl	80095cc <HAL_UART_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800192e:	f000 fcb5 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200095d0 	.word	0x200095d0
 800193c:	40004400 	.word	0x40004400

08001940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_USART3_UART_Init+0x48>)
 8001946:	4a11      	ldr	r2, [pc, #68]	; (800198c <MX_USART3_UART_Init+0x4c>)
 8001948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 400000;
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_USART3_UART_Init+0x48>)
 800194c:	4a10      	ldr	r2, [pc, #64]	; (8001990 <MX_USART3_UART_Init+0x50>)
 800194e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <MX_USART3_UART_Init+0x48>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART3_UART_Init+0x48>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_USART3_UART_Init+0x48>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART3_UART_Init+0x48>)
 8001964:	220c      	movs	r2, #12
 8001966:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <MX_USART3_UART_Init+0x48>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART3_UART_Init+0x48>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_USART3_UART_Init+0x48>)
 8001976:	f007 fe29 	bl	80095cc <HAL_UART_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001980:	f000 fc8c 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20008e20 	.word	0x20008e20
 800198c:	40004800 	.word	0x40004800
 8001990:	00061a80 	.word	0x00061a80

08001994 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <MX_USART6_UART_Init+0x50>)
 800199c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_USART6_UART_Init+0x4c>)
 80019cc:	f007 fdfe 	bl	80095cc <HAL_UART_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019d6:	f000 fc61 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000958c 	.word	0x2000958c
 80019e4:	40011400 	.word	0x40011400

080019e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a08:	2202      	movs	r2, #2
 8001a0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2c:	f005 fa79 	bl	8006f22 <HAL_PCD_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a36:	f000 fc31 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20008f18 	.word	0x20008f18

08001a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <MX_DMA_Init+0x4c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <MX_DMA_Init+0x4c>)
 8001a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <MX_DMA_Init+0x4c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2105      	movs	r1, #5
 8001a6a:	200b      	movs	r0, #11
 8001a6c:	f001 fd7a 	bl	8003564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a70:	200b      	movs	r0, #11
 8001a72:	f001 fd93 	bl	800359c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	2011      	movs	r0, #17
 8001a7c:	f001 fd72 	bl	8003564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a80:	2011      	movs	r0, #17
 8001a82:	f001 fd8b 	bl	800359c <HAL_NVIC_EnableIRQ>

}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <MX_FMC_Init+0x94>)
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <MX_FMC_Init+0x98>)
 8001ab0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <MX_FMC_Init+0x94>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <MX_FMC_Init+0x94>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_FMC_Init+0x94>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_FMC_Init+0x94>)
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_FMC_Init+0x94>)
 8001acc:	2240      	movs	r2, #64	; 0x40
 8001ace:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001ad0:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <MX_FMC_Init+0x94>)
 8001ad2:	2280      	movs	r2, #128	; 0x80
 8001ad4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_FMC_Init+0x94>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_FMC_Init+0x94>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_FMC_Init+0x94>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_FMC_Init+0x94>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001aee:	2310      	movs	r3, #16
 8001af0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001af2:	2310      	movs	r3, #16
 8001af4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001af6:	2310      	movs	r3, #16
 8001af8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001afa:	2310      	movs	r3, #16
 8001afc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001afe:	2310      	movs	r3, #16
 8001b00:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001b02:	2310      	movs	r3, #16
 8001b04:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001b06:	2310      	movs	r3, #16
 8001b08:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4806      	ldr	r0, [pc, #24]	; (8001b28 <MX_FMC_Init+0x94>)
 8001b10:	f007 f9f1 	bl	8008ef6 <HAL_SDRAM_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001b1a:	f000 fbbf 	bl	800229c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20009614 	.word	0x20009614
 8001b2c:	a0000140 	.word	0xa0000140

08001b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b090      	sub	sp, #64	; 0x40
 8001b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b4a:	4bb0      	ldr	r3, [pc, #704]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4aaf      	ldr	r2, [pc, #700]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4bad      	ldr	r3, [pc, #692]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	4ba9      	ldr	r3, [pc, #676]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4aa8      	ldr	r2, [pc, #672]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4ba6      	ldr	r3, [pc, #664]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	4ba2      	ldr	r3, [pc, #648]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4aa1      	ldr	r2, [pc, #644]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b9f      	ldr	r3, [pc, #636]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	623b      	str	r3, [r7, #32]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	4b9b      	ldr	r3, [pc, #620]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a9a      	ldr	r2, [pc, #616]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b98      	ldr	r3, [pc, #608]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	4b94      	ldr	r3, [pc, #592]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a93      	ldr	r2, [pc, #588]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	4b8d      	ldr	r3, [pc, #564]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a8c      	ldr	r2, [pc, #560]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b8a      	ldr	r3, [pc, #552]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a85      	ldr	r2, [pc, #532]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b83      	ldr	r3, [pc, #524]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a7e      	ldr	r2, [pc, #504]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b78      	ldr	r3, [pc, #480]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a77      	ldr	r2, [pc, #476]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a70      	ldr	r2, [pc, #448]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b6e      	ldr	r3, [pc, #440]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a69      	ldr	r2, [pc, #420]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <MX_GPIO_Init+0x2dc>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2174      	movs	r1, #116	; 0x74
 8001c7e:	4864      	ldr	r0, [pc, #400]	; (8001e10 <MX_GPIO_Init+0x2e0>)
 8001c80:	f002 fa7c 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTMODboot_GPIO_Port, INTMODboot_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c8a:	4862      	ldr	r0, [pc, #392]	; (8001e14 <MX_GPIO_Init+0x2e4>)
 8001c8c:	f002 fa76 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDnRST_GPIO_Port, LCDnRST_Pin, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c96:	485f      	ldr	r0, [pc, #380]	; (8001e14 <MX_GPIO_Init+0x2e4>)
 8001c98:	f002 fa70 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca2:	485d      	ldr	r0, [pc, #372]	; (8001e18 <MX_GPIO_Init+0x2e8>)
 8001ca4:	f002 fa6a 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TESTPOINT_Pin|IntModPwr_Pin|UART3Pwr_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f248 1120 	movw	r1, #33056	; 0x8120
 8001cae:	485b      	ldr	r0, [pc, #364]	; (8001e1c <MX_GPIO_Init+0x2ec>)
 8001cb0:	f002 fa64 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioMute_GPIO_Port, AudioMute_Pin, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	4858      	ldr	r0, [pc, #352]	; (8001e1c <MX_GPIO_Init+0x2ec>)
 8001cba:	f002 fa5f 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210b      	movs	r1, #11
 8001cc2:	4857      	ldr	r0, [pc, #348]	; (8001e20 <MX_GPIO_Init+0x2f0>)
 8001cc4:	f002 fa5a 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2102      	movs	r1, #2
 8001ccc:	4855      	ldr	r0, [pc, #340]	; (8001e24 <MX_GPIO_Init+0x2f4>)
 8001cce:	f002 fa55 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TrainerOut_GPIO_Port, TrainerOut_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	4854      	ldr	r0, [pc, #336]	; (8001e28 <MX_GPIO_Init+0x2f8>)
 8001cd8:	f002 fa50 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TelemDir_GPIO_Port, TelemDir_Pin, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2110      	movs	r1, #16
 8001ce0:	4852      	ldr	r0, [pc, #328]	; (8001e2c <MX_GPIO_Init+0x2fc>)
 8001ce2:	f002 fa4b 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothEn_GPIO_Port, BluetoothEn_Pin, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cec:	4850      	ldr	r0, [pc, #320]	; (8001e30 <MX_GPIO_Init+0x300>)
 8001cee:	f002 fa45 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDred_Pin LEDgreen_Pin LEDblue_Pin HAPTIC_Pin */
  GPIO_InitStruct.Pin = LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin;
 8001cf2:	2374      	movs	r3, #116	; 0x74
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d06:	4619      	mov	r1, r3
 8001d08:	4841      	ldr	r0, [pc, #260]	; (8001e10 <MX_GPIO_Init+0x2e0>)
 8001d0a:	f002 f873 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWEL_Pin */
  GPIO_InitStruct.Pin = SWEL_Pin;
 8001d0e:	2308      	movs	r3, #8
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SWEL_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	483b      	ldr	r0, [pc, #236]	; (8001e10 <MX_GPIO_Init+0x2e0>)
 8001d22:	f002 f867 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYenter_Pin KEYpageprevious_Pin SWAL_Pin KEYrtn_Pin
                           KEYtelem_Pin KEYmdl_Pin KEYsys_Pin */
  GPIO_InitStruct.Pin = KEYenter_Pin|KEYpageprevious_Pin|SWAL_Pin|KEYrtn_Pin
 8001d26:	f648 13f0 	movw	r3, #35312	; 0x89f0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |KEYtelem_Pin|KEYmdl_Pin|KEYsys_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4836      	ldr	r0, [pc, #216]	; (8001e14 <MX_GPIO_Init+0x2e4>)
 8001d3c:	f002 f85a 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYpagenext_Pin TrimLHR_Pin */
  GPIO_InitStruct.Pin = KEYpagenext_Pin|TrimLHR_Pin;
 8001d40:	f242 0310 	movw	r3, #8208	; 0x2010
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d46:	2300      	movs	r3, #0
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	4619      	mov	r1, r3
 8001d54:	4834      	ldr	r0, [pc, #208]	; (8001e28 <MX_GPIO_Init+0x2f8>)
 8001d56:	f002 f84d 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTMODboot_Pin LCDnRST_Pin */
  GPIO_InitStruct.Pin = INTMODboot_Pin|LCDnRST_Pin;
 8001d5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d70:	4619      	mov	r1, r3
 8001d72:	4828      	ldr	r0, [pc, #160]	; (8001e14 <MX_GPIO_Init+0x2e4>)
 8001d74:	f002 f83e 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4821      	ldr	r0, [pc, #132]	; (8001e18 <MX_GPIO_Init+0x2e8>)
 8001d92:	f002 f82f 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 8001d96:	2304      	movs	r3, #4
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <MX_GPIO_Init+0x304>)
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da6:	4619      	mov	r1, r3
 8001da8:	4823      	ldr	r0, [pc, #140]	; (8001e38 <MX_GPIO_Init+0x308>)
 8001daa:	f002 f823 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWF_Pin SWEH_Pin SWAH_Pin SWBH_Pin
                           SWI_Pin SWJ_Pin */
  GPIO_InitStruct.Pin = SWF_Pin|SWEH_Pin|SWAH_Pin|SWBH_Pin
 8001dae:	f24d 2318 	movw	r3, #53784	; 0xd218
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SWI_Pin|SWJ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481d      	ldr	r0, [pc, #116]	; (8001e38 <MX_GPIO_Init+0x308>)
 8001dc4:	f002 f816 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TESTPOINT_Pin AudioMute_Pin IntModPwr_Pin UART3Pwr_Pin */
  GPIO_InitStruct.Pin = TESTPOINT_Pin|AudioMute_Pin|IntModPwr_Pin|UART3Pwr_Pin;
 8001dc8:	f248 13a0 	movw	r3, #33184	; 0x81a0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	4619      	mov	r1, r3
 8001de0:	480e      	ldr	r0, [pc, #56]	; (8001e1c <MX_GPIO_Init+0x2ec>)
 8001de2:	f002 f807 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TrimLHL_Pin */
  GPIO_InitStruct.Pin = TrimLHL_Pin;
 8001de6:	2340      	movs	r3, #64	; 0x40
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dea:	2300      	movs	r3, #0
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TrimLHL_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	4808      	ldr	r0, [pc, #32]	; (8001e1c <MX_GPIO_Init+0x2ec>)
 8001dfa:	f001 fffb 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDpresent_Pin TrainerIn_Pin */
  GPIO_InitStruct.Pin = SDpresent_Pin|TrainerIn_Pin;
 8001dfe:	2360      	movs	r3, #96	; 0x60
 8001e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e02:	2300      	movs	r3, #0
 8001e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e018      	b.n	8001e3c <MX_GPIO_Init+0x30c>
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40021400 	.word	0x40021400
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40022400 	.word	0x40022400
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40021800 	.word	0x40021800
 8001e34:	10110000 	.word	0x10110000
 8001e38:	40021c00 	.word	0x40021c00
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e42:	4619      	mov	r1, r3
 8001e44:	486b      	ldr	r0, [pc, #428]	; (8001ff4 <MX_GPIO_Init+0x4c4>)
 8001e46:	f001 ffd5 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART6pwr_Pin LCDbacklight_Pin ExtModPwr_Pin */
  GPIO_InitStruct.Pin = UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin;
 8001e4a:	230b      	movs	r3, #11
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4865      	ldr	r0, [pc, #404]	; (8001ff8 <MX_GPIO_Init+0x4c8>)
 8001e62:	f001 ffc7 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRswitch_Pin */
  GPIO_InitStruct.Pin = PWRswitch_Pin;
 8001e66:	2301      	movs	r3, #1
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PWRswitch_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e76:	4619      	mov	r1, r3
 8001e78:	4860      	ldr	r0, [pc, #384]	; (8001ffc <MX_GPIO_Init+0x4cc>)
 8001e7a:	f001 ffbb 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRon_Pin */
  GPIO_InitStruct.Pin = PWRon_Pin;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(PWRon_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e92:	4619      	mov	r1, r3
 8001e94:	4859      	ldr	r0, [pc, #356]	; (8001ffc <MX_GPIO_Init+0x4cc>)
 8001e96:	f001 ffad 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCBREV1_Pin PCBREV2_Pin ROTENCB_Pin ROTENCA_Pin */
  GPIO_InitStruct.Pin = PCBREV1_Pin|PCBREV2_Pin|ROTENCB_Pin|ROTENCA_Pin;
 8001e9a:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ea8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eac:	4619      	mov	r1, r3
 8001eae:	4854      	ldr	r0, [pc, #336]	; (8002000 <MX_GPIO_Init+0x4d0>)
 8001eb0:	f001 ffa0 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWBL_Pin TrainerDetect_Pin */
  GPIO_InitStruct.Pin = SWBL_Pin|TrainerDetect_Pin;
 8001eb4:	f241 0310 	movw	r3, #4112	; 0x1010
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	484b      	ldr	r0, [pc, #300]	; (8001ff8 <MX_GPIO_Init+0x4c8>)
 8001eca:	f001 ff93 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TrimRSD_Pin TrimRSU_Pin SWCL_Pin */
  GPIO_InitStruct.Pin = TrimRSD_Pin|TrimRSU_Pin|SWCL_Pin;
 8001ece:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4845      	ldr	r0, [pc, #276]	; (8001ff8 <MX_GPIO_Init+0x4c8>)
 8001ee4:	f001 ff86 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWCH_Pin TrimLSU_Pin TrimR_Pin TrimRHR_Pin */
  GPIO_InitStruct.Pin = SWCH_Pin|TrimLSU_Pin|TrimR_Pin|TrimRHR_Pin;
 8001ee8:	f642 0388 	movw	r3, #10376	; 0x2888
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001efa:	4619      	mov	r1, r3
 8001efc:	4841      	ldr	r0, [pc, #260]	; (8002004 <MX_GPIO_Init+0x4d4>)
 8001efe:	f001 ff79 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f14:	4619      	mov	r1, r3
 8001f16:	483b      	ldr	r0, [pc, #236]	; (8002004 <MX_GPIO_Init+0x4d4>)
 8001f18:	f001 ff6c 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDH_Pin TrimLSD_Pin TrimRV_Pin TrimRVD_Pin
                           TrimLVU_Pin */
  GPIO_InitStruct.Pin = SWDH_Pin|TrimLSD_Pin|TrimRV_Pin|TrimRVD_Pin
 8001f1c:	f44f 43e3 	mov.w	r3, #29056	; 0x7180
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f22:	2300      	movs	r3, #0
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4832      	ldr	r0, [pc, #200]	; (8001ffc <MX_GPIO_Init+0x4cc>)
 8001f32:	f001 ff5f 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDL_Pin SWGL_Pin SWGH_Pin SWH_Pin
                           TrimLVD_Pin */
  GPIO_InitStruct.Pin = SWDL_Pin|SWGL_Pin|SWGH_Pin|SWH_Pin
 8001f36:	f241 03cc 	movw	r3, #4300	; 0x10cc
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f48:	4619      	mov	r1, r3
 8001f4a:	482f      	ldr	r0, [pc, #188]	; (8002008 <MX_GPIO_Init+0x4d8>)
 8001f4c:	f001 ff52 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TrainerOut_Pin */
  GPIO_InitStruct.Pin = TrainerOut_Pin;
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TrainerOut_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f64:	4619      	mov	r1, r3
 8001f66:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <MX_GPIO_Init+0x4c4>)
 8001f68:	f001 ff44 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ExtModTX_Pin */
  GPIO_InitStruct.Pin = ExtModTX_Pin;
 8001f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ExtModTX_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4822      	ldr	r0, [pc, #136]	; (800200c <MX_GPIO_Init+0x4dc>)
 8001f82:	f001 ff37 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TelemDir_Pin */
  GPIO_InitStruct.Pin = TelemDir_Pin;
 8001f86:	2310      	movs	r3, #16
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TelemDir_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4819      	ldr	r0, [pc, #100]	; (8002004 <MX_GPIO_Init+0x4d4>)
 8001f9e:	f001 ff29 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothEn_Pin */
  GPIO_InitStruct.Pin = BluetoothEn_Pin;
 8001fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(BluetoothEn_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4813      	ldr	r0, [pc, #76]	; (8002008 <MX_GPIO_Init+0x4d8>)
 8001fbc:	f001 ff1a 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USBchaCtrl_Pin USBchgDetect_Pin */
  GPIO_InitStruct.Pin = USBchaCtrl_Pin|USBchgDetect_Pin;
 8001fc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480c      	ldr	r0, [pc, #48]	; (8002008 <MX_GPIO_Init+0x4d8>)
 8001fd6:	f001 ff0d 	bl	8003df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2105      	movs	r1, #5
 8001fde:	2008      	movs	r0, #8
 8001fe0:	f001 fac0 	bl	8003564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fe4:	2008      	movs	r0, #8
 8001fe6:	f001 fad9 	bl	800359c <HAL_NVIC_EnableIRQ>

}
 8001fea:	bf00      	nop
 8001fec:	3740      	adds	r7, #64	; 0x40
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40022400 	.word	0x40022400
 8002000:	40021c00 	.word	0x40021c00
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40021800 	.word	0x40021800
 800200c:	40020000 	.word	0x40020000

08002010 <HAL_I2C_MemTxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = false;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
	if (BinSemI2CCBHandle)
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_I2C_MemTxCpltCallback+0x44>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_I2C_MemTxCpltCallback+0x24>
		xSemaphoreGiveFromISR(BinSemI2CCBHandle, &xHigherPriorityTaskWoken);
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_I2C_MemTxCpltCallback+0x44>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f107 020c 	add.w	r2, r7, #12
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f00a f8bf 	bl	800c1b2 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_I2C_MemTxCpltCallback+0x3a>
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_I2C_MemTxCpltCallback+0x48>)
 800203c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	f3bf 8f6f 	isb	sy
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200094a0 	.word	0x200094a0
 8002058:	e000ed04 	.word	0xe000ed04

0800205c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = false;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
	if (BinSemI2CCBHandle)
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_I2C_MemRxCpltCallback+0x44>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_I2C_MemRxCpltCallback+0x24>
		xSemaphoreGiveFromISR(BinSemI2CCBHandle, &xHigherPriorityTaskWoken);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_I2C_MemRxCpltCallback+0x44>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f107 020c 	add.w	r2, r7, #12
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f00a f899 	bl	800c1b2 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <HAL_I2C_MemRxCpltCallback+0x3a>
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <HAL_I2C_MemRxCpltCallback+0x48>)
 8002088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f3bf 8f4f 	dsb	sy
 8002092:	f3bf 8f6f 	isb	sy
}
 8002096:	bf00      	nop
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200094a0 	.word	0x200094a0
 80020a4:	e000ed04 	.word	0xe000ed04

080020a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_2)
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d118      	bne.n	80020ea <HAL_GPIO_EXTI_Callback+0x42>
	{
		BaseType_t xHigherPriorityTaskWoken = false;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
		if (BinSemTouchINTHandle)
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_EXTI_Callback+0x2c>
			xSemaphoreGiveFromISR(BinSemTouchINTHandle, &xHigherPriorityTaskWoken);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f107 020c 	add.w	r2, r7, #12
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f00a f86f 	bl	800c1b2 <xQueueGiveFromISR>
	  	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_EXTI_Callback+0x42>
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80020dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f3bf 8f4f 	dsb	sy
 80020e6:	f3bf 8f6f 	isb	sy
	}
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200094a4 	.word	0x200094a4
 80020f8:	e000ed04 	.word	0xe000ed04

080020fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af02      	add	r7, sp, #8
 8002102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET); // Turn on power
 8002104:	2201      	movs	r2, #1
 8002106:	2102      	movs	r1, #2
 8002108:	4833      	ldr	r0, [pc, #204]	; (80021d8 <StartDefaultTask+0xdc>)
 800210a:	f002 f837 	bl	800417c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	2104      	movs	r1, #4
 8002112:	4832      	ldr	r0, [pc, #200]	; (80021dc <StartDefaultTask+0xe0>)
 8002114:	f002 f832 	bl	800417c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	2110      	movs	r1, #16
 800211c:	482f      	ldr	r0, [pc, #188]	; (80021dc <StartDefaultTask+0xe0>)
 800211e:	f002 f82d 	bl	800417c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	2120      	movs	r1, #32
 8002126:	482d      	ldr	r0, [pc, #180]	; (80021dc <StartDefaultTask+0xe0>)
 8002128:	f002 f828 	bl	800417c <HAL_GPIO_WritePin>

  /* Infinite loop */
  while(1)
  {
   	osDelay(pdMS_TO_TICKS(100));
 800212c:	2064      	movs	r0, #100	; 0x64
 800212e:	f009 fa42 	bl	800b5b6 <osDelay>

   	// Check Power-Off
   	if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8002132:	2101      	movs	r1, #1
 8002134:	4828      	ldr	r0, [pc, #160]	; (80021d8 <StartDefaultTask+0xdc>)
 8002136:	f002 f809 	bl	800414c <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d144      	bne.n	80021ca <StartDefaultTask+0xce>
   	{
   		//HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
   		//HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
   		HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	2120      	movs	r1, #32
 8002144:	4825      	ldr	r0, [pc, #148]	; (80021dc <StartDefaultTask+0xe0>)
 8002146:	f002 f819 	bl	800417c <HAL_GPIO_WritePin>

   	    TRACE("defaultTask Stack: %lu", uxTaskGetStackHighWaterMark(defaultTaskHandle));
 800214a:	f000 feb1 	bl	8002eb0 <HAL_GetTick>
 800214e:	ee07 0a90 	vmov	s15, r0
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	ee17 0a90 	vmov	r0, s15
 800215a:	f7fe fa15 	bl	8000588 <__aeabi_f2d>
 800215e:	4604      	mov	r4, r0
 8002160:	460d      	mov	r5, r1
 8002162:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <StartDefaultTask+0xe4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f00b faec 	bl	800d744 <uxTaskGetStackHighWaterMark>
 800216c:	4603      	mov	r3, r0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4622      	mov	r2, r4
 8002172:	462b      	mov	r3, r5
 8002174:	481b      	ldr	r0, [pc, #108]	; (80021e4 <StartDefaultTask+0xe8>)
 8002176:	f7fe fbdb 	bl	8000930 <serialPrintf>
   	    TRACE("TouchTask Stack: %lu", uxTaskGetStackHighWaterMark(TouchTaskHandle));
 800217a:	f000 fe99 	bl	8002eb0 <HAL_GetTick>
 800217e:	ee07 0a90 	vmov	s15, r0
 8002182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002186:	ee17 0a90 	vmov	r0, s15
 800218a:	f7fe f9fd 	bl	8000588 <__aeabi_f2d>
 800218e:	4604      	mov	r4, r0
 8002190:	460d      	mov	r5, r1
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <StartDefaultTask+0xec>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f00b fad4 	bl	800d744 <uxTaskGetStackHighWaterMark>
 800219c:	4603      	mov	r3, r0
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4622      	mov	r2, r4
 80021a2:	462b      	mov	r3, r5
 80021a4:	4811      	ldr	r0, [pc, #68]	; (80021ec <StartDefaultTask+0xf0>)
 80021a6:	f7fe fbc3 	bl	8000930 <serialPrintf>

   		// Check again in 1 second
   		osDelay(pdMS_TO_TICKS(1000));
 80021aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021ae:	f009 fa02 	bl	800b5b6 <osDelay>
   		if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 80021b2:	2101      	movs	r1, #1
 80021b4:	4808      	ldr	r0, [pc, #32]	; (80021d8 <StartDefaultTask+0xdc>)
 80021b6:	f001 ffc9 	bl	800414c <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <StartDefaultTask+0xce>
   		{
   			HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_RESET); // Turn off power
 80021c0:	2200      	movs	r2, #0
 80021c2:	2102      	movs	r1, #2
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <StartDefaultTask+0xdc>)
 80021c6:	f001 ffd9 	bl	800417c <HAL_GPIO_WritePin>
   		}
   	}
   	HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2120      	movs	r1, #32
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <StartDefaultTask+0xe0>)
 80021d0:	f001 ffd4 	bl	800417c <HAL_GPIO_WritePin>
   	osDelay(pdMS_TO_TICKS(100));
 80021d4:	e7aa      	b.n	800212c <StartDefaultTask+0x30>
 80021d6:	bf00      	nop
 80021d8:	40022400 	.word	0x40022400
 80021dc:	40021000 	.word	0x40021000
 80021e0:	20008dc4 	.word	0x20008dc4
 80021e4:	0800f8e0 	.word	0x0800f8e0
 80021e8:	200093c8 	.word	0x200093c8
 80021ec:	0800f900 	.word	0x0800f900

080021f0 <TouchTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TouchTaskEntry */
void TouchTaskEntry(void *argument)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TouchTaskEntry */
  osDelay(pdMS_TO_TICKS (50));
 80021f8:	2032      	movs	r0, #50	; 0x32
 80021fa:	f009 f9dc 	bl	800b5b6 <osDelay>

  xSemaphoreTake(BinSemI2CCBHandle, 0);
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <TouchTaskEntry+0x7c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f00a f941 	bl	800c48c <xQueueSemaphoreTake>

  if (!touchPanelInit())
 800220a:	f7fe fd21 	bl	8000c50 <touchPanelInit>
 800220e:	4603      	mov	r3, r0
 8002210:	f083 0301 	eor.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00f      	beq.n	800223a <TouchTaskEntry+0x4a>
  {
    TRACE("ERROR: touchPanelInit() failed");
 800221a:	f000 fe49 	bl	8002eb0 <HAL_GetTick>
 800221e:	ee07 0a90 	vmov	s15, r0
 8002222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002226:	ee17 0a90 	vmov	r0, s15
 800222a:	f7fe f9ad 	bl	8000588 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	480f      	ldr	r0, [pc, #60]	; (8002270 <TouchTaskEntry+0x80>)
 8002234:	f7fe fb7c 	bl	8000930 <serialPrintf>
    asm("bkpt 255");
 8002238:	beff      	bkpt	0x00ff
  }

  xSemaphoreTake(BinSemTouchINTHandle, 0);
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <TouchTaskEntry+0x84>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f00a f923 	bl	800c48c <xQueueSemaphoreTake>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2105      	movs	r1, #5
 800224a:	2008      	movs	r0, #8
 800224c:	f001 f98a 	bl	8003564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002250:	2008      	movs	r0, #8
 8002252:	f001 f9a3 	bl	800359c <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(BinSemTouchINTHandle, portMAX_DELAY);
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <TouchTaskEntry+0x84>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f04f 31ff 	mov.w	r1, #4294967295
 800225e:	4618      	mov	r0, r3
 8002260:	f00a f914 	bl	800c48c <xQueueSemaphoreTake>
	touchPanelRead();
 8002264:	f7fe fe8e 	bl	8000f84 <touchPanelRead>
	xSemaphoreTake(BinSemTouchINTHandle, portMAX_DELAY);
 8002268:	e7f5      	b.n	8002256 <TouchTaskEntry+0x66>
 800226a:	bf00      	nop
 800226c:	200094a0 	.word	0x200094a0
 8002270:	0800f920 	.word	0x0800f920
 8002274:	200094a4 	.word	0x200094a4

08002278 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d101      	bne.n	800228e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800228a:	f000 fdfd 	bl	8002e88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000

0800229c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i
}
 80022a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <Error_Handler+0x8>
	...

080022a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_MspInit+0x54>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a11      	ldr	r2, [pc, #68]	; (80022fc <HAL_MspInit+0x54>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_MspInit+0x54>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_MspInit+0x54>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_MspInit+0x54>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_MspInit+0x54>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	210f      	movs	r1, #15
 80022ea:	f06f 0001 	mvn.w	r0, #1
 80022ee:	f001 f939 	bl	8003564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 031c 	add.w	r3, r7, #28
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a31      	ldr	r2, [pc, #196]	; (80023e4 <HAL_ADC_MspInit+0xe4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d15c      	bne.n	80023dc <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
 8002326:	4b30      	ldr	r3, [pc, #192]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	4a2f      	ldr	r2, [pc, #188]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 800232c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002330:	6453      	str	r3, [r2, #68]	; 0x44
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a28      	ldr	r2, [pc, #160]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_ADC_MspInit+0xe8>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = SLIDER1_Pin|VBattery_Pin|EX1_Pin|EX2_Pin;
 8002392:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	4811      	ldr	r0, [pc, #68]	; (80023ec <HAL_ADC_MspInit+0xec>)
 80023a8:	f001 fd24 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin|POS6_Pin|POT2_Pin|SLIDER2_Pin;
 80023ac:	230f      	movs	r3, #15
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	480c      	ldr	r0, [pc, #48]	; (80023f0 <HAL_ADC_MspInit+0xf0>)
 80023c0:	f001 fd18 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = StickLH_Pin|StickLV_Pin|StickRH_Pin|StickRV_Pin;
 80023c4:	230f      	movs	r3, #15
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c8:	2303      	movs	r3, #3
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	4807      	ldr	r0, [pc, #28]	; (80023f4 <HAL_ADC_MspInit+0xf4>)
 80023d8:	f001 fd0c 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40012200 	.word	0x40012200
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40021400 	.word	0x40021400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020000 	.word	0x40020000

080023f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_DAC_MspInit+0x7c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d127      	bne.n	800246a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_DAC_MspInit+0x80>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a15      	ldr	r2, [pc, #84]	; (8002478 <HAL_DAC_MspInit+0x80>)
 8002424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <HAL_DAC_MspInit+0x80>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_DAC_MspInit+0x80>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <HAL_DAC_MspInit+0x80>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_DAC_MspInit+0x80>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Audio_Pin;
 8002452:	2310      	movs	r3, #16
 8002454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002456:	2303      	movs	r3, #3
 8002458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Audio_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4805      	ldr	r0, [pc, #20]	; (800247c <HAL_DAC_MspInit+0x84>)
 8002466:	f001 fcc5 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800246a:	bf00      	nop
 800246c:	3728      	adds	r7, #40	; 0x28
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40007400 	.word	0x40007400
 8002478:	40023800 	.word	0x40023800
 800247c:	40020000 	.word	0x40020000

08002480 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a4c      	ldr	r2, [pc, #304]	; (80025d0 <HAL_I2C_MspInit+0x150>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	f040 8091 	bne.w	80025c6 <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_I2C_MspInit+0x154>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	4a49      	ldr	r2, [pc, #292]	; (80025d4 <HAL_I2C_MspInit+0x154>)
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	6313      	str	r3, [r2, #48]	; 0x30
 80024b4:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_I2C_MspInit+0x154>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c6:	2312      	movs	r3, #18
 80024c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024d2:	2304      	movs	r3, #4
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	4619      	mov	r1, r3
 80024dc:	483e      	ldr	r0, [pc, #248]	; (80025d8 <HAL_I2C_MspInit+0x158>)
 80024de:	f001 fc89 	bl	8003df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <HAL_I2C_MspInit+0x154>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a3a      	ldr	r2, [pc, #232]	; (80025d4 <HAL_I2C_MspInit+0x154>)
 80024ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_I2C_MspInit+0x154>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80024fe:	4b37      	ldr	r3, [pc, #220]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002500:	4a37      	ldr	r2, [pc, #220]	; (80025e0 <HAL_I2C_MspInit+0x160>)
 8002502:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800250a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 800251a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800251e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800253e:	4827      	ldr	r0, [pc, #156]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002540:	f001 f8ac 	bl	800369c <HAL_DMA_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800254a:	f7ff fea7 	bl	800229c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
 8002554:	4a21      	ldr	r2, [pc, #132]	; (80025dc <HAL_I2C_MspInit+0x15c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 800255c:	4a22      	ldr	r2, [pc, #136]	; (80025e8 <HAL_I2C_MspInit+0x168>)
 800255e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 8002562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002566:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 8002576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800257a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800259a:	4812      	ldr	r0, [pc, #72]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 800259c:	f001 f87e 	bl	800369c <HAL_DMA_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80025a6:	f7ff fe79 	bl	800229c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a0d      	ldr	r2, [pc, #52]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34
 80025b0:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_I2C_MspInit+0x164>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2105      	movs	r1, #5
 80025ba:	201f      	movs	r0, #31
 80025bc:	f000 ffd2 	bl	8003564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80025c0:	201f      	movs	r0, #31
 80025c2:	f000 ffeb 	bl	800359c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40005400 	.word	0x40005400
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020400 	.word	0x40020400
 80025dc:	200094a8 	.word	0x200094a8
 80025e0:	40026010 	.word	0x40026010
 80025e4:	20008e64 	.word	0x20008e64
 80025e8:	400260a0 	.word	0x400260a0

080025ec <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a38      	ldr	r2, [pc, #224]	; (80026ec <HAL_LTDC_MspInit+0x100>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d169      	bne.n	80026e2 <HAL_LTDC_MspInit+0xf6>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a36      	ldr	r2, [pc, #216]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002650:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 800266c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_LTDC_MspInit+0x104>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800267e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002690:	230e      	movs	r3, #14
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4816      	ldr	r0, [pc, #88]	; (80026f4 <HAL_LTDC_MspInit+0x108>)
 800269c:	f001 fbaa 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80026a0:	f648 637c 	movw	r3, #36476	; 0x8e7c
 80026a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026b2:	230e      	movs	r3, #14
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	4619      	mov	r1, r3
 80026bc:	480e      	ldr	r0, [pc, #56]	; (80026f8 <HAL_LTDC_MspInit+0x10c>)
 80026be:	f001 fb99 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80026c2:	23ff      	movs	r3, #255	; 0xff
 80026c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026d2:	230e      	movs	r3, #14
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	4619      	mov	r1, r3
 80026dc:	4807      	ldr	r0, [pc, #28]	; (80026fc <HAL_LTDC_MspInit+0x110>)
 80026de:	f001 fb89 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80026e2:	bf00      	nop
 80026e4:	3730      	adds	r7, #48	; 0x30
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40016800 	.word	0x40016800
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40022000 	.word	0x40022000
 80026f8:	40022400 	.word	0x40022400
 80026fc:	40022800 	.word	0x40022800

08002700 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_SD_MspInit+0xc0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d14a      	bne.n	80027b8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	4a26      	ldr	r2, [pc, #152]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 800272c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002730:	6453      	str	r3, [r2, #68]	; 0x44
 8002732:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 8002764:	f043 0308 	orr.w	r3, r3, #8
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_SD_MspInit+0xc4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002776:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800277a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002788:	230c      	movs	r3, #12
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	480d      	ldr	r0, [pc, #52]	; (80027c8 <HAL_SD_MspInit+0xc8>)
 8002794:	f001 fb2e 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002798:	2304      	movs	r3, #4
 800279a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80027a8:	230c      	movs	r3, #12
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	4619      	mov	r1, r3
 80027b2:	4806      	ldr	r0, [pc, #24]	; (80027cc <HAL_SD_MspInit+0xcc>)
 80027b4:	f001 fb1e 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	; 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020800 	.word	0x40020800
 80027cc:	40020c00 	.word	0x40020c00

080027d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a19      	ldr	r2, [pc, #100]	; (8002854 <HAL_SPI_MspInit+0x84>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d12b      	bne.n	800284a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b18      	ldr	r3, [pc, #96]	; (8002858 <HAL_SPI_MspInit+0x88>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_SPI_MspInit+0x88>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_SPI_MspInit+0x88>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_SPI_MspInit+0x88>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_SPI_MspInit+0x88>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_SPI_MspInit+0x88>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    PI0     ------> SPI2_NSS
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800282a:	230f      	movs	r3, #15
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800283a:	2305      	movs	r3, #5
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <HAL_SPI_MspInit+0x8c>)
 8002846:	f001 fad5 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3728      	adds	r7, #40	; 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40003800 	.word	0x40003800
 8002858:	40023800 	.word	0x40023800
 800285c:	40022000 	.word	0x40022000

08002860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b090      	sub	sp, #64	; 0x40
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a65      	ldr	r2, [pc, #404]	; (8002a14 <HAL_UART_MspInit+0x1b4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d12c      	bne.n	80028dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
 8002886:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a63      	ldr	r2, [pc, #396]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 800288c:	f043 0310 	orr.w	r3, r3, #16
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	4b5d      	ldr	r3, [pc, #372]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	4a5c      	ldr	r2, [pc, #368]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6313      	str	r3, [r2, #48]	; 0x30
 80028ae:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ba:	23c0      	movs	r3, #192	; 0xc0
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ca:	2307      	movs	r3, #7
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d2:	4619      	mov	r1, r3
 80028d4:	4851      	ldr	r0, [pc, #324]	; (8002a1c <HAL_UART_MspInit+0x1bc>)
 80028d6:	f001 fa8d 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028da:	e096      	b.n	8002a0a <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_UART_MspInit+0x1c0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d12c      	bne.n	8002940 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
 80028ea:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	4a43      	ldr	r2, [pc, #268]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6313      	str	r3, [r2, #48]	; 0x30
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800291e:	2360      	movs	r3, #96	; 0x60
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800292e:	2307      	movs	r3, #7
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002936:	4619      	mov	r1, r3
 8002938:	483a      	ldr	r0, [pc, #232]	; (8002a24 <HAL_UART_MspInit+0x1c4>)
 800293a:	f001 fa5b 	bl	8003df4 <HAL_GPIO_Init>
}
 800293e:	e064      	b.n	8002a0a <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a38      	ldr	r2, [pc, #224]	; (8002a28 <HAL_UART_MspInit+0x1c8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d12d      	bne.n	80029a6 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 8002954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002982:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	2303      	movs	r3, #3
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002994:	2307      	movs	r3, #7
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299c:	4619      	mov	r1, r3
 800299e:	481f      	ldr	r0, [pc, #124]	; (8002a1c <HAL_UART_MspInit+0x1bc>)
 80029a0:	f001 fa28 	bl	8003df4 <HAL_GPIO_Init>
}
 80029a4:	e031      	b.n	8002a0a <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_UART_MspInit+0x1cc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d12c      	bne.n	8002a0a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80029ba:	f043 0320 	orr.w	r3, r3, #32
 80029be:	6453      	str	r3, [r2, #68]	; 0x44
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80029d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029da:	6313      	str	r3, [r2, #48]	; 0x30
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_UART_MspInit+0x1b8>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80029e8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029fa:	2308      	movs	r3, #8
 80029fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a02:	4619      	mov	r1, r3
 8002a04:	480a      	ldr	r0, [pc, #40]	; (8002a30 <HAL_UART_MspInit+0x1d0>)
 8002a06:	f001 f9f5 	bl	8003df4 <HAL_GPIO_Init>
}
 8002a0a:	bf00      	nop
 8002a0c:	3740      	adds	r7, #64	; 0x40
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40011000 	.word	0x40011000
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40004400 	.word	0x40004400
 8002a24:	40020c00 	.word	0x40020c00
 8002a28:	40004800 	.word	0x40004800
 8002a2c:	40011400 	.word	0x40011400
 8002a30:	40021800 	.word	0x40021800

08002a34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	; 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a54:	d13f      	bne.n	8002ad6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_PCD_MspInit+0xac>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a20      	ldr	r2, [pc, #128]	; (8002ae0 <HAL_PCD_MspInit+0xac>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_PCD_MspInit+0xac>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4619      	mov	r1, r3
 8002a86:	4817      	ldr	r0, [pc, #92]	; (8002ae4 <HAL_PCD_MspInit+0xb0>)
 8002a88:	f001 f9b4 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	480e      	ldr	r0, [pc, #56]	; (8002ae4 <HAL_PCD_MspInit+0xb0>)
 8002aaa:	f001 f9a3 	bl	8003df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <HAL_PCD_MspInit+0xac>)
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <HAL_PCD_MspInit+0xac>)
 8002ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab8:	6353      	str	r3, [r2, #52]	; 0x34
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_PCD_MspInit+0xac>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <HAL_PCD_MspInit+0xac>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_PCD_MspInit+0xac>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020000 	.word	0x40020000

08002ae8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002afc:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_FMC_MspInit+0x104>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d16f      	bne.n	8002be4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002b04:	4b39      	ldr	r3, [pc, #228]	; (8002bec <HAL_FMC_MspInit+0x104>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_FMC_MspInit+0x108>)
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <HAL_FMC_MspInit+0x108>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6393      	str	r3, [r2, #56]	; 0x38
 8002b1a:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <HAL_FMC_MspInit+0x108>)
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002b26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002b2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b38:	230c      	movs	r3, #12
 8002b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	4619      	mov	r1, r3
 8002b40:	482c      	ldr	r0, [pc, #176]	; (8002bf4 <HAL_FMC_MspInit+0x10c>)
 8002b42:	f001 f957 	bl	8003df4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b46:	2360      	movs	r3, #96	; 0x60
 8002b48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b56:	230c      	movs	r3, #12
 8002b58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4826      	ldr	r0, [pc, #152]	; (8002bf8 <HAL_FMC_MspInit+0x110>)
 8002b60:	f001 f948 	bl	8003df4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002b64:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b68:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b72:	2303      	movs	r3, #3
 8002b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b76:	230c      	movs	r3, #12
 8002b78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481f      	ldr	r0, [pc, #124]	; (8002bfc <HAL_FMC_MspInit+0x114>)
 8002b80:	f001 f938 	bl	8003df4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002b84:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b88:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b96:	230c      	movs	r3, #12
 8002b98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b9a:	1d3b      	adds	r3, r7, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4818      	ldr	r0, [pc, #96]	; (8002c00 <HAL_FMC_MspInit+0x118>)
 8002ba0:	f001 f928 	bl	8003df4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002ba4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002ba8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bb6:	230c      	movs	r3, #12
 8002bb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4811      	ldr	r0, [pc, #68]	; (8002c04 <HAL_FMC_MspInit+0x11c>)
 8002bc0:	f001 f918 	bl	8003df4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bd4:	230c      	movs	r3, #12
 8002bd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480a      	ldr	r0, [pc, #40]	; (8002c08 <HAL_FMC_MspInit+0x120>)
 8002bde:	f001 f909 	bl	8003df4 <HAL_GPIO_Init>
 8002be2:	e000      	b.n	8002be6 <HAL_FMC_MspInit+0xfe>
    return;
 8002be4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000094 	.word	0x20000094
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40021400 	.word	0x40021400
 8002bf8:	40021c00 	.word	0x40021c00
 8002bfc:	40021800 	.word	0x40021800
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40020c00 	.word	0x40020c00
 8002c08:	40020400 	.word	0x40020400

08002c0c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002c14:	f7ff ff68 	bl	8002ae8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08c      	sub	sp, #48	; 0x30
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	2019      	movs	r0, #25
 8002c36:	f000 fc95 	bl	8003564 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c3a:	2019      	movs	r0, #25
 8002c3c:	f000 fcae 	bl	800359c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_InitTick+0xa4>)
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_InitTick+0xa4>)
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <HAL_InitTick+0xa4>)
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c5c:	f107 0210 	add.w	r2, r7, #16
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 fec0 	bl	80079ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002c6c:	f004 feaa 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 8002c70:	4603      	mov	r3, r0
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_InitTick+0xa8>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	0c9b      	lsrs	r3, r3, #18
 8002c80:	3b01      	subs	r3, #1
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_InitTick+0xac>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <HAL_InitTick+0xb0>)
 8002c88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_InitTick+0xac>)
 8002c8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c92:	4a0e      	ldr	r2, [pc, #56]	; (8002ccc <HAL_InitTick+0xac>)
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_InitTick+0xac>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_InitTick+0xac>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ca4:	4809      	ldr	r0, [pc, #36]	; (8002ccc <HAL_InitTick+0xac>)
 8002ca6:	f006 f9e3 	bl	8009070 <HAL_TIM_Base_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002cb0:	4806      	ldr	r0, [pc, #24]	; (8002ccc <HAL_InitTick+0xac>)
 8002cb2:	f006 fa37 	bl	8009124 <HAL_TIM_Base_Start_IT>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	e000      	b.n	8002cbc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3730      	adds	r7, #48	; 0x30
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	431bde83 	.word	0x431bde83
 8002ccc:	2000965c 	.word	0x2000965c
 8002cd0:	40010000 	.word	0x40010000

08002cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <NMI_Handler+0x4>

08002cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cde:	e7fe      	b.n	8002cde <HardFault_Handler+0x4>

08002ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <MemManage_Handler+0x4>

08002ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cea:	e7fe      	b.n	8002cea <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002d04:	2004      	movs	r0, #4
 8002d06:	f001 fa53 	bl	80041b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <DMA1_Stream0_IRQHandler+0x10>)
 8002d16:	f000 fde9 	bl	80038ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200094a8 	.word	0x200094a8

08002d24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002d28:	4802      	ldr	r0, [pc, #8]	; (8002d34 <DMA1_Stream6_IRQHandler+0x10>)
 8002d2a:	f000 fddf 	bl	80038ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20008e64 	.word	0x20008e64

08002d38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d3c:	4802      	ldr	r0, [pc, #8]	; (8002d48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d3e:	f006 fa61 	bl	8009204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	2000965c 	.word	0x2000965c

08002d4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d50:	4802      	ldr	r0, [pc, #8]	; (8002d5c <I2C1_EV_IRQHandler+0x10>)
 8002d52:	f001 fe65 	bl	8004a20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20008ec4 	.word	0x20008ec4

08002d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <_sbrk+0x5c>)
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <_sbrk+0x60>)
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <_sbrk+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_sbrk+0x64>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <_sbrk+0x68>)
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <_sbrk+0x64>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d207      	bcs.n	8002da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d90:	f00b feac 	bl	800eaec <__errno>
 8002d94:	4603      	mov	r3, r0
 8002d96:	220c      	movs	r2, #12
 8002d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	e009      	b.n	8002db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <_sbrk+0x64>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <_sbrk+0x64>)
 8002db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20030000 	.word	0x20030000
 8002dc0:	00000400 	.word	0x00000400
 8002dc4:	20000098 	.word	0x20000098
 8002dc8:	20009b68 	.word	0x20009b68

08002dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <SystemInit+0x20>)
 8002dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <SystemInit+0x20>)
 8002dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e28 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002df6:	490e      	ldr	r1, [pc, #56]	; (8002e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002df8:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dfc:	e002      	b.n	8002e04 <LoopCopyDataInit>

08002dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e02:	3304      	adds	r3, #4

08002e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e08:	d3f9      	bcc.n	8002dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0a:	4a0b      	ldr	r2, [pc, #44]	; (8002e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e0c:	4c0b      	ldr	r4, [pc, #44]	; (8002e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e10:	e001      	b.n	8002e16 <LoopFillZerobss>

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e14:	3204      	adds	r2, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e1a:	f7ff ffd7 	bl	8002dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e1e:	f00b fe6b 	bl	800eaf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e22:	f7fe fa85 	bl	8001330 <main>
  bx  lr    
 8002e26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002e34:	0800faf8 	.word	0x0800faf8
  ldr r2, =_sbss
 8002e38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002e3c:	20009b64 	.word	0x20009b64

08002e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e40:	e7fe      	b.n	8002e40 <ADC_IRQHandler>
	...

08002e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e48:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_Init+0x40>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <HAL_Init+0x40>)
 8002e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_Init+0x40>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_Init+0x40>)
 8002e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a07      	ldr	r2, [pc, #28]	; (8002e84 <HAL_Init+0x40>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f000 fb6e 	bl	800354e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7ff fed4 	bl	8002c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e78:	f7ff fa16 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00

08002e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_IncTick+0x20>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x24>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_IncTick+0x24>)
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	200096a4 	.word	0x200096a4

08002eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_GetTick+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	200096a4 	.word	0x200096a4

08002ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff ffee 	bl	8002eb0 <HAL_GetTick>
 8002ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d005      	beq.n	8002eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_Delay+0x44>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eee:	bf00      	nop
 8002ef0:	f7ff ffde 	bl	8002eb0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d8f7      	bhi.n	8002ef0 <HAL_Delay+0x28>
  {
  }
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000008 	.word	0x20000008

08002f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e033      	b.n	8002f8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff f9e6 	bl	8002300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f56:	f023 0302 	bic.w	r3, r3, #2
 8002f5a:	f043 0202 	orr.w	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f94a 	bl	80031fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f7e:	e001      	b.n	8002f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x1c>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e113      	b.n	80031dc <HAL_ADC_ConfigChannel+0x244>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b09      	cmp	r3, #9
 8002fc2:	d925      	bls.n	8003010 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b1e      	subs	r3, #30
 8002fda:	2207      	movs	r2, #7
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68d9      	ldr	r1, [r3, #12]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4403      	add	r3, r0
 8003002:	3b1e      	subs	r3, #30
 8003004:	409a      	lsls	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	e022      	b.n	8003056 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6919      	ldr	r1, [r3, #16]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	b29b      	uxth	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	2207      	movs	r2, #7
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	400a      	ands	r2, r1
 8003032:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	4618      	mov	r0, r3
 8003046:	4603      	mov	r3, r0
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4403      	add	r3, r0
 800304c:	409a      	lsls	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b06      	cmp	r3, #6
 800305c:	d824      	bhi.n	80030a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	3b05      	subs	r3, #5
 8003070:	221f      	movs	r2, #31
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	400a      	ands	r2, r1
 800307e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	3b05      	subs	r3, #5
 800309a:	fa00 f203 	lsl.w	r2, r0, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34
 80030a6:	e04c      	b.n	8003142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	d824      	bhi.n	80030fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	3b23      	subs	r3, #35	; 0x23
 80030c2:	221f      	movs	r2, #31
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43da      	mvns	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	400a      	ands	r2, r1
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	3b23      	subs	r3, #35	; 0x23
 80030ec:	fa00 f203 	lsl.w	r2, r0, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
 80030f8:	e023      	b.n	8003142 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	3b41      	subs	r3, #65	; 0x41
 800310c:	221f      	movs	r2, #31
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	400a      	ands	r2, r1
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	4618      	mov	r0, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	3b41      	subs	r3, #65	; 0x41
 8003136:	fa00 f203 	lsl.w	r2, r0, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003142:	4b29      	ldr	r3, [pc, #164]	; (80031e8 <HAL_ADC_ConfigChannel+0x250>)
 8003144:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a28      	ldr	r2, [pc, #160]	; (80031ec <HAL_ADC_ConfigChannel+0x254>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10f      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x1d8>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b12      	cmp	r3, #18
 8003156:	d10b      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <HAL_ADC_ConfigChannel+0x254>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d12b      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x23a>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <HAL_ADC_ConfigChannel+0x258>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <HAL_ADC_ConfigChannel+0x1f4>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b11      	cmp	r3, #17
 800318a:	d122      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <HAL_ADC_ConfigChannel+0x258>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d111      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <HAL_ADC_ConfigChannel+0x25c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a11      	ldr	r2, [pc, #68]	; (80031f8 <HAL_ADC_ConfigChannel+0x260>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	0c9a      	lsrs	r2, r3, #18
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40012300 	.word	0x40012300
 80031ec:	40012000 	.word	0x40012000
 80031f0:	10000012 	.word	0x10000012
 80031f4:	20000000 	.word	0x20000000
 80031f8:	431bde83 	.word	0x431bde83

080031fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003204:	4b79      	ldr	r3, [pc, #484]	; (80033ec <ADC_Init+0x1f0>)
 8003206:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003230:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	021a      	lsls	r2, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003254:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003276:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6899      	ldr	r1, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	4a58      	ldr	r2, [pc, #352]	; (80033f0 <ADC_Init+0x1f4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d022      	beq.n	80032da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e00f      	b.n	80032fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0202 	bic.w	r2, r2, #2
 8003308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6899      	ldr	r1, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7e1b      	ldrb	r3, [r3, #24]
 8003314:	005a      	lsls	r2, r3, #1
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003336:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003346:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	3b01      	subs	r3, #1
 8003354:	035a      	lsls	r2, r3, #13
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	e007      	b.n	8003370 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	3b01      	subs	r3, #1
 800338c:	051a      	lsls	r2, r3, #20
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6899      	ldr	r1, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033b2:	025a      	lsls	r2, r3, #9
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	029a      	lsls	r2, r3, #10
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40012300 	.word	0x40012300
 80033f0:	0f000001 	.word	0x0f000001

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003426:	4a04      	ldr	r2, [pc, #16]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60d3      	str	r3, [r2, #12]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ff4c 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003576:	f7ff ff61 	bl	800343c <__NVIC_GetPriorityGrouping>
 800357a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	6978      	ldr	r0, [r7, #20]
 8003582:	f7ff ffb1 	bl	80034e8 <NVIC_EncodePriority>
 8003586:	4602      	mov	r2, r0
 8003588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff80 	bl	8003494 <__NVIC_SetPriority>
}
 8003594:	bf00      	nop
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff54 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e014      	b.n	80035f4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	791b      	ldrb	r3, [r3, #4]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe ff0c 	bl	80023f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	795b      	ldrb	r3, [r3, #5]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_DAC_ConfigChannel+0x18>
 8003610:	2302      	movs	r3, #2
 8003612:	e03c      	b.n	800368e <HAL_DAC_ConfigChannel+0x92>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4013      	ands	r3, r2
 800363c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	22c0      	movs	r2, #192	; 0xc0
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	400a      	ands	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036a8:	f7ff fc02 	bl	8002eb0 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e099      	b.n	80037ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d8:	e00f      	b.n	80036fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036da:	f7ff fbe9 	bl	8002eb0 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b05      	cmp	r3, #5
 80036e6:	d908      	bls.n	80036fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2203      	movs	r2, #3
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e078      	b.n	80037ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e8      	bne.n	80036da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <HAL_DMA_Init+0x158>)
 8003714:	4013      	ands	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003726:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b04      	cmp	r3, #4
 8003752:	d107      	bne.n	8003764 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	4313      	orrs	r3, r2
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0307 	bic.w	r3, r3, #7
 800377a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b04      	cmp	r3, #4
 800378c:	d117      	bne.n	80037be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 faab 	bl	8003cfc <DMA_CheckFifoParam>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037ba:	2301      	movs	r3, #1
 80037bc:	e016      	b.n	80037ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa62 	bl	8003c90 <DMA_CalcBaseAndBitshift>
 80037cc:	4603      	mov	r3, r0
 80037ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	223f      	movs	r2, #63	; 0x3f
 80037d6:	409a      	lsls	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	f010803f 	.word	0xf010803f

080037f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_DMA_Start_IT+0x26>
 800381a:	2302      	movs	r3, #2
 800381c:	e040      	b.n	80038a0 <HAL_DMA_Start_IT+0xa8>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d12f      	bne.n	8003892 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f9f4 	bl	8003c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	223f      	movs	r2, #63	; 0x3f
 8003852:	409a      	lsls	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0216 	orr.w	r2, r2, #22
 8003866:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e005      	b.n	800389e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800389a:	2302      	movs	r3, #2
 800389c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d004      	beq.n	80038c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00c      	b.n	80038e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2205      	movs	r2, #5
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038f8:	4b92      	ldr	r3, [pc, #584]	; (8003b44 <HAL_DMA_IRQHandler+0x258>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a92      	ldr	r2, [pc, #584]	; (8003b48 <HAL_DMA_IRQHandler+0x25c>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	0a9b      	lsrs	r3, r3, #10
 8003904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003916:	2208      	movs	r2, #8
 8003918:	409a      	lsls	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01a      	beq.n	8003958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d013      	beq.n	8003958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	2208      	movs	r2, #8
 8003946:	409a      	lsls	r2, r3
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	f043 0201 	orr.w	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	2201      	movs	r2, #1
 800395e:	409a      	lsls	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d012      	beq.n	800398e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	2201      	movs	r2, #1
 800397c:	409a      	lsls	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f043 0202 	orr.w	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	2204      	movs	r2, #4
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00b      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2204      	movs	r2, #4
 80039b2:	409a      	lsls	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	2210      	movs	r2, #16
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d043      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d03c      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2210      	movs	r2, #16
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d018      	beq.n	8003a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d024      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
 8003a1a:	e01f      	b.n	8003a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01b      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
 8003a2c:	e016      	b.n	8003a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d107      	bne.n	8003a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0208 	bic.w	r2, r2, #8
 8003a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	2220      	movs	r2, #32
 8003a62:	409a      	lsls	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 808e 	beq.w	8003b8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8086 	beq.w	8003b8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2220      	movs	r2, #32
 8003a84:	409a      	lsls	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b05      	cmp	r3, #5
 8003a94:	d136      	bne.n	8003b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0216 	bic.w	r2, r2, #22
 8003aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <HAL_DMA_IRQHandler+0x1da>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0208 	bic.w	r2, r2, #8
 8003ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	223f      	movs	r2, #63	; 0x3f
 8003adc:	409a      	lsls	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d07d      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
        }
        return;
 8003b02:	e078      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01c      	beq.n	8003b4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d108      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d030      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	4798      	blx	r3
 8003b30:	e02b      	b.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d027      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
 8003b42:	e022      	b.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
 8003b44:	20000000 	.word	0x20000000
 8003b48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10f      	bne.n	8003b7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0210 	bic.w	r2, r2, #16
 8003b68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d032      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d022      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2205      	movs	r2, #5
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d307      	bcc.n	8003bd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f2      	bne.n	8003bb6 <HAL_DMA_IRQHandler+0x2ca>
 8003bd0:	e000      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003bd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
 8003bf4:	e000      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bf6:	bf00      	nop
    }
  }
}
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop

08003c00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c0e:	b2db      	uxtb	r3, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d108      	bne.n	8003c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c72:	e007      	b.n	8003c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	3b10      	subs	r3, #16
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d909      	bls.n	8003cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	659a      	str	r2, [r3, #88]	; 0x58
 8003cd0:	e007      	b.n	8003ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	aaaaaaab 	.word	0xaaaaaaab
 8003cf8:	0800fa98 	.word	0x0800fa98

08003cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11f      	bne.n	8003d56 <DMA_CheckFifoParam+0x5a>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d856      	bhi.n	8003dca <DMA_CheckFifoParam+0xce>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <DMA_CheckFifoParam+0x28>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d47 	.word	0x08003d47
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003dcb 	.word	0x08003dcb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d046      	beq.n	8003dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d44:	e043      	b.n	8003dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d4e:	d140      	bne.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d54:	e03d      	b.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	d121      	bne.n	8003da4 <DMA_CheckFifoParam+0xa8>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d837      	bhi.n	8003dd6 <DMA_CheckFifoParam+0xda>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <DMA_CheckFifoParam+0x70>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d83 	.word	0x08003d83
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003d95 	.word	0x08003d95
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e030      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d025      	beq.n	8003dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e022      	b.n	8003dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9c:	d11f      	bne.n	8003dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003da2:	e01c      	b.n	8003dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d903      	bls.n	8003db2 <DMA_CheckFifoParam+0xb6>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d003      	beq.n	8003db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db0:	e018      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      break;
 8003db6:	e015      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e00b      	b.n	8003de2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e00a      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e008      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e006      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003de2:	bf00      	nop
    }
  } 
  
  return status; 
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e177      	b.n	8004100 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e10:	2201      	movs	r2, #1
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	f040 8166 	bne.w	80040fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d005      	beq.n	8003e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d130      	bne.n	8003ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	2203      	movs	r2, #3
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 0201 	and.w	r2, r3, #1
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d017      	beq.n	8003ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d123      	bne.n	8003f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	08da      	lsrs	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3208      	adds	r2, #8
 8003ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	220f      	movs	r2, #15
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	08da      	lsrs	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3208      	adds	r2, #8
 8003f32:	69b9      	ldr	r1, [r7, #24]
 8003f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2203      	movs	r2, #3
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0203 	and.w	r2, r3, #3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80c0 	beq.w	80040fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b66      	ldr	r3, [pc, #408]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f96:	4a61      	ldr	r2, [pc, #388]	; (800411c <HAL_GPIO_Init+0x328>)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	220f      	movs	r2, #15
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a58      	ldr	r2, [pc, #352]	; (8004120 <HAL_GPIO_Init+0x32c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d037      	beq.n	8004032 <HAL_GPIO_Init+0x23e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_GPIO_Init+0x330>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_GPIO_Init+0x23a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a56      	ldr	r2, [pc, #344]	; (8004128 <HAL_GPIO_Init+0x334>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02b      	beq.n	800402a <HAL_GPIO_Init+0x236>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a55      	ldr	r2, [pc, #340]	; (800412c <HAL_GPIO_Init+0x338>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d025      	beq.n	8004026 <HAL_GPIO_Init+0x232>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a54      	ldr	r2, [pc, #336]	; (8004130 <HAL_GPIO_Init+0x33c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01f      	beq.n	8004022 <HAL_GPIO_Init+0x22e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a53      	ldr	r2, [pc, #332]	; (8004134 <HAL_GPIO_Init+0x340>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d019      	beq.n	800401e <HAL_GPIO_Init+0x22a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_GPIO_Init+0x344>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_GPIO_Init+0x226>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a51      	ldr	r2, [pc, #324]	; (800413c <HAL_GPIO_Init+0x348>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00d      	beq.n	8004016 <HAL_GPIO_Init+0x222>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a50      	ldr	r2, [pc, #320]	; (8004140 <HAL_GPIO_Init+0x34c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d007      	beq.n	8004012 <HAL_GPIO_Init+0x21e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4f      	ldr	r2, [pc, #316]	; (8004144 <HAL_GPIO_Init+0x350>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <HAL_GPIO_Init+0x21a>
 800400a:	2309      	movs	r3, #9
 800400c:	e012      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800400e:	230a      	movs	r3, #10
 8004010:	e010      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004012:	2308      	movs	r3, #8
 8004014:	e00e      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004016:	2307      	movs	r3, #7
 8004018:	e00c      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800401a:	2306      	movs	r3, #6
 800401c:	e00a      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800401e:	2305      	movs	r3, #5
 8004020:	e008      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004022:	2304      	movs	r3, #4
 8004024:	e006      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004026:	2303      	movs	r3, #3
 8004028:	e004      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800402a:	2302      	movs	r3, #2
 800402c:	e002      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004032:	2300      	movs	r3, #0
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	f002 0203 	and.w	r2, r2, #3
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	4093      	lsls	r3, r2
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004044:	4935      	ldr	r1, [pc, #212]	; (800411c <HAL_GPIO_Init+0x328>)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	3302      	adds	r3, #2
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_GPIO_Init+0x354>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004076:	4a34      	ldr	r2, [pc, #208]	; (8004148 <HAL_GPIO_Init+0x354>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_GPIO_Init+0x354>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040a0:	4a29      	ldr	r2, [pc, #164]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040a6:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ca:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040d0:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040f4:	4a14      	ldr	r2, [pc, #80]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	f67f ae84 	bls.w	8003e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	40013800 	.word	0x40013800
 8004120:	40020000 	.word	0x40020000
 8004124:	40020400 	.word	0x40020400
 8004128:	40020800 	.word	0x40020800
 800412c:	40020c00 	.word	0x40020c00
 8004130:	40021000 	.word	0x40021000
 8004134:	40021400 	.word	0x40021400
 8004138:	40021800 	.word	0x40021800
 800413c:	40021c00 	.word	0x40021c00
 8004140:	40022000 	.word	0x40022000
 8004144:	40022400 	.word	0x40022400
 8004148:	40013c00 	.word	0x40013c00

0800414c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e001      	b.n	800416e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004198:	e003      	b.n	80041a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	041a      	lsls	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	619a      	str	r2, [r3, #24]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
	...

080041b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d006      	beq.n	80041d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041c6:	4a05      	ldr	r2, [pc, #20]	; (80041dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd ff6a 	bl	80020a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80041d4:	bf00      	nop
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40013c00 	.word	0x40013c00

080041e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e12b      	b.n	800444a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe f93a 	bl	8002480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2224      	movs	r2, #36	; 0x24
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0201 	bic.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004244:	f003 fbaa 	bl	800799c <HAL_RCC_GetPCLK1Freq>
 8004248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4a81      	ldr	r2, [pc, #516]	; (8004454 <HAL_I2C_Init+0x274>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d807      	bhi.n	8004264 <HAL_I2C_Init+0x84>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4a80      	ldr	r2, [pc, #512]	; (8004458 <HAL_I2C_Init+0x278>)
 8004258:	4293      	cmp	r3, r2
 800425a:	bf94      	ite	ls
 800425c:	2301      	movls	r3, #1
 800425e:	2300      	movhi	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e006      	b.n	8004272 <HAL_I2C_Init+0x92>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a7d      	ldr	r2, [pc, #500]	; (800445c <HAL_I2C_Init+0x27c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	bf94      	ite	ls
 800426c:	2301      	movls	r3, #1
 800426e:	2300      	movhi	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0e7      	b.n	800444a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a78      	ldr	r2, [pc, #480]	; (8004460 <HAL_I2C_Init+0x280>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0c9b      	lsrs	r3, r3, #18
 8004284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a6a      	ldr	r2, [pc, #424]	; (8004454 <HAL_I2C_Init+0x274>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d802      	bhi.n	80042b4 <HAL_I2C_Init+0xd4>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3301      	adds	r3, #1
 80042b2:	e009      	b.n	80042c8 <HAL_I2C_Init+0xe8>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	4a69      	ldr	r2, [pc, #420]	; (8004464 <HAL_I2C_Init+0x284>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	3301      	adds	r3, #1
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	495c      	ldr	r1, [pc, #368]	; (8004454 <HAL_I2C_Init+0x274>)
 80042e4:	428b      	cmp	r3, r1
 80042e6:	d819      	bhi.n	800431c <HAL_I2C_Init+0x13c>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1e59      	subs	r1, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80042f6:	1c59      	adds	r1, r3, #1
 80042f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042fc:	400b      	ands	r3, r1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_I2C_Init+0x138>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1e59      	subs	r1, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004310:	3301      	adds	r3, #1
 8004312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004316:	e051      	b.n	80043bc <HAL_I2C_Init+0x1dc>
 8004318:	2304      	movs	r3, #4
 800431a:	e04f      	b.n	80043bc <HAL_I2C_Init+0x1dc>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d111      	bne.n	8004348 <HAL_I2C_Init+0x168>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1e58      	subs	r0, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	440b      	add	r3, r1
 8004332:	fbb0 f3f3 	udiv	r3, r0, r3
 8004336:	3301      	adds	r3, #1
 8004338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e012      	b.n	800436e <HAL_I2C_Init+0x18e>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e58      	subs	r0, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6859      	ldr	r1, [r3, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	0099      	lsls	r1, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	fbb0 f3f3 	udiv	r3, r0, r3
 800435e:	3301      	adds	r3, #1
 8004360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Init+0x196>
 8004372:	2301      	movs	r3, #1
 8004374:	e022      	b.n	80043bc <HAL_I2C_Init+0x1dc>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10e      	bne.n	800439c <HAL_I2C_Init+0x1bc>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1e58      	subs	r0, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6859      	ldr	r1, [r3, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	440b      	add	r3, r1
 800438c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439a:	e00f      	b.n	80043bc <HAL_I2C_Init+0x1dc>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1e58      	subs	r0, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	0099      	lsls	r1, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	6809      	ldr	r1, [r1, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6911      	ldr	r1, [r2, #16]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68d2      	ldr	r2, [r2, #12]
 80043f6:	4311      	orrs	r1, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	000186a0 	.word	0x000186a0
 8004458:	001e847f 	.word	0x001e847f
 800445c:	003d08ff 	.word	0x003d08ff
 8004460:	431bde83 	.word	0x431bde83
 8004464:	10624dd3 	.word	0x10624dd3

08004468 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004486:	f7fe fd13 	bl	8002eb0 <HAL_GetTick>
 800448a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b20      	cmp	r3, #32
 8004496:	f040 812e 	bne.w	80046f6 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800449a:	4b99      	ldr	r3, [pc, #612]	; (8004700 <HAL_I2C_Mem_Write_DMA+0x298>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	08db      	lsrs	r3, r3, #3
 80044a0:	4a98      	ldr	r2, [pc, #608]	; (8004704 <HAL_I2C_Mem_Write_DMA+0x29c>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	0a1a      	lsrs	r2, r3, #8
 80044a8:	4613      	mov	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	009a      	lsls	r2, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d116      	bne.n	80044ee <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e104      	b.n	80046f8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d0db      	beq.n	80044b4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <HAL_I2C_Mem_Write_DMA+0xa2>
 8004506:	2302      	movs	r3, #2
 8004508:	e0f6      	b.n	80046f8 <HAL_I2C_Mem_Write_DMA+0x290>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d007      	beq.n	8004530 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2221      	movs	r2, #33	; 0x21
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a66      	ldr	r2, [pc, #408]	; (8004708 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8004570:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80a9 	beq.w	80046ce <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02a      	beq.n	80045da <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	4a60      	ldr	r2, [pc, #384]	; (800470c <HAL_I2C_Mem_Write_DMA+0x2a4>)
 800458a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	4a5f      	ldr	r2, [pc, #380]	; (8004710 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004592:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004598:	2200      	movs	r2, #0
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	2200      	movs	r2, #0
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	2200      	movs	r2, #0
 80045aa:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	2200      	movs	r2, #0
 80045b2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	4619      	mov	r1, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3310      	adds	r3, #16
 80045c4:	461a      	mov	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	f7ff f915 	bl	80037f8 <HAL_DMA_Start_IT>
 80045ce:	4603      	mov	r3, r0
 80045d0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80045d2:	7efb      	ldrb	r3, [r7, #27]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d166      	bne.n	80046a6 <HAL_I2C_Mem_Write_DMA+0x23e>
 80045d8:	e013      	b.n	8004602 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e07a      	b.n	80046f8 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004602:	88f8      	ldrh	r0, [r7, #6]
 8004604:	893a      	ldrh	r2, [r7, #8]
 8004606:	8979      	ldrh	r1, [r7, #10]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	2323      	movs	r3, #35	; 0x23
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	4603      	mov	r3, r0
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f001 fc98 	bl	8005f48 <I2C_RequestMemoryWrite>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d022      	beq.n	8004664 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff f940 	bl	80038a8 <HAL_DMA_Abort_IT>
 8004628:	4603      	mov	r3, r0
 800462a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	2200      	movs	r2, #0
 8004632:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004642:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e049      	b.n	80046f8 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004690:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a0:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e028      	b.n	80046f8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f043 0210 	orr.w	r2, r3, #16
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e014      	b.n	80046f8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3720      	adds	r7, #32
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000000 	.word	0x20000000
 8004704:	14f8b589 	.word	0x14f8b589
 8004708:	ffff0000 	.word	0xffff0000
 800470c:	08006245 	.word	0x08006245
 8004710:	080063ef 	.word	0x080063ef

08004714 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	; 0x30
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	4603      	mov	r3, r0
 8004724:	817b      	strh	r3, [r7, #10]
 8004726:	460b      	mov	r3, r1
 8004728:	813b      	strh	r3, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800472e:	f7fe fbbf 	bl	8002eb0 <HAL_GetTick>
 8004732:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b20      	cmp	r3, #32
 8004742:	f040 8168 	bne.w	8004a16 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004746:	4b98      	ldr	r3, [pc, #608]	; (80049a8 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	08db      	lsrs	r3, r3, #3
 800474c:	4a97      	ldr	r2, [pc, #604]	; (80049ac <HAL_I2C_Mem_Read_DMA+0x298>)
 800474e:	fba2 2303 	umull	r2, r3, r2, r3
 8004752:	0a1a      	lsrs	r2, r3, #8
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009a      	lsls	r2, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3b01      	subs	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d116      	bne.n	800479a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0220 	orr.w	r2, r3, #32
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e13e      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d0db      	beq.n	8004760 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_I2C_Mem_Read_DMA+0xa2>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e130      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x304>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d007      	beq.n	80047dc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2222      	movs	r2, #34	; 0x22
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800480c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a65      	ldr	r2, [pc, #404]	; (80049b0 <HAL_I2C_Mem_Read_DMA+0x29c>)
 800481c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80ca 	beq.w	80049bc <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02c      	beq.n	800488a <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	4a5f      	ldr	r2, [pc, #380]	; (80049b4 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8004836:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	4a5e      	ldr	r2, [pc, #376]	; (80049b8 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 800483e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	2200      	movs	r2, #0
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	2200      	movs	r2, #0
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	2200      	movs	r2, #0
 8004856:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	2200      	movs	r2, #0
 800485e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3310      	adds	r3, #16
 800486a:	4619      	mov	r1, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	461a      	mov	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	f7fe ffbf 	bl	80037f8 <HAL_DMA_Start_IT>
 800487a:	4603      	mov	r3, r0
 800487c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004884:	2b00      	cmp	r3, #0
 8004886:	d17b      	bne.n	8004980 <HAL_I2C_Mem_Read_DMA+0x26c>
 8004888:	e013      	b.n	80048b2 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0b2      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80048b2:	88f8      	ldrh	r0, [r7, #6]
 80048b4:	893a      	ldrh	r2, [r7, #8]
 80048b6:	8979      	ldrh	r1, [r7, #10]
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	2323      	movs	r3, #35	; 0x23
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4603      	mov	r3, r0
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f001 fbd6 	bl	8006074 <I2C_RequestMemoryRead>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d023      	beq.n	8004916 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe ffe8 	bl	80038a8 <HAL_DMA_Abort_IT>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	2200      	movs	r2, #0
 80048e4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f4:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e080      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	2b01      	cmp	r3, #1
 800491c:	d108      	bne.n	8004930 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e007      	b.n	8004940 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800493e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	e048      	b.n	8004a12 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f043 0210 	orr.w	r2, r3, #16
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e037      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x304>
 80049a8:	20000000 	.word	0x20000000
 80049ac:	14f8b589 	.word	0x14f8b589
 80049b0:	ffff0000 	.word	0xffff0000
 80049b4:	08006245 	.word	0x08006245
 80049b8:	080063ef 	.word	0x080063ef
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80049bc:	88f8      	ldrh	r0, [r7, #6]
 80049be:	893a      	ldrh	r2, [r7, #8]
 80049c0:	8979      	ldrh	r1, [r7, #10]
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	2323      	movs	r3, #35	; 0x23
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4603      	mov	r3, r0
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f001 fb51 	bl	8006074 <I2C_RequestMemoryRead>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e01d      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d003      	beq.n	8004a58 <HAL_I2C_EV_IRQHandler+0x38>
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	f040 80bd 	bne.w	8004bd2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_I2C_EV_IRQHandler+0x6e>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a78:	d003      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x62>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a80:	d101      	bne.n	8004a86 <HAL_I2C_EV_IRQHandler+0x66>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <HAL_I2C_EV_IRQHandler+0x68>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	f000 812e 	beq.w	8004cea <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x92>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	0a5b      	lsrs	r3, r3, #9
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d006      	beq.n	8004ab2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f001 ff00 	bl	80068aa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fca7 	bl	80053fe <I2C_Master_SB>
 8004ab0:	e08e      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	08db      	lsrs	r3, r3, #3
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d009      	beq.n	8004ad2 <HAL_I2C_EV_IRQHandler+0xb2>
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	0a5b      	lsrs	r3, r3, #9
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fd1d 	bl	800550a <I2C_Master_ADD10>
 8004ad0:	e07e      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_I2C_EV_IRQHandler+0xd2>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	0a5b      	lsrs	r3, r3, #9
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fd37 	bl	800555e <I2C_Master_ADDR>
 8004af0:	e06e      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	089b      	lsrs	r3, r3, #2
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d037      	beq.n	8004b6e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0c:	f000 80ef 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	09db      	lsrs	r3, r3, #7
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00f      	beq.n	8004b3c <HAL_I2C_EV_IRQHandler+0x11c>
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	0a9b      	lsrs	r3, r3, #10
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <HAL_I2C_EV_IRQHandler+0x11c>
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f934 	bl	8004da2 <I2C_MasterTransmit_TXE>
 8004b3a:	e049      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80d2 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	0a5b      	lsrs	r3, r3, #9
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 80cb 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d103      	bne.n	8004b66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9bb 	bl	8004eda <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b64:	e0c3      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa1f 	bl	8004faa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b6c:	e0bf      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7c:	f000 80b7 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00f      	beq.n	8004bac <HAL_I2C_EV_IRQHandler+0x18c>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	0a9b      	lsrs	r3, r3, #10
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <HAL_I2C_EV_IRQHandler+0x18c>
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d103      	bne.n	8004bac <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fa8f 	bl	80050c8 <I2C_MasterReceive_RXNE>
 8004baa:	e011      	b.n	8004bd0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 809a 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	0a5b      	lsrs	r3, r3, #9
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8093 	beq.w	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fb2e 	bl	800522a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bce:	e08e      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
 8004bd0:	e08d      	b.n	8004cee <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e007      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d012      	beq.n	8004c26 <HAL_I2C_EV_IRQHandler+0x206>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0a5b      	lsrs	r3, r3, #9
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 feec 	bl	80059fc <I2C_Slave_ADDR>
 8004c24:	e066      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_I2C_EV_IRQHandler+0x226>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	0a5b      	lsrs	r3, r3, #9
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 ff20 	bl	8005a84 <I2C_Slave_STOPF>
 8004c44:	e056      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c46:	7bbb      	ldrb	r3, [r7, #14]
 8004c48:	2b21      	cmp	r3, #33	; 0x21
 8004c4a:	d002      	beq.n	8004c52 <HAL_I2C_EV_IRQHandler+0x232>
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	2b29      	cmp	r3, #41	; 0x29
 8004c50:	d125      	bne.n	8004c9e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	09db      	lsrs	r3, r3, #7
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00f      	beq.n	8004c7e <HAL_I2C_EV_IRQHandler+0x25e>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	0a9b      	lsrs	r3, r3, #10
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <HAL_I2C_EV_IRQHandler+0x25e>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fe02 	bl	8005880 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c7c:	e039      	b.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d033      	beq.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x2d2>
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	0a5b      	lsrs	r3, r3, #9
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d02d      	beq.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fe2f 	bl	80058fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c9c:	e029      	b.n	8004cf2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00f      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x2aa>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	0a9b      	lsrs	r3, r3, #10
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d009      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x2aa>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d103      	bne.n	8004cca <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fe3a 	bl	800593c <I2C_SlaveReceive_RXNE>
 8004cc8:	e014      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	0a5b      	lsrs	r3, r3, #9
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fe68 	bl	80059b8 <I2C_SlaveReceive_BTF>
 8004ce8:	e004      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004cea:	bf00      	nop
 8004cec:	e002      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cee:	bf00      	nop
 8004cf0:	e000      	b.n	8004cf4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cf2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004cf4:	3720      	adds	r7, #32
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	70fb      	strb	r3, [r7, #3]
 8004d56:	4613      	mov	r3, r2
 8004d58:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d150      	bne.n	8004e6a <I2C_MasterTransmit_TXE+0xc8>
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b21      	cmp	r3, #33	; 0x21
 8004dcc:	d14d      	bne.n	8004e6a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d01d      	beq.n	8004e10 <I2C_MasterTransmit_TXE+0x6e>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d01a      	beq.n	8004e10 <I2C_MasterTransmit_TXE+0x6e>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004de0:	d016      	beq.n	8004e10 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004df0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2211      	movs	r2, #17
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff ff76 	bl	8004cfa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e0e:	e060      	b.n	8004ed2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e1e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d107      	bne.n	8004e5a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd f8dc 	bl	8002010 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e58:	e03b      	b.n	8004ed2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ff49 	bl	8004cfa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e68:	e033      	b.n	8004ed2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b21      	cmp	r3, #33	; 0x21
 8004e6e:	d005      	beq.n	8004e7c <I2C_MasterTransmit_TXE+0xda>
 8004e70:	7bbb      	ldrb	r3, [r7, #14]
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d12d      	bne.n	8004ed2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	2b22      	cmp	r3, #34	; 0x22
 8004e7a:	d12a      	bne.n	8004ed2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d108      	bne.n	8004e98 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e94:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e96:	e01c      	b.n	8004ed2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d103      	bne.n	8004eac <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f880 	bl	8004faa <I2C_MemoryTransmit_TXE_BTF>
}
 8004eaa:	e012      	b.n	8004ed2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ed0:	e7ff      	b.n	8004ed2 <I2C_MasterTransmit_TXE+0x130>
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b21      	cmp	r3, #33	; 0x21
 8004ef2:	d156      	bne.n	8004fa2 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d012      	beq.n	8004f24 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f22:	e03e      	b.n	8004fa2 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d01d      	beq.n	8004f66 <I2C_MasterTransmit_BTF+0x8c>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d01a      	beq.n	8004f66 <I2C_MasterTransmit_BTF+0x8c>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f36:	d016      	beq.n	8004f66 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f46:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2211      	movs	r2, #17
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fecb 	bl	8004cfa <HAL_I2C_MasterTxCpltCallback>
}
 8004f64:	e01d      	b.n	8004fa2 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f74:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff feac 	bl	8004cfa <HAL_I2C_MasterTxCpltCallback>
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11d      	bne.n	8004ffe <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10b      	bne.n	8004fe2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fda:	1c9a      	adds	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004fe0:	e06e      	b.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	121b      	asrs	r3, r3, #8
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ffc:	e060      	b.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005002:	2b01      	cmp	r3, #1
 8005004:	d10b      	bne.n	800501e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500a:	b2da      	uxtb	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800501c:	e050      	b.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005022:	2b02      	cmp	r3, #2
 8005024:	d14c      	bne.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b22      	cmp	r3, #34	; 0x22
 800502a:	d108      	bne.n	800503e <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503a:	601a      	str	r2, [r3, #0]
}
 800503c:	e040      	b.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d015      	beq.n	8005074 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b21      	cmp	r3, #33	; 0x21
 800504c:	d112      	bne.n	8005074 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005072:	e025      	b.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d120      	bne.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0x116>
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	2b21      	cmp	r3, #33	; 0x21
 8005082:	d11d      	bne.n	80050c0 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005092:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fc ffa8 	bl	8002010 <HAL_I2C_MemTxCpltCallback>
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b22      	cmp	r3, #34	; 0x22
 80050da:	f040 80a2 	bne.w	8005222 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d921      	bls.n	8005130 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b03      	cmp	r3, #3
 800511a:	f040 8082 	bne.w	8005222 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800512c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800512e:	e078      	b.n	8005222 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2b02      	cmp	r3, #2
 8005136:	d074      	beq.n	8005222 <I2C_MasterReceive_RXNE+0x15a>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d002      	beq.n	8005144 <I2C_MasterReceive_RXNE+0x7c>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d16e      	bne.n	8005222 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f001 fb4f 	bl	80067e8 <I2C_WaitOnSTOPRequestThroughIT>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d142      	bne.n	80051d6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800516e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d10a      	bne.n	80051c0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fc ff4f 	bl	800205c <HAL_I2C_MemRxCpltCallback>
}
 80051be:	e030      	b.n	8005222 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2212      	movs	r2, #18
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff fd9d 	bl	8004d0e <HAL_I2C_MasterRxCpltCallback>
}
 80051d4:	e025      	b.n	8005222 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fdac 	bl	8004d7a <HAL_I2C_ErrorCallback>
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b04      	cmp	r3, #4
 8005240:	d11b      	bne.n	800527a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005250:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005278:	e0bd      	b.n	80053f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b03      	cmp	r3, #3
 8005282:	d129      	bne.n	80052d8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005292:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b04      	cmp	r3, #4
 8005298:	d00a      	beq.n	80052b0 <I2C_MasterReceive_BTF+0x86>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d007      	beq.n	80052b0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052d6:	e08e      	b.n	80053f6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d176      	bne.n	80053d0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d002      	beq.n	80052ee <I2C_MasterReceive_BTF+0xc4>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d108      	bne.n	8005300 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e019      	b.n	8005334 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b04      	cmp	r3, #4
 8005304:	d002      	beq.n	800530c <I2C_MasterReceive_BTF+0xe2>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d108      	bne.n	800531e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e00a      	b.n	8005334 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b10      	cmp	r3, #16
 8005322:	d007      	beq.n	8005334 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005332:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800538e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d10a      	bne.n	80053ba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fc fe52 	bl	800205c <HAL_I2C_MemRxCpltCallback>
}
 80053b8:	e01d      	b.n	80053f6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2212      	movs	r2, #18
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fca0 	bl	8004d0e <HAL_I2C_MasterRxCpltCallback>
}
 80053ce:	e012      	b.n	80053f6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d117      	bne.n	8005442 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800542a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800542c:	e067      	b.n	80054fe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	b2da      	uxtb	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	611a      	str	r2, [r3, #16]
}
 8005440:	e05d      	b.n	80054fe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800544a:	d133      	bne.n	80054b4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b21      	cmp	r3, #33	; 0x21
 8005456:	d109      	bne.n	800546c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	b2db      	uxtb	r3, r3
 800545e:	461a      	mov	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005468:	611a      	str	r2, [r3, #16]
 800546a:	e008      	b.n	800547e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	b2da      	uxtb	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <I2C_Master_SB+0x92>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d108      	bne.n	80054a2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d032      	beq.n	80054fe <I2C_Master_SB+0x100>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d02d      	beq.n	80054fe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b0:	605a      	str	r2, [r3, #4]
}
 80054b2:	e024      	b.n	80054fe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10e      	bne.n	80054da <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	11db      	asrs	r3, r3, #7
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 0306 	and.w	r3, r3, #6
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f063 030f 	orn	r3, r3, #15
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	611a      	str	r2, [r3, #16]
}
 80054d8:	e011      	b.n	80054fe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10d      	bne.n	80054fe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	11db      	asrs	r3, r3, #7
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 0306 	and.w	r3, r3, #6
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f063 030e 	orn	r3, r3, #14
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	611a      	str	r2, [r3, #16]
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	b2da      	uxtb	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <I2C_Master_ADD10+0x26>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <I2C_Master_ADD10+0x48>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005550:	605a      	str	r2, [r3, #4]
  }
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800555e:	b480      	push	{r7}
 8005560:	b091      	sub	sp, #68	; 0x44
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b22      	cmp	r3, #34	; 0x22
 8005586:	f040 8169 	bne.w	800585c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10f      	bne.n	80055b2 <I2C_Master_ADDR+0x54>
 8005592:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d10b      	bne.n	80055b2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559a:	2300      	movs	r3, #0
 800559c:	633b      	str	r3, [r7, #48]	; 0x30
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	633b      	str	r3, [r7, #48]	; 0x30
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	633b      	str	r3, [r7, #48]	; 0x30
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	e160      	b.n	8005874 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d11d      	bne.n	80055f6 <I2C_Master_ADDR+0x98>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055c2:	d118      	bne.n	80055f6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	651a      	str	r2, [r3, #80]	; 0x50
 80055f4:	e13e      	b.n	8005874 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d113      	bne.n	8005628 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005600:	2300      	movs	r3, #0
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e115      	b.n	8005854 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b01      	cmp	r3, #1
 8005630:	f040 808a 	bne.w	8005748 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005636:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800563a:	d137      	bne.n	80056ac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565a:	d113      	bne.n	8005684 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566c:	2300      	movs	r3, #0
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	e0e7      	b.n	8005854 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005684:	2300      	movs	r3, #0
 8005686:	623b      	str	r3, [r7, #32]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	623b      	str	r3, [r7, #32]
 8005698:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e0d3      	b.n	8005854 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d02e      	beq.n	8005710 <I2C_Master_ADDR+0x1b2>
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d02b      	beq.n	8005710 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	2b12      	cmp	r3, #18
 80056bc:	d102      	bne.n	80056c4 <I2C_Master_ADDR+0x166>
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d125      	bne.n	8005710 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d00e      	beq.n	80056e8 <I2C_Master_ADDR+0x18a>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d00b      	beq.n	80056e8 <I2C_Master_ADDR+0x18a>
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d008      	beq.n	80056e8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e007      	b.n	80056f8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056f6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	e0a1      	b.n	8005854 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005720:	2300      	movs	r3, #0
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	e085      	b.n	8005854 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d14d      	bne.n	80057ee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	2b04      	cmp	r3, #4
 8005756:	d016      	beq.n	8005786 <I2C_Master_ADDR+0x228>
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	2b02      	cmp	r3, #2
 800575c:	d013      	beq.n	8005786 <I2C_Master_ADDR+0x228>
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b10      	cmp	r3, #16
 8005762:	d010      	beq.n	8005786 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005772:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	e007      	b.n	8005796 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005794:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a4:	d117      	bne.n	80057d6 <I2C_Master_ADDR+0x278>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057ac:	d00b      	beq.n	80057c6 <I2C_Master_ADDR+0x268>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d008      	beq.n	80057c6 <I2C_Master_ADDR+0x268>
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d005      	beq.n	80057c6 <I2C_Master_ADDR+0x268>
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d002      	beq.n	80057c6 <I2C_Master_ADDR+0x268>
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d107      	bne.n	80057d6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	e032      	b.n	8005854 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057fc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580c:	d117      	bne.n	800583e <I2C_Master_ADDR+0x2e0>
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005814:	d00b      	beq.n	800582e <I2C_Master_ADDR+0x2d0>
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	2b01      	cmp	r3, #1
 800581a:	d008      	beq.n	800582e <I2C_Master_ADDR+0x2d0>
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	2b08      	cmp	r3, #8
 8005820:	d005      	beq.n	800582e <I2C_Master_ADDR+0x2d0>
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	2b10      	cmp	r3, #16
 8005826:	d002      	beq.n	800582e <I2C_Master_ADDR+0x2d0>
 8005828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582a:	2b20      	cmp	r3, #32
 800582c:	d107      	bne.n	800583e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800583c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	613b      	str	r3, [r7, #16]
 8005852:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800585a:	e00b      	b.n	8005874 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
}
 8005872:	e7ff      	b.n	8005874 <I2C_Master_ADDR+0x316>
 8005874:	bf00      	nop
 8005876:	3744      	adds	r7, #68	; 0x44
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d02b      	beq.n	80058f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d114      	bne.n	80058f2 <I2C_SlaveTransmit_TXE+0x72>
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b29      	cmp	r3, #41	; 0x29
 80058cc:	d111      	bne.n	80058f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2221      	movs	r2, #33	; 0x21
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2228      	movs	r2, #40	; 0x28
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fa18 	bl	8004d22 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d011      	beq.n	8005930 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	781a      	ldrb	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d02c      	beq.n	80059b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d114      	bne.n	80059b0 <I2C_SlaveReceive_RXNE+0x74>
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b2a      	cmp	r3, #42	; 0x2a
 800598a:	d111      	bne.n	80059b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2222      	movs	r2, #34	; 0x22
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2228      	movs	r2, #40	; 0x28
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff f9c3 	bl	8004d36 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d012      	beq.n	80059f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a16:	2b28      	cmp	r3, #40	; 0x28
 8005a18:	d127      	bne.n	8005a6a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a28:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	089b      	lsrs	r3, r3, #2
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a36:	2301      	movs	r3, #1
 8005a38:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	09db      	lsrs	r3, r3, #7
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	81bb      	strh	r3, [r7, #12]
 8005a4c:	e002      	b.n	8005a54 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a5c:	89ba      	ldrh	r2, [r7, #12]
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff f971 	bl	8004d4a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a68:	e008      	b.n	8005a7c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f06f 0202 	mvn.w	r2, #2
 8005a72:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aa2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005adc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae0:	d172      	bne.n	8005bc8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	2b22      	cmp	r3, #34	; 0x22
 8005ae6:	d002      	beq.n	8005aee <I2C_Slave_STOPF+0x6a>
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b2a      	cmp	r3, #42	; 0x2a
 8005aec:	d135      	bne.n	8005b5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f043 0204 	orr.w	r2, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe f86a 	bl	8003c00 <HAL_DMA_GetState>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d049      	beq.n	8005bc6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	4a69      	ldr	r2, [pc, #420]	; (8005cdc <I2C_Slave_STOPF+0x258>)
 8005b38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fd feb2 	bl	80038a8 <HAL_DMA_Abort_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d03d      	beq.n	8005bc6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b58:	e035      	b.n	8005bc6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe f834 	bl	8003c00 <HAL_DMA_GetState>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d014      	beq.n	8005bc8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	4a4e      	ldr	r2, [pc, #312]	; (8005cdc <I2C_Slave_STOPF+0x258>)
 8005ba4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fd fe7c 	bl	80038a8 <HAL_DMA_Abort_IT>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4798      	blx	r3
 8005bc4:	e000      	b.n	8005bc8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bc6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d03e      	beq.n	8005c50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d112      	bne.n	8005c06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	2b40      	cmp	r3, #64	; 0x40
 8005c12:	d112      	bne.n	8005c3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	f043 0204 	orr.w	r2, r3, #4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d003      	beq.n	8005c60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f843 	bl	8005ce4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005c5e:	e039      	b.n	8005cd4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b2a      	cmp	r3, #42	; 0x2a
 8005c64:	d109      	bne.n	8005c7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2228      	movs	r2, #40	; 0x28
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff f85e 	bl	8004d36 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b28      	cmp	r3, #40	; 0x28
 8005c84:	d111      	bne.n	8005caa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a15      	ldr	r2, [pc, #84]	; (8005ce0 <I2C_Slave_STOPF+0x25c>)
 8005c8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff f85f 	bl	8004d66 <HAL_I2C_ListenCpltCallback>
}
 8005ca8:	e014      	b.n	8005cd4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	2b22      	cmp	r3, #34	; 0x22
 8005cb0:	d002      	beq.n	8005cb8 <I2C_Slave_STOPF+0x234>
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	2b22      	cmp	r3, #34	; 0x22
 8005cb6:	d10d      	bne.n	8005cd4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff f831 	bl	8004d36 <HAL_I2C_SlaveRxCpltCallback>
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	08006469 	.word	0x08006469
 8005ce0:	ffff0000 	.word	0xffff0000

08005ce4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cfa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d002      	beq.n	8005d08 <I2C_ITError+0x24>
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d10a      	bne.n	8005d1e <I2C_ITError+0x3a>
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	2b22      	cmp	r3, #34	; 0x22
 8005d0c:	d107      	bne.n	8005d1e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d1c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d24:	2b28      	cmp	r3, #40	; 0x28
 8005d26:	d107      	bne.n	8005d38 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2228      	movs	r2, #40	; 0x28
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d36:	e015      	b.n	8005d64 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d46:	d00a      	beq.n	8005d5e <I2C_ITError+0x7a>
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	2b60      	cmp	r3, #96	; 0x60
 8005d4c:	d007      	beq.n	8005d5e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d72:	d162      	bne.n	8005e3a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d82:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d020      	beq.n	8005dd4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	4a6a      	ldr	r2, [pc, #424]	; (8005f40 <I2C_ITError+0x25c>)
 8005d98:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd fd82 	bl	80038a8 <HAL_DMA_Abort_IT>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 8089 	beq.w	8005ebe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0201 	bic.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4798      	blx	r3
 8005dd2:	e074      	b.n	8005ebe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	4a59      	ldr	r2, [pc, #356]	; (8005f40 <I2C_ITError+0x25c>)
 8005dda:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fd fd61 	bl	80038a8 <HAL_DMA_Abort_IT>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d068      	beq.n	8005ebe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b40      	cmp	r3, #64	; 0x40
 8005df8:	d10b      	bne.n	8005e12 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
 8005e38:	e041      	b.n	8005ebe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b60      	cmp	r3, #96	; 0x60
 8005e44:	d125      	bne.n	8005e92 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d10b      	bne.n	8005e7a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fe ff7f 	bl	8004d8e <HAL_I2C_AbortCpltCallback>
 8005e90:	e015      	b.n	8005ebe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b40      	cmp	r3, #64	; 0x40
 8005e9e:	d10b      	bne.n	8005eb8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7fe ff5e 	bl	8004d7a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10e      	bne.n	8005eec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d109      	bne.n	8005eec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005efa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f02:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d113      	bne.n	8005f38 <I2C_ITError+0x254>
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	2b28      	cmp	r3, #40	; 0x28
 8005f14:	d110      	bne.n	8005f38 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <I2C_ITError+0x260>)
 8005f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fe ff17 	bl	8004d66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	08006469 	.word	0x08006469
 8005f44:	ffff0000 	.word	0xffff0000

08005f48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	461a      	mov	r2, r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	817b      	strh	r3, [r7, #10]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	813b      	strh	r3, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fb1a 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00d      	beq.n	8005fa6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f98:	d103      	bne.n	8005fa2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e05f      	b.n	8006066 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fa6:	897b      	ldrh	r3, [r7, #10]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	6a3a      	ldr	r2, [r7, #32]
 8005fba:	492d      	ldr	r1, [pc, #180]	; (8006070 <I2C_RequestMemoryWrite+0x128>)
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fb52 	bl	8006666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e04c      	b.n	8006066 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe4:	6a39      	ldr	r1, [r7, #32]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 fbbc 	bl	8006764 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00d      	beq.n	800600e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d107      	bne.n	800600a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006008:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e02b      	b.n	8006066 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d105      	bne.n	8006020 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006014:	893b      	ldrh	r3, [r7, #8]
 8006016:	b2da      	uxtb	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	611a      	str	r2, [r3, #16]
 800601e:	e021      	b.n	8006064 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006020:	893b      	ldrh	r3, [r7, #8]
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	b29b      	uxth	r3, r3
 8006026:	b2da      	uxtb	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800602e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006030:	6a39      	ldr	r1, [r7, #32]
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 fb96 	bl	8006764 <I2C_WaitOnTXEFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2b04      	cmp	r3, #4
 8006044:	d107      	bne.n	8006056 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006054:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e005      	b.n	8006066 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800605a:	893b      	ldrh	r3, [r7, #8]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	00010002 	.word	0x00010002

08006074 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af02      	add	r7, sp, #8
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	461a      	mov	r2, r3
 8006082:	4603      	mov	r3, r0
 8006084:	817b      	strh	r3, [r7, #10]
 8006086:	460b      	mov	r3, r1
 8006088:	813b      	strh	r3, [r7, #8]
 800608a:	4613      	mov	r3, r2
 800608c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800609c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fa7c 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d4:	d103      	bne.n	80060de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e0aa      	b.n	8006238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	6a3a      	ldr	r2, [r7, #32]
 80060f6:	4952      	ldr	r1, [pc, #328]	; (8006240 <I2C_RequestMemoryRead+0x1cc>)
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fab4 	bl	8006666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e097      	b.n	8006238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800611e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006120:	6a39      	ldr	r1, [r7, #32]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fb1e 	bl	8006764 <I2C_WaitOnTXEFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	2b04      	cmp	r3, #4
 8006134:	d107      	bne.n	8006146 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006144:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e076      	b.n	8006238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d105      	bne.n	800615c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006150:	893b      	ldrh	r3, [r7, #8]
 8006152:	b2da      	uxtb	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	611a      	str	r2, [r3, #16]
 800615a:	e021      	b.n	80061a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800615c:	893b      	ldrh	r3, [r7, #8]
 800615e:	0a1b      	lsrs	r3, r3, #8
 8006160:	b29b      	uxth	r3, r3
 8006162:	b2da      	uxtb	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800616a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616c:	6a39      	ldr	r1, [r7, #32]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 faf8 	bl	8006764 <I2C_WaitOnTXEFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	2b04      	cmp	r3, #4
 8006180:	d107      	bne.n	8006192 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006190:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e050      	b.n	8006238 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006196:	893b      	ldrh	r3, [r7, #8]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a2:	6a39      	ldr	r1, [r7, #32]
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fadd 	bl	8006764 <I2C_WaitOnTXEFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00d      	beq.n	80061cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d107      	bne.n	80061c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e035      	b.n	8006238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f9e5 	bl	80065b8 <I2C_WaitOnFlagUntilTimeout>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00d      	beq.n	8006210 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006202:	d103      	bne.n	800620c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e013      	b.n	8006238 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006210:	897b      	ldrh	r3, [r7, #10]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	4906      	ldr	r1, [pc, #24]	; (8006240 <I2C_RequestMemoryRead+0x1cc>)
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fa1d 	bl	8006666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	00010002 	.word	0x00010002

08006244 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006258:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006260:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006276:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	2200      	movs	r2, #0
 8006286:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	d003      	beq.n	8006298 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	2200      	movs	r2, #0
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800629e:	2b21      	cmp	r3, #33	; 0x21
 80062a0:	d007      	beq.n	80062b2 <I2C_DMAXferCplt+0x6e>
 80062a2:	7cfb      	ldrb	r3, [r7, #19]
 80062a4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80062a8:	2b22      	cmp	r3, #34	; 0x22
 80062aa:	d131      	bne.n	8006310 <I2C_DMAXferCplt+0xcc>
 80062ac:	7cbb      	ldrb	r3, [r7, #18]
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d12e      	bne.n	8006310 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2200      	movs	r2, #0
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062c8:	7cfb      	ldrb	r3, [r7, #19]
 80062ca:	2b29      	cmp	r3, #41	; 0x29
 80062cc:	d10a      	bne.n	80062e4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2221      	movs	r2, #33	; 0x21
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2228      	movs	r2, #40	; 0x28
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062dc:	6978      	ldr	r0, [r7, #20]
 80062de:	f7fe fd20 	bl	8004d22 <HAL_I2C_SlaveTxCpltCallback>
 80062e2:	e00c      	b.n	80062fe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	2b2a      	cmp	r3, #42	; 0x2a
 80062e8:	d109      	bne.n	80062fe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2222      	movs	r2, #34	; 0x22
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2228      	movs	r2, #40	; 0x28
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062f8:	6978      	ldr	r0, [r7, #20]
 80062fa:	f7fe fd1c 	bl	8004d36 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800630c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800630e:	e06a      	b.n	80063e6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d064      	beq.n	80063e6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	2b01      	cmp	r3, #1
 8006324:	d107      	bne.n	8006336 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006334:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006344:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800634c:	d009      	beq.n	8006362 <I2C_DMAXferCplt+0x11e>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d006      	beq.n	8006362 <I2C_DMAXferCplt+0x11e>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800635a:	d002      	beq.n	8006362 <I2C_DMAXferCplt+0x11e>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b20      	cmp	r3, #32
 8006360:	d107      	bne.n	8006372 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006370:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006380:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006390:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80063a0:	6978      	ldr	r0, [r7, #20]
 80063a2:	f7fe fcea 	bl	8004d7a <HAL_I2C_ErrorCallback>
}
 80063a6:	e01e      	b.n	80063e6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	d10a      	bne.n	80063d2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80063ca:	6978      	ldr	r0, [r7, #20]
 80063cc:	f7fb fe46 	bl	800205c <HAL_I2C_MemRxCpltCallback>
}
 80063d0:	e009      	b.n	80063e6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2212      	movs	r2, #18
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80063e0:	6978      	ldr	r0, [r7, #20]
 80063e2:	f7fe fc94 	bl	8004d0e <HAL_I2C_MasterRxCpltCallback>
}
 80063e6:	bf00      	nop
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006408:	2200      	movs	r2, #0
 800640a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	2200      	movs	r2, #0
 800641a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fd fbfd 	bl	8003c1c <HAL_DMA_GetError>
 8006422:	4603      	mov	r3, r0
 8006424:	2b02      	cmp	r3, #2
 8006426:	d01b      	beq.n	8006460 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006436:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f043 0210 	orr.w	r2, r3, #16
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7fe fc8d 	bl	8004d7a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006480:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006482:	4b4b      	ldr	r3, [pc, #300]	; (80065b0 <I2C_DMAAbort+0x148>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	08db      	lsrs	r3, r3, #3
 8006488:	4a4a      	ldr	r2, [pc, #296]	; (80065b4 <I2C_DMAAbort+0x14c>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	0a1a      	lsrs	r2, r3, #8
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	00da      	lsls	r2, r3, #3
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f043 0220 	orr.w	r2, r3, #32
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80064ae:	e00a      	b.n	80064c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c4:	d0ea      	beq.n	800649c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d2:	2200      	movs	r2, #0
 80064d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	2200      	movs	r2, #0
 80064e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2200      	movs	r2, #0
 80064fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006508:	2200      	movs	r2, #0
 800650a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	2200      	movs	r2, #0
 800651a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b60      	cmp	r3, #96	; 0x60
 8006536:	d10e      	bne.n	8006556 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2200      	movs	r2, #0
 800654c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800654e:	6978      	ldr	r0, [r7, #20]
 8006550:	f7fe fc1d 	bl	8004d8e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006554:	e027      	b.n	80065a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006556:	7cfb      	ldrb	r3, [r7, #19]
 8006558:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800655c:	2b28      	cmp	r3, #40	; 0x28
 800655e:	d117      	bne.n	8006590 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800657e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2228      	movs	r2, #40	; 0x28
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800658e:	e007      	b.n	80065a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f7fe fbea 	bl	8004d7a <HAL_I2C_ErrorCallback>
}
 80065a6:	bf00      	nop
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000000 	.word	0x20000000
 80065b4:	14f8b589 	.word	0x14f8b589

080065b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	4613      	mov	r3, r2
 80065c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065c8:	e025      	b.n	8006616 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d021      	beq.n	8006616 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065d2:	f7fc fc6d 	bl	8002eb0 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d302      	bcc.n	80065e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d116      	bne.n	8006616 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f043 0220 	orr.w	r2, r3, #32
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e023      	b.n	800665e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	0c1b      	lsrs	r3, r3, #16
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10d      	bne.n	800663c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	43da      	mvns	r2, r3
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	bf0c      	ite	eq
 8006632:	2301      	moveq	r3, #1
 8006634:	2300      	movne	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	e00c      	b.n	8006656 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	43da      	mvns	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4013      	ands	r3, r2
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	bf0c      	ite	eq
 800664e:	2301      	moveq	r3, #1
 8006650:	2300      	movne	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	429a      	cmp	r2, r3
 800665a:	d0b6      	beq.n	80065ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
 8006672:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006674:	e051      	b.n	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006684:	d123      	bne.n	80066ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006694:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800669e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f043 0204 	orr.w	r2, r3, #4
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e046      	b.n	800675c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d4:	d021      	beq.n	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d6:	f7fc fbeb 	bl	8002eb0 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d302      	bcc.n	80066ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d116      	bne.n	800671a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f043 0220 	orr.w	r2, r3, #32
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e020      	b.n	800675c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	0c1b      	lsrs	r3, r3, #16
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	d10c      	bne.n	800673e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	43da      	mvns	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4013      	ands	r3, r2
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	bf14      	ite	ne
 8006736:	2301      	movne	r3, #1
 8006738:	2300      	moveq	r3, #0
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e00b      	b.n	8006756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	43da      	mvns	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4013      	ands	r3, r2
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	bf14      	ite	ne
 8006750:	2301      	movne	r3, #1
 8006752:	2300      	moveq	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d18d      	bne.n	8006676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006770:	e02d      	b.n	80067ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f86a 	bl	800684c <I2C_IsAcknowledgeFailed>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e02d      	b.n	80067de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d021      	beq.n	80067ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fc fb91 	bl	8002eb0 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d116      	bne.n	80067ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e007      	b.n	80067de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b80      	cmp	r3, #128	; 0x80
 80067da:	d1ca      	bne.n	8006772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80067f4:	4b13      	ldr	r3, [pc, #76]	; (8006844 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	08db      	lsrs	r3, r3, #3
 80067fa:	4a13      	ldr	r2, [pc, #76]	; (8006848 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80067fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006800:	0a1a      	lsrs	r2, r3, #8
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3b01      	subs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d107      	bne.n	8006826 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	f043 0220 	orr.w	r2, r3, #32
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e008      	b.n	8006838 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d0e9      	beq.n	800680a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	20000000 	.word	0x20000000
 8006848:	14f8b589 	.word	0x14f8b589

0800684c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006862:	d11b      	bne.n	800689c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800686c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	f043 0204 	orr.w	r2, r3, #4
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80068ba:	d103      	bne.n	80068c4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80068c2:	e007      	b.n	80068d4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80068cc:	d102      	bne.n	80068d4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2208      	movs	r2, #8
 80068d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	d129      	bne.n	800694a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2224      	movs	r2, #36	; 0x24
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0201 	bic.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0210 	bic.w	r2, r2, #16
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0201 	orr.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e000      	b.n	800694c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800694a:	2302      	movs	r3, #2
  }
}
 800694c:	4618      	mov	r0, r3
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b20      	cmp	r3, #32
 8006970:	d12a      	bne.n	80069c8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2224      	movs	r2, #36	; 0x24
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0201 	bic.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006992:	89fb      	ldrh	r3, [r7, #14]
 8006994:	f023 030f 	bic.w	r3, r3, #15
 8006998:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	b29a      	uxth	r2, r3
 800699e:	89fb      	ldrh	r3, [r7, #14]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	89fa      	ldrh	r2, [r7, #14]
 80069aa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
  }
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e0bf      	b.n	8006b6a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fb fdf4 	bl	80025ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006a1a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6999      	ldr	r1, [r3, #24]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a30:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6899      	ldr	r1, [r3, #8]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b4a      	ldr	r3, [pc, #296]	; (8006b74 <HAL_LTDC_Init+0x19c>)
 8006a4c:	400b      	ands	r3, r1
 8006a4e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6899      	ldr	r1, [r3, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68d9      	ldr	r1, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4b3e      	ldr	r3, [pc, #248]	; (8006b74 <HAL_LTDC_Init+0x19c>)
 8006a7a:	400b      	ands	r3, r1
 8006a7c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	041b      	lsls	r3, r3, #16
 8006a84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68d9      	ldr	r1, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a1a      	ldr	r2, [r3, #32]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6919      	ldr	r1, [r3, #16]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b33      	ldr	r3, [pc, #204]	; (8006b74 <HAL_LTDC_Init+0x19c>)
 8006aa8:	400b      	ands	r3, r1
 8006aaa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6919      	ldr	r1, [r3, #16]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6959      	ldr	r1, [r3, #20]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4b27      	ldr	r3, [pc, #156]	; (8006b74 <HAL_LTDC_Init+0x19c>)
 8006ad6:	400b      	ands	r3, r1
 8006ad8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6959      	ldr	r1, [r3, #20]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0206 	orr.w	r2, r2, #6
 8006b46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	f000f800 	.word	0xf000f800

08006b78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b78:	b5b0      	push	{r4, r5, r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_LTDC_ConfigLayer+0x1a>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e02c      	b.n	8006bec <HAL_LTDC_ConfigLayer+0x74>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2134      	movs	r1, #52	; 0x34
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	4413      	add	r3, r2
 8006bae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc4:	682b      	ldr	r3, [r5, #0]
 8006bc6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f811 	bl	8006bf4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bdb0      	pop	{r4, r5, r7, pc}

08006bf4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b089      	sub	sp, #36	; 0x24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c10:	4413      	add	r3, r2
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	01db      	lsls	r3, r3, #7
 8006c20:	4413      	add	r3, r2
 8006c22:	3384      	adds	r3, #132	; 0x84
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	01d2      	lsls	r2, r2, #7
 8006c30:	440a      	add	r2, r1
 8006c32:	3284      	adds	r2, #132	; 0x84
 8006c34:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c38:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c4a:	4413      	add	r3, r2
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	01db      	lsls	r3, r3, #7
 8006c58:	440b      	add	r3, r1
 8006c5a:	3384      	adds	r3, #132	; 0x84
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c72:	4413      	add	r3, r2
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	01db      	lsls	r3, r3, #7
 8006c82:	4413      	add	r3, r2
 8006c84:	3384      	adds	r3, #132	; 0x84
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	01d2      	lsls	r2, r2, #7
 8006c92:	440a      	add	r2, r1
 8006c94:	3284      	adds	r2, #132	; 0x84
 8006c96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c9a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006caa:	4413      	add	r3, r2
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	01db      	lsls	r3, r3, #7
 8006cb8:	440b      	add	r3, r1
 8006cba:	3384      	adds	r3, #132	; 0x84
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	01db      	lsls	r3, r3, #7
 8006cce:	4413      	add	r3, r2
 8006cd0:	3384      	adds	r3, #132	; 0x84
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	01d2      	lsls	r2, r2, #7
 8006cde:	440a      	add	r2, r1
 8006ce0:	3284      	adds	r2, #132	; 0x84
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	01db      	lsls	r3, r3, #7
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3384      	adds	r3, #132	; 0x84
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d0e:	041b      	lsls	r3, r3, #16
 8006d10:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	061b      	lsls	r3, r3, #24
 8006d18:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	01db      	lsls	r3, r3, #7
 8006d24:	4413      	add	r3, r2
 8006d26:	3384      	adds	r3, #132	; 0x84
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	01db      	lsls	r3, r3, #7
 8006d34:	4413      	add	r3, r2
 8006d36:	3384      	adds	r3, #132	; 0x84
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d44:	461a      	mov	r2, r3
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4619      	mov	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	01db      	lsls	r3, r3, #7
 8006d58:	440b      	add	r3, r1
 8006d5a:	3384      	adds	r3, #132	; 0x84
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	01db      	lsls	r3, r3, #7
 8006d6e:	4413      	add	r3, r2
 8006d70:	3384      	adds	r3, #132	; 0x84
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	6812      	ldr	r2, [r2, #0]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	01d2      	lsls	r2, r2, #7
 8006d7e:	440a      	add	r2, r1
 8006d80:	3284      	adds	r2, #132	; 0x84
 8006d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d86:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	01db      	lsls	r3, r3, #7
 8006d92:	4413      	add	r3, r2
 8006d94:	3384      	adds	r3, #132	; 0x84
 8006d96:	461a      	mov	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	01db      	lsls	r3, r3, #7
 8006da8:	4413      	add	r3, r2
 8006daa:	3384      	adds	r3, #132	; 0x84
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	6812      	ldr	r2, [r2, #0]
 8006db2:	4611      	mov	r1, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	01d2      	lsls	r2, r2, #7
 8006db8:	440a      	add	r2, r1
 8006dba:	3284      	adds	r2, #132	; 0x84
 8006dbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006dc0:	f023 0307 	bic.w	r3, r3, #7
 8006dc4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	6809      	ldr	r1, [r1, #0]
 8006dd2:	4608      	mov	r0, r1
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	01c9      	lsls	r1, r1, #7
 8006dd8:	4401      	add	r1, r0
 8006dda:	3184      	adds	r1, #132	; 0x84
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	01db      	lsls	r3, r3, #7
 8006dea:	4413      	add	r3, r2
 8006dec:	3384      	adds	r3, #132	; 0x84
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	01db      	lsls	r3, r3, #7
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3384      	adds	r3, #132	; 0x84
 8006dfe:	461a      	mov	r2, r3
 8006e00:	2300      	movs	r3, #0
 8006e02:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	01db      	lsls	r3, r3, #7
 8006e0e:	4413      	add	r3, r2
 8006e10:	3384      	adds	r3, #132	; 0x84
 8006e12:	461a      	mov	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006e22:	2304      	movs	r3, #4
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	e01b      	b.n	8006e60 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d102      	bne.n	8006e36 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006e30:	2303      	movs	r3, #3
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	e014      	b.n	8006e60 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d00b      	beq.n	8006e56 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d007      	beq.n	8006e56 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d003      	beq.n	8006e56 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e52:	2b07      	cmp	r3, #7
 8006e54:	d102      	bne.n	8006e5c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006e56:	2302      	movs	r3, #2
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e001      	b.n	8006e60 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	01db      	lsls	r3, r3, #7
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3384      	adds	r3, #132	; 0x84
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	4611      	mov	r1, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	01d2      	lsls	r2, r2, #7
 8006e7a:	440a      	add	r2, r1
 8006e7c:	3284      	adds	r2, #132	; 0x84
 8006e7e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e82:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	69fa      	ldr	r2, [r7, #28]
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
 8006e8e:	041a      	lsls	r2, r3, #16
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	1acb      	subs	r3, r1, r3
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	3303      	adds	r3, #3
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	6809      	ldr	r1, [r1, #0]
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	01c9      	lsls	r1, r1, #7
 8006eac:	4401      	add	r1, r0
 8006eae:	3184      	adds	r1, #132	; 0x84
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	01db      	lsls	r3, r3, #7
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3384      	adds	r3, #132	; 0x84
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	01d2      	lsls	r2, r2, #7
 8006ece:	440a      	add	r2, r1
 8006ed0:	3284      	adds	r2, #132	; 0x84
 8006ed2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ed6:	f023 0307 	bic.w	r3, r3, #7
 8006eda:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	01db      	lsls	r3, r3, #7
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3384      	adds	r3, #132	; 0x84
 8006eea:	461a      	mov	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	01db      	lsls	r3, r3, #7
 8006efc:	4413      	add	r3, r2
 8006efe:	3384      	adds	r3, #132	; 0x84
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	4611      	mov	r1, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	01d2      	lsls	r2, r2, #7
 8006f0c:	440a      	add	r2, r1
 8006f0e:	3284      	adds	r2, #132	; 0x84
 8006f10:	f043 0301 	orr.w	r3, r3, #1
 8006f14:	6013      	str	r3, [r2, #0]
}
 8006f16:	bf00      	nop
 8006f18:	3724      	adds	r7, #36	; 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f24:	b08f      	sub	sp, #60	; 0x3c
 8006f26:	af0a      	add	r7, sp, #40	; 0x28
 8006f28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e10f      	b.n	8007154 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fb fd70 	bl	8002a34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2203      	movs	r2, #3
 8006f58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f003 fcd3 	bl	800a91e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	603b      	str	r3, [r7, #0]
 8006f7e:	687e      	ldr	r6, [r7, #4]
 8006f80:	466d      	mov	r5, sp
 8006f82:	f106 0410 	add.w	r4, r6, #16
 8006f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f96:	1d33      	adds	r3, r6, #4
 8006f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f9a:	6838      	ldr	r0, [r7, #0]
 8006f9c:	f003 fc5e 	bl	800a85c <USB_CoreInit>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e0d0      	b.n	8007154 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f003 fcc1 	bl	800a940 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
 8006fc2:	e04a      	b.n	800705a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006fc4:	7bfa      	ldrb	r2, [r7, #15]
 8006fc6:	6879      	ldr	r1, [r7, #4]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	333d      	adds	r3, #61	; 0x3d
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006fd8:	7bfa      	ldrb	r2, [r7, #15]
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	333c      	adds	r3, #60	; 0x3c
 8006fe8:	7bfa      	ldrb	r2, [r7, #15]
 8006fea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006fec:	7bfa      	ldrb	r2, [r7, #15]
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	b298      	uxth	r0, r3
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	3342      	adds	r3, #66	; 0x42
 8007000:	4602      	mov	r2, r0
 8007002:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	333f      	adds	r3, #63	; 0x3f
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	3344      	adds	r3, #68	; 0x44
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800702c:	7bfa      	ldrb	r2, [r7, #15]
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	3348      	adds	r3, #72	; 0x48
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007040:	7bfa      	ldrb	r2, [r7, #15]
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	4613      	mov	r3, r2
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	1a9b      	subs	r3, r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	440b      	add	r3, r1
 800704e:	3350      	adds	r3, #80	; 0x50
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	3301      	adds	r3, #1
 8007058:	73fb      	strb	r3, [r7, #15]
 800705a:	7bfa      	ldrb	r2, [r7, #15]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d3af      	bcc.n	8006fc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e044      	b.n	80070f4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800706a:	7bfa      	ldrb	r2, [r7, #15]
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	4613      	mov	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	1a9b      	subs	r3, r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007080:	7bfa      	ldrb	r2, [r7, #15]
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	4613      	mov	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	1a9b      	subs	r3, r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	440b      	add	r3, r1
 800708e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007092:	7bfa      	ldrb	r2, [r7, #15]
 8007094:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007096:	7bfa      	ldrb	r2, [r7, #15]
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	4613      	mov	r3, r2
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	1a9b      	subs	r3, r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	440b      	add	r3, r1
 80070a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070ac:	7bfa      	ldrb	r2, [r7, #15]
 80070ae:	6879      	ldr	r1, [r7, #4]
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80070c2:	7bfa      	ldrb	r2, [r7, #15]
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80070d8:	7bfa      	ldrb	r2, [r7, #15]
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	3301      	adds	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	7bfa      	ldrb	r2, [r7, #15]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d3b5      	bcc.n	800706a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	687e      	ldr	r6, [r7, #4]
 8007106:	466d      	mov	r5, sp
 8007108:	f106 0410 	add.w	r4, r6, #16
 800710c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800710e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007114:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007118:	e885 0003 	stmia.w	r5, {r0, r1}
 800711c:	1d33      	adds	r3, r6, #4
 800711e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007120:	6838      	ldr	r0, [r7, #0]
 8007122:	f003 fc37 	bl	800a994 <USB_DevInit>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e00d      	b.n	8007154 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4618      	mov	r0, r3
 800714e:	f003 fde6 	bl	800ad1e <USB_DevDisconnect>

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800715c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e264      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d075      	beq.n	8007266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800717a:	4ba3      	ldr	r3, [pc, #652]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
 8007182:	2b04      	cmp	r3, #4
 8007184:	d00c      	beq.n	80071a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007186:	4ba0      	ldr	r3, [pc, #640]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800718e:	2b08      	cmp	r3, #8
 8007190:	d112      	bne.n	80071b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007192:	4b9d      	ldr	r3, [pc, #628]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800719a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800719e:	d10b      	bne.n	80071b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a0:	4b99      	ldr	r3, [pc, #612]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d05b      	beq.n	8007264 <HAL_RCC_OscConfig+0x108>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d157      	bne.n	8007264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e23f      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c0:	d106      	bne.n	80071d0 <HAL_RCC_OscConfig+0x74>
 80071c2:	4b91      	ldr	r3, [pc, #580]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a90      	ldr	r2, [pc, #576]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	e01d      	b.n	800720c <HAL_RCC_OscConfig+0xb0>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071d8:	d10c      	bne.n	80071f4 <HAL_RCC_OscConfig+0x98>
 80071da:	4b8b      	ldr	r3, [pc, #556]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a8a      	ldr	r2, [pc, #552]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	4b88      	ldr	r3, [pc, #544]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a87      	ldr	r2, [pc, #540]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	e00b      	b.n	800720c <HAL_RCC_OscConfig+0xb0>
 80071f4:	4b84      	ldr	r3, [pc, #528]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a83      	ldr	r2, [pc, #524]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80071fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	4b81      	ldr	r3, [pc, #516]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a80      	ldr	r2, [pc, #512]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800720a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d013      	beq.n	800723c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007214:	f7fb fe4c 	bl	8002eb0 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800721c:	f7fb fe48 	bl	8002eb0 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b64      	cmp	r3, #100	; 0x64
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e204      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722e:	4b76      	ldr	r3, [pc, #472]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0f0      	beq.n	800721c <HAL_RCC_OscConfig+0xc0>
 800723a:	e014      	b.n	8007266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800723c:	f7fb fe38 	bl	8002eb0 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007244:	f7fb fe34 	bl	8002eb0 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b64      	cmp	r3, #100	; 0x64
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e1f0      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007256:	4b6c      	ldr	r3, [pc, #432]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f0      	bne.n	8007244 <HAL_RCC_OscConfig+0xe8>
 8007262:	e000      	b.n	8007266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d063      	beq.n	800733a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007272:	4b65      	ldr	r3, [pc, #404]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 030c 	and.w	r3, r3, #12
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800727e:	4b62      	ldr	r3, [pc, #392]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007286:	2b08      	cmp	r3, #8
 8007288:	d11c      	bne.n	80072c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800728a:	4b5f      	ldr	r3, [pc, #380]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d116      	bne.n	80072c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007296:	4b5c      	ldr	r3, [pc, #368]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <HAL_RCC_OscConfig+0x152>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d001      	beq.n	80072ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e1c4      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072ae:	4b56      	ldr	r3, [pc, #344]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4952      	ldr	r1, [pc, #328]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80072be:	4313      	orrs	r3, r2
 80072c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072c2:	e03a      	b.n	800733a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d020      	beq.n	800730e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072cc:	4b4f      	ldr	r3, [pc, #316]	; (800740c <HAL_RCC_OscConfig+0x2b0>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d2:	f7fb fded 	bl	8002eb0 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072da:	f7fb fde9 	bl	8002eb0 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e1a5      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ec:	4b46      	ldr	r3, [pc, #280]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0f0      	beq.n	80072da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f8:	4b43      	ldr	r3, [pc, #268]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	4940      	ldr	r1, [pc, #256]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007308:	4313      	orrs	r3, r2
 800730a:	600b      	str	r3, [r1, #0]
 800730c:	e015      	b.n	800733a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800730e:	4b3f      	ldr	r3, [pc, #252]	; (800740c <HAL_RCC_OscConfig+0x2b0>)
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007314:	f7fb fdcc 	bl	8002eb0 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800731c:	f7fb fdc8 	bl	8002eb0 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e184      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800732e:	4b36      	ldr	r3, [pc, #216]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f0      	bne.n	800731c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d030      	beq.n	80073a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d016      	beq.n	800737c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800734e:	4b30      	ldr	r3, [pc, #192]	; (8007410 <HAL_RCC_OscConfig+0x2b4>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007354:	f7fb fdac 	bl	8002eb0 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800735c:	f7fb fda8 	bl	8002eb0 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e164      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800736e:	4b26      	ldr	r3, [pc, #152]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 8007370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0f0      	beq.n	800735c <HAL_RCC_OscConfig+0x200>
 800737a:	e015      	b.n	80073a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800737c:	4b24      	ldr	r3, [pc, #144]	; (8007410 <HAL_RCC_OscConfig+0x2b4>)
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007382:	f7fb fd95 	bl	8002eb0 <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007388:	e008      	b.n	800739c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800738a:	f7fb fd91 	bl	8002eb0 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d901      	bls.n	800739c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	e14d      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800739c:	4b1a      	ldr	r3, [pc, #104]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 800739e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1f0      	bne.n	800738a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 80a0 	beq.w	80074f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073b6:	2300      	movs	r3, #0
 80073b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ba:	4b13      	ldr	r3, [pc, #76]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10f      	bne.n	80073e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073c6:	2300      	movs	r3, #0
 80073c8:	60bb      	str	r3, [r7, #8]
 80073ca:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	4a0e      	ldr	r2, [pc, #56]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80073d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d4:	6413      	str	r3, [r2, #64]	; 0x40
 80073d6:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <HAL_RCC_OscConfig+0x2ac>)
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073de:	60bb      	str	r3, [r7, #8]
 80073e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073e2:	2301      	movs	r3, #1
 80073e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <HAL_RCC_OscConfig+0x2b8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d121      	bne.n	8007436 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <HAL_RCC_OscConfig+0x2b8>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a07      	ldr	r2, [pc, #28]	; (8007414 <HAL_RCC_OscConfig+0x2b8>)
 80073f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073fe:	f7fb fd57 	bl	8002eb0 <HAL_GetTick>
 8007402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007404:	e011      	b.n	800742a <HAL_RCC_OscConfig+0x2ce>
 8007406:	bf00      	nop
 8007408:	40023800 	.word	0x40023800
 800740c:	42470000 	.word	0x42470000
 8007410:	42470e80 	.word	0x42470e80
 8007414:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007418:	f7fb fd4a 	bl	8002eb0 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d901      	bls.n	800742a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e106      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800742a:	4b85      	ldr	r3, [pc, #532]	; (8007640 <HAL_RCC_OscConfig+0x4e4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007432:	2b00      	cmp	r3, #0
 8007434:	d0f0      	beq.n	8007418 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d106      	bne.n	800744c <HAL_RCC_OscConfig+0x2f0>
 800743e:	4b81      	ldr	r3, [pc, #516]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4a80      	ldr	r2, [pc, #512]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007444:	f043 0301 	orr.w	r3, r3, #1
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
 800744a:	e01c      	b.n	8007486 <HAL_RCC_OscConfig+0x32a>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b05      	cmp	r3, #5
 8007452:	d10c      	bne.n	800746e <HAL_RCC_OscConfig+0x312>
 8007454:	4b7b      	ldr	r3, [pc, #492]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007458:	4a7a      	ldr	r2, [pc, #488]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 800745a:	f043 0304 	orr.w	r3, r3, #4
 800745e:	6713      	str	r3, [r2, #112]	; 0x70
 8007460:	4b78      	ldr	r3, [pc, #480]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007464:	4a77      	ldr	r2, [pc, #476]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	6713      	str	r3, [r2, #112]	; 0x70
 800746c:	e00b      	b.n	8007486 <HAL_RCC_OscConfig+0x32a>
 800746e:	4b75      	ldr	r3, [pc, #468]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	4a74      	ldr	r2, [pc, #464]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007474:	f023 0301 	bic.w	r3, r3, #1
 8007478:	6713      	str	r3, [r2, #112]	; 0x70
 800747a:	4b72      	ldr	r3, [pc, #456]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 800747c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747e:	4a71      	ldr	r2, [pc, #452]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007480:	f023 0304 	bic.w	r3, r3, #4
 8007484:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d015      	beq.n	80074ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748e:	f7fb fd0f 	bl	8002eb0 <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007494:	e00a      	b.n	80074ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f7fb fd0b 	bl	8002eb0 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e0c5      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ac:	4b65      	ldr	r3, [pc, #404]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 80074ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0ee      	beq.n	8007496 <HAL_RCC_OscConfig+0x33a>
 80074b8:	e014      	b.n	80074e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074ba:	f7fb fcf9 	bl	8002eb0 <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074c0:	e00a      	b.n	80074d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074c2:	f7fb fcf5 	bl	8002eb0 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e0af      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074d8:	4b5a      	ldr	r3, [pc, #360]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 80074da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1ee      	bne.n	80074c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d105      	bne.n	80074f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ea:	4b56      	ldr	r3, [pc, #344]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	4a55      	ldr	r2, [pc, #340]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 80074f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 809b 	beq.w	8007636 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007500:	4b50      	ldr	r3, [pc, #320]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 030c 	and.w	r3, r3, #12
 8007508:	2b08      	cmp	r3, #8
 800750a:	d05c      	beq.n	80075c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d141      	bne.n	8007598 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007514:	4b4c      	ldr	r3, [pc, #304]	; (8007648 <HAL_RCC_OscConfig+0x4ec>)
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800751a:	f7fb fcc9 	bl	8002eb0 <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007520:	e008      	b.n	8007534 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007522:	f7fb fcc5 	bl	8002eb0 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e081      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007534:	4b43      	ldr	r3, [pc, #268]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f0      	bne.n	8007522 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	69da      	ldr	r2, [r3, #28]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	431a      	orrs	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	019b      	lsls	r3, r3, #6
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007556:	085b      	lsrs	r3, r3, #1
 8007558:	3b01      	subs	r3, #1
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	061b      	lsls	r3, r3, #24
 8007564:	4937      	ldr	r1, [pc, #220]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 8007566:	4313      	orrs	r3, r2
 8007568:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800756a:	4b37      	ldr	r3, [pc, #220]	; (8007648 <HAL_RCC_OscConfig+0x4ec>)
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007570:	f7fb fc9e 	bl	8002eb0 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007578:	f7fb fc9a 	bl	8002eb0 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b02      	cmp	r3, #2
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e056      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800758a:	4b2e      	ldr	r3, [pc, #184]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0f0      	beq.n	8007578 <HAL_RCC_OscConfig+0x41c>
 8007596:	e04e      	b.n	8007636 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007598:	4b2b      	ldr	r3, [pc, #172]	; (8007648 <HAL_RCC_OscConfig+0x4ec>)
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800759e:	f7fb fc87 	bl	8002eb0 <HAL_GetTick>
 80075a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075a4:	e008      	b.n	80075b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075a6:	f7fb fc83 	bl	8002eb0 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e03f      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b8:	4b22      	ldr	r3, [pc, #136]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1f0      	bne.n	80075a6 <HAL_RCC_OscConfig+0x44a>
 80075c4:	e037      	b.n	8007636 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e032      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075d2:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <HAL_RCC_OscConfig+0x4e8>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d028      	beq.n	8007632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d121      	bne.n	8007632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d11a      	bne.n	8007632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007602:	4013      	ands	r3, r2
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007608:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800760a:	4293      	cmp	r3, r2
 800760c:	d111      	bne.n	8007632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007618:	085b      	lsrs	r3, r3, #1
 800761a:	3b01      	subs	r3, #1
 800761c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800761e:	429a      	cmp	r2, r3
 8007620:	d107      	bne.n	8007632 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800762e:	429a      	cmp	r2, r3
 8007630:	d001      	beq.n	8007636 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40007000 	.word	0x40007000
 8007644:	40023800 	.word	0x40023800
 8007648:	42470060 	.word	0x42470060

0800764c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e0cc      	b.n	80077fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007660:	4b68      	ldr	r3, [pc, #416]	; (8007804 <HAL_RCC_ClockConfig+0x1b8>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 030f 	and.w	r3, r3, #15
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d90c      	bls.n	8007688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800766e:	4b65      	ldr	r3, [pc, #404]	; (8007804 <HAL_RCC_ClockConfig+0x1b8>)
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007676:	4b63      	ldr	r3, [pc, #396]	; (8007804 <HAL_RCC_ClockConfig+0x1b8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d001      	beq.n	8007688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e0b8      	b.n	80077fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d020      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0304 	and.w	r3, r3, #4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076a0:	4b59      	ldr	r3, [pc, #356]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	4a58      	ldr	r2, [pc, #352]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80076a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0308 	and.w	r3, r3, #8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076b8:	4b53      	ldr	r3, [pc, #332]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4a52      	ldr	r2, [pc, #328]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80076be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80076c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076c4:	4b50      	ldr	r3, [pc, #320]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	494d      	ldr	r1, [pc, #308]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d044      	beq.n	800776c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d107      	bne.n	80076fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ea:	4b47      	ldr	r3, [pc, #284]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d119      	bne.n	800772a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e07f      	b.n	80077fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d003      	beq.n	800770a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007706:	2b03      	cmp	r3, #3
 8007708:	d107      	bne.n	800771a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800770a:	4b3f      	ldr	r3, [pc, #252]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e06f      	b.n	80077fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800771a:	4b3b      	ldr	r3, [pc, #236]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e067      	b.n	80077fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800772a:	4b37      	ldr	r3, [pc, #220]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f023 0203 	bic.w	r2, r3, #3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	4934      	ldr	r1, [pc, #208]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 8007738:	4313      	orrs	r3, r2
 800773a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800773c:	f7fb fbb8 	bl	8002eb0 <HAL_GetTick>
 8007740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007742:	e00a      	b.n	800775a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007744:	f7fb fbb4 	bl	8002eb0 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007752:	4293      	cmp	r3, r2
 8007754:	d901      	bls.n	800775a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e04f      	b.n	80077fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800775a:	4b2b      	ldr	r3, [pc, #172]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 020c 	and.w	r2, r3, #12
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	429a      	cmp	r2, r3
 800776a:	d1eb      	bne.n	8007744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800776c:	4b25      	ldr	r3, [pc, #148]	; (8007804 <HAL_RCC_ClockConfig+0x1b8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d20c      	bcs.n	8007794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b22      	ldr	r3, [pc, #136]	; (8007804 <HAL_RCC_ClockConfig+0x1b8>)
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007782:	4b20      	ldr	r3, [pc, #128]	; (8007804 <HAL_RCC_ClockConfig+0x1b8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d001      	beq.n	8007794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e032      	b.n	80077fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077a0:	4b19      	ldr	r3, [pc, #100]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	4916      	ldr	r1, [pc, #88]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077be:	4b12      	ldr	r3, [pc, #72]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	490e      	ldr	r1, [pc, #56]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077d2:	f000 f821 	bl	8007818 <HAL_RCC_GetSysClockFreq>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <HAL_RCC_ClockConfig+0x1bc>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	091b      	lsrs	r3, r3, #4
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	490a      	ldr	r1, [pc, #40]	; (800780c <HAL_RCC_ClockConfig+0x1c0>)
 80077e4:	5ccb      	ldrb	r3, [r1, r3]
 80077e6:	fa22 f303 	lsr.w	r3, r2, r3
 80077ea:	4a09      	ldr	r2, [pc, #36]	; (8007810 <HAL_RCC_ClockConfig+0x1c4>)
 80077ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077ee:	4b09      	ldr	r3, [pc, #36]	; (8007814 <HAL_RCC_ClockConfig+0x1c8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fb fa14 	bl	8002c20 <HAL_InitTick>

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40023c00 	.word	0x40023c00
 8007808:	40023800 	.word	0x40023800
 800780c:	0800fa80 	.word	0x0800fa80
 8007810:	20000000 	.word	0x20000000
 8007814:	20000004 	.word	0x20000004

08007818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007818:	b5b0      	push	{r4, r5, r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800781e:	2100      	movs	r1, #0
 8007820:	6079      	str	r1, [r7, #4]
 8007822:	2100      	movs	r1, #0
 8007824:	60f9      	str	r1, [r7, #12]
 8007826:	2100      	movs	r1, #0
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800782a:	2100      	movs	r1, #0
 800782c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800782e:	4952      	ldr	r1, [pc, #328]	; (8007978 <HAL_RCC_GetSysClockFreq+0x160>)
 8007830:	6889      	ldr	r1, [r1, #8]
 8007832:	f001 010c 	and.w	r1, r1, #12
 8007836:	2908      	cmp	r1, #8
 8007838:	d00d      	beq.n	8007856 <HAL_RCC_GetSysClockFreq+0x3e>
 800783a:	2908      	cmp	r1, #8
 800783c:	f200 8094 	bhi.w	8007968 <HAL_RCC_GetSysClockFreq+0x150>
 8007840:	2900      	cmp	r1, #0
 8007842:	d002      	beq.n	800784a <HAL_RCC_GetSysClockFreq+0x32>
 8007844:	2904      	cmp	r1, #4
 8007846:	d003      	beq.n	8007850 <HAL_RCC_GetSysClockFreq+0x38>
 8007848:	e08e      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800784a:	4b4c      	ldr	r3, [pc, #304]	; (800797c <HAL_RCC_GetSysClockFreq+0x164>)
 800784c:	60bb      	str	r3, [r7, #8]
       break;
 800784e:	e08e      	b.n	800796e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007850:	4b4b      	ldr	r3, [pc, #300]	; (8007980 <HAL_RCC_GetSysClockFreq+0x168>)
 8007852:	60bb      	str	r3, [r7, #8]
      break;
 8007854:	e08b      	b.n	800796e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007856:	4948      	ldr	r1, [pc, #288]	; (8007978 <HAL_RCC_GetSysClockFreq+0x160>)
 8007858:	6849      	ldr	r1, [r1, #4]
 800785a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800785e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007860:	4945      	ldr	r1, [pc, #276]	; (8007978 <HAL_RCC_GetSysClockFreq+0x160>)
 8007862:	6849      	ldr	r1, [r1, #4]
 8007864:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007868:	2900      	cmp	r1, #0
 800786a:	d024      	beq.n	80078b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800786c:	4942      	ldr	r1, [pc, #264]	; (8007978 <HAL_RCC_GetSysClockFreq+0x160>)
 800786e:	6849      	ldr	r1, [r1, #4]
 8007870:	0989      	lsrs	r1, r1, #6
 8007872:	4608      	mov	r0, r1
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	f240 14ff 	movw	r4, #511	; 0x1ff
 800787c:	f04f 0500 	mov.w	r5, #0
 8007880:	ea00 0204 	and.w	r2, r0, r4
 8007884:	ea01 0305 	and.w	r3, r1, r5
 8007888:	493d      	ldr	r1, [pc, #244]	; (8007980 <HAL_RCC_GetSysClockFreq+0x168>)
 800788a:	fb01 f003 	mul.w	r0, r1, r3
 800788e:	2100      	movs	r1, #0
 8007890:	fb01 f102 	mul.w	r1, r1, r2
 8007894:	1844      	adds	r4, r0, r1
 8007896:	493a      	ldr	r1, [pc, #232]	; (8007980 <HAL_RCC_GetSysClockFreq+0x168>)
 8007898:	fba2 0101 	umull	r0, r1, r2, r1
 800789c:	1863      	adds	r3, r4, r1
 800789e:	4619      	mov	r1, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	461a      	mov	r2, r3
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	f7f8 fec6 	bl	8000638 <__aeabi_uldivmod>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4613      	mov	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e04a      	b.n	800794c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078b6:	4b30      	ldr	r3, [pc, #192]	; (8007978 <HAL_RCC_GetSysClockFreq+0x160>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	099b      	lsrs	r3, r3, #6
 80078bc:	461a      	mov	r2, r3
 80078be:	f04f 0300 	mov.w	r3, #0
 80078c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078c6:	f04f 0100 	mov.w	r1, #0
 80078ca:	ea02 0400 	and.w	r4, r2, r0
 80078ce:	ea03 0501 	and.w	r5, r3, r1
 80078d2:	4620      	mov	r0, r4
 80078d4:	4629      	mov	r1, r5
 80078d6:	f04f 0200 	mov.w	r2, #0
 80078da:	f04f 0300 	mov.w	r3, #0
 80078de:	014b      	lsls	r3, r1, #5
 80078e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80078e4:	0142      	lsls	r2, r0, #5
 80078e6:	4610      	mov	r0, r2
 80078e8:	4619      	mov	r1, r3
 80078ea:	1b00      	subs	r0, r0, r4
 80078ec:	eb61 0105 	sbc.w	r1, r1, r5
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	018b      	lsls	r3, r1, #6
 80078fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80078fe:	0182      	lsls	r2, r0, #6
 8007900:	1a12      	subs	r2, r2, r0
 8007902:	eb63 0301 	sbc.w	r3, r3, r1
 8007906:	f04f 0000 	mov.w	r0, #0
 800790a:	f04f 0100 	mov.w	r1, #0
 800790e:	00d9      	lsls	r1, r3, #3
 8007910:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007914:	00d0      	lsls	r0, r2, #3
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	1912      	adds	r2, r2, r4
 800791c:	eb45 0303 	adc.w	r3, r5, r3
 8007920:	f04f 0000 	mov.w	r0, #0
 8007924:	f04f 0100 	mov.w	r1, #0
 8007928:	0299      	lsls	r1, r3, #10
 800792a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800792e:	0290      	lsls	r0, r2, #10
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4610      	mov	r0, r2
 8007936:	4619      	mov	r1, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	461a      	mov	r2, r3
 800793c:	f04f 0300 	mov.w	r3, #0
 8007940:	f7f8 fe7a 	bl	8000638 <__aeabi_uldivmod>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4613      	mov	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <HAL_RCC_GetSysClockFreq+0x160>)
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	0c1b      	lsrs	r3, r3, #16
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	3301      	adds	r3, #1
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	fbb2 f3f3 	udiv	r3, r2, r3
 8007964:	60bb      	str	r3, [r7, #8]
      break;
 8007966:	e002      	b.n	800796e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007968:	4b04      	ldr	r3, [pc, #16]	; (800797c <HAL_RCC_GetSysClockFreq+0x164>)
 800796a:	60bb      	str	r3, [r7, #8]
      break;
 800796c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800796e:	68bb      	ldr	r3, [r7, #8]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bdb0      	pop	{r4, r5, r7, pc}
 8007978:	40023800 	.word	0x40023800
 800797c:	00f42400 	.word	0x00f42400
 8007980:	00b71b00 	.word	0x00b71b00

08007984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007984:	b480      	push	{r7}
 8007986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007988:	4b03      	ldr	r3, [pc, #12]	; (8007998 <HAL_RCC_GetHCLKFreq+0x14>)
 800798a:	681b      	ldr	r3, [r3, #0]
}
 800798c:	4618      	mov	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20000000 	.word	0x20000000

0800799c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079a0:	f7ff fff0 	bl	8007984 <HAL_RCC_GetHCLKFreq>
 80079a4:	4602      	mov	r2, r0
 80079a6:	4b05      	ldr	r3, [pc, #20]	; (80079bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	0a9b      	lsrs	r3, r3, #10
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	4903      	ldr	r1, [pc, #12]	; (80079c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079b2:	5ccb      	ldrb	r3, [r1, r3]
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40023800 	.word	0x40023800
 80079c0:	0800fa90 	.word	0x0800fa90

080079c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079c8:	f7ff ffdc 	bl	8007984 <HAL_RCC_GetHCLKFreq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	0b5b      	lsrs	r3, r3, #13
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	4903      	ldr	r1, [pc, #12]	; (80079e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079da:	5ccb      	ldrb	r3, [r1, r3]
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40023800 	.word	0x40023800
 80079e8:	0800fa90 	.word	0x0800fa90

080079ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	220f      	movs	r2, #15
 80079fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079fc:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <HAL_RCC_GetClockConfig+0x5c>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f003 0203 	and.w	r2, r3, #3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <HAL_RCC_GetClockConfig+0x5c>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <HAL_RCC_GetClockConfig+0x5c>)
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a20:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <HAL_RCC_GetClockConfig+0x5c>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	08db      	lsrs	r3, r3, #3
 8007a26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a2e:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <HAL_RCC_GetClockConfig+0x60>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 020f 	and.w	r2, r3, #15
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	601a      	str	r2, [r3, #0]
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40023c00 	.word	0x40023c00

08007a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d075      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a84:	4bad      	ldr	r3, [pc, #692]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a8a:	f7fb fa11 	bl	8002eb0 <HAL_GetTick>
 8007a8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a92:	f7fb fa0d 	bl	8002eb0 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e18b      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007aa4:	4ba6      	ldr	r3, [pc, #664]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1f0      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d009      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	019a      	lsls	r2, r3, #6
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	071b      	lsls	r3, r3, #28
 8007ac8:	499d      	ldr	r1, [pc, #628]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d01f      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007adc:	4b98      	ldr	r3, [pc, #608]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae2:	0f1b      	lsrs	r3, r3, #28
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	019a      	lsls	r2, r3, #6
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	061b      	lsls	r3, r3, #24
 8007af6:	431a      	orrs	r2, r3
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	071b      	lsls	r3, r3, #28
 8007afc:	4990      	ldr	r1, [pc, #576]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007b04:	4b8e      	ldr	r3, [pc, #568]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b0a:	f023 021f 	bic.w	r2, r3, #31
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	498a      	ldr	r1, [pc, #552]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00d      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	019a      	lsls	r2, r3, #6
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	061b      	lsls	r3, r3, #24
 8007b34:	431a      	orrs	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	071b      	lsls	r3, r3, #28
 8007b3c:	4980      	ldr	r1, [pc, #512]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b44:	4b7d      	ldr	r3, [pc, #500]	; (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b4a:	f7fb f9b1 	bl	8002eb0 <HAL_GetTick>
 8007b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b50:	e008      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b52:	f7fb f9ad 	bl	8002eb0 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e12b      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b64:	4b76      	ldr	r3, [pc, #472]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0f0      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d079      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b88:	4b6e      	ldr	r3, [pc, #440]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b8e:	f7fb f98f 	bl	8002eb0 <HAL_GetTick>
 8007b92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b94:	e008      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b96:	f7fb f98b 	bl	8002eb0 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e109      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ba8:	4b65      	ldr	r3, [pc, #404]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb4:	d0ef      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d020      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007bc2:	4b5f      	ldr	r3, [pc, #380]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	0f1b      	lsrs	r3, r3, #28
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	019a      	lsls	r2, r3, #6
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	061b      	lsls	r3, r3, #24
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	071b      	lsls	r3, r3, #28
 8007be2:	4957      	ldr	r1, [pc, #348]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007bea:	4b55      	ldr	r3, [pc, #340]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bf0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	4950      	ldr	r1, [pc, #320]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01e      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c10:	4b4b      	ldr	r3, [pc, #300]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c16:	0e1b      	lsrs	r3, r3, #24
 8007c18:	f003 030f 	and.w	r3, r3, #15
 8007c1c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	019a      	lsls	r2, r3, #6
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	061b      	lsls	r3, r3, #24
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	071b      	lsls	r3, r3, #28
 8007c30:	4943      	ldr	r1, [pc, #268]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007c38:	4b41      	ldr	r3, [pc, #260]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c46:	493e      	ldr	r1, [pc, #248]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007c4e:	4b3d      	ldr	r3, [pc, #244]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c54:	f7fb f92c 	bl	8002eb0 <HAL_GetTick>
 8007c58:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007c5c:	f7fb f928 	bl	8002eb0 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e0a6      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c6e:	4b34      	ldr	r3, [pc, #208]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c7a:	d1ef      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0320 	and.w	r3, r3, #32
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 808d 	beq.w	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	4b2c      	ldr	r3, [pc, #176]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c92:	4a2b      	ldr	r2, [pc, #172]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c98:	6413      	str	r3, [r2, #64]	; 0x40
 8007c9a:	4b29      	ldr	r3, [pc, #164]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ca6:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a27      	ldr	r2, [pc, #156]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cb2:	f7fb f8fd 	bl	8002eb0 <HAL_GetTick>
 8007cb6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007cb8:	e008      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cba:	f7fb f8f9 	bl	8002eb0 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e077      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ccc:	4b1e      	ldr	r3, [pc, #120]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0f0      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cd8:	4b19      	ldr	r3, [pc, #100]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d039      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d032      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cf6:	4b12      	ldr	r3, [pc, #72]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d00:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007d02:	2201      	movs	r2, #1
 8007d04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007d0c:	4a0c      	ldr	r2, [pc, #48]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d12:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d11e      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007d1e:	f7fb f8c7 	bl	8002eb0 <HAL_GetTick>
 8007d22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d24:	e014      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d26:	f7fb f8c3 	bl	8002eb0 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d90b      	bls.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e03f      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007d3c:	42470068 	.word	0x42470068
 8007d40:	40023800 	.word	0x40023800
 8007d44:	42470070 	.word	0x42470070
 8007d48:	40007000 	.word	0x40007000
 8007d4c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d50:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0e4      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d68:	d10d      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007d6a:	4b16      	ldr	r3, [pc, #88]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d7e:	4911      	ldr	r1, [pc, #68]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	608b      	str	r3, [r1, #8]
 8007d84:	e005      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	4a0e      	ldr	r2, [pc, #56]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d90:	6093      	str	r3, [r2, #8]
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007d94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d9e:	4909      	ldr	r1, [pc, #36]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007db6:	4b04      	ldr	r3, [pc, #16]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007db8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	424711e0 	.word	0x424711e0

08007dcc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e022      	b.n	8007e24 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fa fc85 	bl	8002700 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2203      	movs	r2, #3
 8007dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f814 	bl	8007e2c <HAL_SD_InitCard>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e00a      	b.n	8007e24 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e2c:	b5b0      	push	{r4, r5, r7, lr}
 8007e2e:	b08e      	sub	sp, #56	; 0x38
 8007e30:	af04      	add	r7, sp, #16
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e44:	2300      	movs	r3, #0
 8007e46:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007e48:	2376      	movs	r3, #118	; 0x76
 8007e4a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681d      	ldr	r5, [r3, #0]
 8007e50:	466c      	mov	r4, sp
 8007e52:	f107 0314 	add.w	r3, r7, #20
 8007e56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e5e:	f107 0308 	add.w	r3, r7, #8
 8007e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e64:	4628      	mov	r0, r5
 8007e66:	f001 ff95 	bl	8009d94 <SDIO_Init>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e04c      	b.n	8007f16 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007e7c:	4b28      	ldr	r3, [pc, #160]	; (8007f20 <HAL_SD_InitCard+0xf4>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f001 ffbc 	bl	8009e04 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007e8c:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <HAL_SD_InitCard+0xf4>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fe10 	bl	8008ab8 <SD_PowerON>
 8007e98:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e02e      	b.n	8007f16 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fd31 	bl	8008920 <SD_InitCard>
 8007ebe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00b      	beq.n	8007ede <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e01b      	b.n	8007f16 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f002 f81f 	bl	8009f2a <SDMMC_CmdBlockLength>
 8007eec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00f      	beq.n	8007f14 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a0a      	ldr	r2, [pc, #40]	; (8007f24 <HAL_SD_InitCard+0xf8>)
 8007efa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e000      	b.n	8007f16 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3728      	adds	r7, #40	; 0x28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	422580a0 	.word	0x422580a0
 8007f24:	004005ff 	.word	0x004005ff

08007f28 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08c      	sub	sp, #48	; 0x30
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d107      	bne.n	8007f50 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e0c0      	b.n	80080d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	f040 80b9 	bne.w	80080d0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	441a      	add	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d907      	bls.n	8007f82 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e0a7      	b.n	80080d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2203      	movs	r2, #3
 8007f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007fa0:	f043 0302 	orr.w	r3, r3, #2
 8007fa4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	4a4c      	ldr	r2, [pc, #304]	; (80080dc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	4a4b      	ldr	r2, [pc, #300]	; (80080e0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007fb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	2200      	movs	r2, #0
 8007fbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3380      	adds	r3, #128	; 0x80
 8007fec:	4619      	mov	r1, r3
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	025b      	lsls	r3, r3, #9
 8007ff4:	089b      	lsrs	r3, r3, #2
 8007ff6:	f7fb fbff 	bl	80037f8 <HAL_DMA_Start_IT>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d017      	beq.n	8008030 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800800e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a33      	ldr	r2, [pc, #204]	; (80080e4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008016:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e050      	b.n	80080d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008030:	4b2d      	ldr	r3, [pc, #180]	; (80080e8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008032:	2201      	movs	r2, #1
 8008034:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803a:	2b01      	cmp	r3, #1
 800803c:	d002      	beq.n	8008044 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	025b      	lsls	r3, r3, #9
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008044:	f04f 33ff 	mov.w	r3, #4294967295
 8008048:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	025b      	lsls	r3, r3, #9
 800804e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008050:	2390      	movs	r3, #144	; 0x90
 8008052:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008054:	2302      	movs	r3, #2
 8008056:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008058:	2300      	movs	r3, #0
 800805a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800805c:	2301      	movs	r3, #1
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f107 0210 	add.w	r2, r7, #16
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f001 ff31 	bl	8009ed2 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d90a      	bls.n	800808c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2282      	movs	r2, #130	; 0x82
 800807a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008082:	4618      	mov	r0, r3
 8008084:	f001 ff95 	bl	8009fb2 <SDMMC_CmdReadMultiBlock>
 8008088:	62f8      	str	r0, [r7, #44]	; 0x2c
 800808a:	e009      	b.n	80080a0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2281      	movs	r2, #129	; 0x81
 8008090:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008098:	4618      	mov	r0, r3
 800809a:	f001 ff68 	bl	8009f6e <SDMMC_CmdReadSingleBlock>
 800809e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d012      	beq.n	80080cc <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a0e      	ldr	r2, [pc, #56]	; (80080e4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80080ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	431a      	orrs	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e002      	b.n	80080d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	e000      	b.n	80080d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80080d0:	2302      	movs	r3, #2
  }
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3730      	adds	r7, #48	; 0x30
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	0800880b 	.word	0x0800880b
 80080e0:	0800887d 	.word	0x0800887d
 80080e4:	004005ff 	.word	0x004005ff
 80080e8:	4225858c 	.word	0x4225858c

080080ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08c      	sub	sp, #48	; 0x30
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d107      	bne.n	8008114 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e0c5      	b.n	80082a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b01      	cmp	r3, #1
 800811e:	f040 80be 	bne.w	800829e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	441a      	add	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008132:	429a      	cmp	r2, r3
 8008134:	d907      	bls.n	8008146 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e0ac      	b.n	80082a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2203      	movs	r2, #3
 800814a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2200      	movs	r2, #0
 8008154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8008164:	f043 0302 	orr.w	r3, r3, #2
 8008168:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816e:	4a4e      	ldr	r2, [pc, #312]	; (80082a8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008170:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008176:	4a4d      	ldr	r2, [pc, #308]	; (80082ac <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008178:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	2200      	movs	r2, #0
 8008180:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008186:	2b01      	cmp	r3, #1
 8008188:	d002      	beq.n	8008190 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	025b      	lsls	r3, r3, #9
 800818e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d90a      	bls.n	80081ac <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	22a0      	movs	r2, #160	; 0xa0
 800819a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a2:	4618      	mov	r0, r3
 80081a4:	f001 ff49 	bl	800a03a <SDMMC_CmdWriteMultiBlock>
 80081a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80081aa:	e009      	b.n	80081c0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2290      	movs	r2, #144	; 0x90
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 ff1c 	bl	8009ff6 <SDMMC_CmdWriteSingleBlock>
 80081be:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d012      	beq.n	80081ec <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a39      	ldr	r2, [pc, #228]	; (80082b0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80081cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d4:	431a      	orrs	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e059      	b.n	80082a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80081ec:	4b31      	ldr	r3, [pc, #196]	; (80082b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80081ee:	2201      	movs	r2, #1
 80081f0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	2240      	movs	r2, #64	; 0x40
 80081f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3380      	adds	r3, #128	; 0x80
 8008222:	461a      	mov	r2, r3
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	025b      	lsls	r3, r3, #9
 8008228:	089b      	lsrs	r3, r3, #2
 800822a:	f7fb fae5 	bl	80037f8 <HAL_DMA_Start_IT>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d01c      	beq.n	800826e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8008242:	f023 0302 	bic.w	r3, r3, #2
 8008246:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a18      	ldr	r2, [pc, #96]	; (80082b0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800824e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e018      	b.n	80082a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800826e:	f04f 33ff 	mov.w	r3, #4294967295
 8008272:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	025b      	lsls	r3, r3, #9
 8008278:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800827a:	2390      	movs	r3, #144	; 0x90
 800827c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008282:	2300      	movs	r3, #0
 8008284:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008286:	2301      	movs	r3, #1
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f107 0210 	add.w	r2, r7, #16
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f001 fe1c 	bl	8009ed2 <SDIO_ConfigData>

      return HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	e000      	b.n	80082a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800829e:	2302      	movs	r3, #2
  }
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3730      	adds	r7, #48	; 0x30
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	080087e1 	.word	0x080087e1
 80082ac:	0800887d 	.word	0x0800887d
 80082b0:	004005ff 	.word	0x004005ff
 80082b4:	4225858c 	.word	0x4225858c

080082b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082da:	0f9b      	lsrs	r3, r3, #30
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e6:	0e9b      	lsrs	r3, r3, #26
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082f8:	0e1b      	lsrs	r3, r3, #24
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	b2da      	uxtb	r2, r3
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800830a:	0c1b      	lsrs	r3, r3, #16
 800830c:	b2da      	uxtb	r2, r3
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	b2da      	uxtb	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008322:	b2da      	uxtb	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800832c:	0d1b      	lsrs	r3, r3, #20
 800832e:	b29a      	uxth	r2, r3
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	b2da      	uxtb	r2, r3
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800834a:	0bdb      	lsrs	r3, r3, #15
 800834c:	b2db      	uxtb	r3, r3
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	b2da      	uxtb	r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800835c:	0b9b      	lsrs	r3, r3, #14
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	b2da      	uxtb	r2, r3
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800836e:	0b5b      	lsrs	r3, r3, #13
 8008370:	b2db      	uxtb	r3, r3
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	b2da      	uxtb	r2, r3
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008380:	0b1b      	lsrs	r3, r3, #12
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	b2da      	uxtb	r2, r3
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2200      	movs	r2, #0
 8008392:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008398:	2b00      	cmp	r3, #0
 800839a:	d163      	bne.n	8008464 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083a0:	009a      	lsls	r2, r3, #2
 80083a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80083a6:	4013      	ands	r3, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80083ac:	0f92      	lsrs	r2, r2, #30
 80083ae:	431a      	orrs	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b8:	0edb      	lsrs	r3, r3, #27
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	f003 0307 	and.w	r3, r3, #7
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ca:	0e1b      	lsrs	r3, r3, #24
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083dc:	0d5b      	lsrs	r3, r3, #21
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	f003 0307 	and.w	r3, r3, #7
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ee:	0c9b      	lsrs	r3, r3, #18
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008400:	0bdb      	lsrs	r3, r3, #15
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	b2da      	uxtb	r2, r3
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	7e1b      	ldrb	r3, [r3, #24]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	3302      	adds	r3, #2
 8008424:	2201      	movs	r2, #1
 8008426:	fa02 f303 	lsl.w	r3, r2, r3
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800842e:	fb02 f203 	mul.w	r2, r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	7a1b      	ldrb	r3, [r3, #8]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	2201      	movs	r2, #1
 8008442:	409a      	lsls	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008450:	0a52      	lsrs	r2, r2, #9
 8008452:	fb02 f203 	mul.w	r2, r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008460:	661a      	str	r2, [r3, #96]	; 0x60
 8008462:	e031      	b.n	80084c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008468:	2b01      	cmp	r3, #1
 800846a:	d11d      	bne.n	80084a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008470:	041b      	lsls	r3, r3, #16
 8008472:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800847a:	0c1b      	lsrs	r3, r3, #16
 800847c:	431a      	orrs	r2, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	3301      	adds	r3, #1
 8008488:	029a      	lsls	r2, r3, #10
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800849c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	661a      	str	r2, [r3, #96]	; 0x60
 80084a6:	e00f      	b.n	80084c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a58      	ldr	r2, [pc, #352]	; (8008610 <HAL_SD_GetCardCSD+0x344>)
 80084ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e09d      	b.n	8008604 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084cc:	0b9b      	lsrs	r3, r3, #14
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084de:	09db      	lsrs	r3, r3, #7
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008500:	0fdb      	lsrs	r3, r3, #31
 8008502:	b2da      	uxtb	r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850c:	0f5b      	lsrs	r3, r3, #29
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f003 0303 	and.w	r3, r3, #3
 8008514:	b2da      	uxtb	r2, r3
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851e:	0e9b      	lsrs	r3, r3, #26
 8008520:	b2db      	uxtb	r3, r3
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	b2da      	uxtb	r2, r3
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008530:	0d9b      	lsrs	r3, r3, #22
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 030f 	and.w	r3, r3, #15
 8008538:	b2da      	uxtb	r2, r3
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008542:	0d5b      	lsrs	r3, r3, #21
 8008544:	b2db      	uxtb	r3, r3
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	b2da      	uxtb	r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855e:	0c1b      	lsrs	r3, r3, #16
 8008560:	b2db      	uxtb	r3, r3
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	b2da      	uxtb	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	0bdb      	lsrs	r3, r3, #15
 8008574:	b2db      	uxtb	r3, r3
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	b2da      	uxtb	r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008586:	0b9b      	lsrs	r3, r3, #14
 8008588:	b2db      	uxtb	r3, r3
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	b2da      	uxtb	r2, r3
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859a:	0b5b      	lsrs	r3, r3, #13
 800859c:	b2db      	uxtb	r3, r3
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ae:	0b1b      	lsrs	r3, r3, #12
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c2:	0a9b      	lsrs	r3, r3, #10
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f003 0303 	and.w	r3, r3, #3
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	0a1b      	lsrs	r3, r3, #8
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ea:	085b      	lsrs	r3, r3, #1
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	004005ff 	.word	0x004005ff

08008614 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800866c:	b5b0      	push	{r4, r5, r7, lr}
 800866e:	b08e      	sub	sp, #56	; 0x38
 8008670:	af04      	add	r7, sp, #16
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2203      	movs	r2, #3
 8008680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008688:	2b03      	cmp	r3, #3
 800868a:	d02e      	beq.n	80086ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008692:	d106      	bne.n	80086a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008698:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	639a      	str	r2, [r3, #56]	; 0x38
 80086a0:	e029      	b.n	80086f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a8:	d10a      	bne.n	80086c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 faba 	bl	8008c24 <SD_WideBus_Enable>
 80086b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	431a      	orrs	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38
 80086be:	e01a      	b.n	80086f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10a      	bne.n	80086dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 faf7 	bl	8008cba <SD_WideBus_Disable>
 80086cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	431a      	orrs	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	639a      	str	r2, [r3, #56]	; 0x38
 80086da:	e00c      	b.n	80086f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	639a      	str	r2, [r3, #56]	; 0x38
 80086e8:	e005      	b.n	80086f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a26      	ldr	r2, [pc, #152]	; (800879c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008704:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008714:	e01f      	b.n	8008756 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681d      	ldr	r5, [r3, #0]
 800873c:	466c      	mov	r4, sp
 800873e:	f107 0314 	add.w	r3, r7, #20
 8008742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800874a:	f107 0308 	add.w	r3, r7, #8
 800874e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008750:	4628      	mov	r0, r5
 8008752:	f001 fb1f 	bl	8009d94 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800875e:	4618      	mov	r0, r3
 8008760:	f001 fbe3 	bl	8009f2a <SDMMC_CmdBlockLength>
 8008764:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00c      	beq.n	8008786 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a0a      	ldr	r2, [pc, #40]	; (800879c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008772:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800878e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008792:	4618      	mov	r0, r3
 8008794:	3728      	adds	r7, #40	; 0x28
 8008796:	46bd      	mov	sp, r7
 8008798:	bdb0      	pop	{r4, r5, r7, pc}
 800879a:	bf00      	nop
 800879c:	004005ff 	.word	0x004005ff

080087a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80087ac:	f107 030c 	add.w	r3, r7, #12
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fa0e 	bl	8008bd4 <SD_SendStatus>
 80087b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	0a5b      	lsrs	r3, r3, #9
 80087d0:	f003 030f 	and.w	r3, r3, #15
 80087d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80087d6:	693b      	ldr	r3, [r7, #16]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	2b82      	cmp	r3, #130	; 0x82
 800881e:	d111      	bne.n	8008844 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f001 fc2b 	bl	800a080 <SDMMC_CmdStopTransfer>
 800882a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d008      	beq.n	8008844 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	431a      	orrs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f7ff fd3a 	bl	80082b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0208 	bic.w	r2, r2, #8
 8008852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f240 523a 	movw	r2, #1338	; 0x53a
 800885c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f002 fb35 	bl	800aedc <HAL_SD_RxCpltCallback>
#endif
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7fb f9c6 	bl	8003c1c <HAL_DMA_GetError>
 8008890:	4603      	mov	r3, r0
 8008892:	2b02      	cmp	r3, #2
 8008894:	d03e      	beq.n	8008914 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d002      	beq.n	80088b2 <SD_DMAError+0x36>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d12d      	bne.n	800890e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a19      	ldr	r2, [pc, #100]	; (800891c <SD_DMAError+0xa0>)
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80088c8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f7ff ff62 	bl	80087a0 <HAL_SD_GetCardState>
 80088dc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2b06      	cmp	r3, #6
 80088e2:	d002      	beq.n	80088ea <SD_DMAError+0x6e>
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	d10a      	bne.n	8008900 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 fbc6 	bl	800a080 <SDMMC_CmdStopTransfer>
 80088f4:	4602      	mov	r2, r0
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	431a      	orrs	r2, r3
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2200      	movs	r2, #0
 800890c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800890e:	6978      	ldr	r0, [r7, #20]
 8008910:	f7ff fcd2 	bl	80082b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008914:	bf00      	nop
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	004005ff 	.word	0x004005ff

08008920 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008920:	b5b0      	push	{r4, r5, r7, lr}
 8008922:	b094      	sub	sp, #80	; 0x50
 8008924:	af04      	add	r7, sp, #16
 8008926:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008928:	2301      	movs	r3, #1
 800892a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f001 fa76 	bl	8009e22 <SDIO_GetPowerState>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800893c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008940:	e0b6      	b.n	8008ab0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008946:	2b03      	cmp	r3, #3
 8008948:	d02f      	beq.n	80089aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f001 fca0 	bl	800a294 <SDMMC_CmdSendCID>
 8008954:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <SD_InitCard+0x40>
    {
      return errorstate;
 800895c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895e:	e0a7      	b.n	8008ab0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2100      	movs	r1, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f001 faa0 	bl	8009eac <SDIO_GetResponse>
 800896c:	4602      	mov	r2, r0
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2104      	movs	r1, #4
 8008978:	4618      	mov	r0, r3
 800897a:	f001 fa97 	bl	8009eac <SDIO_GetResponse>
 800897e:	4602      	mov	r2, r0
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2108      	movs	r1, #8
 800898a:	4618      	mov	r0, r3
 800898c:	f001 fa8e 	bl	8009eac <SDIO_GetResponse>
 8008990:	4602      	mov	r2, r0
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	210c      	movs	r1, #12
 800899c:	4618      	mov	r0, r3
 800899e:	f001 fa85 	bl	8009eac <SDIO_GetResponse>
 80089a2:	4602      	mov	r2, r0
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d00d      	beq.n	80089ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f107 020e 	add.w	r2, r7, #14
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f001 fca6 	bl	800a30e <SDMMC_CmdSetRelAdd>
 80089c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80089c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <SD_InitCard+0xae>
    {
      return errorstate;
 80089ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089cc:	e070      	b.n	8008ab0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d2:	2b03      	cmp	r3, #3
 80089d4:	d036      	beq.n	8008a44 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80089d6:	89fb      	ldrh	r3, [r7, #14]
 80089d8:	461a      	mov	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e6:	041b      	lsls	r3, r3, #16
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f001 fc70 	bl	800a2d0 <SDMMC_CmdSendCSD>
 80089f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80089f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80089f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089fa:	e059      	b.n	8008ab0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f001 fa52 	bl	8009eac <SDIO_GetResponse>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2104      	movs	r1, #4
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 fa49 	bl	8009eac <SDIO_GetResponse>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2108      	movs	r1, #8
 8008a26:	4618      	mov	r0, r3
 8008a28:	f001 fa40 	bl	8009eac <SDIO_GetResponse>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	210c      	movs	r1, #12
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f001 fa37 	bl	8009eac <SDIO_GetResponse>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2104      	movs	r1, #4
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 fa2e 	bl	8009eac <SDIO_GetResponse>
 8008a50:	4603      	mov	r3, r0
 8008a52:	0d1a      	lsrs	r2, r3, #20
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008a58:	f107 0310 	add.w	r3, r7, #16
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff fc34 	bl	80082cc <HAL_SD_GetCardCSD>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a6e:	e01f      	b.n	8008ab0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6819      	ldr	r1, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a78:	041b      	lsls	r3, r3, #16
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	4608      	mov	r0, r1
 8008a82:	f001 fb1f 	bl	800a0c4 <SDMMC_CmdSelDesel>
 8008a86:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <SD_InitCard+0x172>
  {
    return errorstate;
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a90:	e00e      	b.n	8008ab0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681d      	ldr	r5, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	466c      	mov	r4, sp
 8008a9a:	f103 0210 	add.w	r2, r3, #16
 8008a9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008aa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f001 f973 	bl	8009d94 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3740      	adds	r7, #64	; 0x40
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bdb0      	pop	{r4, r5, r7, pc}

08008ab8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 fb1a 	bl	800a10a <SDMMC_CmdGoIdleState>
 8008ad6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	e072      	b.n	8008bc8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 fb2d 	bl	800a146 <SDMMC_CmdOperCond>
 8008aec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00d      	beq.n	8008b10 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f001 fb03 	bl	800a10a <SDMMC_CmdGoIdleState>
 8008b04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d004      	beq.n	8008b16 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	e05b      	b.n	8008bc8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d137      	bne.n	8008b8e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f001 fb2d 	bl	800a184 <SDMMC_CmdAppCommand>
 8008b2a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d02d      	beq.n	8008b8e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b36:	e047      	b.n	8008bc8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 fb20 	bl	800a184 <SDMMC_CmdAppCommand>
 8008b44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <SD_PowerON+0x98>
    {
      return errorstate;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	e03b      	b.n	8008bc8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	491e      	ldr	r1, [pc, #120]	; (8008bd0 <SD_PowerON+0x118>)
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 fb36 	bl	800a1c8 <SDMMC_CmdAppOperCommand>
 8008b5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b68:	e02e      	b.n	8008bc8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 f99b 	bl	8009eac <SDIO_GetResponse>
 8008b76:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	0fdb      	lsrs	r3, r3, #31
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <SD_PowerON+0xcc>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <SD_PowerON+0xce>
 8008b84:	2300      	movs	r3, #0
 8008b86:	613b      	str	r3, [r7, #16]

    count++;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d802      	bhi.n	8008b9e <SD_PowerON+0xe6>
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0cc      	beq.n	8008b38 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d902      	bls.n	8008bae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bac:	e00c      	b.n	8008bc8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	645a      	str	r2, [r3, #68]	; 0x44
 8008bbe:	e002      	b.n	8008bc6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	c1100000 	.word	0xc1100000

08008bd4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008be8:	e018      	b.n	8008c1c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf2:	041b      	lsls	r3, r3, #16
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f001 fbaa 	bl	800a350 <SDMMC_CmdSendStatus>
 8008bfc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	e009      	b.n	8008c1c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f001 f94c 	bl	8009eac <SDIO_GetResponse>
 8008c14:	4602      	mov	r2, r0
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b086      	sub	sp, #24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	2300      	movs	r3, #0
 8008c32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f001 f936 	bl	8009eac <SDIO_GetResponse>
 8008c40:	4603      	mov	r3, r0
 8008c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c4a:	d102      	bne.n	8008c52 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c50:	e02f      	b.n	8008cb2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c52:	f107 030c 	add.w	r3, r7, #12
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f879 	bl	8008d50 <SD_FindSCR>
 8008c5e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	e023      	b.n	8008cb2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01c      	beq.n	8008cae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7c:	041b      	lsls	r3, r3, #16
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f001 fa7f 	bl	800a184 <SDMMC_CmdAppCommand>
 8008c86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	e00f      	b.n	8008cb2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2102      	movs	r1, #2
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 fab8 	bl	800a20e <SDMMC_CmdBusWidth>
 8008c9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	e003      	b.n	8008cb2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	e001      	b.n	8008cb2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008cae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b086      	sub	sp, #24
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f001 f8eb 	bl	8009eac <SDIO_GetResponse>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ce0:	d102      	bne.n	8008ce8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ce2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ce6:	e02f      	b.n	8008d48 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ce8:	f107 030c 	add.w	r3, r7, #12
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f82e 	bl	8008d50 <SD_FindSCR>
 8008cf4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	e023      	b.n	8008d48 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d01c      	beq.n	8008d44 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d12:	041b      	lsls	r3, r3, #16
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f001 fa34 	bl	800a184 <SDMMC_CmdAppCommand>
 8008d1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	e00f      	b.n	8008d48 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 fa6d 	bl	800a20e <SDMMC_CmdBusWidth>
 8008d34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	e003      	b.n	8008d48 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e001      	b.n	8008d48 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d50:	b590      	push	{r4, r7, lr}
 8008d52:	b08f      	sub	sp, #60	; 0x3c
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d5a:	f7fa f8a9 	bl	8002eb0 <HAL_GetTick>
 8008d5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008d64:	2300      	movs	r3, #0
 8008d66:	60bb      	str	r3, [r7, #8]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2108      	movs	r1, #8
 8008d76:	4618      	mov	r0, r3
 8008d78:	f001 f8d7 	bl	8009f2a <SDMMC_CmdBlockLength>
 8008d7c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	e0b2      	b.n	8008eee <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d90:	041b      	lsls	r3, r3, #16
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f001 f9f5 	bl	800a184 <SDMMC_CmdAppCommand>
 8008d9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	e0a3      	b.n	8008eee <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008da6:	f04f 33ff 	mov.w	r3, #4294967295
 8008daa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008dac:	2308      	movs	r3, #8
 8008dae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008db0:	2330      	movs	r3, #48	; 0x30
 8008db2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008db4:	2302      	movs	r3, #2
 8008db6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f107 0210 	add.w	r2, r7, #16
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 f881 	bl	8009ed2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fa3c 	bl	800a252 <SDMMC_CmdSendSCR>
 8008dda:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d02a      	beq.n	8008e38 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	e083      	b.n	8008eee <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00f      	beq.n	8008e14 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6819      	ldr	r1, [r3, #0]
 8008df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	f107 0208 	add.w	r2, r7, #8
 8008e00:	18d4      	adds	r4, r2, r3
 8008e02:	4608      	mov	r0, r1
 8008e04:	f000 fff1 	bl	8009dea <SDIO_ReadFIFO>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	6023      	str	r3, [r4, #0]
      index++;
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0e:	3301      	adds	r3, #1
 8008e10:	637b      	str	r3, [r7, #52]	; 0x34
 8008e12:	e006      	b.n	8008e22 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d012      	beq.n	8008e48 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e22:	f7fa f845 	bl	8002eb0 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e30:	d102      	bne.n	8008e38 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e36:	e05a      	b.n	8008eee <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0cf      	beq.n	8008de6 <SD_FindSCR+0x96>
 8008e46:	e000      	b.n	8008e4a <SD_FindSCR+0xfa>
      break;
 8008e48:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e50:	f003 0308 	and.w	r3, r3, #8
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d005      	beq.n	8008e64 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2208      	movs	r2, #8
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e60:	2308      	movs	r3, #8
 8008e62:	e044      	b.n	8008eee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d005      	beq.n	8008e7e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2202      	movs	r2, #2
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e037      	b.n	8008eee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d005      	beq.n	8008e98 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2220      	movs	r2, #32
 8008e92:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008e94:	2320      	movs	r3, #32
 8008e96:	e02a      	b.n	8008eee <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	061a      	lsls	r2, r3, #24
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	0a1b      	lsrs	r3, r3, #8
 8008eb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008eb8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	0e1b      	lsrs	r3, r3, #24
 8008ebe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	601a      	str	r2, [r3, #0]
    scr++;
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	061a      	lsls	r2, r3, #24
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	021b      	lsls	r3, r3, #8
 8008ed2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ed6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	0a1b      	lsrs	r3, r3, #8
 8008edc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ee0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	0e1b      	lsrs	r3, r3, #24
 8008ee6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	373c      	adds	r7, #60	; 0x3c
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd90      	pop	{r4, r7, pc}

08008ef6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b082      	sub	sp, #8
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e025      	b.n	8008f56 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7f9 fe74 	bl	8002c0c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3304      	adds	r3, #4
 8008f34:	4619      	mov	r1, r3
 8008f36:	4610      	mov	r0, r2
 8008f38:	f000 fe3a 	bl	8009bb0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	461a      	mov	r2, r3
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	f000 fea5 	bl	8009c96 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e07b      	b.n	8009068 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d108      	bne.n	8008f8a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f80:	d009      	beq.n	8008f96 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	61da      	str	r2, [r3, #28]
 8008f88:	e005      	b.n	8008f96 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7f9 fc0d 	bl	80027d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fcc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f003 0302 	and.w	r3, r3, #2
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009010:	431a      	orrs	r2, r3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901a:	ea42 0103 	orr.w	r1, r2, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	0c1b      	lsrs	r3, r3, #16
 8009034:	f003 0104 	and.w	r1, r3, #4
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	f003 0210 	and.w	r2, r3, #16
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	69da      	ldr	r2, [r3, #28]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009056:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e041      	b.n	8009106 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009088:	b2db      	uxtb	r3, r3
 800908a:	2b00      	cmp	r3, #0
 800908c:	d106      	bne.n	800909c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f839 	bl	800910e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f000 f9d8 	bl	8009464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009116:	bf00      	nop
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
	...

08009124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b01      	cmp	r3, #1
 8009136:	d001      	beq.n	800913c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e04e      	b.n	80091da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a23      	ldr	r2, [pc, #140]	; (80091e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d022      	beq.n	80091a4 <HAL_TIM_Base_Start_IT+0x80>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009166:	d01d      	beq.n	80091a4 <HAL_TIM_Base_Start_IT+0x80>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a1f      	ldr	r2, [pc, #124]	; (80091ec <HAL_TIM_Base_Start_IT+0xc8>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d018      	beq.n	80091a4 <HAL_TIM_Base_Start_IT+0x80>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a1e      	ldr	r2, [pc, #120]	; (80091f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d013      	beq.n	80091a4 <HAL_TIM_Base_Start_IT+0x80>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a1c      	ldr	r2, [pc, #112]	; (80091f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d00e      	beq.n	80091a4 <HAL_TIM_Base_Start_IT+0x80>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a1b      	ldr	r2, [pc, #108]	; (80091f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d009      	beq.n	80091a4 <HAL_TIM_Base_Start_IT+0x80>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a19      	ldr	r2, [pc, #100]	; (80091fc <HAL_TIM_Base_Start_IT+0xd8>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d004      	beq.n	80091a4 <HAL_TIM_Base_Start_IT+0x80>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a18      	ldr	r2, [pc, #96]	; (8009200 <HAL_TIM_Base_Start_IT+0xdc>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d111      	bne.n	80091c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b06      	cmp	r3, #6
 80091b4:	d010      	beq.n	80091d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0201 	orr.w	r2, r2, #1
 80091c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c6:	e007      	b.n	80091d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f042 0201 	orr.w	r2, r2, #1
 80091d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40010000 	.word	0x40010000
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	40000c00 	.word	0x40000c00
 80091f8:	40010400 	.word	0x40010400
 80091fc:	40014000 	.word	0x40014000
 8009200:	40001800 	.word	0x40001800

08009204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b02      	cmp	r3, #2
 8009218:	d122      	bne.n	8009260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b02      	cmp	r3, #2
 8009226:	d11b      	bne.n	8009260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f06f 0202 	mvn.w	r2, #2
 8009230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8ee 	bl	8009428 <HAL_TIM_IC_CaptureCallback>
 800924c:	e005      	b.n	800925a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f8e0 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f8f1 	bl	800943c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	f003 0304 	and.w	r3, r3, #4
 800926a:	2b04      	cmp	r3, #4
 800926c:	d122      	bne.n	80092b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b04      	cmp	r3, #4
 800927a:	d11b      	bne.n	80092b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f06f 0204 	mvn.w	r2, #4
 8009284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f8c4 	bl	8009428 <HAL_TIM_IC_CaptureCallback>
 80092a0:	e005      	b.n	80092ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f8b6 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f8c7 	bl	800943c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f003 0308 	and.w	r3, r3, #8
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d122      	bne.n	8009308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f003 0308 	and.w	r3, r3, #8
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d11b      	bne.n	8009308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f06f 0208 	mvn.w	r2, #8
 80092d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2204      	movs	r2, #4
 80092de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f89a 	bl	8009428 <HAL_TIM_IC_CaptureCallback>
 80092f4:	e005      	b.n	8009302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f88c 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f89d 	bl	800943c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	f003 0310 	and.w	r3, r3, #16
 8009312:	2b10      	cmp	r3, #16
 8009314:	d122      	bne.n	800935c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b10      	cmp	r3, #16
 8009322:	d11b      	bne.n	800935c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f06f 0210 	mvn.w	r2, #16
 800932c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2208      	movs	r2, #8
 8009332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f870 	bl	8009428 <HAL_TIM_IC_CaptureCallback>
 8009348:	e005      	b.n	8009356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 f862 	bl	8009414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f873 	bl	800943c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b01      	cmp	r3, #1
 8009368:	d10e      	bne.n	8009388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b01      	cmp	r3, #1
 8009376:	d107      	bne.n	8009388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f06f 0201 	mvn.w	r2, #1
 8009380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7f8 ff78 	bl	8002278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009392:	2b80      	cmp	r3, #128	; 0x80
 8009394:	d10e      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093a0:	2b80      	cmp	r3, #128	; 0x80
 80093a2:	d107      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f902 	bl	80095b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093be:	2b40      	cmp	r3, #64	; 0x40
 80093c0:	d10e      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093cc:	2b40      	cmp	r3, #64	; 0x40
 80093ce:	d107      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80093d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f838 	bl	8009450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d10e      	bne.n	800940c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0320 	and.w	r3, r3, #32
 80093f8:	2b20      	cmp	r3, #32
 80093fa:	d107      	bne.n	800940c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0220 	mvn.w	r2, #32
 8009404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f8cc 	bl	80095a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a40      	ldr	r2, [pc, #256]	; (8009578 <TIM_Base_SetConfig+0x114>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d013      	beq.n	80094a4 <TIM_Base_SetConfig+0x40>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009482:	d00f      	beq.n	80094a4 <TIM_Base_SetConfig+0x40>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a3d      	ldr	r2, [pc, #244]	; (800957c <TIM_Base_SetConfig+0x118>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d00b      	beq.n	80094a4 <TIM_Base_SetConfig+0x40>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a3c      	ldr	r2, [pc, #240]	; (8009580 <TIM_Base_SetConfig+0x11c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d007      	beq.n	80094a4 <TIM_Base_SetConfig+0x40>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a3b      	ldr	r2, [pc, #236]	; (8009584 <TIM_Base_SetConfig+0x120>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <TIM_Base_SetConfig+0x40>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a3a      	ldr	r2, [pc, #232]	; (8009588 <TIM_Base_SetConfig+0x124>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d108      	bne.n	80094b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a2f      	ldr	r2, [pc, #188]	; (8009578 <TIM_Base_SetConfig+0x114>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d02b      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c4:	d027      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a2c      	ldr	r2, [pc, #176]	; (800957c <TIM_Base_SetConfig+0x118>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d023      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a2b      	ldr	r2, [pc, #172]	; (8009580 <TIM_Base_SetConfig+0x11c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d01f      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a2a      	ldr	r2, [pc, #168]	; (8009584 <TIM_Base_SetConfig+0x120>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d01b      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a29      	ldr	r2, [pc, #164]	; (8009588 <TIM_Base_SetConfig+0x124>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d017      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a28      	ldr	r2, [pc, #160]	; (800958c <TIM_Base_SetConfig+0x128>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d013      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a27      	ldr	r2, [pc, #156]	; (8009590 <TIM_Base_SetConfig+0x12c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d00f      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a26      	ldr	r2, [pc, #152]	; (8009594 <TIM_Base_SetConfig+0x130>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00b      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a25      	ldr	r2, [pc, #148]	; (8009598 <TIM_Base_SetConfig+0x134>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d007      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a24      	ldr	r2, [pc, #144]	; (800959c <TIM_Base_SetConfig+0x138>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d003      	beq.n	8009516 <TIM_Base_SetConfig+0xb2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a23      	ldr	r2, [pc, #140]	; (80095a0 <TIM_Base_SetConfig+0x13c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d108      	bne.n	8009528 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800951c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	4313      	orrs	r3, r2
 8009526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <TIM_Base_SetConfig+0x114>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d003      	beq.n	800955c <TIM_Base_SetConfig+0xf8>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a0c      	ldr	r2, [pc, #48]	; (8009588 <TIM_Base_SetConfig+0x124>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d103      	bne.n	8009564 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	691a      	ldr	r2, [r3, #16]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	615a      	str	r2, [r3, #20]
}
 800956a:	bf00      	nop
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	40010000 	.word	0x40010000
 800957c:	40000400 	.word	0x40000400
 8009580:	40000800 	.word	0x40000800
 8009584:	40000c00 	.word	0x40000c00
 8009588:	40010400 	.word	0x40010400
 800958c:	40014000 	.word	0x40014000
 8009590:	40014400 	.word	0x40014400
 8009594:	40014800 	.word	0x40014800
 8009598:	40001800 	.word	0x40001800
 800959c:	40001c00 	.word	0x40001c00
 80095a0:	40002000 	.word	0x40002000

080095a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e03f      	b.n	800965e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d106      	bne.n	80095f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7f9 f934 	bl	8002860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2224      	movs	r2, #36	; 0x24
 80095fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68da      	ldr	r2, [r3, #12]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800960e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f905 	bl	8009820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	695a      	ldr	r2, [r3, #20]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2220      	movs	r2, #32
 8009650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2220      	movs	r2, #32
 8009658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b08a      	sub	sp, #40	; 0x28
 800966a:	af02      	add	r7, sp, #8
 800966c:	60f8      	str	r0, [r7, #12]
 800966e:	60b9      	str	r1, [r7, #8]
 8009670:	603b      	str	r3, [r7, #0]
 8009672:	4613      	mov	r3, r2
 8009674:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009676:	2300      	movs	r3, #0
 8009678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b20      	cmp	r3, #32
 8009684:	d17c      	bne.n	8009780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <HAL_UART_Transmit+0x2c>
 800968c:	88fb      	ldrh	r3, [r7, #6]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e075      	b.n	8009782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800969c:	2b01      	cmp	r3, #1
 800969e:	d101      	bne.n	80096a4 <HAL_UART_Transmit+0x3e>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e06e      	b.n	8009782 <HAL_UART_Transmit+0x11c>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2221      	movs	r2, #33	; 0x21
 80096b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096ba:	f7f9 fbf9 	bl	8002eb0 <HAL_GetTick>
 80096be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	88fa      	ldrh	r2, [r7, #6]
 80096c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	88fa      	ldrh	r2, [r7, #6]
 80096ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d4:	d108      	bne.n	80096e8 <HAL_UART_Transmit+0x82>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d104      	bne.n	80096e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	61bb      	str	r3, [r7, #24]
 80096e6:	e003      	b.n	80096f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80096f8:	e02a      	b.n	8009750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2200      	movs	r2, #0
 8009702:	2180      	movs	r1, #128	; 0x80
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 f840 	bl	800978a <UART_WaitOnFlagUntilTimeout>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	e036      	b.n	8009782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10b      	bne.n	8009732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	3302      	adds	r3, #2
 800972e:	61bb      	str	r3, [r7, #24]
 8009730:	e007      	b.n	8009742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	781a      	ldrb	r2, [r3, #0]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	3301      	adds	r3, #1
 8009740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009746:	b29b      	uxth	r3, r3
 8009748:	3b01      	subs	r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009754:	b29b      	uxth	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1cf      	bne.n	80096fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2200      	movs	r2, #0
 8009762:	2140      	movs	r1, #64	; 0x40
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f810 	bl	800978a <UART_WaitOnFlagUntilTimeout>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	e006      	b.n	8009782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	e000      	b.n	8009782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009780:	2302      	movs	r3, #2
  }
}
 8009782:	4618      	mov	r0, r3
 8009784:	3720      	adds	r7, #32
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	603b      	str	r3, [r7, #0]
 8009796:	4613      	mov	r3, r2
 8009798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800979a:	e02c      	b.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a2:	d028      	beq.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <UART_WaitOnFlagUntilTimeout+0x30>
 80097aa:	f7f9 fb81 	bl	8002eb0 <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d21d      	bcs.n	80097f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097c8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	695a      	ldr	r2, [r3, #20]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 0201 	bic.w	r2, r2, #1
 80097d8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2220      	movs	r2, #32
 80097de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2220      	movs	r2, #32
 80097e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e00f      	b.n	8009816 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	4013      	ands	r3, r2
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	429a      	cmp	r2, r3
 8009804:	bf0c      	ite	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	2300      	movne	r3, #0
 800980a:	b2db      	uxtb	r3, r3
 800980c:	461a      	mov	r2, r3
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	429a      	cmp	r2, r3
 8009812:	d0c3      	beq.n	800979c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	b09f      	sub	sp, #124	; 0x7c
 8009826:	af00      	add	r7, sp, #0
 8009828:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800982a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009836:	68d9      	ldr	r1, [r3, #12]
 8009838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	ea40 0301 	orr.w	r3, r0, r1
 8009840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009844:	689a      	ldr	r2, [r3, #8]
 8009846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	431a      	orrs	r2, r3
 800984c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	431a      	orrs	r2, r3
 8009852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	4313      	orrs	r3, r2
 8009858:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800985a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009864:	f021 010c 	bic.w	r1, r1, #12
 8009868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800986e:	430b      	orrs	r3, r1
 8009870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800987c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800987e:	6999      	ldr	r1, [r3, #24]
 8009880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	ea40 0301 	orr.w	r3, r0, r1
 8009888:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800988a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4bc5      	ldr	r3, [pc, #788]	; (8009ba4 <UART_SetConfig+0x384>)
 8009890:	429a      	cmp	r2, r3
 8009892:	d004      	beq.n	800989e <UART_SetConfig+0x7e>
 8009894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	4bc3      	ldr	r3, [pc, #780]	; (8009ba8 <UART_SetConfig+0x388>)
 800989a:	429a      	cmp	r2, r3
 800989c:	d103      	bne.n	80098a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800989e:	f7fe f891 	bl	80079c4 <HAL_RCC_GetPCLK2Freq>
 80098a2:	6778      	str	r0, [r7, #116]	; 0x74
 80098a4:	e002      	b.n	80098ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098a6:	f7fe f879 	bl	800799c <HAL_RCC_GetPCLK1Freq>
 80098aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098b4:	f040 80b6 	bne.w	8009a24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ba:	461c      	mov	r4, r3
 80098bc:	f04f 0500 	mov.w	r5, #0
 80098c0:	4622      	mov	r2, r4
 80098c2:	462b      	mov	r3, r5
 80098c4:	1891      	adds	r1, r2, r2
 80098c6:	6439      	str	r1, [r7, #64]	; 0x40
 80098c8:	415b      	adcs	r3, r3
 80098ca:	647b      	str	r3, [r7, #68]	; 0x44
 80098cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80098d0:	1912      	adds	r2, r2, r4
 80098d2:	eb45 0303 	adc.w	r3, r5, r3
 80098d6:	f04f 0000 	mov.w	r0, #0
 80098da:	f04f 0100 	mov.w	r1, #0
 80098de:	00d9      	lsls	r1, r3, #3
 80098e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098e4:	00d0      	lsls	r0, r2, #3
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	1911      	adds	r1, r2, r4
 80098ec:	6639      	str	r1, [r7, #96]	; 0x60
 80098ee:	416b      	adcs	r3, r5
 80098f0:	667b      	str	r3, [r7, #100]	; 0x64
 80098f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	461a      	mov	r2, r3
 80098f8:	f04f 0300 	mov.w	r3, #0
 80098fc:	1891      	adds	r1, r2, r2
 80098fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8009900:	415b      	adcs	r3, r3
 8009902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009908:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800990c:	f7f6 fe94 	bl	8000638 <__aeabi_uldivmod>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	4ba5      	ldr	r3, [pc, #660]	; (8009bac <UART_SetConfig+0x38c>)
 8009916:	fba3 2302 	umull	r2, r3, r3, r2
 800991a:	095b      	lsrs	r3, r3, #5
 800991c:	011e      	lsls	r6, r3, #4
 800991e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009920:	461c      	mov	r4, r3
 8009922:	f04f 0500 	mov.w	r5, #0
 8009926:	4622      	mov	r2, r4
 8009928:	462b      	mov	r3, r5
 800992a:	1891      	adds	r1, r2, r2
 800992c:	6339      	str	r1, [r7, #48]	; 0x30
 800992e:	415b      	adcs	r3, r3
 8009930:	637b      	str	r3, [r7, #52]	; 0x34
 8009932:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009936:	1912      	adds	r2, r2, r4
 8009938:	eb45 0303 	adc.w	r3, r5, r3
 800993c:	f04f 0000 	mov.w	r0, #0
 8009940:	f04f 0100 	mov.w	r1, #0
 8009944:	00d9      	lsls	r1, r3, #3
 8009946:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800994a:	00d0      	lsls	r0, r2, #3
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	1911      	adds	r1, r2, r4
 8009952:	65b9      	str	r1, [r7, #88]	; 0x58
 8009954:	416b      	adcs	r3, r5
 8009956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	461a      	mov	r2, r3
 800995e:	f04f 0300 	mov.w	r3, #0
 8009962:	1891      	adds	r1, r2, r2
 8009964:	62b9      	str	r1, [r7, #40]	; 0x28
 8009966:	415b      	adcs	r3, r3
 8009968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800996a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800996e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009972:	f7f6 fe61 	bl	8000638 <__aeabi_uldivmod>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4b8c      	ldr	r3, [pc, #560]	; (8009bac <UART_SetConfig+0x38c>)
 800997c:	fba3 1302 	umull	r1, r3, r3, r2
 8009980:	095b      	lsrs	r3, r3, #5
 8009982:	2164      	movs	r1, #100	; 0x64
 8009984:	fb01 f303 	mul.w	r3, r1, r3
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	3332      	adds	r3, #50	; 0x32
 800998e:	4a87      	ldr	r2, [pc, #540]	; (8009bac <UART_SetConfig+0x38c>)
 8009990:	fba2 2303 	umull	r2, r3, r2, r3
 8009994:	095b      	lsrs	r3, r3, #5
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800999c:	441e      	add	r6, r3
 800999e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a0:	4618      	mov	r0, r3
 80099a2:	f04f 0100 	mov.w	r1, #0
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	1894      	adds	r4, r2, r2
 80099ac:	623c      	str	r4, [r7, #32]
 80099ae:	415b      	adcs	r3, r3
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
 80099b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099b6:	1812      	adds	r2, r2, r0
 80099b8:	eb41 0303 	adc.w	r3, r1, r3
 80099bc:	f04f 0400 	mov.w	r4, #0
 80099c0:	f04f 0500 	mov.w	r5, #0
 80099c4:	00dd      	lsls	r5, r3, #3
 80099c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099ca:	00d4      	lsls	r4, r2, #3
 80099cc:	4622      	mov	r2, r4
 80099ce:	462b      	mov	r3, r5
 80099d0:	1814      	adds	r4, r2, r0
 80099d2:	653c      	str	r4, [r7, #80]	; 0x50
 80099d4:	414b      	adcs	r3, r1
 80099d6:	657b      	str	r3, [r7, #84]	; 0x54
 80099d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	461a      	mov	r2, r3
 80099de:	f04f 0300 	mov.w	r3, #0
 80099e2:	1891      	adds	r1, r2, r2
 80099e4:	61b9      	str	r1, [r7, #24]
 80099e6:	415b      	adcs	r3, r3
 80099e8:	61fb      	str	r3, [r7, #28]
 80099ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80099f2:	f7f6 fe21 	bl	8000638 <__aeabi_uldivmod>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4b6c      	ldr	r3, [pc, #432]	; (8009bac <UART_SetConfig+0x38c>)
 80099fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009a00:	095b      	lsrs	r3, r3, #5
 8009a02:	2164      	movs	r1, #100	; 0x64
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	3332      	adds	r3, #50	; 0x32
 8009a0e:	4a67      	ldr	r2, [pc, #412]	; (8009bac <UART_SetConfig+0x38c>)
 8009a10:	fba2 2303 	umull	r2, r3, r2, r3
 8009a14:	095b      	lsrs	r3, r3, #5
 8009a16:	f003 0207 	and.w	r2, r3, #7
 8009a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4432      	add	r2, r6
 8009a20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a22:	e0b9      	b.n	8009b98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a26:	461c      	mov	r4, r3
 8009a28:	f04f 0500 	mov.w	r5, #0
 8009a2c:	4622      	mov	r2, r4
 8009a2e:	462b      	mov	r3, r5
 8009a30:	1891      	adds	r1, r2, r2
 8009a32:	6139      	str	r1, [r7, #16]
 8009a34:	415b      	adcs	r3, r3
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009a3c:	1912      	adds	r2, r2, r4
 8009a3e:	eb45 0303 	adc.w	r3, r5, r3
 8009a42:	f04f 0000 	mov.w	r0, #0
 8009a46:	f04f 0100 	mov.w	r1, #0
 8009a4a:	00d9      	lsls	r1, r3, #3
 8009a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a50:	00d0      	lsls	r0, r2, #3
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	eb12 0804 	adds.w	r8, r2, r4
 8009a5a:	eb43 0905 	adc.w	r9, r3, r5
 8009a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f04f 0100 	mov.w	r1, #0
 8009a68:	f04f 0200 	mov.w	r2, #0
 8009a6c:	f04f 0300 	mov.w	r3, #0
 8009a70:	008b      	lsls	r3, r1, #2
 8009a72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a76:	0082      	lsls	r2, r0, #2
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	f7f6 fddc 	bl	8000638 <__aeabi_uldivmod>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4b49      	ldr	r3, [pc, #292]	; (8009bac <UART_SetConfig+0x38c>)
 8009a86:	fba3 2302 	umull	r2, r3, r3, r2
 8009a8a:	095b      	lsrs	r3, r3, #5
 8009a8c:	011e      	lsls	r6, r3, #4
 8009a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a90:	4618      	mov	r0, r3
 8009a92:	f04f 0100 	mov.w	r1, #0
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	1894      	adds	r4, r2, r2
 8009a9c:	60bc      	str	r4, [r7, #8]
 8009a9e:	415b      	adcs	r3, r3
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009aa6:	1812      	adds	r2, r2, r0
 8009aa8:	eb41 0303 	adc.w	r3, r1, r3
 8009aac:	f04f 0400 	mov.w	r4, #0
 8009ab0:	f04f 0500 	mov.w	r5, #0
 8009ab4:	00dd      	lsls	r5, r3, #3
 8009ab6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009aba:	00d4      	lsls	r4, r2, #3
 8009abc:	4622      	mov	r2, r4
 8009abe:	462b      	mov	r3, r5
 8009ac0:	1814      	adds	r4, r2, r0
 8009ac2:	64bc      	str	r4, [r7, #72]	; 0x48
 8009ac4:	414b      	adcs	r3, r1
 8009ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f04f 0100 	mov.w	r1, #0
 8009ad2:	f04f 0200 	mov.w	r2, #0
 8009ad6:	f04f 0300 	mov.w	r3, #0
 8009ada:	008b      	lsls	r3, r1, #2
 8009adc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ae0:	0082      	lsls	r2, r0, #2
 8009ae2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009ae6:	f7f6 fda7 	bl	8000638 <__aeabi_uldivmod>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4b2f      	ldr	r3, [pc, #188]	; (8009bac <UART_SetConfig+0x38c>)
 8009af0:	fba3 1302 	umull	r1, r3, r3, r2
 8009af4:	095b      	lsrs	r3, r3, #5
 8009af6:	2164      	movs	r1, #100	; 0x64
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	011b      	lsls	r3, r3, #4
 8009b00:	3332      	adds	r3, #50	; 0x32
 8009b02:	4a2a      	ldr	r2, [pc, #168]	; (8009bac <UART_SetConfig+0x38c>)
 8009b04:	fba2 2303 	umull	r2, r3, r2, r3
 8009b08:	095b      	lsrs	r3, r3, #5
 8009b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b0e:	441e      	add	r6, r3
 8009b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b12:	4618      	mov	r0, r3
 8009b14:	f04f 0100 	mov.w	r1, #0
 8009b18:	4602      	mov	r2, r0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	1894      	adds	r4, r2, r2
 8009b1e:	603c      	str	r4, [r7, #0]
 8009b20:	415b      	adcs	r3, r3
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b28:	1812      	adds	r2, r2, r0
 8009b2a:	eb41 0303 	adc.w	r3, r1, r3
 8009b2e:	f04f 0400 	mov.w	r4, #0
 8009b32:	f04f 0500 	mov.w	r5, #0
 8009b36:	00dd      	lsls	r5, r3, #3
 8009b38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009b3c:	00d4      	lsls	r4, r2, #3
 8009b3e:	4622      	mov	r2, r4
 8009b40:	462b      	mov	r3, r5
 8009b42:	eb12 0a00 	adds.w	sl, r2, r0
 8009b46:	eb43 0b01 	adc.w	fp, r3, r1
 8009b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f04f 0100 	mov.w	r1, #0
 8009b54:	f04f 0200 	mov.w	r2, #0
 8009b58:	f04f 0300 	mov.w	r3, #0
 8009b5c:	008b      	lsls	r3, r1, #2
 8009b5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b62:	0082      	lsls	r2, r0, #2
 8009b64:	4650      	mov	r0, sl
 8009b66:	4659      	mov	r1, fp
 8009b68:	f7f6 fd66 	bl	8000638 <__aeabi_uldivmod>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4b0e      	ldr	r3, [pc, #56]	; (8009bac <UART_SetConfig+0x38c>)
 8009b72:	fba3 1302 	umull	r1, r3, r3, r2
 8009b76:	095b      	lsrs	r3, r3, #5
 8009b78:	2164      	movs	r1, #100	; 0x64
 8009b7a:	fb01 f303 	mul.w	r3, r1, r3
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	3332      	adds	r3, #50	; 0x32
 8009b84:	4a09      	ldr	r2, [pc, #36]	; (8009bac <UART_SetConfig+0x38c>)
 8009b86:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	f003 020f 	and.w	r2, r3, #15
 8009b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4432      	add	r2, r6
 8009b96:	609a      	str	r2, [r3, #8]
}
 8009b98:	bf00      	nop
 8009b9a:	377c      	adds	r7, #124	; 0x7c
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	bf00      	nop
 8009ba4:	40011000 	.word	0x40011000
 8009ba8:	40011400 	.word	0x40011400
 8009bac:	51eb851f 	.word	0x51eb851f

08009bb0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d029      	beq.n	8009c1e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009bd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bda:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009be4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009bea:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009bf0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009bf6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009bfc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009c02:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009c08:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8009c0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	e034      	b.n	8009c88 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c2a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009c34:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009c3a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c52:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c5c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009c62:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009c68:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009c6e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009c74:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b087      	sub	sp, #28
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d02e      	beq.n	8009d0e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009cbc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009ccc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009cd6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009ce0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009cea:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009cf4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	609a      	str	r2, [r3, #8]
 8009d0c:	e03b      	b.n	8009d86 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d1e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009d30:	4313      	orrs	r3, r2
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009d44:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009d54:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009d5e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009d68:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009d72:	4313      	orrs	r3, r2
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	371c      	adds	r7, #28
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009d94:	b084      	sub	sp, #16
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	f107 001c 	add.w	r0, r7, #28
 8009da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009daa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009dac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009dae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009db2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009db6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009dba:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009dbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009dce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	431a      	orrs	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	b004      	add	sp, #16
 8009de8:	4770      	bx	lr

08009dea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b083      	sub	sp, #12
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2203      	movs	r2, #3
 8009e10:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009e12:	2002      	movs	r0, #2
 8009e14:	f7f9 f858 	bl	8002ec8 <HAL_Delay>
  
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0303 	and.w	r3, r3, #3
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e5c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009e62:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009e68:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009e78:	f023 030f 	bic.w	r3, r3, #15
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	b2db      	uxtb	r3, r3
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3314      	adds	r3, #20
 8009eba:	461a      	mov	r2, r3
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
}  
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ef8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009efe:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009f04:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	431a      	orrs	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0

}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b088      	sub	sp, #32
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009f38:	2310      	movs	r3, #16
 8009f3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f3c:	2340      	movs	r3, #64	; 0x40
 8009f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f40:	2300      	movs	r3, #0
 8009f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f4a:	f107 0308 	add.w	r3, r7, #8
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7ff ff74 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f5a:	2110      	movs	r1, #16
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fa45 	bl	800a3ec <SDMMC_GetCmdResp1>
 8009f62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f64:	69fb      	ldr	r3, [r7, #28]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b088      	sub	sp, #32
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009f7c:	2311      	movs	r3, #17
 8009f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f80:	2340      	movs	r3, #64	; 0x40
 8009f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f84:	2300      	movs	r3, #0
 8009f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f8e:	f107 0308 	add.w	r3, r7, #8
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ff52 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f9e:	2111      	movs	r1, #17
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 fa23 	bl	800a3ec <SDMMC_GetCmdResp1>
 8009fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3720      	adds	r7, #32
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b088      	sub	sp, #32
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
 8009fba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009fc0:	2312      	movs	r3, #18
 8009fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fc4:	2340      	movs	r3, #64	; 0x40
 8009fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fd2:	f107 0308 	add.w	r3, r7, #8
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff ff30 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe2:	2112      	movs	r1, #18
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fa01 	bl	800a3ec <SDMMC_GetCmdResp1>
 8009fea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fec:	69fb      	ldr	r3, [r7, #28]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3720      	adds	r7, #32
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b088      	sub	sp, #32
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a004:	2318      	movs	r3, #24
 800a006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a008:	2340      	movs	r3, #64	; 0x40
 800a00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a00c:	2300      	movs	r3, #0
 800a00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a014:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a016:	f107 0308 	add.w	r3, r7, #8
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7ff ff0e 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a022:	f241 3288 	movw	r2, #5000	; 0x1388
 800a026:	2118      	movs	r1, #24
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f9df 	bl	800a3ec <SDMMC_GetCmdResp1>
 800a02e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a030:	69fb      	ldr	r3, [r7, #28]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3720      	adds	r7, #32
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b088      	sub	sp, #32
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a048:	2319      	movs	r3, #25
 800a04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a04c:	2340      	movs	r3, #64	; 0x40
 800a04e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a050:	2300      	movs	r3, #0
 800a052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a058:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a05a:	f107 0308 	add.w	r3, r7, #8
 800a05e:	4619      	mov	r1, r3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff feec 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a066:	f241 3288 	movw	r2, #5000	; 0x1388
 800a06a:	2119      	movs	r1, #25
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f9bd 	bl	800a3ec <SDMMC_GetCmdResp1>
 800a072:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a074:	69fb      	ldr	r3, [r7, #28]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a08c:	230c      	movs	r3, #12
 800a08e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a090:	2340      	movs	r3, #64	; 0x40
 800a092:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a094:	2300      	movs	r3, #0
 800a096:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a09c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff feca 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a0aa:	4a05      	ldr	r2, [pc, #20]	; (800a0c0 <SDMMC_CmdStopTransfer+0x40>)
 800a0ac:	210c      	movs	r1, #12
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f99c 	bl	800a3ec <SDMMC_GetCmdResp1>
 800a0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	05f5e100 	.word	0x05f5e100

0800a0c4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08a      	sub	sp, #40	; 0x28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a0d4:	2307      	movs	r3, #7
 800a0d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0d8:	2340      	movs	r3, #64	; 0x40
 800a0da:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0e6:	f107 0310 	add.w	r3, r7, #16
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7ff fea6 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a0f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0f6:	2107      	movs	r1, #7
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f977 	bl	800a3ec <SDMMC_GetCmdResp1>
 800a0fe:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a102:	4618      	mov	r0, r3
 800a104:	3728      	adds	r7, #40	; 0x28
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b088      	sub	sp, #32
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a11a:	2300      	movs	r3, #0
 800a11c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a128:	f107 0308 	add.w	r3, r7, #8
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff fe85 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f92d 	bl	800a394 <SDMMC_GetCmdError>
 800a13a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a13c:	69fb      	ldr	r3, [r7, #28]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3720      	adds	r7, #32
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b088      	sub	sp, #32
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a14e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a152:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a154:	2308      	movs	r3, #8
 800a156:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a158:	2340      	movs	r3, #64	; 0x40
 800a15a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a164:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a166:	f107 0308 	add.w	r3, r7, #8
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff fe66 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fb24 	bl	800a7c0 <SDMMC_GetCmdResp7>
 800a178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a17a:	69fb      	ldr	r3, [r7, #28]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a192:	2337      	movs	r3, #55	; 0x37
 800a194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a196:	2340      	movs	r3, #64	; 0x40
 800a198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a19e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1a4:	f107 0308 	add.w	r3, r7, #8
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7ff fe47 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a1b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1b4:	2137      	movs	r1, #55	; 0x37
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f918 	bl	800a3ec <SDMMC_GetCmdResp1>
 800a1bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1be:	69fb      	ldr	r3, [r7, #28]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3720      	adds	r7, #32
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a1de:	2329      	movs	r3, #41	; 0x29
 800a1e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1e2:	2340      	movs	r3, #64	; 0x40
 800a1e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1f0:	f107 0308 	add.w	r3, r7, #8
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f7ff fe21 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 fa2b 	bl	800a658 <SDMMC_GetCmdResp3>
 800a202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a204:	69fb      	ldr	r3, [r7, #28]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b088      	sub	sp, #32
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a21c:	2306      	movs	r3, #6
 800a21e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a220:	2340      	movs	r3, #64	; 0x40
 800a222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a224:	2300      	movs	r3, #0
 800a226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a22c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a22e:	f107 0308 	add.w	r3, r7, #8
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fe02 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a23a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a23e:	2106      	movs	r1, #6
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f8d3 	bl	800a3ec <SDMMC_GetCmdResp1>
 800a246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a248:	69fb      	ldr	r3, [r7, #28]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b088      	sub	sp, #32
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a25e:	2333      	movs	r3, #51	; 0x33
 800a260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a262:	2340      	movs	r3, #64	; 0x40
 800a264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a266:	2300      	movs	r3, #0
 800a268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a26a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a26e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a270:	f107 0308 	add.w	r3, r7, #8
 800a274:	4619      	mov	r1, r3
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7ff fde1 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a280:	2133      	movs	r1, #51	; 0x33
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f8b2 	bl	800a3ec <SDMMC_GetCmdResp1>
 800a288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a28a:	69fb      	ldr	r3, [r7, #28]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3720      	adds	r7, #32
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a2a4:	23c0      	movs	r3, #192	; 0xc0
 800a2a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2b2:	f107 0308 	add.w	r3, r7, #8
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff fdc0 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f982 	bl	800a5c8 <SDMMC_GetCmdResp2>
 800a2c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3720      	adds	r7, #32
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a2de:	2309      	movs	r3, #9
 800a2e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a2e2:	23c0      	movs	r3, #192	; 0xc0
 800a2e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2f0:	f107 0308 	add.w	r3, r7, #8
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7ff fda1 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f963 	bl	800a5c8 <SDMMC_GetCmdResp2>
 800a302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a304:	69fb      	ldr	r3, [r7, #28]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b088      	sub	sp, #32
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a31c:	2303      	movs	r3, #3
 800a31e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a320:	2340      	movs	r3, #64	; 0x40
 800a322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a32c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a32e:	f107 0308 	add.w	r3, r7, #8
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff fd82 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	2103      	movs	r1, #3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f9c8 	bl	800a6d4 <SDMMC_GetCmdResp6>
 800a344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a346:	69fb      	ldr	r3, [r7, #28]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3720      	adds	r7, #32
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a35e:	230d      	movs	r3, #13
 800a360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a362:	2340      	movs	r3, #64	; 0x40
 800a364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a366:	2300      	movs	r3, #0
 800a368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a36e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a370:	f107 0308 	add.w	r3, r7, #8
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff fd61 	bl	8009e3e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a37c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a380:	210d      	movs	r1, #13
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f832 	bl	800a3ec <SDMMC_GetCmdResp1>
 800a388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a38a:	69fb      	ldr	r3, [r7, #28]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3720      	adds	r7, #32
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a39c:	4b11      	ldr	r3, [pc, #68]	; (800a3e4 <SDMMC_GetCmdError+0x50>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a11      	ldr	r2, [pc, #68]	; (800a3e8 <SDMMC_GetCmdError+0x54>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	0a5b      	lsrs	r3, r3, #9
 800a3a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ac:	fb02 f303 	mul.w	r3, r2, r3
 800a3b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	1e5a      	subs	r2, r3, #1
 800a3b6:	60fa      	str	r2, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d102      	bne.n	800a3c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3c0:	e009      	b.n	800a3d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0f1      	beq.n	800a3b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	22c5      	movs	r2, #197	; 0xc5
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20000000 	.word	0x20000000
 800a3e8:	10624dd3 	.word	0x10624dd3

0800a3ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b088      	sub	sp, #32
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a3fa:	4b70      	ldr	r3, [pc, #448]	; (800a5bc <SDMMC_GetCmdResp1+0x1d0>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a70      	ldr	r2, [pc, #448]	; (800a5c0 <SDMMC_GetCmdResp1+0x1d4>)
 800a400:	fba2 2303 	umull	r2, r3, r2, r3
 800a404:	0a5a      	lsrs	r2, r3, #9
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	fb02 f303 	mul.w	r3, r2, r3
 800a40c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	1e5a      	subs	r2, r3, #1
 800a412:	61fa      	str	r2, [r7, #28]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a41c:	e0c9      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a422:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0ef      	beq.n	800a40e <SDMMC_GetCmdResp1+0x22>
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1ea      	bne.n	800a40e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b00      	cmp	r3, #0
 800a442:	d004      	beq.n	800a44e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2204      	movs	r2, #4
 800a448:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a44a:	2304      	movs	r3, #4
 800a44c:	e0b1      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a452:	f003 0301 	and.w	r3, r3, #1
 800a456:	2b00      	cmp	r3, #0
 800a458:	d004      	beq.n	800a464 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a460:	2301      	movs	r3, #1
 800a462:	e0a6      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	22c5      	movs	r2, #197	; 0xc5
 800a468:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fd11 	bl	8009e92 <SDIO_GetCommandResponse>
 800a470:	4603      	mov	r3, r0
 800a472:	461a      	mov	r2, r3
 800a474:	7afb      	ldrb	r3, [r7, #11]
 800a476:	4293      	cmp	r3, r2
 800a478:	d001      	beq.n	800a47e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e099      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a47e:	2100      	movs	r1, #0
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff fd13 	bl	8009eac <SDIO_GetResponse>
 800a486:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	4b4e      	ldr	r3, [pc, #312]	; (800a5c4 <SDMMC_GetCmdResp1+0x1d8>)
 800a48c:	4013      	ands	r3, r2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a492:	2300      	movs	r3, #0
 800a494:	e08d      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	da02      	bge.n	800a4a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a49c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4a0:	e087      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a4ac:	2340      	movs	r3, #64	; 0x40
 800a4ae:	e080      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a4ba:	2380      	movs	r3, #128	; 0x80
 800a4bc:	e079      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a4c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4cc:	e071      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a4d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4dc:	e069      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a4e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4ec:	e061      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d002      	beq.n	800a4fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a4f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4fc:	e059      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d002      	beq.n	800a50e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a50c:	e051      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a51c:	e049      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a52c:	e041      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a53c:	e039      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d002      	beq.n	800a54e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a548:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a54c:	e031      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a558:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a55c:	e029      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a568:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a56c:	e021      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d002      	beq.n	800a57e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a578:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a57c:	e019      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a588:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a58c:	e011      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a598:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a59c:	e009      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	f003 0308 	and.w	r3, r3, #8
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a5a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a5ac:	e001      	b.n	800a5b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3720      	adds	r7, #32
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000000 	.word	0x20000000
 800a5c0:	10624dd3 	.word	0x10624dd3
 800a5c4:	fdffe008 	.word	0xfdffe008

0800a5c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5d0:	4b1f      	ldr	r3, [pc, #124]	; (800a650 <SDMMC_GetCmdResp2+0x88>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a1f      	ldr	r2, [pc, #124]	; (800a654 <SDMMC_GetCmdResp2+0x8c>)
 800a5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5da:	0a5b      	lsrs	r3, r3, #9
 800a5dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5e0:	fb02 f303 	mul.w	r3, r2, r3
 800a5e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	1e5a      	subs	r2, r3, #1
 800a5ea:	60fa      	str	r2, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5f4:	e026      	b.n	800a644 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0ef      	beq.n	800a5e6 <SDMMC_GetCmdResp2+0x1e>
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1ea      	bne.n	800a5e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2204      	movs	r2, #4
 800a620:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a622:	2304      	movs	r3, #4
 800a624:	e00e      	b.n	800a644 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d004      	beq.n	800a63c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a638:	2301      	movs	r3, #1
 800a63a:	e003      	b.n	800a644 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	22c5      	movs	r2, #197	; 0xc5
 800a640:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	20000000 	.word	0x20000000
 800a654:	10624dd3 	.word	0x10624dd3

0800a658 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a660:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <SDMMC_GetCmdResp3+0x74>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a1a      	ldr	r2, [pc, #104]	; (800a6d0 <SDMMC_GetCmdResp3+0x78>)
 800a666:	fba2 2303 	umull	r2, r3, r2, r3
 800a66a:	0a5b      	lsrs	r3, r3, #9
 800a66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a670:	fb02 f303 	mul.w	r3, r2, r3
 800a674:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	1e5a      	subs	r2, r3, #1
 800a67a:	60fa      	str	r2, [r7, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d102      	bne.n	800a686 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a684:	e01b      	b.n	800a6be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a68a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a692:	2b00      	cmp	r3, #0
 800a694:	d0ef      	beq.n	800a676 <SDMMC_GetCmdResp3+0x1e>
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1ea      	bne.n	800a676 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d004      	beq.n	800a6b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2204      	movs	r2, #4
 800a6b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6b2:	2304      	movs	r3, #4
 800a6b4:	e003      	b.n	800a6be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	22c5      	movs	r2, #197	; 0xc5
 800a6ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3714      	adds	r7, #20
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	20000000 	.word	0x20000000
 800a6d0:	10624dd3 	.word	0x10624dd3

0800a6d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b088      	sub	sp, #32
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	607a      	str	r2, [r7, #4]
 800a6e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6e2:	4b35      	ldr	r3, [pc, #212]	; (800a7b8 <SDMMC_GetCmdResp6+0xe4>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a35      	ldr	r2, [pc, #212]	; (800a7bc <SDMMC_GetCmdResp6+0xe8>)
 800a6e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ec:	0a5b      	lsrs	r3, r3, #9
 800a6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f2:	fb02 f303 	mul.w	r3, r2, r3
 800a6f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	1e5a      	subs	r2, r3, #1
 800a6fc:	61fa      	str	r2, [r7, #28]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d102      	bne.n	800a708 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a702:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a706:	e052      	b.n	800a7ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a714:	2b00      	cmp	r3, #0
 800a716:	d0ef      	beq.n	800a6f8 <SDMMC_GetCmdResp6+0x24>
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1ea      	bne.n	800a6f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a726:	f003 0304 	and.w	r3, r3, #4
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2204      	movs	r2, #4
 800a732:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a734:	2304      	movs	r3, #4
 800a736:	e03a      	b.n	800a7ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	2b00      	cmp	r3, #0
 800a742:	d004      	beq.n	800a74e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2201      	movs	r2, #1
 800a748:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e02f      	b.n	800a7ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff fb9f 	bl	8009e92 <SDIO_GetCommandResponse>
 800a754:	4603      	mov	r3, r0
 800a756:	461a      	mov	r2, r3
 800a758:	7afb      	ldrb	r3, [r7, #11]
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d001      	beq.n	800a762 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a75e:	2301      	movs	r3, #1
 800a760:	e025      	b.n	800a7ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	22c5      	movs	r2, #197	; 0xc5
 800a766:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a768:	2100      	movs	r1, #0
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff fb9e 	bl	8009eac <SDIO_GetResponse>
 800a770:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d106      	bne.n	800a78a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	0c1b      	lsrs	r3, r3, #16
 800a780:	b29a      	uxth	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a786:	2300      	movs	r3, #0
 800a788:	e011      	b.n	800a7ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a798:	e009      	b.n	800a7ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a7a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7a8:	e001      	b.n	800a7ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a7aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3720      	adds	r7, #32
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20000000 	.word	0x20000000
 800a7bc:	10624dd3 	.word	0x10624dd3

0800a7c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7c8:	4b22      	ldr	r3, [pc, #136]	; (800a854 <SDMMC_GetCmdResp7+0x94>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a22      	ldr	r2, [pc, #136]	; (800a858 <SDMMC_GetCmdResp7+0x98>)
 800a7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d2:	0a5b      	lsrs	r3, r3, #9
 800a7d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d8:	fb02 f303 	mul.w	r3, r2, r3
 800a7dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	1e5a      	subs	r2, r3, #1
 800a7e2:	60fa      	str	r2, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7ec:	e02c      	b.n	800a848 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0ef      	beq.n	800a7de <SDMMC_GetCmdResp7+0x1e>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1ea      	bne.n	800a7de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	2b00      	cmp	r3, #0
 800a812:	d004      	beq.n	800a81e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2204      	movs	r2, #4
 800a818:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a81a:	2304      	movs	r3, #4
 800a81c:	e014      	b.n	800a848 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d004      	beq.n	800a834 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a830:	2301      	movs	r3, #1
 800a832:	e009      	b.n	800a848 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2240      	movs	r2, #64	; 0x40
 800a844:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a846:	2300      	movs	r3, #0
  
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	20000000 	.word	0x20000000
 800a858:	10624dd3 	.word	0x10624dd3

0800a85c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a85c:	b084      	sub	sp, #16
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	f107 001c 	add.w	r0, r7, #28
 800a86a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	2b01      	cmp	r3, #1
 800a872:	d122      	bne.n	800a8ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d105      	bne.n	800a8ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fa56 	bl	800ad60 <USB_CoreReset>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	73fb      	strb	r3, [r7, #15]
 800a8b8:	e01a      	b.n	800a8f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fa4a 	bl	800ad60 <USB_CoreReset>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	639a      	str	r2, [r3, #56]	; 0x38
 800a8e2:	e005      	b.n	800a8f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d10b      	bne.n	800a90e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	f043 0206 	orr.w	r2, r3, #6
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f043 0220 	orr.w	r2, r3, #32
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a90e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a91a:	b004      	add	sp, #16
 800a91c:	4770      	bx	lr

0800a91e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f023 0201 	bic.w	r2, r3, #1
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	460b      	mov	r3, r1
 800a94a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d106      	bne.n	800a96c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	60da      	str	r2, [r3, #12]
 800a96a:	e00b      	b.n	800a984 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a96c:	78fb      	ldrb	r3, [r7, #3]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d106      	bne.n	800a980 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	60da      	str	r2, [r3, #12]
 800a97e:	e001      	b.n	800a984 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e003      	b.n	800a98c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a984:	2032      	movs	r0, #50	; 0x32
 800a986:	f7f8 fa9f 	bl	8002ec8 <HAL_Delay>

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a994:	b084      	sub	sp, #16
 800a996:	b580      	push	{r7, lr}
 800a998:	b086      	sub	sp, #24
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a9a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	613b      	str	r3, [r7, #16]
 800a9b2:	e009      	b.n	800a9c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	3340      	adds	r3, #64	; 0x40
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	2200      	movs	r2, #0
 800a9c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	613b      	str	r3, [r7, #16]
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b0e      	cmp	r3, #14
 800a9cc:	d9f2      	bls.n	800a9b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d11c      	bne.n	800aa0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9e2:	f043 0302 	orr.w	r3, r3, #2
 800a9e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa0c:	e00b      	b.n	800aa26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	2300      	movs	r3, #0
 800aa30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa38:	4619      	mov	r1, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa40:	461a      	mov	r2, r3
 800aa42:	680b      	ldr	r3, [r1, #0]
 800aa44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d10c      	bne.n	800aa66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d104      	bne.n	800aa5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aa52:	2100      	movs	r1, #0
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f949 	bl	800acec <USB_SetDevSpeed>
 800aa5a:	e008      	b.n	800aa6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f944 	bl	800acec <USB_SetDevSpeed>
 800aa64:	e003      	b.n	800aa6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aa66:	2103      	movs	r1, #3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f93f 	bl	800acec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa6e:	2110      	movs	r1, #16
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 f8f3 	bl	800ac5c <USB_FlushTxFifo>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f911 	bl	800aca8 <USB_FlushRxFifo>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa96:	461a      	mov	r2, r3
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaae:	461a      	mov	r2, r3
 800aab0:	2300      	movs	r3, #0
 800aab2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aab4:	2300      	movs	r3, #0
 800aab6:	613b      	str	r3, [r7, #16]
 800aab8:	e043      	b.n	800ab42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aacc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aad0:	d118      	bne.n	800ab04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	461a      	mov	r2, r3
 800aae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	e013      	b.n	800ab16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafa:	461a      	mov	r2, r3
 800aafc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	e008      	b.n	800ab16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab10:	461a      	mov	r2, r3
 800ab12:	2300      	movs	r3, #0
 800ab14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab22:	461a      	mov	r2, r3
 800ab24:	2300      	movs	r3, #0
 800ab26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab34:	461a      	mov	r2, r3
 800ab36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	613b      	str	r3, [r7, #16]
 800ab42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d3b7      	bcc.n	800aaba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	613b      	str	r3, [r7, #16]
 800ab4e:	e043      	b.n	800abd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab66:	d118      	bne.n	800ab9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10a      	bne.n	800ab84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	015a      	lsls	r2, r3, #5
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab80:	6013      	str	r3, [r2, #0]
 800ab82:	e013      	b.n	800abac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab90:	461a      	mov	r2, r3
 800ab92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	e008      	b.n	800abac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	015a      	lsls	r2, r3, #5
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	4413      	add	r3, r2
 800aba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aba6:	461a      	mov	r2, r3
 800aba8:	2300      	movs	r3, #0
 800abaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb8:	461a      	mov	r2, r3
 800abba:	2300      	movs	r3, #0
 800abbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abca:	461a      	mov	r2, r3
 800abcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800abd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	3301      	adds	r3, #1
 800abd6:	613b      	str	r3, [r7, #16]
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d3b7      	bcc.n	800ab50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d105      	bne.n	800ac14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	f043 0210 	orr.w	r2, r3, #16
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	699a      	ldr	r2, [r3, #24]
 800ac18:	4b0f      	ldr	r3, [pc, #60]	; (800ac58 <USB_DevInit+0x2c4>)
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d005      	beq.n	800ac32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	f043 0208 	orr.w	r2, r3, #8
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ac32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d107      	bne.n	800ac48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac40:	f043 0304 	orr.w	r3, r3, #4
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ac48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac54:	b004      	add	sp, #16
 800ac56:	4770      	bx	lr
 800ac58:	803c3800 	.word	0x803c3800

0800ac5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	019b      	lsls	r3, r3, #6
 800ac6e:	f043 0220 	orr.w	r2, r3, #32
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4a09      	ldr	r2, [pc, #36]	; (800aca4 <USB_FlushTxFifo+0x48>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d901      	bls.n	800ac88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e006      	b.n	800ac96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	f003 0320 	and.w	r3, r3, #32
 800ac90:	2b20      	cmp	r3, #32
 800ac92:	d0f0      	beq.n	800ac76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	00030d40 	.word	0x00030d40

0800aca8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2210      	movs	r2, #16
 800acb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3301      	adds	r3, #1
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4a09      	ldr	r2, [pc, #36]	; (800ace8 <USB_FlushRxFifo+0x40>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d901      	bls.n	800accc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e006      	b.n	800acda <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	f003 0310 	and.w	r3, r3, #16
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	d0f0      	beq.n	800acba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	00030d40 	.word	0x00030d40

0800acec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	78fb      	ldrb	r3, [r7, #3]
 800ad06:	68f9      	ldr	r1, [r7, #12]
 800ad08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b085      	sub	sp, #20
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad38:	f023 0303 	bic.w	r3, r3, #3
 800ad3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad4c:	f043 0302 	orr.w	r3, r3, #2
 800ad50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	60fb      	str	r3, [r7, #12]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	4a13      	ldr	r2, [pc, #76]	; (800adc4 <USB_CoreReset+0x64>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d901      	bls.n	800ad7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad7a:	2303      	movs	r3, #3
 800ad7c:	e01b      	b.n	800adb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	daf2      	bge.n	800ad6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	f043 0201 	orr.w	r2, r3, #1
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	60fb      	str	r3, [r7, #12]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4a09      	ldr	r2, [pc, #36]	; (800adc4 <USB_CoreReset+0x64>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d901      	bls.n	800ada8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e006      	b.n	800adb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d0f0      	beq.n	800ad96 <USB_CoreReset+0x36>

  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	00030d40 	.word	0x00030d40

0800adc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800adcc:	4904      	ldr	r1, [pc, #16]	; (800ade0 <MX_FATFS_Init+0x18>)
 800adce:	4805      	ldr	r0, [pc, #20]	; (800ade4 <MX_FATFS_Init+0x1c>)
 800add0:	f000 fa8a 	bl	800b2e8 <FATFS_LinkDriver>
 800add4:	4603      	mov	r3, r0
 800add6:	461a      	mov	r2, r3
 800add8:	4b03      	ldr	r3, [pc, #12]	; (800ade8 <MX_FATFS_Init+0x20>)
 800adda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800addc:	bf00      	nop
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	200096ac 	.word	0x200096ac
 800ade4:	0800faa0 	.word	0x0800faa0
 800ade8:	200096a8 	.word	0x200096a8

0800adec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800adf6:	f000 f87b 	bl	800aef0 <BSP_SD_IsDetected>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d001      	beq.n	800ae04 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	e012      	b.n	800ae2a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ae04:	480b      	ldr	r0, [pc, #44]	; (800ae34 <BSP_SD_Init+0x48>)
 800ae06:	f7fc ffe1 	bl	8007dcc <HAL_SD_Init>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d109      	bne.n	800ae28 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ae14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae18:	4806      	ldr	r0, [pc, #24]	; (800ae34 <BSP_SD_Init+0x48>)
 800ae1a:	f7fd fc27 	bl	800866c <HAL_SD_ConfigWideBusOperation>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ae28:	79fb      	ldrb	r3, [r7, #7]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20009508 	.word	0x20009508

0800ae38 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	68f9      	ldr	r1, [r7, #12]
 800ae4e:	4806      	ldr	r0, [pc, #24]	; (800ae68 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ae50:	f7fd f86a 	bl	8007f28 <HAL_SD_ReadBlocks_DMA>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	20009508 	.word	0x20009508

0800ae6c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	68f9      	ldr	r1, [r7, #12]
 800ae82:	4806      	ldr	r0, [pc, #24]	; (800ae9c <BSP_SD_WriteBlocks_DMA+0x30>)
 800ae84:	f7fd f932 	bl	80080ec <HAL_SD_WriteBlocks_DMA>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	20009508 	.word	0x20009508

0800aea0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aea4:	4805      	ldr	r0, [pc, #20]	; (800aebc <BSP_SD_GetCardState+0x1c>)
 800aea6:	f7fd fc7b 	bl	80087a0 <HAL_SD_GetCardState>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b04      	cmp	r3, #4
 800aeae:	bf14      	ite	ne
 800aeb0:	2301      	movne	r3, #1
 800aeb2:	2300      	moveq	r3, #0
 800aeb4:	b2db      	uxtb	r3, r3
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	20009508 	.word	0x20009508

0800aec0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800aec8:	6879      	ldr	r1, [r7, #4]
 800aeca:	4803      	ldr	r0, [pc, #12]	; (800aed8 <BSP_SD_GetCardInfo+0x18>)
 800aecc:	f7fd fba2 	bl	8008614 <HAL_SD_GetCardInfo>
}
 800aed0:	bf00      	nop
 800aed2:	3708      	adds	r7, #8
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20009508 	.word	0x20009508

0800aedc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800aee4:	f000 f9a2 	bl	800b22c <BSP_SD_ReadCpltCallback>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800aef6:	2301      	movs	r3, #1
 800aef8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800aefa:	f000 f80b 	bl	800af14 <BSP_PlatformIsDetected>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800af04:	2300      	movs	r3, #0
 800af06:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800af08:	79fb      	ldrb	r3, [r7, #7]
 800af0a:	b2db      	uxtb	r3, r3
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800af1a:	2301      	movs	r3, #1
 800af1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800af1e:	2120      	movs	r1, #32
 800af20:	4806      	ldr	r0, [pc, #24]	; (800af3c <BSP_PlatformIsDetected+0x28>)
 800af22:	f7f9 f913 	bl	800414c <HAL_GPIO_ReadPin>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800af2c:	2300      	movs	r3, #0
 800af2e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800af30:	79fb      	ldrb	r3, [r7, #7]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	40020800 	.word	0x40020800

0800af40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800af48:	f000 fa8e 	bl	800b468 <osKernelGetTickCount>
 800af4c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800af4e:	e006      	b.n	800af5e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af50:	f7ff ffa6 	bl	800aea0 <BSP_SD_GetCardState>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	e009      	b.n	800af72 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800af5e:	f000 fa83 	bl	800b468 <osKernelGetTickCount>
 800af62:	4602      	mov	r2, r0
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d8f0      	bhi.n	800af50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800af6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800af86:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <SD_CheckStatus+0x38>)
 800af88:	2201      	movs	r2, #1
 800af8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af8c:	f7ff ff88 	bl	800aea0 <BSP_SD_GetCardState>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d107      	bne.n	800afa6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800af96:	4b07      	ldr	r3, [pc, #28]	; (800afb4 <SD_CheckStatus+0x38>)
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f023 0301 	bic.w	r3, r3, #1
 800afa0:	b2da      	uxtb	r2, r3
 800afa2:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <SD_CheckStatus+0x38>)
 800afa4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800afa6:	4b03      	ldr	r3, [pc, #12]	; (800afb4 <SD_CheckStatus+0x38>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	b2db      	uxtb	r3, r3
}
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20000009 	.word	0x20000009

0800afb8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800afc2:	4b1c      	ldr	r3, [pc, #112]	; (800b034 <SD_initialize+0x7c>)
 800afc4:	2201      	movs	r2, #1
 800afc6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800afc8:	f000 fa06 	bl	800b3d8 <osKernelGetState>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d129      	bne.n	800b026 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800afd2:	f7ff ff0b 	bl	800adec <BSP_SD_Init>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d107      	bne.n	800afec <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800afdc:	79fb      	ldrb	r3, [r7, #7]
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff ffcc 	bl	800af7c <SD_CheckStatus>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	4b12      	ldr	r3, [pc, #72]	; (800b034 <SD_initialize+0x7c>)
 800afea:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800afec:	4b11      	ldr	r3, [pc, #68]	; (800b034 <SD_initialize+0x7c>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d017      	beq.n	800b026 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800aff6:	4b10      	ldr	r3, [pc, #64]	; (800b038 <SD_initialize+0x80>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d107      	bne.n	800b00e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800affe:	2200      	movs	r2, #0
 800b000:	2102      	movs	r1, #2
 800b002:	200a      	movs	r0, #10
 800b004:	f000 fb7b 	bl	800b6fe <osMessageQueueNew>
 800b008:	4603      	mov	r3, r0
 800b00a:	4a0b      	ldr	r2, [pc, #44]	; (800b038 <SD_initialize+0x80>)
 800b00c:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800b00e:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <SD_initialize+0x80>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d107      	bne.n	800b026 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800b016:	4b07      	ldr	r3, [pc, #28]	; (800b034 <SD_initialize+0x7c>)
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	f043 0301 	orr.w	r3, r3, #1
 800b020:	b2da      	uxtb	r2, r3
 800b022:	4b04      	ldr	r3, [pc, #16]	; (800b034 <SD_initialize+0x7c>)
 800b024:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800b026:	4b03      	ldr	r3, [pc, #12]	; (800b034 <SD_initialize+0x7c>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	b2db      	uxtb	r3, r3
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	20000009 	.word	0x20000009
 800b038:	2000009c 	.word	0x2000009c

0800b03c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	4603      	mov	r3, r0
 800b044:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b046:	79fb      	ldrb	r3, [r7, #7]
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff ff97 	bl	800af7c <SD_CheckStatus>
 800b04e:	4603      	mov	r3, r0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b088      	sub	sp, #32
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60b9      	str	r1, [r7, #8]
 800b060:	607a      	str	r2, [r7, #4]
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b06c:	f247 5030 	movw	r0, #30000	; 0x7530
 800b070:	f7ff ff66 	bl	800af40 <SD_CheckStatusWithTimeout>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	da01      	bge.n	800b07e <SD_read+0x26>
  {
    return res;
 800b07a:	7ffb      	ldrb	r3, [r7, #31]
 800b07c:	e02f      	b.n	800b0de <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	68b8      	ldr	r0, [r7, #8]
 800b084:	f7ff fed8 	bl	800ae38 <BSP_SD_ReadBlocks_DMA>
 800b088:	4603      	mov	r3, r0
 800b08a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800b08c:	7fbb      	ldrb	r3, [r7, #30]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d124      	bne.n	800b0dc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b092:	4b15      	ldr	r3, [pc, #84]	; (800b0e8 <SD_read+0x90>)
 800b094:	6818      	ldr	r0, [r3, #0]
 800b096:	f107 0112 	add.w	r1, r7, #18
 800b09a:	f247 5330 	movw	r3, #30000	; 0x7530
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f000 fc00 	bl	800b8a4 <osMessageQueueGet>
 800b0a4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d117      	bne.n	800b0dc <SD_read+0x84>
 800b0ac:	8a7b      	ldrh	r3, [r7, #18]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d114      	bne.n	800b0dc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800b0b2:	f000 f9d9 	bl	800b468 <osKernelGetTickCount>
 800b0b6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b0b8:	e007      	b.n	800b0ca <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0ba:	f7ff fef1 	bl	800aea0 <BSP_SD_GetCardState>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <SD_read+0x72>
              {
                res = RES_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800b0c8:	e008      	b.n	800b0dc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800b0ca:	f000 f9cd 	bl	800b468 <osKernelGetTickCount>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d9ee      	bls.n	800b0ba <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800b0dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3720      	adds	r7, #32
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	2000009c 	.word	0x2000009c

0800b0ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	607a      	str	r2, [r7, #4]
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b100:	f247 5030 	movw	r0, #30000	; 0x7530
 800b104:	f7ff ff1c 	bl	800af40 <SD_CheckStatusWithTimeout>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	da01      	bge.n	800b112 <SD_write+0x26>
  {
    return res;
 800b10e:	7ffb      	ldrb	r3, [r7, #31]
 800b110:	e02d      	b.n	800b16e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	68b8      	ldr	r0, [r7, #8]
 800b118:	f7ff fea8 	bl	800ae6c <BSP_SD_WriteBlocks_DMA>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d124      	bne.n	800b16c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800b122:	4b15      	ldr	r3, [pc, #84]	; (800b178 <SD_write+0x8c>)
 800b124:	6818      	ldr	r0, [r3, #0]
 800b126:	f107 0112 	add.w	r1, r7, #18
 800b12a:	f247 5330 	movw	r3, #30000	; 0x7530
 800b12e:	2200      	movs	r2, #0
 800b130:	f000 fbb8 	bl	800b8a4 <osMessageQueueGet>
 800b134:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d117      	bne.n	800b16c <SD_write+0x80>
 800b13c:	8a7b      	ldrh	r3, [r7, #18]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d114      	bne.n	800b16c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800b142:	f000 f991 	bl	800b468 <osKernelGetTickCount>
 800b146:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b148:	e007      	b.n	800b15a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b14a:	f7ff fea9 	bl	800aea0 <BSP_SD_GetCardState>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <SD_write+0x6e>
          {
            res = RES_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	77fb      	strb	r3, [r7, #31]
            break;
 800b158:	e008      	b.n	800b16c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b15a:	f000 f985 	bl	800b468 <osKernelGetTickCount>
 800b15e:	4602      	mov	r2, r0
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	f247 522f 	movw	r2, #29999	; 0x752f
 800b168:	4293      	cmp	r3, r2
 800b16a:	d9ee      	bls.n	800b14a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800b16c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	2000009c 	.word	0x2000009c

0800b17c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08c      	sub	sp, #48	; 0x30
 800b180:	af00      	add	r7, sp, #0
 800b182:	4603      	mov	r3, r0
 800b184:	603a      	str	r2, [r7, #0]
 800b186:	71fb      	strb	r3, [r7, #7]
 800b188:	460b      	mov	r3, r1
 800b18a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b192:	4b25      	ldr	r3, [pc, #148]	; (800b228 <SD_ioctl+0xac>)
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <SD_ioctl+0x28>
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	e03c      	b.n	800b21e <SD_ioctl+0xa2>

  switch (cmd)
 800b1a4:	79bb      	ldrb	r3, [r7, #6]
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d834      	bhi.n	800b214 <SD_ioctl+0x98>
 800b1aa:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <SD_ioctl+0x34>)
 800b1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b0:	0800b1c1 	.word	0x0800b1c1
 800b1b4:	0800b1c9 	.word	0x0800b1c9
 800b1b8:	0800b1e1 	.word	0x0800b1e1
 800b1bc:	0800b1fb 	.word	0x0800b1fb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1c6:	e028      	b.n	800b21a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1c8:	f107 030c 	add.w	r3, r7, #12
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff fe77 	bl	800aec0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1de:	e01c      	b.n	800b21a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1e0:	f107 030c 	add.w	r3, r7, #12
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff fe6b 	bl	800aec0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1f8:	e00f      	b.n	800b21a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1fa:	f107 030c 	add.w	r3, r7, #12
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff fe5e 	bl	800aec0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	0a5a      	lsrs	r2, r3, #9
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b212:	e002      	b.n	800b21a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b214:	2304      	movs	r3, #4
 800b216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b21a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3730      	adds	r7, #48	; 0x30
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20000009 	.word	0x20000009

0800b22c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800b232:	2301      	movs	r3, #1
 800b234:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800b236:	4b05      	ldr	r3, [pc, #20]	; (800b24c <BSP_SD_ReadCpltCallback+0x20>)
 800b238:	6818      	ldr	r0, [r3, #0]
 800b23a:	1db9      	adds	r1, r7, #6
 800b23c:	2300      	movs	r3, #0
 800b23e:	2200      	movs	r2, #0
 800b240:	f000 fad0 	bl	800b7e4 <osMessageQueuePut>
#endif
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	2000009c 	.word	0x2000009c

0800b250 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b250:	b480      	push	{r7}
 800b252:	b087      	sub	sp, #28
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	4613      	mov	r3, r2
 800b25c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b25e:	2301      	movs	r3, #1
 800b260:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b262:	2300      	movs	r3, #0
 800b264:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b266:	4b1f      	ldr	r3, [pc, #124]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b268:	7a5b      	ldrb	r3, [r3, #9]
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d131      	bne.n	800b2d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b270:	4b1c      	ldr	r3, [pc, #112]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b272:	7a5b      	ldrb	r3, [r3, #9]
 800b274:	b2db      	uxtb	r3, r3
 800b276:	461a      	mov	r2, r3
 800b278:	4b1a      	ldr	r3, [pc, #104]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b27a:	2100      	movs	r1, #0
 800b27c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b27e:	4b19      	ldr	r3, [pc, #100]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b280:	7a5b      	ldrb	r3, [r3, #9]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	4a17      	ldr	r2, [pc, #92]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b28e:	4b15      	ldr	r3, [pc, #84]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b290:	7a5b      	ldrb	r3, [r3, #9]
 800b292:	b2db      	uxtb	r3, r3
 800b294:	461a      	mov	r2, r3
 800b296:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b298:	4413      	add	r3, r2
 800b29a:	79fa      	ldrb	r2, [r7, #7]
 800b29c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b29e:	4b11      	ldr	r3, [pc, #68]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b2a0:	7a5b      	ldrb	r3, [r3, #9]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	b2d1      	uxtb	r1, r2
 800b2a8:	4a0e      	ldr	r2, [pc, #56]	; (800b2e4 <FATFS_LinkDriverEx+0x94>)
 800b2aa:	7251      	strb	r1, [r2, #9]
 800b2ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b2ae:	7dbb      	ldrb	r3, [r7, #22]
 800b2b0:	3330      	adds	r3, #48	; 0x30
 800b2b2:	b2da      	uxtb	r2, r3
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	223a      	movs	r2, #58	; 0x3a
 800b2be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	3302      	adds	r3, #2
 800b2c4:	222f      	movs	r2, #47	; 0x2f
 800b2c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	3303      	adds	r3, #3
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	200000a0 	.word	0x200000a0

0800b2e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7ff ffaa 	bl	800b250 <FATFS_LinkDriverEx>
 800b2fc:	4603      	mov	r3, r0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
	...

0800b308 <__NVIC_SetPriority>:
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	6039      	str	r1, [r7, #0]
 800b312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	db0a      	blt.n	800b332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	490c      	ldr	r1, [pc, #48]	; (800b354 <__NVIC_SetPriority+0x4c>)
 800b322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b326:	0112      	lsls	r2, r2, #4
 800b328:	b2d2      	uxtb	r2, r2
 800b32a:	440b      	add	r3, r1
 800b32c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b330:	e00a      	b.n	800b348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	b2da      	uxtb	r2, r3
 800b336:	4908      	ldr	r1, [pc, #32]	; (800b358 <__NVIC_SetPriority+0x50>)
 800b338:	79fb      	ldrb	r3, [r7, #7]
 800b33a:	f003 030f 	and.w	r3, r3, #15
 800b33e:	3b04      	subs	r3, #4
 800b340:	0112      	lsls	r2, r2, #4
 800b342:	b2d2      	uxtb	r2, r2
 800b344:	440b      	add	r3, r1
 800b346:	761a      	strb	r2, [r3, #24]
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	e000e100 	.word	0xe000e100
 800b358:	e000ed00 	.word	0xe000ed00

0800b35c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b360:	4b05      	ldr	r3, [pc, #20]	; (800b378 <SysTick_Handler+0x1c>)
 800b362:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b364:	f002 fa5a 	bl	800d81c <xTaskGetSchedulerState>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d001      	beq.n	800b372 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b36e:	f003 f943 	bl	800e5f8 <xPortSysTickHandler>
  }
}
 800b372:	bf00      	nop
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	e000e010 	.word	0xe000e010

0800b37c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b380:	2100      	movs	r1, #0
 800b382:	f06f 0004 	mvn.w	r0, #4
 800b386:	f7ff ffbf 	bl	800b308 <__NVIC_SetPriority>
#endif
}
 800b38a:	bf00      	nop
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b396:	f3ef 8305 	mrs	r3, IPSR
 800b39a:	603b      	str	r3, [r7, #0]
  return(result);
 800b39c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3a2:	f06f 0305 	mvn.w	r3, #5
 800b3a6:	607b      	str	r3, [r7, #4]
 800b3a8:	e00c      	b.n	800b3c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3aa:	4b0a      	ldr	r3, [pc, #40]	; (800b3d4 <osKernelInitialize+0x44>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d105      	bne.n	800b3be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3b2:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <osKernelInitialize+0x44>)
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	607b      	str	r3, [r7, #4]
 800b3bc:	e002      	b.n	800b3c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b3be:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3c4:	687b      	ldr	r3, [r7, #4]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	200000ac 	.word	0x200000ac

0800b3d8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800b3de:	f002 fa1d 	bl	800d81c <xTaskGetSchedulerState>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d004      	beq.n	800b3f2 <osKernelGetState+0x1a>
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d105      	bne.n	800b3f8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	607b      	str	r3, [r7, #4]
      break;
 800b3f0:	e00c      	b.n	800b40c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	607b      	str	r3, [r7, #4]
      break;
 800b3f6:	e009      	b.n	800b40c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800b3f8:	4b07      	ldr	r3, [pc, #28]	; (800b418 <osKernelGetState+0x40>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d102      	bne.n	800b406 <osKernelGetState+0x2e>
        state = osKernelReady;
 800b400:	2301      	movs	r3, #1
 800b402:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800b404:	e001      	b.n	800b40a <osKernelGetState+0x32>
        state = osKernelInactive;
 800b406:	2300      	movs	r3, #0
 800b408:	607b      	str	r3, [r7, #4]
      break;
 800b40a:	bf00      	nop
  }

  return (state);
 800b40c:	687b      	ldr	r3, [r7, #4]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	200000ac 	.word	0x200000ac

0800b41c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b422:	f3ef 8305 	mrs	r3, IPSR
 800b426:	603b      	str	r3, [r7, #0]
  return(result);
 800b428:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d003      	beq.n	800b436 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b42e:	f06f 0305 	mvn.w	r3, #5
 800b432:	607b      	str	r3, [r7, #4]
 800b434:	e010      	b.n	800b458 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b436:	4b0b      	ldr	r3, [pc, #44]	; (800b464 <osKernelStart+0x48>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d109      	bne.n	800b452 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b43e:	f7ff ff9d 	bl	800b37c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b442:	4b08      	ldr	r3, [pc, #32]	; (800b464 <osKernelStart+0x48>)
 800b444:	2202      	movs	r2, #2
 800b446:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b448:	f001 fd56 	bl	800cef8 <vTaskStartScheduler>
      stat = osOK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	607b      	str	r3, [r7, #4]
 800b450:	e002      	b.n	800b458 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b452:	f04f 33ff 	mov.w	r3, #4294967295
 800b456:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b458:	687b      	ldr	r3, [r7, #4]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	200000ac 	.word	0x200000ac

0800b468 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b46e:	f3ef 8305 	mrs	r3, IPSR
 800b472:	603b      	str	r3, [r7, #0]
  return(result);
 800b474:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b47a:	f001 fe5f 	bl	800d13c <xTaskGetTickCountFromISR>
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	e002      	b.n	800b488 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b482:	f001 fe4b 	bl	800d11c <xTaskGetTickCount>
 800b486:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b488:	687b      	ldr	r3, [r7, #4]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b492:	b580      	push	{r7, lr}
 800b494:	b08e      	sub	sp, #56	; 0x38
 800b496:	af04      	add	r7, sp, #16
 800b498:	60f8      	str	r0, [r7, #12]
 800b49a:	60b9      	str	r1, [r7, #8]
 800b49c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4a2:	f3ef 8305 	mrs	r3, IPSR
 800b4a6:	617b      	str	r3, [r7, #20]
  return(result);
 800b4a8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d17e      	bne.n	800b5ac <osThreadNew+0x11a>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d07b      	beq.n	800b5ac <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b4b4:	2380      	movs	r3, #128	; 0x80
 800b4b6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b4b8:	2318      	movs	r3, #24
 800b4ba:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d045      	beq.n	800b558 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <osThreadNew+0x48>
        name = attr->name;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d008      	beq.n	800b500 <osThreadNew+0x6e>
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	2b38      	cmp	r3, #56	; 0x38
 800b4f2:	d805      	bhi.n	800b500 <osThreadNew+0x6e>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	f003 0301 	and.w	r3, r3, #1
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <osThreadNew+0x72>
        return (NULL);
 800b500:	2300      	movs	r3, #0
 800b502:	e054      	b.n	800b5ae <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	089b      	lsrs	r3, r3, #2
 800b512:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00e      	beq.n	800b53a <osThreadNew+0xa8>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	2b5b      	cmp	r3, #91	; 0x5b
 800b522:	d90a      	bls.n	800b53a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d006      	beq.n	800b53a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <osThreadNew+0xa8>
        mem = 1;
 800b534:	2301      	movs	r3, #1
 800b536:	61bb      	str	r3, [r7, #24]
 800b538:	e010      	b.n	800b55c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10c      	bne.n	800b55c <osThreadNew+0xca>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d108      	bne.n	800b55c <osThreadNew+0xca>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d104      	bne.n	800b55c <osThreadNew+0xca>
          mem = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	61bb      	str	r3, [r7, #24]
 800b556:	e001      	b.n	800b55c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d110      	bne.n	800b584 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b56a:	9202      	str	r2, [sp, #8]
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	9300      	str	r3, [sp, #0]
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	6a3a      	ldr	r2, [r7, #32]
 800b576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b578:	68f8      	ldr	r0, [r7, #12]
 800b57a:	f001 fae7 	bl	800cb4c <xTaskCreateStatic>
 800b57e:	4603      	mov	r3, r0
 800b580:	613b      	str	r3, [r7, #16]
 800b582:	e013      	b.n	800b5ac <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d110      	bne.n	800b5ac <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	f107 0310 	add.w	r3, r7, #16
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f001 fb32 	bl	800cc06 <xTaskCreate>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d001      	beq.n	800b5ac <osThreadNew+0x11a>
            hTask = NULL;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b5ac:	693b      	ldr	r3, [r7, #16]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3728      	adds	r7, #40	; 0x28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b084      	sub	sp, #16
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5be:	f3ef 8305 	mrs	r3, IPSR
 800b5c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <osDelay+0x1c>
    stat = osErrorISR;
 800b5ca:	f06f 0305 	mvn.w	r3, #5
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	e007      	b.n	800b5e2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f001 fc57 	bl	800ce90 <vTaskDelay>
    }
  }

  return (stat);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	; 0x28
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5fc:	f3ef 8305 	mrs	r3, IPSR
 800b600:	613b      	str	r3, [r7, #16]
  return(result);
 800b602:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b604:	2b00      	cmp	r3, #0
 800b606:	d175      	bne.n	800b6f4 <osSemaphoreNew+0x108>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d072      	beq.n	800b6f4 <osSemaphoreNew+0x108>
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	429a      	cmp	r2, r3
 800b614:	d86e      	bhi.n	800b6f4 <osSemaphoreNew+0x108>
    mem = -1;
 800b616:	f04f 33ff 	mov.w	r3, #4294967295
 800b61a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d015      	beq.n	800b64e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d006      	beq.n	800b638 <osSemaphoreNew+0x4c>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	2b4f      	cmp	r3, #79	; 0x4f
 800b630:	d902      	bls.n	800b638 <osSemaphoreNew+0x4c>
        mem = 1;
 800b632:	2301      	movs	r3, #1
 800b634:	61bb      	str	r3, [r7, #24]
 800b636:	e00c      	b.n	800b652 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d108      	bne.n	800b652 <osSemaphoreNew+0x66>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d104      	bne.n	800b652 <osSemaphoreNew+0x66>
          mem = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	61bb      	str	r3, [r7, #24]
 800b64c:	e001      	b.n	800b652 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b658:	d04c      	beq.n	800b6f4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d128      	bne.n	800b6b2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d10a      	bne.n	800b67c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	2203      	movs	r2, #3
 800b66c:	9200      	str	r2, [sp, #0]
 800b66e:	2200      	movs	r2, #0
 800b670:	2100      	movs	r1, #0
 800b672:	2001      	movs	r0, #1
 800b674:	f000 fac4 	bl	800bc00 <xQueueGenericCreateStatic>
 800b678:	61f8      	str	r0, [r7, #28]
 800b67a:	e005      	b.n	800b688 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b67c:	2203      	movs	r2, #3
 800b67e:	2100      	movs	r1, #0
 800b680:	2001      	movs	r0, #1
 800b682:	f000 fb35 	bl	800bcf0 <xQueueGenericCreate>
 800b686:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d022      	beq.n	800b6d4 <osSemaphoreNew+0xe8>
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d01f      	beq.n	800b6d4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b694:	2300      	movs	r3, #0
 800b696:	2200      	movs	r2, #0
 800b698:	2100      	movs	r1, #0
 800b69a:	69f8      	ldr	r0, [r7, #28]
 800b69c:	f000 fbf0 	bl	800be80 <xQueueGenericSend>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d016      	beq.n	800b6d4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b6a6:	69f8      	ldr	r0, [r7, #28]
 800b6a8:	f001 f87c 	bl	800c7a4 <vQueueDelete>
            hSemaphore = NULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	61fb      	str	r3, [r7, #28]
 800b6b0:	e010      	b.n	800b6d4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d108      	bne.n	800b6ca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	461a      	mov	r2, r3
 800b6be:	68b9      	ldr	r1, [r7, #8]
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 fb72 	bl	800bdaa <xQueueCreateCountingSemaphoreStatic>
 800b6c6:	61f8      	str	r0, [r7, #28]
 800b6c8:	e004      	b.n	800b6d4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 fba3 	bl	800be18 <xQueueCreateCountingSemaphore>
 800b6d2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00c      	beq.n	800b6f4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	617b      	str	r3, [r7, #20]
 800b6e6:	e001      	b.n	800b6ec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b6ec:	6979      	ldr	r1, [r7, #20]
 800b6ee:	69f8      	ldr	r0, [r7, #28]
 800b6f0:	f001 f9a4 	bl	800ca3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b6f4:	69fb      	ldr	r3, [r7, #28]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b08a      	sub	sp, #40	; 0x28
 800b702:	af02      	add	r7, sp, #8
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b70e:	f3ef 8305 	mrs	r3, IPSR
 800b712:	613b      	str	r3, [r7, #16]
  return(result);
 800b714:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b716:	2b00      	cmp	r3, #0
 800b718:	d15f      	bne.n	800b7da <osMessageQueueNew+0xdc>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d05c      	beq.n	800b7da <osMessageQueueNew+0xdc>
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d059      	beq.n	800b7da <osMessageQueueNew+0xdc>
    mem = -1;
 800b726:	f04f 33ff 	mov.w	r3, #4294967295
 800b72a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d029      	beq.n	800b786 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d012      	beq.n	800b760 <osMessageQueueNew+0x62>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	2b4f      	cmp	r3, #79	; 0x4f
 800b740:	d90e      	bls.n	800b760 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00a      	beq.n	800b760 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	695a      	ldr	r2, [r3, #20]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	68b9      	ldr	r1, [r7, #8]
 800b752:	fb01 f303 	mul.w	r3, r1, r3
 800b756:	429a      	cmp	r2, r3
 800b758:	d302      	bcc.n	800b760 <osMessageQueueNew+0x62>
        mem = 1;
 800b75a:	2301      	movs	r3, #1
 800b75c:	61bb      	str	r3, [r7, #24]
 800b75e:	e014      	b.n	800b78a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d110      	bne.n	800b78a <osMessageQueueNew+0x8c>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10c      	bne.n	800b78a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b774:	2b00      	cmp	r3, #0
 800b776:	d108      	bne.n	800b78a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	695b      	ldr	r3, [r3, #20]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d104      	bne.n	800b78a <osMessageQueueNew+0x8c>
          mem = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	61bb      	str	r3, [r7, #24]
 800b784:	e001      	b.n	800b78a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d10b      	bne.n	800b7a8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	691a      	ldr	r2, [r3, #16]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	2100      	movs	r1, #0
 800b79a:	9100      	str	r1, [sp, #0]
 800b79c:	68b9      	ldr	r1, [r7, #8]
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 fa2e 	bl	800bc00 <xQueueGenericCreateStatic>
 800b7a4:	61f8      	str	r0, [r7, #28]
 800b7a6:	e008      	b.n	800b7ba <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d105      	bne.n	800b7ba <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 fa9c 	bl	800bcf0 <xQueueGenericCreate>
 800b7b8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00c      	beq.n	800b7da <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <osMessageQueueNew+0xd0>
        name = attr->name;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	e001      	b.n	800b7d2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b7d2:	6979      	ldr	r1, [r7, #20]
 800b7d4:	69f8      	ldr	r0, [r7, #28]
 800b7d6:	f001 f931 	bl	800ca3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b7da:	69fb      	ldr	r3, [r7, #28]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3720      	adds	r7, #32
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b088      	sub	sp, #32
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	603b      	str	r3, [r7, #0]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7fc:	f3ef 8305 	mrs	r3, IPSR
 800b800:	617b      	str	r3, [r7, #20]
  return(result);
 800b802:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b804:	2b00      	cmp	r3, #0
 800b806:	d028      	beq.n	800b85a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d005      	beq.n	800b81a <osMessageQueuePut+0x36>
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d002      	beq.n	800b81a <osMessageQueuePut+0x36>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d003      	beq.n	800b822 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b81a:	f06f 0303 	mvn.w	r3, #3
 800b81e:	61fb      	str	r3, [r7, #28]
 800b820:	e038      	b.n	800b894 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b822:	2300      	movs	r3, #0
 800b824:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b826:	f107 0210 	add.w	r2, r7, #16
 800b82a:	2300      	movs	r3, #0
 800b82c:	68b9      	ldr	r1, [r7, #8]
 800b82e:	69b8      	ldr	r0, [r7, #24]
 800b830:	f000 fc24 	bl	800c07c <xQueueGenericSendFromISR>
 800b834:	4603      	mov	r3, r0
 800b836:	2b01      	cmp	r3, #1
 800b838:	d003      	beq.n	800b842 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b83a:	f06f 0302 	mvn.w	r3, #2
 800b83e:	61fb      	str	r3, [r7, #28]
 800b840:	e028      	b.n	800b894 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d025      	beq.n	800b894 <osMessageQueuePut+0xb0>
 800b848:	4b15      	ldr	r3, [pc, #84]	; (800b8a0 <osMessageQueuePut+0xbc>)
 800b84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	e01c      	b.n	800b894 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <osMessageQueuePut+0x82>
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d103      	bne.n	800b86e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b866:	f06f 0303 	mvn.w	r3, #3
 800b86a:	61fb      	str	r3, [r7, #28]
 800b86c:	e012      	b.n	800b894 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b86e:	2300      	movs	r3, #0
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	68b9      	ldr	r1, [r7, #8]
 800b874:	69b8      	ldr	r0, [r7, #24]
 800b876:	f000 fb03 	bl	800be80 <xQueueGenericSend>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d009      	beq.n	800b894 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d003      	beq.n	800b88e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b886:	f06f 0301 	mvn.w	r3, #1
 800b88a:	61fb      	str	r3, [r7, #28]
 800b88c:	e002      	b.n	800b894 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b88e:	f06f 0302 	mvn.w	r3, #2
 800b892:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b894:	69fb      	ldr	r3, [r7, #28]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3720      	adds	r7, #32
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	e000ed04 	.word	0xe000ed04

0800b8a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8ba:	f3ef 8305 	mrs	r3, IPSR
 800b8be:	617b      	str	r3, [r7, #20]
  return(result);
 800b8c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d028      	beq.n	800b918 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d005      	beq.n	800b8d8 <osMessageQueueGet+0x34>
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <osMessageQueueGet+0x34>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d003      	beq.n	800b8e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b8d8:	f06f 0303 	mvn.w	r3, #3
 800b8dc:	61fb      	str	r3, [r7, #28]
 800b8de:	e037      	b.n	800b950 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b8e4:	f107 0310 	add.w	r3, r7, #16
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	69b8      	ldr	r0, [r7, #24]
 800b8ee:	f000 fed9 	bl	800c6a4 <xQueueReceiveFromISR>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d003      	beq.n	800b900 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b8f8:	f06f 0302 	mvn.w	r3, #2
 800b8fc:	61fb      	str	r3, [r7, #28]
 800b8fe:	e027      	b.n	800b950 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d024      	beq.n	800b950 <osMessageQueueGet+0xac>
 800b906:	4b15      	ldr	r3, [pc, #84]	; (800b95c <osMessageQueueGet+0xb8>)
 800b908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b90c:	601a      	str	r2, [r3, #0]
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	e01b      	b.n	800b950 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <osMessageQueueGet+0x80>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d103      	bne.n	800b92c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b924:	f06f 0303 	mvn.w	r3, #3
 800b928:	61fb      	str	r3, [r7, #28]
 800b92a:	e011      	b.n	800b950 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	68b9      	ldr	r1, [r7, #8]
 800b930:	69b8      	ldr	r0, [r7, #24]
 800b932:	f000 fccb 	bl	800c2cc <xQueueReceive>
 800b936:	4603      	mov	r3, r0
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d009      	beq.n	800b950 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d003      	beq.n	800b94a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b942:	f06f 0301 	mvn.w	r3, #1
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	e002      	b.n	800b950 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b94a:	f06f 0302 	mvn.w	r3, #2
 800b94e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b950:	69fb      	ldr	r3, [r7, #28]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3720      	adds	r7, #32
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	e000ed04 	.word	0xe000ed04

0800b960 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4a07      	ldr	r2, [pc, #28]	; (800b98c <vApplicationGetIdleTaskMemory+0x2c>)
 800b970:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	4a06      	ldr	r2, [pc, #24]	; (800b990 <vApplicationGetIdleTaskMemory+0x30>)
 800b976:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2280      	movs	r2, #128	; 0x80
 800b97c:	601a      	str	r2, [r3, #0]
}
 800b97e:	bf00      	nop
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	200000b0 	.word	0x200000b0
 800b990:	2000010c 	.word	0x2000010c

0800b994 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	4a07      	ldr	r2, [pc, #28]	; (800b9c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b9a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	4a06      	ldr	r2, [pc, #24]	; (800b9c4 <vApplicationGetTimerTaskMemory+0x30>)
 800b9aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9b2:	601a      	str	r2, [r3, #0]
}
 800b9b4:	bf00      	nop
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	2000030c 	.word	0x2000030c
 800b9c4:	20000368 	.word	0x20000368

0800b9c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f103 0208 	add.w	r2, r3, #8
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f103 0208 	add.w	r2, r3, #8
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f103 0208 	add.w	r2, r3, #8
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba16:	bf00      	nop
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba22:	b480      	push	{r7}
 800ba24:	b085      	sub	sp, #20
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	689a      	ldr	r2, [r3, #8]
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	683a      	ldr	r2, [r7, #0]
 800ba46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	687a      	ldr	r2, [r7, #4]
 800ba52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	1c5a      	adds	r2, r3, #1
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	601a      	str	r2, [r3, #0]
}
 800ba5e:	bf00      	nop
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b085      	sub	sp, #20
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba80:	d103      	bne.n	800ba8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	60fb      	str	r3, [r7, #12]
 800ba88:	e00c      	b.n	800baa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	e002      	b.n	800ba98 <vListInsert+0x2e>
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	60fb      	str	r3, [r7, #12]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d2f6      	bcs.n	800ba92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	685a      	ldr	r2, [r3, #4]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	683a      	ldr	r2, [r7, #0]
 800babe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	601a      	str	r2, [r3, #0]
}
 800bad0:	bf00      	nop
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	6892      	ldr	r2, [r2, #8]
 800baf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	6852      	ldr	r2, [r2, #4]
 800bafc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d103      	bne.n	800bb10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	689a      	ldr	r2, [r3, #8]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	1e5a      	subs	r2, r3, #1
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10a      	bne.n	800bb5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb56:	bf00      	nop
 800bb58:	e7fe      	b.n	800bb58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb5a:	f002 fcbb 	bl	800e4d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb66:	68f9      	ldr	r1, [r7, #12]
 800bb68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb6a:	fb01 f303 	mul.w	r3, r1, r3
 800bb6e:	441a      	add	r2, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	68f9      	ldr	r1, [r7, #12]
 800bb8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb90:	fb01 f303 	mul.w	r3, r1, r3
 800bb94:	441a      	add	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	22ff      	movs	r2, #255	; 0xff
 800bb9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	22ff      	movs	r2, #255	; 0xff
 800bba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d114      	bne.n	800bbda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d01a      	beq.n	800bbee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3310      	adds	r3, #16
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f001 fc37 	bl	800d430 <xTaskRemoveFromEventList>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d012      	beq.n	800bbee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bbc8:	4b0c      	ldr	r3, [pc, #48]	; (800bbfc <xQueueGenericReset+0xcc>)
 800bbca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbce:	601a      	str	r2, [r3, #0]
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	e009      	b.n	800bbee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	3310      	adds	r3, #16
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fef2 	bl	800b9c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	3324      	adds	r3, #36	; 0x24
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff feed 	bl	800b9c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bbee:	f002 fca1 	bl	800e534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bbf2:	2301      	movs	r3, #1
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	e000ed04 	.word	0xe000ed04

0800bc00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08e      	sub	sp, #56	; 0x38
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
 800bc0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10a      	bne.n	800bc2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10a      	bne.n	800bc46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <xQueueGenericCreateStatic+0x52>
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <xQueueGenericCreateStatic+0x56>
 800bc52:	2301      	movs	r3, #1
 800bc54:	e000      	b.n	800bc58 <xQueueGenericCreateStatic+0x58>
 800bc56:	2300      	movs	r3, #0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	623b      	str	r3, [r7, #32]
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <xQueueGenericCreateStatic+0x7e>
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d101      	bne.n	800bc82 <xQueueGenericCreateStatic+0x82>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <xQueueGenericCreateStatic+0x84>
 800bc82:	2300      	movs	r3, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10a      	bne.n	800bc9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	61fb      	str	r3, [r7, #28]
}
 800bc9a:	bf00      	nop
 800bc9c:	e7fe      	b.n	800bc9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc9e:	2350      	movs	r3, #80	; 0x50
 800bca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	2b50      	cmp	r3, #80	; 0x50
 800bca6:	d00a      	beq.n	800bcbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	61bb      	str	r3, [r7, #24]
}
 800bcba:	bf00      	nop
 800bcbc:	e7fe      	b.n	800bcbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bcbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00d      	beq.n	800bce6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	68b9      	ldr	r1, [r7, #8]
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	f000 f83f 	bl	800bd64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3730      	adds	r7, #48	; 0x30
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08a      	sub	sp, #40	; 0x28
 800bcf4:	af02      	add	r7, sp, #8
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10a      	bne.n	800bd1a <xQueueGenericCreate+0x2a>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	613b      	str	r3, [r7, #16]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	fb02 f303 	mul.w	r3, r2, r3
 800bd22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	3350      	adds	r3, #80	; 0x50
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f002 fcf5 	bl	800e718 <pvPortMalloc>
 800bd2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d011      	beq.n	800bd5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	3350      	adds	r3, #80	; 0x50
 800bd3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd48:	79fa      	ldrb	r2, [r7, #7]
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	68b9      	ldr	r1, [r7, #8]
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 f805 	bl	800bd64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd5a:	69bb      	ldr	r3, [r7, #24]
	}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3720      	adds	r7, #32
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
 800bd70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d103      	bne.n	800bd80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	69ba      	ldr	r2, [r7, #24]
 800bd7c:	601a      	str	r2, [r3, #0]
 800bd7e:	e002      	b.n	800bd86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd92:	2101      	movs	r1, #1
 800bd94:	69b8      	ldr	r0, [r7, #24]
 800bd96:	f7ff fecb 	bl	800bb30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	78fa      	ldrb	r2, [r7, #3]
 800bd9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bda2:	bf00      	nop
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b08a      	sub	sp, #40	; 0x28
 800bdae:	af02      	add	r7, sp, #8
 800bdb0:	60f8      	str	r0, [r7, #12]
 800bdb2:	60b9      	str	r1, [r7, #8]
 800bdb4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10a      	bne.n	800bdd2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	61bb      	str	r3, [r7, #24]
}
 800bdce:	bf00      	nop
 800bdd0:	e7fe      	b.n	800bdd0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d90a      	bls.n	800bdf0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	617b      	str	r3, [r7, #20]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f7ff ff00 	bl	800bc00 <xQueueGenericCreateStatic>
 800be00:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	68ba      	ldr	r2, [r7, #8]
 800be0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800be0e:	69fb      	ldr	r3, [r7, #28]
	}
 800be10:	4618      	mov	r0, r3
 800be12:	3720      	adds	r7, #32
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10a      	bne.n	800be3e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	613b      	str	r3, [r7, #16]
}
 800be3a:	bf00      	nop
 800be3c:	e7fe      	b.n	800be3c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be3e:	683a      	ldr	r2, [r7, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	429a      	cmp	r2, r3
 800be44:	d90a      	bls.n	800be5c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	60fb      	str	r3, [r7, #12]
}
 800be58:	bf00      	nop
 800be5a:	e7fe      	b.n	800be5a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be5c:	2202      	movs	r2, #2
 800be5e:	2100      	movs	r1, #0
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff ff45 	bl	800bcf0 <xQueueGenericCreate>
 800be66:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	683a      	ldr	r2, [r7, #0]
 800be72:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800be74:	697b      	ldr	r3, [r7, #20]
	}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
	...

0800be80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08e      	sub	sp, #56	; 0x38
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be8e:	2300      	movs	r3, #0
 800be90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d10a      	bne.n	800beb2 <xQueueGenericSend+0x32>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d103      	bne.n	800bec0 <xQueueGenericSend+0x40>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <xQueueGenericSend+0x44>
 800bec0:	2301      	movs	r3, #1
 800bec2:	e000      	b.n	800bec6 <xQueueGenericSend+0x46>
 800bec4:	2300      	movs	r3, #0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <xQueueGenericSend+0x60>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bedc:	bf00      	nop
 800bede:	e7fe      	b.n	800bede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d103      	bne.n	800beee <xQueueGenericSend+0x6e>
 800bee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beea:	2b01      	cmp	r3, #1
 800beec:	d101      	bne.n	800bef2 <xQueueGenericSend+0x72>
 800beee:	2301      	movs	r3, #1
 800bef0:	e000      	b.n	800bef4 <xQueueGenericSend+0x74>
 800bef2:	2300      	movs	r3, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueGenericSend+0x8e>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	623b      	str	r3, [r7, #32]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf0e:	f001 fc85 	bl	800d81c <xTaskGetSchedulerState>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <xQueueGenericSend+0x9e>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d101      	bne.n	800bf22 <xQueueGenericSend+0xa2>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e000      	b.n	800bf24 <xQueueGenericSend+0xa4>
 800bf22:	2300      	movs	r3, #0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10a      	bne.n	800bf3e <xQueueGenericSend+0xbe>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	61fb      	str	r3, [r7, #28]
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf3e:	f002 fac9 	bl	800e4d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d302      	bcc.n	800bf54 <xQueueGenericSend+0xd4>
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	2b02      	cmp	r3, #2
 800bf52:	d129      	bne.n	800bfa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	68b9      	ldr	r1, [r7, #8]
 800bf58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf5a:	f000 fc5e 	bl	800c81a <prvCopyDataToQueue>
 800bf5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d010      	beq.n	800bf8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	3324      	adds	r3, #36	; 0x24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f001 fa5f 	bl	800d430 <xTaskRemoveFromEventList>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d013      	beq.n	800bfa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf78:	4b3f      	ldr	r3, [pc, #252]	; (800c078 <xQueueGenericSend+0x1f8>)
 800bf7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	e00a      	b.n	800bfa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d007      	beq.n	800bfa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf90:	4b39      	ldr	r3, [pc, #228]	; (800c078 <xQueueGenericSend+0x1f8>)
 800bf92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bfa0:	f002 fac8 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	e063      	b.n	800c070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d103      	bne.n	800bfb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfae:	f002 fac1 	bl	800e534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	e05c      	b.n	800c070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d106      	bne.n	800bfca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfbc:	f107 0314 	add.w	r3, r7, #20
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f001 fa99 	bl	800d4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfca:	f002 fab3 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfce:	f000 fff9 	bl	800cfc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfd2:	f002 fa7f 	bl	800e4d4 <vPortEnterCritical>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfdc:	b25b      	sxtb	r3, r3
 800bfde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe2:	d103      	bne.n	800bfec <xQueueGenericSend+0x16c>
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bff2:	b25b      	sxtb	r3, r3
 800bff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff8:	d103      	bne.n	800c002 <xQueueGenericSend+0x182>
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c002:	f002 fa97 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c006:	1d3a      	adds	r2, r7, #4
 800c008:	f107 0314 	add.w	r3, r7, #20
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f001 fa88 	bl	800d524 <xTaskCheckForTimeOut>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d124      	bne.n	800c064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c01a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c01c:	f000 fcf5 	bl	800ca0a <prvIsQueueFull>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d018      	beq.n	800c058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	3310      	adds	r3, #16
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	4611      	mov	r1, r2
 800c02e:	4618      	mov	r0, r3
 800c030:	f001 f9ae 	bl	800d390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c036:	f000 fc80 	bl	800c93a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c03a:	f000 ffd1 	bl	800cfe0 <xTaskResumeAll>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	f47f af7c 	bne.w	800bf3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c046:	4b0c      	ldr	r3, [pc, #48]	; (800c078 <xQueueGenericSend+0x1f8>)
 800c048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	e772      	b.n	800bf3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c05a:	f000 fc6e 	bl	800c93a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c05e:	f000 ffbf 	bl	800cfe0 <xTaskResumeAll>
 800c062:	e76c      	b.n	800bf3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c066:	f000 fc68 	bl	800c93a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c06a:	f000 ffb9 	bl	800cfe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c06e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c070:	4618      	mov	r0, r3
 800c072:	3738      	adds	r7, #56	; 0x38
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	e000ed04 	.word	0xe000ed04

0800c07c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b090      	sub	sp, #64	; 0x40
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d103      	bne.n	800c0b8 <xQueueGenericSendFromISR+0x3c>
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d101      	bne.n	800c0bc <xQueueGenericSendFromISR+0x40>
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e000      	b.n	800c0be <xQueueGenericSendFromISR+0x42>
 800c0bc:	2300      	movs	r3, #0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d10a      	bne.n	800c0d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	f383 8811 	msr	BASEPRI, r3
 800c0ca:	f3bf 8f6f 	isb	sy
 800c0ce:	f3bf 8f4f 	dsb	sy
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0d4:	bf00      	nop
 800c0d6:	e7fe      	b.n	800c0d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	2b02      	cmp	r3, #2
 800c0dc:	d103      	bne.n	800c0e6 <xQueueGenericSendFromISR+0x6a>
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d101      	bne.n	800c0ea <xQueueGenericSendFromISR+0x6e>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e000      	b.n	800c0ec <xQueueGenericSendFromISR+0x70>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10a      	bne.n	800c106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	623b      	str	r3, [r7, #32]
}
 800c102:	bf00      	nop
 800c104:	e7fe      	b.n	800c104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c106:	f002 fac7 	bl	800e698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c10a:	f3ef 8211 	mrs	r2, BASEPRI
 800c10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	61fa      	str	r2, [r7, #28]
 800c120:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c122:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c124:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12e:	429a      	cmp	r2, r3
 800c130:	d302      	bcc.n	800c138 <xQueueGenericSendFromISR+0xbc>
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	2b02      	cmp	r3, #2
 800c136:	d12f      	bne.n	800c198 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c146:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	68b9      	ldr	r1, [r7, #8]
 800c14c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c14e:	f000 fb64 	bl	800c81a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c152:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15a:	d112      	bne.n	800c182 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	2b00      	cmp	r3, #0
 800c162:	d016      	beq.n	800c192 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	3324      	adds	r3, #36	; 0x24
 800c168:	4618      	mov	r0, r3
 800c16a:	f001 f961 	bl	800d430 <xTaskRemoveFromEventList>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00e      	beq.n	800c192 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00b      	beq.n	800c192 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2201      	movs	r2, #1
 800c17e:	601a      	str	r2, [r3, #0]
 800c180:	e007      	b.n	800c192 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c186:	3301      	adds	r3, #1
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	b25a      	sxtb	r2, r3
 800c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c192:	2301      	movs	r3, #1
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c196:	e001      	b.n	800c19c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c1a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3740      	adds	r7, #64	; 0x40
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b08e      	sub	sp, #56	; 0x38
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10a      	bne.n	800c1dc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	623b      	str	r3, [r7, #32]
}
 800c1d8:	bf00      	nop
 800c1da:	e7fe      	b.n	800c1da <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00a      	beq.n	800c1fa <xQueueGiveFromISR+0x48>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	61fb      	str	r3, [r7, #28]
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d103      	bne.n	800c20a <xQueueGiveFromISR+0x58>
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <xQueueGiveFromISR+0x5c>
 800c20a:	2301      	movs	r3, #1
 800c20c:	e000      	b.n	800c210 <xQueueGiveFromISR+0x5e>
 800c20e:	2300      	movs	r3, #0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10a      	bne.n	800c22a <xQueueGiveFromISR+0x78>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	61bb      	str	r3, [r7, #24]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c22a:	f002 fa35 	bl	800e698 <vPortValidateInterruptPriority>
	__asm volatile
 800c22e:	f3ef 8211 	mrs	r2, BASEPRI
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	617a      	str	r2, [r7, #20]
 800c244:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c246:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c248:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c256:	429a      	cmp	r2, r3
 800c258:	d22b      	bcs.n	800c2b2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c26c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c274:	d112      	bne.n	800c29c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d016      	beq.n	800c2ac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	3324      	adds	r3, #36	; 0x24
 800c282:	4618      	mov	r0, r3
 800c284:	f001 f8d4 	bl	800d430 <xTaskRemoveFromEventList>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00e      	beq.n	800c2ac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d00b      	beq.n	800c2ac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	e007      	b.n	800c2ac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c29c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	b25a      	sxtb	r2, r3
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	637b      	str	r3, [r7, #52]	; 0x34
 800c2b0:	e001      	b.n	800c2b6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f383 8811 	msr	BASEPRI, r3
}
 800c2c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3738      	adds	r7, #56	; 0x38
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08c      	sub	sp, #48	; 0x30
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10a      	bne.n	800c2fc <xQueueReceive+0x30>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	623b      	str	r3, [r7, #32]
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d103      	bne.n	800c30a <xQueueReceive+0x3e>
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <xQueueReceive+0x42>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e000      	b.n	800c310 <xQueueReceive+0x44>
 800c30e:	2300      	movs	r3, #0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d10a      	bne.n	800c32a <xQueueReceive+0x5e>
	__asm volatile
 800c314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	61fb      	str	r3, [r7, #28]
}
 800c326:	bf00      	nop
 800c328:	e7fe      	b.n	800c328 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c32a:	f001 fa77 	bl	800d81c <xTaskGetSchedulerState>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d102      	bne.n	800c33a <xQueueReceive+0x6e>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d101      	bne.n	800c33e <xQueueReceive+0x72>
 800c33a:	2301      	movs	r3, #1
 800c33c:	e000      	b.n	800c340 <xQueueReceive+0x74>
 800c33e:	2300      	movs	r3, #0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10a      	bne.n	800c35a <xQueueReceive+0x8e>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	61bb      	str	r3, [r7, #24]
}
 800c356:	bf00      	nop
 800c358:	e7fe      	b.n	800c358 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c35a:	f002 f8bb 	bl	800e4d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c362:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	2b00      	cmp	r3, #0
 800c368:	d01f      	beq.n	800c3aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c36a:	68b9      	ldr	r1, [r7, #8]
 800c36c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c36e:	f000 fabe 	bl	800c8ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c374:	1e5a      	subs	r2, r3, #1
 800c376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c378:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37c:	691b      	ldr	r3, [r3, #16]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00f      	beq.n	800c3a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	3310      	adds	r3, #16
 800c386:	4618      	mov	r0, r3
 800c388:	f001 f852 	bl	800d430 <xTaskRemoveFromEventList>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d007      	beq.n	800c3a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c392:	4b3d      	ldr	r3, [pc, #244]	; (800c488 <xQueueReceive+0x1bc>)
 800c394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c398:	601a      	str	r2, [r3, #0]
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3a2:	f002 f8c7 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e069      	b.n	800c47e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d103      	bne.n	800c3b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3b0:	f002 f8c0 	bl	800e534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e062      	b.n	800c47e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d106      	bne.n	800c3cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3be:	f107 0310 	add.w	r3, r7, #16
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f001 f898 	bl	800d4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3cc:	f002 f8b2 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3d0:	f000 fdf8 	bl	800cfc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3d4:	f002 f87e 	bl	800e4d4 <vPortEnterCritical>
 800c3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3de:	b25b      	sxtb	r3, r3
 800c3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e4:	d103      	bne.n	800c3ee <xQueueReceive+0x122>
 800c3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3f4:	b25b      	sxtb	r3, r3
 800c3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fa:	d103      	bne.n	800c404 <xQueueReceive+0x138>
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	2200      	movs	r2, #0
 800c400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c404:	f002 f896 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c408:	1d3a      	adds	r2, r7, #4
 800c40a:	f107 0310 	add.w	r3, r7, #16
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f001 f887 	bl	800d524 <xTaskCheckForTimeOut>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d123      	bne.n	800c464 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c41c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c41e:	f000 fade 	bl	800c9de <prvIsQueueEmpty>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d017      	beq.n	800c458 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	3324      	adds	r3, #36	; 0x24
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f000 ffad 	bl	800d390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c438:	f000 fa7f 	bl	800c93a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c43c:	f000 fdd0 	bl	800cfe0 <xTaskResumeAll>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d189      	bne.n	800c35a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c446:	4b10      	ldr	r3, [pc, #64]	; (800c488 <xQueueReceive+0x1bc>)
 800c448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	e780      	b.n	800c35a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c45a:	f000 fa6e 	bl	800c93a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c45e:	f000 fdbf 	bl	800cfe0 <xTaskResumeAll>
 800c462:	e77a      	b.n	800c35a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c466:	f000 fa68 	bl	800c93a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c46a:	f000 fdb9 	bl	800cfe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c46e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c470:	f000 fab5 	bl	800c9de <prvIsQueueEmpty>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	f43f af6f 	beq.w	800c35a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c47c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3730      	adds	r7, #48	; 0x30
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	e000ed04 	.word	0xe000ed04

0800c48c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b08e      	sub	sp, #56	; 0x38
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c496:	2300      	movs	r3, #0
 800c498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d10a      	bne.n	800c4be <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ac:	f383 8811 	msr	BASEPRI, r3
 800c4b0:	f3bf 8f6f 	isb	sy
 800c4b4:	f3bf 8f4f 	dsb	sy
 800c4b8:	623b      	str	r3, [r7, #32]
}
 800c4ba:	bf00      	nop
 800c4bc:	e7fe      	b.n	800c4bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00a      	beq.n	800c4dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	61fb      	str	r3, [r7, #28]
}
 800c4d8:	bf00      	nop
 800c4da:	e7fe      	b.n	800c4da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4dc:	f001 f99e 	bl	800d81c <xTaskGetSchedulerState>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <xQueueSemaphoreTake+0x60>
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <xQueueSemaphoreTake+0x64>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e000      	b.n	800c4f2 <xQueueSemaphoreTake+0x66>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10a      	bne.n	800c50c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	61bb      	str	r3, [r7, #24]
}
 800c508:	bf00      	nop
 800c50a:	e7fe      	b.n	800c50a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c50c:	f001 ffe2 	bl	800e4d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c514:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d024      	beq.n	800c566 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	1e5a      	subs	r2, r3, #1
 800c520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c522:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d104      	bne.n	800c536 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c52c:	f001 faec 	bl	800db08 <pvTaskIncrementMutexHeldCount>
 800c530:	4602      	mov	r2, r0
 800c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c534:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00f      	beq.n	800c55e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c540:	3310      	adds	r3, #16
 800c542:	4618      	mov	r0, r3
 800c544:	f000 ff74 	bl	800d430 <xTaskRemoveFromEventList>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d007      	beq.n	800c55e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c54e:	4b54      	ldr	r3, [pc, #336]	; (800c6a0 <xQueueSemaphoreTake+0x214>)
 800c550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c554:	601a      	str	r2, [r3, #0]
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c55e:	f001 ffe9 	bl	800e534 <vPortExitCritical>
				return pdPASS;
 800c562:	2301      	movs	r3, #1
 800c564:	e097      	b.n	800c696 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d111      	bne.n	800c590 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00a      	beq.n	800c588 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	617b      	str	r3, [r7, #20]
}
 800c584:	bf00      	nop
 800c586:	e7fe      	b.n	800c586 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c588:	f001 ffd4 	bl	800e534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c58c:	2300      	movs	r3, #0
 800c58e:	e082      	b.n	800c696 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c596:	f107 030c 	add.w	r3, r7, #12
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 ffac 	bl	800d4f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5a4:	f001 ffc6 	bl	800e534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5a8:	f000 fd0c 	bl	800cfc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5ac:	f001 ff92 	bl	800e4d4 <vPortEnterCritical>
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5b6:	b25b      	sxtb	r3, r3
 800c5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5bc:	d103      	bne.n	800c5c6 <xQueueSemaphoreTake+0x13a>
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5cc:	b25b      	sxtb	r3, r3
 800c5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d2:	d103      	bne.n	800c5dc <xQueueSemaphoreTake+0x150>
 800c5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5dc:	f001 ffaa 	bl	800e534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5e0:	463a      	mov	r2, r7
 800c5e2:	f107 030c 	add.w	r3, r7, #12
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 ff9b 	bl	800d524 <xTaskCheckForTimeOut>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d132      	bne.n	800c65a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5f6:	f000 f9f2 	bl	800c9de <prvIsQueueEmpty>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d026      	beq.n	800c64e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d109      	bne.n	800c61c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c608:	f001 ff64 	bl	800e4d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	4618      	mov	r0, r3
 800c612:	f001 f921 	bl	800d858 <xTaskPriorityInherit>
 800c616:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c618:	f001 ff8c 	bl	800e534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	3324      	adds	r3, #36	; 0x24
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	4611      	mov	r1, r2
 800c624:	4618      	mov	r0, r3
 800c626:	f000 feb3 	bl	800d390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c62a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c62c:	f000 f985 	bl	800c93a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c630:	f000 fcd6 	bl	800cfe0 <xTaskResumeAll>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	f47f af68 	bne.w	800c50c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c63c:	4b18      	ldr	r3, [pc, #96]	; (800c6a0 <xQueueSemaphoreTake+0x214>)
 800c63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	e75e      	b.n	800c50c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c64e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c650:	f000 f973 	bl	800c93a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c654:	f000 fcc4 	bl	800cfe0 <xTaskResumeAll>
 800c658:	e758      	b.n	800c50c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c65a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c65c:	f000 f96d 	bl	800c93a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c660:	f000 fcbe 	bl	800cfe0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c666:	f000 f9ba 	bl	800c9de <prvIsQueueEmpty>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f43f af4d 	beq.w	800c50c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00d      	beq.n	800c694 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c678:	f001 ff2c 	bl	800e4d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c67c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c67e:	f000 f8b4 	bl	800c7ea <prvGetDisinheritPriorityAfterTimeout>
 800c682:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c68a:	4618      	mov	r0, r3
 800c68c:	f001 f9ba 	bl	800da04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c690:	f001 ff50 	bl	800e534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c694:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c696:	4618      	mov	r0, r3
 800c698:	3738      	adds	r7, #56	; 0x38
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b08e      	sub	sp, #56	; 0x38
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10a      	bne.n	800c6d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	623b      	str	r3, [r7, #32]
}
 800c6cc:	bf00      	nop
 800c6ce:	e7fe      	b.n	800c6ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d103      	bne.n	800c6de <xQueueReceiveFromISR+0x3a>
 800c6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <xQueueReceiveFromISR+0x3e>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e000      	b.n	800c6e4 <xQueueReceiveFromISR+0x40>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	61fb      	str	r3, [r7, #28]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6fe:	f001 ffcb 	bl	800e698 <vPortValidateInterruptPriority>
	__asm volatile
 800c702:	f3ef 8211 	mrs	r2, BASEPRI
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	61ba      	str	r2, [r7, #24]
 800c718:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c71a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c71c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c722:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	2b00      	cmp	r3, #0
 800c728:	d02f      	beq.n	800c78a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c734:	68b9      	ldr	r1, [r7, #8]
 800c736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c738:	f000 f8d9 	bl	800c8ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	1e5a      	subs	r2, r3, #1
 800c740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c742:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74c:	d112      	bne.n	800c774 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d016      	beq.n	800c784 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	3310      	adds	r3, #16
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fe68 	bl	800d430 <xTaskRemoveFromEventList>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00e      	beq.n	800c784 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00b      	beq.n	800c784 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	601a      	str	r2, [r3, #0]
 800c772:	e007      	b.n	800c784 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c778:	3301      	adds	r3, #1
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	b25a      	sxtb	r2, r3
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c784:	2301      	movs	r3, #1
 800c786:	637b      	str	r3, [r7, #52]	; 0x34
 800c788:	e001      	b.n	800c78e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c78a:	2300      	movs	r3, #0
 800c78c:	637b      	str	r3, [r7, #52]	; 0x34
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	f383 8811 	msr	BASEPRI, r3
}
 800c798:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3738      	adds	r7, #56	; 0x38
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10a      	bne.n	800c7cc <vQueueDelete+0x28>
	__asm volatile
 800c7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ba:	f383 8811 	msr	BASEPRI, r3
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f3bf 8f4f 	dsb	sy
 800c7c6:	60bb      	str	r3, [r7, #8]
}
 800c7c8:	bf00      	nop
 800c7ca:	e7fe      	b.n	800c7ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f000 f95f 	bl	800ca90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d102      	bne.n	800c7e2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f002 f867 	bl	800e8b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d006      	beq.n	800c808 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	e001      	b.n	800c80c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c808:	2300      	movs	r3, #0
 800c80a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c80c:	68fb      	ldr	r3, [r7, #12]
	}
 800c80e:	4618      	mov	r0, r3
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b086      	sub	sp, #24
 800c81e:	af00      	add	r7, sp, #0
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c826:	2300      	movs	r3, #0
 800c828:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c834:	2b00      	cmp	r3, #0
 800c836:	d10d      	bne.n	800c854 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d14d      	bne.n	800c8dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	4618      	mov	r0, r3
 800c846:	f001 f86f 	bl	800d928 <xTaskPriorityDisinherit>
 800c84a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2200      	movs	r2, #0
 800c850:	609a      	str	r2, [r3, #8]
 800c852:	e043      	b.n	800c8dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d119      	bne.n	800c88e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6858      	ldr	r0, [r3, #4]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c862:	461a      	mov	r2, r3
 800c864:	68b9      	ldr	r1, [r7, #8]
 800c866:	f002 f96b 	bl	800eb40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c872:	441a      	add	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	429a      	cmp	r2, r3
 800c882:	d32b      	bcc.n	800c8dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	605a      	str	r2, [r3, #4]
 800c88c:	e026      	b.n	800c8dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	68d8      	ldr	r0, [r3, #12]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c896:	461a      	mov	r2, r3
 800c898:	68b9      	ldr	r1, [r7, #8]
 800c89a:	f002 f951 	bl	800eb40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	68da      	ldr	r2, [r3, #12]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a6:	425b      	negs	r3, r3
 800c8a8:	441a      	add	r2, r3
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	68da      	ldr	r2, [r3, #12]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d207      	bcs.n	800c8ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	689a      	ldr	r2, [r3, #8]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8c2:	425b      	negs	r3, r3
 800c8c4:	441a      	add	r2, r3
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b02      	cmp	r3, #2
 800c8ce:	d105      	bne.n	800c8dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c8e4:	697b      	ldr	r3, [r7, #20]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b082      	sub	sp, #8
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d018      	beq.n	800c932 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	68da      	ldr	r2, [r3, #12]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c908:	441a      	add	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	429a      	cmp	r2, r3
 800c918:	d303      	bcc.n	800c922 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68d9      	ldr	r1, [r3, #12]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92a:	461a      	mov	r2, r3
 800c92c:	6838      	ldr	r0, [r7, #0]
 800c92e:	f002 f907 	bl	800eb40 <memcpy>
	}
}
 800c932:	bf00      	nop
 800c934:	3708      	adds	r7, #8
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c942:	f001 fdc7 	bl	800e4d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c94c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c94e:	e011      	b.n	800c974 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c954:	2b00      	cmp	r3, #0
 800c956:	d012      	beq.n	800c97e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3324      	adds	r3, #36	; 0x24
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 fd67 	bl	800d430 <xTaskRemoveFromEventList>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d001      	beq.n	800c96c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c968:	f000 fe3e 	bl	800d5e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
 800c96e:	3b01      	subs	r3, #1
 800c970:	b2db      	uxtb	r3, r3
 800c972:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	dce9      	bgt.n	800c950 <prvUnlockQueue+0x16>
 800c97c:	e000      	b.n	800c980 <prvUnlockQueue+0x46>
					break;
 800c97e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	22ff      	movs	r2, #255	; 0xff
 800c984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c988:	f001 fdd4 	bl	800e534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c98c:	f001 fda2 	bl	800e4d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c996:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c998:	e011      	b.n	800c9be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d012      	beq.n	800c9c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	3310      	adds	r3, #16
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 fd42 	bl	800d430 <xTaskRemoveFromEventList>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c9b2:	f000 fe19 	bl	800d5e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9b6:	7bbb      	ldrb	r3, [r7, #14]
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dce9      	bgt.n	800c99a <prvUnlockQueue+0x60>
 800c9c6:	e000      	b.n	800c9ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	22ff      	movs	r2, #255	; 0xff
 800c9ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c9d2:	f001 fdaf 	bl	800e534 <vPortExitCritical>
}
 800c9d6:	bf00      	nop
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9e6:	f001 fd75 	bl	800e4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d102      	bne.n	800c9f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	e001      	b.n	800c9fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9fc:	f001 fd9a 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800ca00:	68fb      	ldr	r3, [r7, #12]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b084      	sub	sp, #16
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca12:	f001 fd5f 	bl	800e4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d102      	bne.n	800ca28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca22:	2301      	movs	r3, #1
 800ca24:	60fb      	str	r3, [r7, #12]
 800ca26:	e001      	b.n	800ca2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca2c:	f001 fd82 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800ca30:	68fb      	ldr	r3, [r7, #12]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
	...

0800ca3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca46:	2300      	movs	r3, #0
 800ca48:	60fb      	str	r3, [r7, #12]
 800ca4a:	e014      	b.n	800ca76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca4c:	4a0f      	ldr	r2, [pc, #60]	; (800ca8c <vQueueAddToRegistry+0x50>)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d10b      	bne.n	800ca70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca58:	490c      	ldr	r1, [pc, #48]	; (800ca8c <vQueueAddToRegistry+0x50>)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca62:	4a0a      	ldr	r2, [pc, #40]	; (800ca8c <vQueueAddToRegistry+0x50>)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	00db      	lsls	r3, r3, #3
 800ca68:	4413      	add	r3, r2
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca6e:	e006      	b.n	800ca7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	3301      	adds	r3, #1
 800ca74:	60fb      	str	r3, [r7, #12]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2b07      	cmp	r3, #7
 800ca7a:	d9e7      	bls.n	800ca4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca7c:	bf00      	nop
 800ca7e:	bf00      	nop
 800ca80:	3714      	adds	r7, #20
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	20009b14 	.word	0x20009b14

0800ca90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca98:	2300      	movs	r3, #0
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	e016      	b.n	800cacc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ca9e:	4a10      	ldr	r2, [pc, #64]	; (800cae0 <vQueueUnregisterQueue+0x50>)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	4413      	add	r3, r2
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d10b      	bne.n	800cac6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800caae:	4a0c      	ldr	r2, [pc, #48]	; (800cae0 <vQueueUnregisterQueue+0x50>)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2100      	movs	r1, #0
 800cab4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cab8:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <vQueueUnregisterQueue+0x50>)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	00db      	lsls	r3, r3, #3
 800cabe:	4413      	add	r3, r2
 800cac0:	2200      	movs	r2, #0
 800cac2:	605a      	str	r2, [r3, #4]
				break;
 800cac4:	e006      	b.n	800cad4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	3301      	adds	r3, #1
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b07      	cmp	r3, #7
 800cad0:	d9e5      	bls.n	800ca9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cad2:	bf00      	nop
 800cad4:	bf00      	nop
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	20009b14 	.word	0x20009b14

0800cae4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800caf4:	f001 fcee 	bl	800e4d4 <vPortEnterCritical>
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cafe:	b25b      	sxtb	r3, r3
 800cb00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb04:	d103      	bne.n	800cb0e <vQueueWaitForMessageRestricted+0x2a>
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb14:	b25b      	sxtb	r3, r3
 800cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb1a:	d103      	bne.n	800cb24 <vQueueWaitForMessageRestricted+0x40>
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb24:	f001 fd06 	bl	800e534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d106      	bne.n	800cb3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	3324      	adds	r3, #36	; 0x24
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	68b9      	ldr	r1, [r7, #8]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 fc4d 	bl	800d3d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cb3e:	6978      	ldr	r0, [r7, #20]
 800cb40:	f7ff fefb 	bl	800c93a <prvUnlockQueue>
	}
 800cb44:	bf00      	nop
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b08e      	sub	sp, #56	; 0x38
 800cb50:	af04      	add	r7, sp, #16
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
 800cb58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10a      	bne.n	800cb76 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	623b      	str	r3, [r7, #32]
}
 800cb72:	bf00      	nop
 800cb74:	e7fe      	b.n	800cb74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <xTaskCreateStatic+0x46>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	61fb      	str	r3, [r7, #28]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb92:	235c      	movs	r3, #92	; 0x5c
 800cb94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	2b5c      	cmp	r3, #92	; 0x5c
 800cb9a:	d00a      	beq.n	800cbb2 <xTaskCreateStatic+0x66>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	61bb      	str	r3, [r7, #24]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d01e      	beq.n	800cbf8 <xTaskCreateStatic+0xac>
 800cbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d01b      	beq.n	800cbf8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbcc:	2202      	movs	r2, #2
 800cbce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	9303      	str	r3, [sp, #12]
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	9302      	str	r3, [sp, #8]
 800cbda:	f107 0314 	add.w	r3, r7, #20
 800cbde:	9301      	str	r3, [sp, #4]
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe2:	9300      	str	r3, [sp, #0]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f000 f850 	bl	800cc90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbf2:	f000 f8dd 	bl	800cdb0 <prvAddNewTaskToReadyList>
 800cbf6:	e001      	b.n	800cbfc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cbfc:	697b      	ldr	r3, [r7, #20]
	}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3728      	adds	r7, #40	; 0x28
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b08c      	sub	sp, #48	; 0x30
 800cc0a:	af04      	add	r7, sp, #16
 800cc0c:	60f8      	str	r0, [r7, #12]
 800cc0e:	60b9      	str	r1, [r7, #8]
 800cc10:	603b      	str	r3, [r7, #0]
 800cc12:	4613      	mov	r3, r2
 800cc14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc16:	88fb      	ldrh	r3, [r7, #6]
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 fd7c 	bl	800e718 <pvPortMalloc>
 800cc20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00e      	beq.n	800cc46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc28:	205c      	movs	r0, #92	; 0x5c
 800cc2a:	f001 fd75 	bl	800e718 <pvPortMalloc>
 800cc2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc36:	69fb      	ldr	r3, [r7, #28]
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	631a      	str	r2, [r3, #48]	; 0x30
 800cc3c:	e005      	b.n	800cc4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc3e:	6978      	ldr	r0, [r7, #20]
 800cc40:	f001 fe36 	bl	800e8b0 <vPortFree>
 800cc44:	e001      	b.n	800cc4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d017      	beq.n	800cc80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc58:	88fa      	ldrh	r2, [r7, #6]
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	9303      	str	r3, [sp, #12]
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	9302      	str	r3, [sp, #8]
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f000 f80e 	bl	800cc90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc74:	69f8      	ldr	r0, [r7, #28]
 800cc76:	f000 f89b 	bl	800cdb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	e002      	b.n	800cc86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc80:	f04f 33ff 	mov.w	r3, #4294967295
 800cc84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc86:	69bb      	ldr	r3, [r7, #24]
	}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3720      	adds	r7, #32
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	461a      	mov	r2, r3
 800cca8:	21a5      	movs	r1, #165	; 0xa5
 800ccaa:	f001 ff57 	bl	800eb5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	f023 0307 	bic.w	r3, r3, #7
 800ccc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ccd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	617b      	str	r3, [r7, #20]
}
 800cce4:	bf00      	nop
 800cce6:	e7fe      	b.n	800cce6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d01f      	beq.n	800cd2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccee:	2300      	movs	r3, #0
 800ccf0:	61fb      	str	r3, [r7, #28]
 800ccf2:	e012      	b.n	800cd1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ccf4:	68ba      	ldr	r2, [r7, #8]
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	7819      	ldrb	r1, [r3, #0]
 800ccfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	4413      	add	r3, r2
 800cd02:	3334      	adds	r3, #52	; 0x34
 800cd04:	460a      	mov	r2, r1
 800cd06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d006      	beq.n	800cd22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	3301      	adds	r3, #1
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	69fb      	ldr	r3, [r7, #28]
 800cd1c:	2b0f      	cmp	r3, #15
 800cd1e:	d9e9      	bls.n	800ccf4 <prvInitialiseNewTask+0x64>
 800cd20:	e000      	b.n	800cd24 <prvInitialiseNewTask+0x94>
			{
				break;
 800cd22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd26:	2200      	movs	r2, #0
 800cd28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd2c:	e003      	b.n	800cd36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd38:	2b37      	cmp	r3, #55	; 0x37
 800cd3a:	d901      	bls.n	800cd40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd3c:	2337      	movs	r3, #55	; 0x37
 800cd3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4e:	2200      	movs	r2, #0
 800cd50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd54:	3304      	adds	r3, #4
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fe fe56 	bl	800ba08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5e:	3318      	adds	r3, #24
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fe fe51 	bl	800ba08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	2200      	movs	r2, #0
 800cd80:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	68f9      	ldr	r1, [r7, #12]
 800cd8e:	69b8      	ldr	r0, [r7, #24]
 800cd90:	f001 fa70 	bl	800e274 <pxPortInitialiseStack>
 800cd94:	4602      	mov	r2, r0
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cda4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cda6:	bf00      	nop
 800cda8:	3720      	adds	r7, #32
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
	...

0800cdb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cdb8:	f001 fb8c 	bl	800e4d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cdbc:	4b2d      	ldr	r3, [pc, #180]	; (800ce74 <prvAddNewTaskToReadyList+0xc4>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	4a2c      	ldr	r2, [pc, #176]	; (800ce74 <prvAddNewTaskToReadyList+0xc4>)
 800cdc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdc6:	4b2c      	ldr	r3, [pc, #176]	; (800ce78 <prvAddNewTaskToReadyList+0xc8>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d109      	bne.n	800cde2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdce:	4a2a      	ldr	r2, [pc, #168]	; (800ce78 <prvAddNewTaskToReadyList+0xc8>)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cdd4:	4b27      	ldr	r3, [pc, #156]	; (800ce74 <prvAddNewTaskToReadyList+0xc4>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d110      	bne.n	800cdfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cddc:	f000 fc28 	bl	800d630 <prvInitialiseTaskLists>
 800cde0:	e00d      	b.n	800cdfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cde2:	4b26      	ldr	r3, [pc, #152]	; (800ce7c <prvAddNewTaskToReadyList+0xcc>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d109      	bne.n	800cdfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdea:	4b23      	ldr	r3, [pc, #140]	; (800ce78 <prvAddNewTaskToReadyList+0xc8>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d802      	bhi.n	800cdfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cdf8:	4a1f      	ldr	r2, [pc, #124]	; (800ce78 <prvAddNewTaskToReadyList+0xc8>)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cdfe:	4b20      	ldr	r3, [pc, #128]	; (800ce80 <prvAddNewTaskToReadyList+0xd0>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3301      	adds	r3, #1
 800ce04:	4a1e      	ldr	r2, [pc, #120]	; (800ce80 <prvAddNewTaskToReadyList+0xd0>)
 800ce06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ce08:	4b1d      	ldr	r3, [pc, #116]	; (800ce80 <prvAddNewTaskToReadyList+0xd0>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce14:	4b1b      	ldr	r3, [pc, #108]	; (800ce84 <prvAddNewTaskToReadyList+0xd4>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d903      	bls.n	800ce24 <prvAddNewTaskToReadyList+0x74>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce20:	4a18      	ldr	r2, [pc, #96]	; (800ce84 <prvAddNewTaskToReadyList+0xd4>)
 800ce22:	6013      	str	r3, [r2, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce28:	4613      	mov	r3, r2
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4a15      	ldr	r2, [pc, #84]	; (800ce88 <prvAddNewTaskToReadyList+0xd8>)
 800ce32:	441a      	add	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3304      	adds	r3, #4
 800ce38:	4619      	mov	r1, r3
 800ce3a:	4610      	mov	r0, r2
 800ce3c:	f7fe fdf1 	bl	800ba22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce40:	f001 fb78 	bl	800e534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce44:	4b0d      	ldr	r3, [pc, #52]	; (800ce7c <prvAddNewTaskToReadyList+0xcc>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00e      	beq.n	800ce6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce4c:	4b0a      	ldr	r3, [pc, #40]	; (800ce78 <prvAddNewTaskToReadyList+0xc8>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d207      	bcs.n	800ce6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce5a:	4b0c      	ldr	r3, [pc, #48]	; (800ce8c <prvAddNewTaskToReadyList+0xdc>)
 800ce5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce60:	601a      	str	r2, [r3, #0]
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce6a:	bf00      	nop
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20000c3c 	.word	0x20000c3c
 800ce78:	20000768 	.word	0x20000768
 800ce7c:	20000c48 	.word	0x20000c48
 800ce80:	20000c58 	.word	0x20000c58
 800ce84:	20000c44 	.word	0x20000c44
 800ce88:	2000076c 	.word	0x2000076c
 800ce8c:	e000ed04 	.word	0xe000ed04

0800ce90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d017      	beq.n	800ced2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cea2:	4b13      	ldr	r3, [pc, #76]	; (800cef0 <vTaskDelay+0x60>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <vTaskDelay+0x30>
	__asm volatile
 800ceaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceae:	f383 8811 	msr	BASEPRI, r3
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	f3bf 8f4f 	dsb	sy
 800ceba:	60bb      	str	r3, [r7, #8]
}
 800cebc:	bf00      	nop
 800cebe:	e7fe      	b.n	800cebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cec0:	f000 f880 	bl	800cfc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cec4:	2100      	movs	r1, #0
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fe32 	bl	800db30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cecc:	f000 f888 	bl	800cfe0 <xTaskResumeAll>
 800ced0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d107      	bne.n	800cee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ced8:	4b06      	ldr	r3, [pc, #24]	; (800cef4 <vTaskDelay+0x64>)
 800ceda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cede:	601a      	str	r2, [r3, #0]
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cee8:	bf00      	nop
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	20000c64 	.word	0x20000c64
 800cef4:	e000ed04 	.word	0xe000ed04

0800cef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b08a      	sub	sp, #40	; 0x28
 800cefc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf06:	463a      	mov	r2, r7
 800cf08:	1d39      	adds	r1, r7, #4
 800cf0a:	f107 0308 	add.w	r3, r7, #8
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fe fd26 	bl	800b960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf14:	6839      	ldr	r1, [r7, #0]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	9202      	str	r2, [sp, #8]
 800cf1c:	9301      	str	r3, [sp, #4]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	2300      	movs	r3, #0
 800cf24:	460a      	mov	r2, r1
 800cf26:	4921      	ldr	r1, [pc, #132]	; (800cfac <vTaskStartScheduler+0xb4>)
 800cf28:	4821      	ldr	r0, [pc, #132]	; (800cfb0 <vTaskStartScheduler+0xb8>)
 800cf2a:	f7ff fe0f 	bl	800cb4c <xTaskCreateStatic>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	4a20      	ldr	r2, [pc, #128]	; (800cfb4 <vTaskStartScheduler+0xbc>)
 800cf32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf34:	4b1f      	ldr	r3, [pc, #124]	; (800cfb4 <vTaskStartScheduler+0xbc>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d002      	beq.n	800cf42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	617b      	str	r3, [r7, #20]
 800cf40:	e001      	b.n	800cf46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf42:	2300      	movs	r3, #0
 800cf44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d102      	bne.n	800cf52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf4c:	f000 fe44 	bl	800dbd8 <xTimerCreateTimerTask>
 800cf50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d116      	bne.n	800cf86 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf5c:	f383 8811 	msr	BASEPRI, r3
 800cf60:	f3bf 8f6f 	isb	sy
 800cf64:	f3bf 8f4f 	dsb	sy
 800cf68:	613b      	str	r3, [r7, #16]
}
 800cf6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf6c:	4b12      	ldr	r3, [pc, #72]	; (800cfb8 <vTaskStartScheduler+0xc0>)
 800cf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf74:	4b11      	ldr	r3, [pc, #68]	; (800cfbc <vTaskStartScheduler+0xc4>)
 800cf76:	2201      	movs	r2, #1
 800cf78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf7a:	4b11      	ldr	r3, [pc, #68]	; (800cfc0 <vTaskStartScheduler+0xc8>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf80:	f001 fa06 	bl	800e390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf84:	e00e      	b.n	800cfa4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf8c:	d10a      	bne.n	800cfa4 <vTaskStartScheduler+0xac>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	60fb      	str	r3, [r7, #12]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <vTaskStartScheduler+0xaa>
}
 800cfa4:	bf00      	nop
 800cfa6:	3718      	adds	r7, #24
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	0800f948 	.word	0x0800f948
 800cfb0:	0800d601 	.word	0x0800d601
 800cfb4:	20000c60 	.word	0x20000c60
 800cfb8:	20000c5c 	.word	0x20000c5c
 800cfbc:	20000c48 	.word	0x20000c48
 800cfc0:	20000c40 	.word	0x20000c40

0800cfc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cfc8:	4b04      	ldr	r3, [pc, #16]	; (800cfdc <vTaskSuspendAll+0x18>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	4a03      	ldr	r2, [pc, #12]	; (800cfdc <vTaskSuspendAll+0x18>)
 800cfd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cfd2:	bf00      	nop
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr
 800cfdc:	20000c64 	.word	0x20000c64

0800cfe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfea:	2300      	movs	r3, #0
 800cfec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfee:	4b42      	ldr	r3, [pc, #264]	; (800d0f8 <xTaskResumeAll+0x118>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d10a      	bne.n	800d00c <xTaskResumeAll+0x2c>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	603b      	str	r3, [r7, #0]
}
 800d008:	bf00      	nop
 800d00a:	e7fe      	b.n	800d00a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d00c:	f001 fa62 	bl	800e4d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d010:	4b39      	ldr	r3, [pc, #228]	; (800d0f8 <xTaskResumeAll+0x118>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3b01      	subs	r3, #1
 800d016:	4a38      	ldr	r2, [pc, #224]	; (800d0f8 <xTaskResumeAll+0x118>)
 800d018:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d01a:	4b37      	ldr	r3, [pc, #220]	; (800d0f8 <xTaskResumeAll+0x118>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d162      	bne.n	800d0e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d022:	4b36      	ldr	r3, [pc, #216]	; (800d0fc <xTaskResumeAll+0x11c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d05e      	beq.n	800d0e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d02a:	e02f      	b.n	800d08c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d02c:	4b34      	ldr	r3, [pc, #208]	; (800d100 <xTaskResumeAll+0x120>)
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	3318      	adds	r3, #24
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fd4f 	bl	800badc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	3304      	adds	r3, #4
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe fd4a 	bl	800badc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04c:	4b2d      	ldr	r3, [pc, #180]	; (800d104 <xTaskResumeAll+0x124>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	429a      	cmp	r2, r3
 800d052:	d903      	bls.n	800d05c <xTaskResumeAll+0x7c>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d058:	4a2a      	ldr	r2, [pc, #168]	; (800d104 <xTaskResumeAll+0x124>)
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d060:	4613      	mov	r3, r2
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4a27      	ldr	r2, [pc, #156]	; (800d108 <xTaskResumeAll+0x128>)
 800d06a:	441a      	add	r2, r3
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	3304      	adds	r3, #4
 800d070:	4619      	mov	r1, r3
 800d072:	4610      	mov	r0, r2
 800d074:	f7fe fcd5 	bl	800ba22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d07c:	4b23      	ldr	r3, [pc, #140]	; (800d10c <xTaskResumeAll+0x12c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d082:	429a      	cmp	r2, r3
 800d084:	d302      	bcc.n	800d08c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d086:	4b22      	ldr	r3, [pc, #136]	; (800d110 <xTaskResumeAll+0x130>)
 800d088:	2201      	movs	r2, #1
 800d08a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d08c:	4b1c      	ldr	r3, [pc, #112]	; (800d100 <xTaskResumeAll+0x120>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1cb      	bne.n	800d02c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d001      	beq.n	800d09e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d09a:	f000 fb9f 	bl	800d7dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d09e:	4b1d      	ldr	r3, [pc, #116]	; (800d114 <xTaskResumeAll+0x134>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d010      	beq.n	800d0cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0aa:	f000 f859 	bl	800d160 <xTaskIncrementTick>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d0b4:	4b16      	ldr	r3, [pc, #88]	; (800d110 <xTaskResumeAll+0x130>)
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3b01      	subs	r3, #1
 800d0be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1f1      	bne.n	800d0aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d0c6:	4b13      	ldr	r3, [pc, #76]	; (800d114 <xTaskResumeAll+0x134>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0cc:	4b10      	ldr	r3, [pc, #64]	; (800d110 <xTaskResumeAll+0x130>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d009      	beq.n	800d0e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0d8:	4b0f      	ldr	r3, [pc, #60]	; (800d118 <xTaskResumeAll+0x138>)
 800d0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0de:	601a      	str	r2, [r3, #0]
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0e8:	f001 fa24 	bl	800e534 <vPortExitCritical>

	return xAlreadyYielded;
 800d0ec:	68bb      	ldr	r3, [r7, #8]
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000c64 	.word	0x20000c64
 800d0fc:	20000c3c 	.word	0x20000c3c
 800d100:	20000bfc 	.word	0x20000bfc
 800d104:	20000c44 	.word	0x20000c44
 800d108:	2000076c 	.word	0x2000076c
 800d10c:	20000768 	.word	0x20000768
 800d110:	20000c50 	.word	0x20000c50
 800d114:	20000c4c 	.word	0x20000c4c
 800d118:	e000ed04 	.word	0xe000ed04

0800d11c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d122:	4b05      	ldr	r3, [pc, #20]	; (800d138 <xTaskGetTickCount+0x1c>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d128:	687b      	ldr	r3, [r7, #4]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	370c      	adds	r7, #12
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop
 800d138:	20000c40 	.word	0x20000c40

0800d13c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d142:	f001 faa9 	bl	800e698 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d146:	2300      	movs	r3, #0
 800d148:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d14a:	4b04      	ldr	r3, [pc, #16]	; (800d15c <xTaskGetTickCountFromISR+0x20>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d150:	683b      	ldr	r3, [r7, #0]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	20000c40 	.word	0x20000c40

0800d160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d166:	2300      	movs	r3, #0
 800d168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d16a:	4b4f      	ldr	r3, [pc, #316]	; (800d2a8 <xTaskIncrementTick+0x148>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f040 808f 	bne.w	800d292 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d174:	4b4d      	ldr	r3, [pc, #308]	; (800d2ac <xTaskIncrementTick+0x14c>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	3301      	adds	r3, #1
 800d17a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d17c:	4a4b      	ldr	r2, [pc, #300]	; (800d2ac <xTaskIncrementTick+0x14c>)
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d120      	bne.n	800d1ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d188:	4b49      	ldr	r3, [pc, #292]	; (800d2b0 <xTaskIncrementTick+0x150>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00a      	beq.n	800d1a8 <xTaskIncrementTick+0x48>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	603b      	str	r3, [r7, #0]
}
 800d1a4:	bf00      	nop
 800d1a6:	e7fe      	b.n	800d1a6 <xTaskIncrementTick+0x46>
 800d1a8:	4b41      	ldr	r3, [pc, #260]	; (800d2b0 <xTaskIncrementTick+0x150>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	4b41      	ldr	r3, [pc, #260]	; (800d2b4 <xTaskIncrementTick+0x154>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a3f      	ldr	r2, [pc, #252]	; (800d2b0 <xTaskIncrementTick+0x150>)
 800d1b4:	6013      	str	r3, [r2, #0]
 800d1b6:	4a3f      	ldr	r2, [pc, #252]	; (800d2b4 <xTaskIncrementTick+0x154>)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	4b3e      	ldr	r3, [pc, #248]	; (800d2b8 <xTaskIncrementTick+0x158>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	4a3d      	ldr	r2, [pc, #244]	; (800d2b8 <xTaskIncrementTick+0x158>)
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	f000 fb09 	bl	800d7dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d1ca:	4b3c      	ldr	r3, [pc, #240]	; (800d2bc <xTaskIncrementTick+0x15c>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	693a      	ldr	r2, [r7, #16]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d349      	bcc.n	800d268 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1d4:	4b36      	ldr	r3, [pc, #216]	; (800d2b0 <xTaskIncrementTick+0x150>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d104      	bne.n	800d1e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1de:	4b37      	ldr	r3, [pc, #220]	; (800d2bc <xTaskIncrementTick+0x15c>)
 800d1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1e4:	601a      	str	r2, [r3, #0]
					break;
 800d1e6:	e03f      	b.n	800d268 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e8:	4b31      	ldr	r3, [pc, #196]	; (800d2b0 <xTaskIncrementTick+0x150>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1f8:	693a      	ldr	r2, [r7, #16]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d203      	bcs.n	800d208 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d200:	4a2e      	ldr	r2, [pc, #184]	; (800d2bc <xTaskIncrementTick+0x15c>)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d206:	e02f      	b.n	800d268 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	3304      	adds	r3, #4
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe fc65 	bl	800badc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d216:	2b00      	cmp	r3, #0
 800d218:	d004      	beq.n	800d224 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	3318      	adds	r3, #24
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fe fc5c 	bl	800badc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d228:	4b25      	ldr	r3, [pc, #148]	; (800d2c0 <xTaskIncrementTick+0x160>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d903      	bls.n	800d238 <xTaskIncrementTick+0xd8>
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d234:	4a22      	ldr	r2, [pc, #136]	; (800d2c0 <xTaskIncrementTick+0x160>)
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23c:	4613      	mov	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4413      	add	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4a1f      	ldr	r2, [pc, #124]	; (800d2c4 <xTaskIncrementTick+0x164>)
 800d246:	441a      	add	r2, r3
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	3304      	adds	r3, #4
 800d24c:	4619      	mov	r1, r3
 800d24e:	4610      	mov	r0, r2
 800d250:	f7fe fbe7 	bl	800ba22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d258:	4b1b      	ldr	r3, [pc, #108]	; (800d2c8 <xTaskIncrementTick+0x168>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25e:	429a      	cmp	r2, r3
 800d260:	d3b8      	bcc.n	800d1d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d262:	2301      	movs	r3, #1
 800d264:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d266:	e7b5      	b.n	800d1d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d268:	4b17      	ldr	r3, [pc, #92]	; (800d2c8 <xTaskIncrementTick+0x168>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26e:	4915      	ldr	r1, [pc, #84]	; (800d2c4 <xTaskIncrementTick+0x164>)
 800d270:	4613      	mov	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	4413      	add	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	440b      	add	r3, r1
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d901      	bls.n	800d284 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d280:	2301      	movs	r3, #1
 800d282:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d284:	4b11      	ldr	r3, [pc, #68]	; (800d2cc <xTaskIncrementTick+0x16c>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d007      	beq.n	800d29c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d28c:	2301      	movs	r3, #1
 800d28e:	617b      	str	r3, [r7, #20]
 800d290:	e004      	b.n	800d29c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d292:	4b0f      	ldr	r3, [pc, #60]	; (800d2d0 <xTaskIncrementTick+0x170>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	3301      	adds	r3, #1
 800d298:	4a0d      	ldr	r2, [pc, #52]	; (800d2d0 <xTaskIncrementTick+0x170>)
 800d29a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d29c:	697b      	ldr	r3, [r7, #20]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3718      	adds	r7, #24
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	20000c64 	.word	0x20000c64
 800d2ac:	20000c40 	.word	0x20000c40
 800d2b0:	20000bf4 	.word	0x20000bf4
 800d2b4:	20000bf8 	.word	0x20000bf8
 800d2b8:	20000c54 	.word	0x20000c54
 800d2bc:	20000c5c 	.word	0x20000c5c
 800d2c0:	20000c44 	.word	0x20000c44
 800d2c4:	2000076c 	.word	0x2000076c
 800d2c8:	20000768 	.word	0x20000768
 800d2cc:	20000c50 	.word	0x20000c50
 800d2d0:	20000c4c 	.word	0x20000c4c

0800d2d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2da:	4b28      	ldr	r3, [pc, #160]	; (800d37c <vTaskSwitchContext+0xa8>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d003      	beq.n	800d2ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2e2:	4b27      	ldr	r3, [pc, #156]	; (800d380 <vTaskSwitchContext+0xac>)
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2e8:	e041      	b.n	800d36e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d2ea:	4b25      	ldr	r3, [pc, #148]	; (800d380 <vTaskSwitchContext+0xac>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2f0:	4b24      	ldr	r3, [pc, #144]	; (800d384 <vTaskSwitchContext+0xb0>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	60fb      	str	r3, [r7, #12]
 800d2f6:	e010      	b.n	800d31a <vTaskSwitchContext+0x46>
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d10a      	bne.n	800d314 <vTaskSwitchContext+0x40>
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	607b      	str	r3, [r7, #4]
}
 800d310:	bf00      	nop
 800d312:	e7fe      	b.n	800d312 <vTaskSwitchContext+0x3e>
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	3b01      	subs	r3, #1
 800d318:	60fb      	str	r3, [r7, #12]
 800d31a:	491b      	ldr	r1, [pc, #108]	; (800d388 <vTaskSwitchContext+0xb4>)
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	4613      	mov	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	440b      	add	r3, r1
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d0e4      	beq.n	800d2f8 <vTaskSwitchContext+0x24>
 800d32e:	68fa      	ldr	r2, [r7, #12]
 800d330:	4613      	mov	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4a13      	ldr	r2, [pc, #76]	; (800d388 <vTaskSwitchContext+0xb4>)
 800d33a:	4413      	add	r3, r2
 800d33c:	60bb      	str	r3, [r7, #8]
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	685a      	ldr	r2, [r3, #4]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	605a      	str	r2, [r3, #4]
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	3308      	adds	r3, #8
 800d350:	429a      	cmp	r2, r3
 800d352:	d104      	bne.n	800d35e <vTaskSwitchContext+0x8a>
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	685a      	ldr	r2, [r3, #4]
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	605a      	str	r2, [r3, #4]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	4a09      	ldr	r2, [pc, #36]	; (800d38c <vTaskSwitchContext+0xb8>)
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	4a06      	ldr	r2, [pc, #24]	; (800d384 <vTaskSwitchContext+0xb0>)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6013      	str	r3, [r2, #0]
}
 800d36e:	bf00      	nop
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	20000c64 	.word	0x20000c64
 800d380:	20000c50 	.word	0x20000c50
 800d384:	20000c44 	.word	0x20000c44
 800d388:	2000076c 	.word	0x2000076c
 800d38c:	20000768 	.word	0x20000768

0800d390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10a      	bne.n	800d3b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	60fb      	str	r3, [r7, #12]
}
 800d3b2:	bf00      	nop
 800d3b4:	e7fe      	b.n	800d3b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3b6:	4b07      	ldr	r3, [pc, #28]	; (800d3d4 <vTaskPlaceOnEventList+0x44>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3318      	adds	r3, #24
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7fe fb53 	bl	800ba6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d3c4:	2101      	movs	r1, #1
 800d3c6:	6838      	ldr	r0, [r7, #0]
 800d3c8:	f000 fbb2 	bl	800db30 <prvAddCurrentTaskToDelayedList>
}
 800d3cc:	bf00      	nop
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	20000768 	.word	0x20000768

0800d3d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10a      	bne.n	800d400 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	617b      	str	r3, [r7, #20]
}
 800d3fc:	bf00      	nop
 800d3fe:	e7fe      	b.n	800d3fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <vTaskPlaceOnEventListRestricted+0x54>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	3318      	adds	r3, #24
 800d406:	4619      	mov	r1, r3
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7fe fb0a 	bl	800ba22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d414:	f04f 33ff 	mov.w	r3, #4294967295
 800d418:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d41a:	6879      	ldr	r1, [r7, #4]
 800d41c:	68b8      	ldr	r0, [r7, #8]
 800d41e:	f000 fb87 	bl	800db30 <prvAddCurrentTaskToDelayedList>
	}
 800d422:	bf00      	nop
 800d424:	3718      	adds	r7, #24
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	20000768 	.word	0x20000768

0800d430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10a      	bne.n	800d45c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60fb      	str	r3, [r7, #12]
}
 800d458:	bf00      	nop
 800d45a:	e7fe      	b.n	800d45a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	3318      	adds	r3, #24
 800d460:	4618      	mov	r0, r3
 800d462:	f7fe fb3b 	bl	800badc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d466:	4b1e      	ldr	r3, [pc, #120]	; (800d4e0 <xTaskRemoveFromEventList+0xb0>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d11d      	bne.n	800d4aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	3304      	adds	r3, #4
 800d472:	4618      	mov	r0, r3
 800d474:	f7fe fb32 	bl	800badc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d47c:	4b19      	ldr	r3, [pc, #100]	; (800d4e4 <xTaskRemoveFromEventList+0xb4>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	429a      	cmp	r2, r3
 800d482:	d903      	bls.n	800d48c <xTaskRemoveFromEventList+0x5c>
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d488:	4a16      	ldr	r2, [pc, #88]	; (800d4e4 <xTaskRemoveFromEventList+0xb4>)
 800d48a:	6013      	str	r3, [r2, #0]
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d490:	4613      	mov	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	4413      	add	r3, r2
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	4a13      	ldr	r2, [pc, #76]	; (800d4e8 <xTaskRemoveFromEventList+0xb8>)
 800d49a:	441a      	add	r2, r3
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	4610      	mov	r0, r2
 800d4a4:	f7fe fabd 	bl	800ba22 <vListInsertEnd>
 800d4a8:	e005      	b.n	800d4b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	3318      	adds	r3, #24
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	480e      	ldr	r0, [pc, #56]	; (800d4ec <xTaskRemoveFromEventList+0xbc>)
 800d4b2:	f7fe fab6 	bl	800ba22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ba:	4b0d      	ldr	r3, [pc, #52]	; (800d4f0 <xTaskRemoveFromEventList+0xc0>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d905      	bls.n	800d4d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4c8:	4b0a      	ldr	r3, [pc, #40]	; (800d4f4 <xTaskRemoveFromEventList+0xc4>)
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	601a      	str	r2, [r3, #0]
 800d4ce:	e001      	b.n	800d4d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4d4:	697b      	ldr	r3, [r7, #20]
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3718      	adds	r7, #24
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	20000c64 	.word	0x20000c64
 800d4e4:	20000c44 	.word	0x20000c44
 800d4e8:	2000076c 	.word	0x2000076c
 800d4ec:	20000bfc 	.word	0x20000bfc
 800d4f0:	20000768 	.word	0x20000768
 800d4f4:	20000c50 	.word	0x20000c50

0800d4f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d500:	4b06      	ldr	r3, [pc, #24]	; (800d51c <vTaskInternalSetTimeOutState+0x24>)
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d508:	4b05      	ldr	r3, [pc, #20]	; (800d520 <vTaskInternalSetTimeOutState+0x28>)
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	605a      	str	r2, [r3, #4]
}
 800d510:	bf00      	nop
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	20000c54 	.word	0x20000c54
 800d520:	20000c40 	.word	0x20000c40

0800d524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b088      	sub	sp, #32
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10a      	bne.n	800d54a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	613b      	str	r3, [r7, #16]
}
 800d546:	bf00      	nop
 800d548:	e7fe      	b.n	800d548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10a      	bne.n	800d566 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	60fb      	str	r3, [r7, #12]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d566:	f000 ffb5 	bl	800e4d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d56a:	4b1d      	ldr	r3, [pc, #116]	; (800d5e0 <xTaskCheckForTimeOut+0xbc>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	69ba      	ldr	r2, [r7, #24]
 800d576:	1ad3      	subs	r3, r2, r3
 800d578:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d582:	d102      	bne.n	800d58a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d584:	2300      	movs	r3, #0
 800d586:	61fb      	str	r3, [r7, #28]
 800d588:	e023      	b.n	800d5d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	4b15      	ldr	r3, [pc, #84]	; (800d5e4 <xTaskCheckForTimeOut+0xc0>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	429a      	cmp	r2, r3
 800d594:	d007      	beq.n	800d5a6 <xTaskCheckForTimeOut+0x82>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	69ba      	ldr	r2, [r7, #24]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d302      	bcc.n	800d5a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	61fb      	str	r3, [r7, #28]
 800d5a4:	e015      	b.n	800d5d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	697a      	ldr	r2, [r7, #20]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d20b      	bcs.n	800d5c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	1ad2      	subs	r2, r2, r3
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7ff ff9b 	bl	800d4f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	61fb      	str	r3, [r7, #28]
 800d5c6:	e004      	b.n	800d5d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5d2:	f000 ffaf 	bl	800e534 <vPortExitCritical>

	return xReturn;
 800d5d6:	69fb      	ldr	r3, [r7, #28]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3720      	adds	r7, #32
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20000c40 	.word	0x20000c40
 800d5e4:	20000c54 	.word	0x20000c54

0800d5e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5ec:	4b03      	ldr	r3, [pc, #12]	; (800d5fc <vTaskMissedYield+0x14>)
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	601a      	str	r2, [r3, #0]
}
 800d5f2:	bf00      	nop
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	20000c50 	.word	0x20000c50

0800d600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d608:	f000 f852 	bl	800d6b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d60c:	4b06      	ldr	r3, [pc, #24]	; (800d628 <prvIdleTask+0x28>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d9f9      	bls.n	800d608 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d614:	4b05      	ldr	r3, [pc, #20]	; (800d62c <prvIdleTask+0x2c>)
 800d616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d624:	e7f0      	b.n	800d608 <prvIdleTask+0x8>
 800d626:	bf00      	nop
 800d628:	2000076c 	.word	0x2000076c
 800d62c:	e000ed04 	.word	0xe000ed04

0800d630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d636:	2300      	movs	r3, #0
 800d638:	607b      	str	r3, [r7, #4]
 800d63a:	e00c      	b.n	800d656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	4613      	mov	r3, r2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4413      	add	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4a12      	ldr	r2, [pc, #72]	; (800d690 <prvInitialiseTaskLists+0x60>)
 800d648:	4413      	add	r3, r2
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7fe f9bc 	bl	800b9c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	3301      	adds	r3, #1
 800d654:	607b      	str	r3, [r7, #4]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b37      	cmp	r3, #55	; 0x37
 800d65a:	d9ef      	bls.n	800d63c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d65c:	480d      	ldr	r0, [pc, #52]	; (800d694 <prvInitialiseTaskLists+0x64>)
 800d65e:	f7fe f9b3 	bl	800b9c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d662:	480d      	ldr	r0, [pc, #52]	; (800d698 <prvInitialiseTaskLists+0x68>)
 800d664:	f7fe f9b0 	bl	800b9c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d668:	480c      	ldr	r0, [pc, #48]	; (800d69c <prvInitialiseTaskLists+0x6c>)
 800d66a:	f7fe f9ad 	bl	800b9c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d66e:	480c      	ldr	r0, [pc, #48]	; (800d6a0 <prvInitialiseTaskLists+0x70>)
 800d670:	f7fe f9aa 	bl	800b9c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d674:	480b      	ldr	r0, [pc, #44]	; (800d6a4 <prvInitialiseTaskLists+0x74>)
 800d676:	f7fe f9a7 	bl	800b9c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d67a:	4b0b      	ldr	r3, [pc, #44]	; (800d6a8 <prvInitialiseTaskLists+0x78>)
 800d67c:	4a05      	ldr	r2, [pc, #20]	; (800d694 <prvInitialiseTaskLists+0x64>)
 800d67e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d680:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <prvInitialiseTaskLists+0x7c>)
 800d682:	4a05      	ldr	r2, [pc, #20]	; (800d698 <prvInitialiseTaskLists+0x68>)
 800d684:	601a      	str	r2, [r3, #0]
}
 800d686:	bf00      	nop
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	2000076c 	.word	0x2000076c
 800d694:	20000bcc 	.word	0x20000bcc
 800d698:	20000be0 	.word	0x20000be0
 800d69c:	20000bfc 	.word	0x20000bfc
 800d6a0:	20000c10 	.word	0x20000c10
 800d6a4:	20000c28 	.word	0x20000c28
 800d6a8:	20000bf4 	.word	0x20000bf4
 800d6ac:	20000bf8 	.word	0x20000bf8

0800d6b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6b6:	e019      	b.n	800d6ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6b8:	f000 ff0c 	bl	800e4d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6bc:	4b10      	ldr	r3, [pc, #64]	; (800d700 <prvCheckTasksWaitingTermination+0x50>)
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fe fa07 	bl	800badc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6ce:	4b0d      	ldr	r3, [pc, #52]	; (800d704 <prvCheckTasksWaitingTermination+0x54>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	3b01      	subs	r3, #1
 800d6d4:	4a0b      	ldr	r2, [pc, #44]	; (800d704 <prvCheckTasksWaitingTermination+0x54>)
 800d6d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6d8:	4b0b      	ldr	r3, [pc, #44]	; (800d708 <prvCheckTasksWaitingTermination+0x58>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	4a0a      	ldr	r2, [pc, #40]	; (800d708 <prvCheckTasksWaitingTermination+0x58>)
 800d6e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6e2:	f000 ff27 	bl	800e534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f848 	bl	800d77c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6ec:	4b06      	ldr	r3, [pc, #24]	; (800d708 <prvCheckTasksWaitingTermination+0x58>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1e1      	bne.n	800d6b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d6f4:	bf00      	nop
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	20000c10 	.word	0x20000c10
 800d704:	20000c3c 	.word	0x20000c3c
 800d708:	20000c24 	.word	0x20000c24

0800d70c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d714:	2300      	movs	r3, #0
 800d716:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d718:	e005      	b.n	800d726 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	3301      	adds	r3, #1
 800d71e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3301      	adds	r3, #1
 800d724:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	781b      	ldrb	r3, [r3, #0]
 800d72a:	2ba5      	cmp	r3, #165	; 0xa5
 800d72c:	d0f5      	beq.n	800d71a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	089b      	lsrs	r3, r3, #2
 800d732:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	b29b      	uxth	r3, r3
	}
 800d738:	4618      	mov	r0, r3
 800d73a:	3714      	adds	r7, #20
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d744:	b580      	push	{r7, lr}
 800d746:	b086      	sub	sp, #24
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d102      	bne.n	800d758 <uxTaskGetStackHighWaterMark+0x14>
 800d752:	4b09      	ldr	r3, [pc, #36]	; (800d778 <uxTaskGetStackHighWaterMark+0x34>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	e000      	b.n	800d75a <uxTaskGetStackHighWaterMark+0x16>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d760:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d762:	6938      	ldr	r0, [r7, #16]
 800d764:	f7ff ffd2 	bl	800d70c <prvTaskCheckFreeStackSpace>
 800d768:	4603      	mov	r3, r0
 800d76a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d76c:	68fb      	ldr	r3, [r7, #12]
	}
 800d76e:	4618      	mov	r0, r3
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	20000768 	.word	0x20000768

0800d77c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d108      	bne.n	800d7a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d792:	4618      	mov	r0, r3
 800d794:	f001 f88c 	bl	800e8b0 <vPortFree>
				vPortFree( pxTCB );
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f001 f889 	bl	800e8b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d79e:	e018      	b.n	800d7d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d103      	bne.n	800d7b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f001 f880 	bl	800e8b0 <vPortFree>
	}
 800d7b0:	e00f      	b.n	800d7d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d00a      	beq.n	800d7d2 <prvDeleteTCB+0x56>
	__asm volatile
 800d7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	60fb      	str	r3, [r7, #12]
}
 800d7ce:	bf00      	nop
 800d7d0:	e7fe      	b.n	800d7d0 <prvDeleteTCB+0x54>
	}
 800d7d2:	bf00      	nop
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
	...

0800d7dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7e2:	4b0c      	ldr	r3, [pc, #48]	; (800d814 <prvResetNextTaskUnblockTime+0x38>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d104      	bne.n	800d7f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7ec:	4b0a      	ldr	r3, [pc, #40]	; (800d818 <prvResetNextTaskUnblockTime+0x3c>)
 800d7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7f4:	e008      	b.n	800d808 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f6:	4b07      	ldr	r3, [pc, #28]	; (800d814 <prvResetNextTaskUnblockTime+0x38>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	4a04      	ldr	r2, [pc, #16]	; (800d818 <prvResetNextTaskUnblockTime+0x3c>)
 800d806:	6013      	str	r3, [r2, #0]
}
 800d808:	bf00      	nop
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr
 800d814:	20000bf4 	.word	0x20000bf4
 800d818:	20000c5c 	.word	0x20000c5c

0800d81c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d822:	4b0b      	ldr	r3, [pc, #44]	; (800d850 <xTaskGetSchedulerState+0x34>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d102      	bne.n	800d830 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d82a:	2301      	movs	r3, #1
 800d82c:	607b      	str	r3, [r7, #4]
 800d82e:	e008      	b.n	800d842 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d830:	4b08      	ldr	r3, [pc, #32]	; (800d854 <xTaskGetSchedulerState+0x38>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d102      	bne.n	800d83e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d838:	2302      	movs	r3, #2
 800d83a:	607b      	str	r3, [r7, #4]
 800d83c:	e001      	b.n	800d842 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d83e:	2300      	movs	r3, #0
 800d840:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d842:	687b      	ldr	r3, [r7, #4]
	}
 800d844:	4618      	mov	r0, r3
 800d846:	370c      	adds	r7, #12
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr
 800d850:	20000c48 	.word	0x20000c48
 800d854:	20000c64 	.word	0x20000c64

0800d858 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d864:	2300      	movs	r3, #0
 800d866:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d051      	beq.n	800d912 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d872:	4b2a      	ldr	r3, [pc, #168]	; (800d91c <xTaskPriorityInherit+0xc4>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d878:	429a      	cmp	r2, r3
 800d87a:	d241      	bcs.n	800d900 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	2b00      	cmp	r3, #0
 800d882:	db06      	blt.n	800d892 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d884:	4b25      	ldr	r3, [pc, #148]	; (800d91c <xTaskPriorityInherit+0xc4>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	6959      	ldr	r1, [r3, #20]
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89a:	4613      	mov	r3, r2
 800d89c:	009b      	lsls	r3, r3, #2
 800d89e:	4413      	add	r3, r2
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	4a1f      	ldr	r2, [pc, #124]	; (800d920 <xTaskPriorityInherit+0xc8>)
 800d8a4:	4413      	add	r3, r2
 800d8a6:	4299      	cmp	r1, r3
 800d8a8:	d122      	bne.n	800d8f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe f914 	bl	800badc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8b4:	4b19      	ldr	r3, [pc, #100]	; (800d91c <xTaskPriorityInherit+0xc4>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c2:	4b18      	ldr	r3, [pc, #96]	; (800d924 <xTaskPriorityInherit+0xcc>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d903      	bls.n	800d8d2 <xTaskPriorityInherit+0x7a>
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ce:	4a15      	ldr	r2, [pc, #84]	; (800d924 <xTaskPriorityInherit+0xcc>)
 800d8d0:	6013      	str	r3, [r2, #0]
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	4a10      	ldr	r2, [pc, #64]	; (800d920 <xTaskPriorityInherit+0xc8>)
 800d8e0:	441a      	add	r2, r3
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4610      	mov	r0, r2
 800d8ea:	f7fe f89a 	bl	800ba22 <vListInsertEnd>
 800d8ee:	e004      	b.n	800d8fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8f0:	4b0a      	ldr	r3, [pc, #40]	; (800d91c <xTaskPriorityInherit+0xc4>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	e008      	b.n	800d912 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d904:	4b05      	ldr	r3, [pc, #20]	; (800d91c <xTaskPriorityInherit+0xc4>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d201      	bcs.n	800d912 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d90e:	2301      	movs	r3, #1
 800d910:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d912:	68fb      	ldr	r3, [r7, #12]
	}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	20000768 	.word	0x20000768
 800d920:	2000076c 	.word	0x2000076c
 800d924:	20000c44 	.word	0x20000c44

0800d928 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b086      	sub	sp, #24
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d934:	2300      	movs	r3, #0
 800d936:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d056      	beq.n	800d9ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d93e:	4b2e      	ldr	r3, [pc, #184]	; (800d9f8 <xTaskPriorityDisinherit+0xd0>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	693a      	ldr	r2, [r7, #16]
 800d944:	429a      	cmp	r2, r3
 800d946:	d00a      	beq.n	800d95e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94c:	f383 8811 	msr	BASEPRI, r3
 800d950:	f3bf 8f6f 	isb	sy
 800d954:	f3bf 8f4f 	dsb	sy
 800d958:	60fb      	str	r3, [r7, #12]
}
 800d95a:	bf00      	nop
 800d95c:	e7fe      	b.n	800d95c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10a      	bne.n	800d97c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96a:	f383 8811 	msr	BASEPRI, r3
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	60bb      	str	r3, [r7, #8]
}
 800d978:	bf00      	nop
 800d97a:	e7fe      	b.n	800d97a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d980:	1e5a      	subs	r2, r3, #1
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d98e:	429a      	cmp	r2, r3
 800d990:	d02c      	beq.n	800d9ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d996:	2b00      	cmp	r3, #0
 800d998:	d128      	bne.n	800d9ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fe f89c 	bl	800badc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9bc:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <xTaskPriorityDisinherit+0xd4>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d903      	bls.n	800d9cc <xTaskPriorityDisinherit+0xa4>
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c8:	4a0c      	ldr	r2, [pc, #48]	; (800d9fc <xTaskPriorityDisinherit+0xd4>)
 800d9ca:	6013      	str	r3, [r2, #0]
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4a09      	ldr	r2, [pc, #36]	; (800da00 <xTaskPriorityDisinherit+0xd8>)
 800d9da:	441a      	add	r2, r3
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	3304      	adds	r3, #4
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	4610      	mov	r0, r2
 800d9e4:	f7fe f81d 	bl	800ba22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d9ec:	697b      	ldr	r3, [r7, #20]
	}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20000768 	.word	0x20000768
 800d9fc:	20000c44 	.word	0x20000c44
 800da00:	2000076c 	.word	0x2000076c

0800da04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da04:	b580      	push	{r7, lr}
 800da06:	b088      	sub	sp, #32
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da12:	2301      	movs	r3, #1
 800da14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d06a      	beq.n	800daf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10a      	bne.n	800da3a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800da24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da28:	f383 8811 	msr	BASEPRI, r3
 800da2c:	f3bf 8f6f 	isb	sy
 800da30:	f3bf 8f4f 	dsb	sy
 800da34:	60fb      	str	r3, [r7, #12]
}
 800da36:	bf00      	nop
 800da38:	e7fe      	b.n	800da38 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da3e:	683a      	ldr	r2, [r7, #0]
 800da40:	429a      	cmp	r2, r3
 800da42:	d902      	bls.n	800da4a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	61fb      	str	r3, [r7, #28]
 800da48:	e002      	b.n	800da50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da54:	69fa      	ldr	r2, [r7, #28]
 800da56:	429a      	cmp	r2, r3
 800da58:	d04b      	beq.n	800daf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da5e:	697a      	ldr	r2, [r7, #20]
 800da60:	429a      	cmp	r2, r3
 800da62:	d146      	bne.n	800daf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800da64:	4b25      	ldr	r3, [pc, #148]	; (800dafc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	69ba      	ldr	r2, [r7, #24]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d10a      	bne.n	800da84 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	60bb      	str	r3, [r7, #8]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	69fa      	ldr	r2, [r7, #28]
 800da8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	699b      	ldr	r3, [r3, #24]
 800da94:	2b00      	cmp	r3, #0
 800da96:	db04      	blt.n	800daa2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	6959      	ldr	r1, [r3, #20]
 800daa6:	693a      	ldr	r2, [r7, #16]
 800daa8:	4613      	mov	r3, r2
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	4a13      	ldr	r2, [pc, #76]	; (800db00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dab2:	4413      	add	r3, r2
 800dab4:	4299      	cmp	r1, r3
 800dab6:	d11c      	bne.n	800daf2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	3304      	adds	r3, #4
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fe f80d 	bl	800badc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dac6:	4b0f      	ldr	r3, [pc, #60]	; (800db04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d903      	bls.n	800dad6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad2:	4a0c      	ldr	r2, [pc, #48]	; (800db04 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dada:	4613      	mov	r3, r2
 800dadc:	009b      	lsls	r3, r3, #2
 800dade:	4413      	add	r3, r2
 800dae0:	009b      	lsls	r3, r3, #2
 800dae2:	4a07      	ldr	r2, [pc, #28]	; (800db00 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dae4:	441a      	add	r2, r3
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	3304      	adds	r3, #4
 800daea:	4619      	mov	r1, r3
 800daec:	4610      	mov	r0, r2
 800daee:	f7fd ff98 	bl	800ba22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800daf2:	bf00      	nop
 800daf4:	3720      	adds	r7, #32
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20000768 	.word	0x20000768
 800db00:	2000076c 	.word	0x2000076c
 800db04:	20000c44 	.word	0x20000c44

0800db08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db08:	b480      	push	{r7}
 800db0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db0c:	4b07      	ldr	r3, [pc, #28]	; (800db2c <pvTaskIncrementMutexHeldCount+0x24>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d004      	beq.n	800db1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db14:	4b05      	ldr	r3, [pc, #20]	; (800db2c <pvTaskIncrementMutexHeldCount+0x24>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db1a:	3201      	adds	r2, #1
 800db1c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800db1e:	4b03      	ldr	r3, [pc, #12]	; (800db2c <pvTaskIncrementMutexHeldCount+0x24>)
 800db20:	681b      	ldr	r3, [r3, #0]
	}
 800db22:	4618      	mov	r0, r3
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	20000768 	.word	0x20000768

0800db30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db3a:	4b21      	ldr	r3, [pc, #132]	; (800dbc0 <prvAddCurrentTaskToDelayedList+0x90>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db40:	4b20      	ldr	r3, [pc, #128]	; (800dbc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	3304      	adds	r3, #4
 800db46:	4618      	mov	r0, r3
 800db48:	f7fd ffc8 	bl	800badc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db52:	d10a      	bne.n	800db6a <prvAddCurrentTaskToDelayedList+0x3a>
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d007      	beq.n	800db6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db5a:	4b1a      	ldr	r3, [pc, #104]	; (800dbc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	3304      	adds	r3, #4
 800db60:	4619      	mov	r1, r3
 800db62:	4819      	ldr	r0, [pc, #100]	; (800dbc8 <prvAddCurrentTaskToDelayedList+0x98>)
 800db64:	f7fd ff5d 	bl	800ba22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db68:	e026      	b.n	800dbb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4413      	add	r3, r2
 800db70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db72:	4b14      	ldr	r3, [pc, #80]	; (800dbc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	68ba      	ldr	r2, [r7, #8]
 800db78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db7a:	68ba      	ldr	r2, [r7, #8]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d209      	bcs.n	800db96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db82:	4b12      	ldr	r3, [pc, #72]	; (800dbcc <prvAddCurrentTaskToDelayedList+0x9c>)
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	4b0f      	ldr	r3, [pc, #60]	; (800dbc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	3304      	adds	r3, #4
 800db8c:	4619      	mov	r1, r3
 800db8e:	4610      	mov	r0, r2
 800db90:	f7fd ff6b 	bl	800ba6a <vListInsert>
}
 800db94:	e010      	b.n	800dbb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db96:	4b0e      	ldr	r3, [pc, #56]	; (800dbd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db98:	681a      	ldr	r2, [r3, #0]
 800db9a:	4b0a      	ldr	r3, [pc, #40]	; (800dbc4 <prvAddCurrentTaskToDelayedList+0x94>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	3304      	adds	r3, #4
 800dba0:	4619      	mov	r1, r3
 800dba2:	4610      	mov	r0, r2
 800dba4:	f7fd ff61 	bl	800ba6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dba8:	4b0a      	ldr	r3, [pc, #40]	; (800dbd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	68ba      	ldr	r2, [r7, #8]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d202      	bcs.n	800dbb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dbb2:	4a08      	ldr	r2, [pc, #32]	; (800dbd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	6013      	str	r3, [r2, #0]
}
 800dbb8:	bf00      	nop
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	20000c40 	.word	0x20000c40
 800dbc4:	20000768 	.word	0x20000768
 800dbc8:	20000c28 	.word	0x20000c28
 800dbcc:	20000bf8 	.word	0x20000bf8
 800dbd0:	20000bf4 	.word	0x20000bf4
 800dbd4:	20000c5c 	.word	0x20000c5c

0800dbd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08a      	sub	sp, #40	; 0x28
 800dbdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dbe2:	f000 fb07 	bl	800e1f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dbe6:	4b1c      	ldr	r3, [pc, #112]	; (800dc58 <xTimerCreateTimerTask+0x80>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d021      	beq.n	800dc32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dbf6:	1d3a      	adds	r2, r7, #4
 800dbf8:	f107 0108 	add.w	r1, r7, #8
 800dbfc:	f107 030c 	add.w	r3, r7, #12
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fd fec7 	bl	800b994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc06:	6879      	ldr	r1, [r7, #4]
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	9202      	str	r2, [sp, #8]
 800dc0e:	9301      	str	r3, [sp, #4]
 800dc10:	2302      	movs	r3, #2
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	2300      	movs	r3, #0
 800dc16:	460a      	mov	r2, r1
 800dc18:	4910      	ldr	r1, [pc, #64]	; (800dc5c <xTimerCreateTimerTask+0x84>)
 800dc1a:	4811      	ldr	r0, [pc, #68]	; (800dc60 <xTimerCreateTimerTask+0x88>)
 800dc1c:	f7fe ff96 	bl	800cb4c <xTaskCreateStatic>
 800dc20:	4603      	mov	r3, r0
 800dc22:	4a10      	ldr	r2, [pc, #64]	; (800dc64 <xTimerCreateTimerTask+0x8c>)
 800dc24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dc26:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <xTimerCreateTimerTask+0x8c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d001      	beq.n	800dc32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10a      	bne.n	800dc4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3c:	f383 8811 	msr	BASEPRI, r3
 800dc40:	f3bf 8f6f 	isb	sy
 800dc44:	f3bf 8f4f 	dsb	sy
 800dc48:	613b      	str	r3, [r7, #16]
}
 800dc4a:	bf00      	nop
 800dc4c:	e7fe      	b.n	800dc4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dc4e:	697b      	ldr	r3, [r7, #20]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3718      	adds	r7, #24
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	20000c98 	.word	0x20000c98
 800dc5c:	0800f950 	.word	0x0800f950
 800dc60:	0800dd9d 	.word	0x0800dd9d
 800dc64:	20000c9c 	.word	0x20000c9c

0800dc68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08a      	sub	sp, #40	; 0x28
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
 800dc74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc76:	2300      	movs	r3, #0
 800dc78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10a      	bne.n	800dc96 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	623b      	str	r3, [r7, #32]
}
 800dc92:	bf00      	nop
 800dc94:	e7fe      	b.n	800dc94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc96:	4b1a      	ldr	r3, [pc, #104]	; (800dd00 <xTimerGenericCommand+0x98>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d02a      	beq.n	800dcf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b05      	cmp	r3, #5
 800dcae:	dc18      	bgt.n	800dce2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dcb0:	f7ff fdb4 	bl	800d81c <xTaskGetSchedulerState>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	d109      	bne.n	800dcce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dcba:	4b11      	ldr	r3, [pc, #68]	; (800dd00 <xTimerGenericCommand+0x98>)
 800dcbc:	6818      	ldr	r0, [r3, #0]
 800dcbe:	f107 0110 	add.w	r1, r7, #16
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcc6:	f7fe f8db 	bl	800be80 <xQueueGenericSend>
 800dcca:	6278      	str	r0, [r7, #36]	; 0x24
 800dccc:	e012      	b.n	800dcf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dcce:	4b0c      	ldr	r3, [pc, #48]	; (800dd00 <xTimerGenericCommand+0x98>)
 800dcd0:	6818      	ldr	r0, [r3, #0]
 800dcd2:	f107 0110 	add.w	r1, r7, #16
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	2200      	movs	r2, #0
 800dcda:	f7fe f8d1 	bl	800be80 <xQueueGenericSend>
 800dcde:	6278      	str	r0, [r7, #36]	; 0x24
 800dce0:	e008      	b.n	800dcf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dce2:	4b07      	ldr	r3, [pc, #28]	; (800dd00 <xTimerGenericCommand+0x98>)
 800dce4:	6818      	ldr	r0, [r3, #0]
 800dce6:	f107 0110 	add.w	r1, r7, #16
 800dcea:	2300      	movs	r3, #0
 800dcec:	683a      	ldr	r2, [r7, #0]
 800dcee:	f7fe f9c5 	bl	800c07c <xQueueGenericSendFromISR>
 800dcf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3728      	adds	r7, #40	; 0x28
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	20000c98 	.word	0x20000c98

0800dd04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b088      	sub	sp, #32
 800dd08:	af02      	add	r7, sp, #8
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd0e:	4b22      	ldr	r3, [pc, #136]	; (800dd98 <prvProcessExpiredTimer+0x94>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fd fedd 	bl	800badc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd28:	f003 0304 	and.w	r3, r3, #4
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d022      	beq.n	800dd76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	699a      	ldr	r2, [r3, #24]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	18d1      	adds	r1, r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	6978      	ldr	r0, [r7, #20]
 800dd3e:	f000 f8d1 	bl	800dee4 <prvInsertTimerInActiveList>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d01f      	beq.n	800dd88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd48:	2300      	movs	r3, #0
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	2100      	movs	r1, #0
 800dd52:	6978      	ldr	r0, [r7, #20]
 800dd54:	f7ff ff88 	bl	800dc68 <xTimerGenericCommand>
 800dd58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d113      	bne.n	800dd88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	60fb      	str	r3, [r7, #12]
}
 800dd72:	bf00      	nop
 800dd74:	e7fe      	b.n	800dd74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd7c:	f023 0301 	bic.w	r3, r3, #1
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	6a1b      	ldr	r3, [r3, #32]
 800dd8c:	6978      	ldr	r0, [r7, #20]
 800dd8e:	4798      	blx	r3
}
 800dd90:	bf00      	nop
 800dd92:	3718      	adds	r7, #24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	20000c90 	.word	0x20000c90

0800dd9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dda4:	f107 0308 	add.w	r3, r7, #8
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 f857 	bl	800de5c <prvGetNextExpireTime>
 800ddae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f000 f803 	bl	800ddc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ddba:	f000 f8d5 	bl	800df68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ddbe:	e7f1      	b.n	800dda4 <prvTimerTask+0x8>

0800ddc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ddca:	f7ff f8fb 	bl	800cfc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ddce:	f107 0308 	add.w	r3, r7, #8
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 f866 	bl	800dea4 <prvSampleTimeNow>
 800ddd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d130      	bne.n	800de42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10a      	bne.n	800ddfc <prvProcessTimerOrBlockTask+0x3c>
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d806      	bhi.n	800ddfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ddee:	f7ff f8f7 	bl	800cfe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ddf2:	68f9      	ldr	r1, [r7, #12]
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7ff ff85 	bl	800dd04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ddfa:	e024      	b.n	800de46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d008      	beq.n	800de14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800de02:	4b13      	ldr	r3, [pc, #76]	; (800de50 <prvProcessTimerOrBlockTask+0x90>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d101      	bne.n	800de10 <prvProcessTimerOrBlockTask+0x50>
 800de0c:	2301      	movs	r3, #1
 800de0e:	e000      	b.n	800de12 <prvProcessTimerOrBlockTask+0x52>
 800de10:	2300      	movs	r3, #0
 800de12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de14:	4b0f      	ldr	r3, [pc, #60]	; (800de54 <prvProcessTimerOrBlockTask+0x94>)
 800de16:	6818      	ldr	r0, [r3, #0]
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	683a      	ldr	r2, [r7, #0]
 800de20:	4619      	mov	r1, r3
 800de22:	f7fe fe5f 	bl	800cae4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800de26:	f7ff f8db 	bl	800cfe0 <xTaskResumeAll>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10a      	bne.n	800de46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800de30:	4b09      	ldr	r3, [pc, #36]	; (800de58 <prvProcessTimerOrBlockTask+0x98>)
 800de32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de36:	601a      	str	r2, [r3, #0]
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	f3bf 8f6f 	isb	sy
}
 800de40:	e001      	b.n	800de46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800de42:	f7ff f8cd 	bl	800cfe0 <xTaskResumeAll>
}
 800de46:	bf00      	nop
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	20000c94 	.word	0x20000c94
 800de54:	20000c98 	.word	0x20000c98
 800de58:	e000ed04 	.word	0xe000ed04

0800de5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de64:	4b0e      	ldr	r3, [pc, #56]	; (800dea0 <prvGetNextExpireTime+0x44>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d101      	bne.n	800de72 <prvGetNextExpireTime+0x16>
 800de6e:	2201      	movs	r2, #1
 800de70:	e000      	b.n	800de74 <prvGetNextExpireTime+0x18>
 800de72:	2200      	movs	r2, #0
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d105      	bne.n	800de8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de80:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <prvGetNextExpireTime+0x44>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	e001      	b.n	800de90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de8c:	2300      	movs	r3, #0
 800de8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de90:	68fb      	ldr	r3, [r7, #12]
}
 800de92:	4618      	mov	r0, r3
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	20000c90 	.word	0x20000c90

0800dea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800deac:	f7ff f936 	bl	800d11c <xTaskGetTickCount>
 800deb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800deb2:	4b0b      	ldr	r3, [pc, #44]	; (800dee0 <prvSampleTimeNow+0x3c>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	68fa      	ldr	r2, [r7, #12]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d205      	bcs.n	800dec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800debc:	f000 f936 	bl	800e12c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	601a      	str	r2, [r3, #0]
 800dec6:	e002      	b.n	800dece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2200      	movs	r2, #0
 800decc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dece:	4a04      	ldr	r2, [pc, #16]	; (800dee0 <prvSampleTimeNow+0x3c>)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ded4:	68fb      	ldr	r3, [r7, #12]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	20000ca0 	.word	0x20000ca0

0800dee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
 800def0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800def2:	2300      	movs	r3, #0
 800def4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	68fa      	ldr	r2, [r7, #12]
 800df00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	429a      	cmp	r2, r3
 800df08:	d812      	bhi.n	800df30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	1ad2      	subs	r2, r2, r3
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	699b      	ldr	r3, [r3, #24]
 800df14:	429a      	cmp	r2, r3
 800df16:	d302      	bcc.n	800df1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800df18:	2301      	movs	r3, #1
 800df1a:	617b      	str	r3, [r7, #20]
 800df1c:	e01b      	b.n	800df56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800df1e:	4b10      	ldr	r3, [pc, #64]	; (800df60 <prvInsertTimerInActiveList+0x7c>)
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	3304      	adds	r3, #4
 800df26:	4619      	mov	r1, r3
 800df28:	4610      	mov	r0, r2
 800df2a:	f7fd fd9e 	bl	800ba6a <vListInsert>
 800df2e:	e012      	b.n	800df56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	429a      	cmp	r2, r3
 800df36:	d206      	bcs.n	800df46 <prvInsertTimerInActiveList+0x62>
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d302      	bcc.n	800df46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800df40:	2301      	movs	r3, #1
 800df42:	617b      	str	r3, [r7, #20]
 800df44:	e007      	b.n	800df56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800df46:	4b07      	ldr	r3, [pc, #28]	; (800df64 <prvInsertTimerInActiveList+0x80>)
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	3304      	adds	r3, #4
 800df4e:	4619      	mov	r1, r3
 800df50:	4610      	mov	r0, r2
 800df52:	f7fd fd8a 	bl	800ba6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df56:	697b      	ldr	r3, [r7, #20]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3718      	adds	r7, #24
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	20000c94 	.word	0x20000c94
 800df64:	20000c90 	.word	0x20000c90

0800df68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b08e      	sub	sp, #56	; 0x38
 800df6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df6e:	e0ca      	b.n	800e106 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2b00      	cmp	r3, #0
 800df74:	da18      	bge.n	800dfa8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df76:	1d3b      	adds	r3, r7, #4
 800df78:	3304      	adds	r3, #4
 800df7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d10a      	bne.n	800df98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800df82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df86:	f383 8811 	msr	BASEPRI, r3
 800df8a:	f3bf 8f6f 	isb	sy
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	61fb      	str	r3, [r7, #28]
}
 800df94:	bf00      	nop
 800df96:	e7fe      	b.n	800df96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df9e:	6850      	ldr	r0, [r2, #4]
 800dfa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfa2:	6892      	ldr	r2, [r2, #8]
 800dfa4:	4611      	mov	r1, r2
 800dfa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f2c0 80aa 	blt.w	800e104 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb6:	695b      	ldr	r3, [r3, #20]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d004      	beq.n	800dfc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7fd fd8b 	bl	800badc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dfc6:	463b      	mov	r3, r7
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff ff6b 	bl	800dea4 <prvSampleTimeNow>
 800dfce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b09      	cmp	r3, #9
 800dfd4:	f200 8097 	bhi.w	800e106 <prvProcessReceivedCommands+0x19e>
 800dfd8:	a201      	add	r2, pc, #4	; (adr r2, 800dfe0 <prvProcessReceivedCommands+0x78>)
 800dfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfde:	bf00      	nop
 800dfe0:	0800e009 	.word	0x0800e009
 800dfe4:	0800e009 	.word	0x0800e009
 800dfe8:	0800e009 	.word	0x0800e009
 800dfec:	0800e07d 	.word	0x0800e07d
 800dff0:	0800e091 	.word	0x0800e091
 800dff4:	0800e0db 	.word	0x0800e0db
 800dff8:	0800e009 	.word	0x0800e009
 800dffc:	0800e009 	.word	0x0800e009
 800e000:	0800e07d 	.word	0x0800e07d
 800e004:	0800e091 	.word	0x0800e091
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e00e:	f043 0301 	orr.w	r3, r3, #1
 800e012:	b2da      	uxtb	r2, r3
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e01a:	68ba      	ldr	r2, [r7, #8]
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	699b      	ldr	r3, [r3, #24]
 800e020:	18d1      	adds	r1, r2, r3
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e028:	f7ff ff5c 	bl	800dee4 <prvInsertTimerInActiveList>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d069      	beq.n	800e106 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	6a1b      	ldr	r3, [r3, #32]
 800e036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e038:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e040:	f003 0304 	and.w	r3, r3, #4
 800e044:	2b00      	cmp	r3, #0
 800e046:	d05e      	beq.n	800e106 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	699b      	ldr	r3, [r3, #24]
 800e04e:	441a      	add	r2, r3
 800e050:	2300      	movs	r3, #0
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	2300      	movs	r3, #0
 800e056:	2100      	movs	r1, #0
 800e058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e05a:	f7ff fe05 	bl	800dc68 <xTimerGenericCommand>
 800e05e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e060:	6a3b      	ldr	r3, [r7, #32]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d14f      	bne.n	800e106 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e06a:	f383 8811 	msr	BASEPRI, r3
 800e06e:	f3bf 8f6f 	isb	sy
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	61bb      	str	r3, [r7, #24]
}
 800e078:	bf00      	nop
 800e07a:	e7fe      	b.n	800e07a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e082:	f023 0301 	bic.w	r3, r3, #1
 800e086:	b2da      	uxtb	r2, r3
 800e088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e08e:	e03a      	b.n	800e106 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e096:	f043 0301 	orr.w	r3, r3, #1
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e0a2:	68ba      	ldr	r2, [r7, #8]
 800e0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10a      	bne.n	800e0c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	617b      	str	r3, [r7, #20]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c8:	699a      	ldr	r2, [r3, #24]
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	18d1      	adds	r1, r2, r3
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0d4:	f7ff ff06 	bl	800dee4 <prvInsertTimerInActiveList>
					break;
 800e0d8:	e015      	b.n	800e106 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0e0:	f003 0302 	and.w	r3, r3, #2
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d103      	bne.n	800e0f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e0ea:	f000 fbe1 	bl	800e8b0 <vPortFree>
 800e0ee:	e00a      	b.n	800e106 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0f6:	f023 0301 	bic.w	r3, r3, #1
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e102:	e000      	b.n	800e106 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e104:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e106:	4b08      	ldr	r3, [pc, #32]	; (800e128 <prvProcessReceivedCommands+0x1c0>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	1d39      	adds	r1, r7, #4
 800e10c:	2200      	movs	r2, #0
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fe f8dc 	bl	800c2cc <xQueueReceive>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	f47f af2a 	bne.w	800df70 <prvProcessReceivedCommands+0x8>
	}
}
 800e11c:	bf00      	nop
 800e11e:	bf00      	nop
 800e120:	3730      	adds	r7, #48	; 0x30
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	20000c98 	.word	0x20000c98

0800e12c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b088      	sub	sp, #32
 800e130:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e132:	e048      	b.n	800e1c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e134:	4b2d      	ldr	r3, [pc, #180]	; (800e1ec <prvSwitchTimerLists+0xc0>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e13e:	4b2b      	ldr	r3, [pc, #172]	; (800e1ec <prvSwitchTimerLists+0xc0>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3304      	adds	r3, #4
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fd fcc5 	bl	800badc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6a1b      	ldr	r3, [r3, #32]
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e160:	f003 0304 	and.w	r3, r3, #4
 800e164:	2b00      	cmp	r3, #0
 800e166:	d02e      	beq.n	800e1c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	699b      	ldr	r3, [r3, #24]
 800e16c:	693a      	ldr	r2, [r7, #16]
 800e16e:	4413      	add	r3, r2
 800e170:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e172:	68ba      	ldr	r2, [r7, #8]
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	429a      	cmp	r2, r3
 800e178:	d90e      	bls.n	800e198 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	68ba      	ldr	r2, [r7, #8]
 800e17e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	68fa      	ldr	r2, [r7, #12]
 800e184:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e186:	4b19      	ldr	r3, [pc, #100]	; (800e1ec <prvSwitchTimerLists+0xc0>)
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	3304      	adds	r3, #4
 800e18e:	4619      	mov	r1, r3
 800e190:	4610      	mov	r0, r2
 800e192:	f7fd fc6a 	bl	800ba6a <vListInsert>
 800e196:	e016      	b.n	800e1c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e198:	2300      	movs	r3, #0
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	2300      	movs	r3, #0
 800e19e:	693a      	ldr	r2, [r7, #16]
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f7ff fd60 	bl	800dc68 <xTimerGenericCommand>
 800e1a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	603b      	str	r3, [r7, #0]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1c6:	4b09      	ldr	r3, [pc, #36]	; (800e1ec <prvSwitchTimerLists+0xc0>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1b1      	bne.n	800e134 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e1d0:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <prvSwitchTimerLists+0xc0>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e1d6:	4b06      	ldr	r3, [pc, #24]	; (800e1f0 <prvSwitchTimerLists+0xc4>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a04      	ldr	r2, [pc, #16]	; (800e1ec <prvSwitchTimerLists+0xc0>)
 800e1dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e1de:	4a04      	ldr	r2, [pc, #16]	; (800e1f0 <prvSwitchTimerLists+0xc4>)
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	6013      	str	r3, [r2, #0]
}
 800e1e4:	bf00      	nop
 800e1e6:	3718      	adds	r7, #24
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20000c90 	.word	0x20000c90
 800e1f0:	20000c94 	.word	0x20000c94

0800e1f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e1fa:	f000 f96b 	bl	800e4d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e1fe:	4b15      	ldr	r3, [pc, #84]	; (800e254 <prvCheckForValidListAndQueue+0x60>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d120      	bne.n	800e248 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e206:	4814      	ldr	r0, [pc, #80]	; (800e258 <prvCheckForValidListAndQueue+0x64>)
 800e208:	f7fd fbde 	bl	800b9c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e20c:	4813      	ldr	r0, [pc, #76]	; (800e25c <prvCheckForValidListAndQueue+0x68>)
 800e20e:	f7fd fbdb 	bl	800b9c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e212:	4b13      	ldr	r3, [pc, #76]	; (800e260 <prvCheckForValidListAndQueue+0x6c>)
 800e214:	4a10      	ldr	r2, [pc, #64]	; (800e258 <prvCheckForValidListAndQueue+0x64>)
 800e216:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e218:	4b12      	ldr	r3, [pc, #72]	; (800e264 <prvCheckForValidListAndQueue+0x70>)
 800e21a:	4a10      	ldr	r2, [pc, #64]	; (800e25c <prvCheckForValidListAndQueue+0x68>)
 800e21c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e21e:	2300      	movs	r3, #0
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	4b11      	ldr	r3, [pc, #68]	; (800e268 <prvCheckForValidListAndQueue+0x74>)
 800e224:	4a11      	ldr	r2, [pc, #68]	; (800e26c <prvCheckForValidListAndQueue+0x78>)
 800e226:	2110      	movs	r1, #16
 800e228:	200a      	movs	r0, #10
 800e22a:	f7fd fce9 	bl	800bc00 <xQueueGenericCreateStatic>
 800e22e:	4603      	mov	r3, r0
 800e230:	4a08      	ldr	r2, [pc, #32]	; (800e254 <prvCheckForValidListAndQueue+0x60>)
 800e232:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e234:	4b07      	ldr	r3, [pc, #28]	; (800e254 <prvCheckForValidListAndQueue+0x60>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d005      	beq.n	800e248 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e23c:	4b05      	ldr	r3, [pc, #20]	; (800e254 <prvCheckForValidListAndQueue+0x60>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	490b      	ldr	r1, [pc, #44]	; (800e270 <prvCheckForValidListAndQueue+0x7c>)
 800e242:	4618      	mov	r0, r3
 800e244:	f7fe fbfa 	bl	800ca3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e248:	f000 f974 	bl	800e534 <vPortExitCritical>
}
 800e24c:	bf00      	nop
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	20000c98 	.word	0x20000c98
 800e258:	20000c68 	.word	0x20000c68
 800e25c:	20000c7c 	.word	0x20000c7c
 800e260:	20000c90 	.word	0x20000c90
 800e264:	20000c94 	.word	0x20000c94
 800e268:	20000d44 	.word	0x20000d44
 800e26c:	20000ca4 	.word	0x20000ca4
 800e270:	0800f958 	.word	0x0800f958

0800e274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	3b04      	subs	r3, #4
 800e284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3b04      	subs	r3, #4
 800e292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	f023 0201 	bic.w	r2, r3, #1
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	3b04      	subs	r3, #4
 800e2a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e2a4:	4a0c      	ldr	r2, [pc, #48]	; (800e2d8 <pxPortInitialiseStack+0x64>)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3b14      	subs	r3, #20
 800e2ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3b04      	subs	r3, #4
 800e2ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f06f 0202 	mvn.w	r2, #2
 800e2c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3b20      	subs	r3, #32
 800e2c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3714      	adds	r7, #20
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	0800e2dd 	.word	0x0800e2dd

0800e2dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e2e6:	4b12      	ldr	r3, [pc, #72]	; (800e330 <prvTaskExitError+0x54>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ee:	d00a      	beq.n	800e306 <prvTaskExitError+0x2a>
	__asm volatile
 800e2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f4:	f383 8811 	msr	BASEPRI, r3
 800e2f8:	f3bf 8f6f 	isb	sy
 800e2fc:	f3bf 8f4f 	dsb	sy
 800e300:	60fb      	str	r3, [r7, #12]
}
 800e302:	bf00      	nop
 800e304:	e7fe      	b.n	800e304 <prvTaskExitError+0x28>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	60bb      	str	r3, [r7, #8]
}
 800e318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e31a:	bf00      	nop
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d0fc      	beq.n	800e31c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	2000000c 	.word	0x2000000c
	...

0800e340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e340:	4b07      	ldr	r3, [pc, #28]	; (800e360 <pxCurrentTCBConst2>)
 800e342:	6819      	ldr	r1, [r3, #0]
 800e344:	6808      	ldr	r0, [r1, #0]
 800e346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34a:	f380 8809 	msr	PSP, r0
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f04f 0000 	mov.w	r0, #0
 800e356:	f380 8811 	msr	BASEPRI, r0
 800e35a:	4770      	bx	lr
 800e35c:	f3af 8000 	nop.w

0800e360 <pxCurrentTCBConst2>:
 800e360:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop

0800e368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e368:	4808      	ldr	r0, [pc, #32]	; (800e38c <prvPortStartFirstTask+0x24>)
 800e36a:	6800      	ldr	r0, [r0, #0]
 800e36c:	6800      	ldr	r0, [r0, #0]
 800e36e:	f380 8808 	msr	MSP, r0
 800e372:	f04f 0000 	mov.w	r0, #0
 800e376:	f380 8814 	msr	CONTROL, r0
 800e37a:	b662      	cpsie	i
 800e37c:	b661      	cpsie	f
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	df00      	svc	0
 800e388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e38a:	bf00      	nop
 800e38c:	e000ed08 	.word	0xe000ed08

0800e390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b086      	sub	sp, #24
 800e394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e396:	4b46      	ldr	r3, [pc, #280]	; (800e4b0 <xPortStartScheduler+0x120>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a46      	ldr	r2, [pc, #280]	; (800e4b4 <xPortStartScheduler+0x124>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d10a      	bne.n	800e3b6 <xPortStartScheduler+0x26>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	613b      	str	r3, [r7, #16]
}
 800e3b2:	bf00      	nop
 800e3b4:	e7fe      	b.n	800e3b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e3b6:	4b3e      	ldr	r3, [pc, #248]	; (800e4b0 <xPortStartScheduler+0x120>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a3f      	ldr	r2, [pc, #252]	; (800e4b8 <xPortStartScheduler+0x128>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d10a      	bne.n	800e3d6 <xPortStartScheduler+0x46>
	__asm volatile
 800e3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	60fb      	str	r3, [r7, #12]
}
 800e3d2:	bf00      	nop
 800e3d4:	e7fe      	b.n	800e3d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e3d6:	4b39      	ldr	r3, [pc, #228]	; (800e4bc <xPortStartScheduler+0x12c>)
 800e3d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	22ff      	movs	r2, #255	; 0xff
 800e3e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e3f0:	78fb      	ldrb	r3, [r7, #3]
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	4b31      	ldr	r3, [pc, #196]	; (800e4c0 <xPortStartScheduler+0x130>)
 800e3fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e3fe:	4b31      	ldr	r3, [pc, #196]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e400:	2207      	movs	r2, #7
 800e402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e404:	e009      	b.n	800e41a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e406:	4b2f      	ldr	r3, [pc, #188]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	3b01      	subs	r3, #1
 800e40c:	4a2d      	ldr	r2, [pc, #180]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e40e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	005b      	lsls	r3, r3, #1
 800e416:	b2db      	uxtb	r3, r3
 800e418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e41a:	78fb      	ldrb	r3, [r7, #3]
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e422:	2b80      	cmp	r3, #128	; 0x80
 800e424:	d0ef      	beq.n	800e406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e426:	4b27      	ldr	r3, [pc, #156]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f1c3 0307 	rsb	r3, r3, #7
 800e42e:	2b04      	cmp	r3, #4
 800e430:	d00a      	beq.n	800e448 <xPortStartScheduler+0xb8>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	60bb      	str	r3, [r7, #8]
}
 800e444:	bf00      	nop
 800e446:	e7fe      	b.n	800e446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e448:	4b1e      	ldr	r3, [pc, #120]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	021b      	lsls	r3, r3, #8
 800e44e:	4a1d      	ldr	r2, [pc, #116]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e452:	4b1c      	ldr	r3, [pc, #112]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e45a:	4a1a      	ldr	r2, [pc, #104]	; (800e4c4 <xPortStartScheduler+0x134>)
 800e45c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	b2da      	uxtb	r2, r3
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e466:	4b18      	ldr	r3, [pc, #96]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a17      	ldr	r2, [pc, #92]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e46c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e472:	4b15      	ldr	r3, [pc, #84]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4a14      	ldr	r2, [pc, #80]	; (800e4c8 <xPortStartScheduler+0x138>)
 800e478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e47c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e47e:	f000 f8dd 	bl	800e63c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e482:	4b12      	ldr	r3, [pc, #72]	; (800e4cc <xPortStartScheduler+0x13c>)
 800e484:	2200      	movs	r2, #0
 800e486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e488:	f000 f8fc 	bl	800e684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e48c:	4b10      	ldr	r3, [pc, #64]	; (800e4d0 <xPortStartScheduler+0x140>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a0f      	ldr	r2, [pc, #60]	; (800e4d0 <xPortStartScheduler+0x140>)
 800e492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e498:	f7ff ff66 	bl	800e368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e49c:	f7fe ff1a 	bl	800d2d4 <vTaskSwitchContext>
	prvTaskExitError();
 800e4a0:	f7ff ff1c 	bl	800e2dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e4a4:	2300      	movs	r3, #0
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3718      	adds	r7, #24
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	e000ed00 	.word	0xe000ed00
 800e4b4:	410fc271 	.word	0x410fc271
 800e4b8:	410fc270 	.word	0x410fc270
 800e4bc:	e000e400 	.word	0xe000e400
 800e4c0:	20000d94 	.word	0x20000d94
 800e4c4:	20000d98 	.word	0x20000d98
 800e4c8:	e000ed20 	.word	0xe000ed20
 800e4cc:	2000000c 	.word	0x2000000c
 800e4d0:	e000ef34 	.word	0xe000ef34

0800e4d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	607b      	str	r3, [r7, #4]
}
 800e4ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e4ee:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <vPortEnterCritical+0x58>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	4a0d      	ldr	r2, [pc, #52]	; (800e52c <vPortEnterCritical+0x58>)
 800e4f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e4f8:	4b0c      	ldr	r3, [pc, #48]	; (800e52c <vPortEnterCritical+0x58>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d10f      	bne.n	800e520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e500:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <vPortEnterCritical+0x5c>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	b2db      	uxtb	r3, r3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00a      	beq.n	800e520 <vPortEnterCritical+0x4c>
	__asm volatile
 800e50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	603b      	str	r3, [r7, #0]
}
 800e51c:	bf00      	nop
 800e51e:	e7fe      	b.n	800e51e <vPortEnterCritical+0x4a>
	}
}
 800e520:	bf00      	nop
 800e522:	370c      	adds	r7, #12
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr
 800e52c:	2000000c 	.word	0x2000000c
 800e530:	e000ed04 	.word	0xe000ed04

0800e534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e53a:	4b12      	ldr	r3, [pc, #72]	; (800e584 <vPortExitCritical+0x50>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d10a      	bne.n	800e558 <vPortExitCritical+0x24>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	f3bf 8f6f 	isb	sy
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	607b      	str	r3, [r7, #4]
}
 800e554:	bf00      	nop
 800e556:	e7fe      	b.n	800e556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e558:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <vPortExitCritical+0x50>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	4a09      	ldr	r2, [pc, #36]	; (800e584 <vPortExitCritical+0x50>)
 800e560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e562:	4b08      	ldr	r3, [pc, #32]	; (800e584 <vPortExitCritical+0x50>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d105      	bne.n	800e576 <vPortExitCritical+0x42>
 800e56a:	2300      	movs	r3, #0
 800e56c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	f383 8811 	msr	BASEPRI, r3
}
 800e574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e576:	bf00      	nop
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	2000000c 	.word	0x2000000c
	...

0800e590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e590:	f3ef 8009 	mrs	r0, PSP
 800e594:	f3bf 8f6f 	isb	sy
 800e598:	4b15      	ldr	r3, [pc, #84]	; (800e5f0 <pxCurrentTCBConst>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	f01e 0f10 	tst.w	lr, #16
 800e5a0:	bf08      	it	eq
 800e5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5aa:	6010      	str	r0, [r2, #0]
 800e5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e5b4:	f380 8811 	msr	BASEPRI, r0
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	f3bf 8f6f 	isb	sy
 800e5c0:	f7fe fe88 	bl	800d2d4 <vTaskSwitchContext>
 800e5c4:	f04f 0000 	mov.w	r0, #0
 800e5c8:	f380 8811 	msr	BASEPRI, r0
 800e5cc:	bc09      	pop	{r0, r3}
 800e5ce:	6819      	ldr	r1, [r3, #0]
 800e5d0:	6808      	ldr	r0, [r1, #0]
 800e5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d6:	f01e 0f10 	tst.w	lr, #16
 800e5da:	bf08      	it	eq
 800e5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5e0:	f380 8809 	msr	PSP, r0
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	4770      	bx	lr
 800e5ea:	bf00      	nop
 800e5ec:	f3af 8000 	nop.w

0800e5f0 <pxCurrentTCBConst>:
 800e5f0:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop

0800e5f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	607b      	str	r3, [r7, #4]
}
 800e610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e612:	f7fe fda5 	bl	800d160 <xTaskIncrementTick>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d003      	beq.n	800e624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e61c:	4b06      	ldr	r3, [pc, #24]	; (800e638 <xPortSysTickHandler+0x40>)
 800e61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	2300      	movs	r3, #0
 800e626:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	f383 8811 	msr	BASEPRI, r3
}
 800e62e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	e000ed04 	.word	0xe000ed04

0800e63c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e63c:	b480      	push	{r7}
 800e63e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e640:	4b0b      	ldr	r3, [pc, #44]	; (800e670 <vPortSetupTimerInterrupt+0x34>)
 800e642:	2200      	movs	r2, #0
 800e644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e646:	4b0b      	ldr	r3, [pc, #44]	; (800e674 <vPortSetupTimerInterrupt+0x38>)
 800e648:	2200      	movs	r2, #0
 800e64a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e64c:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <vPortSetupTimerInterrupt+0x3c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a0a      	ldr	r2, [pc, #40]	; (800e67c <vPortSetupTimerInterrupt+0x40>)
 800e652:	fba2 2303 	umull	r2, r3, r2, r3
 800e656:	099b      	lsrs	r3, r3, #6
 800e658:	4a09      	ldr	r2, [pc, #36]	; (800e680 <vPortSetupTimerInterrupt+0x44>)
 800e65a:	3b01      	subs	r3, #1
 800e65c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e65e:	4b04      	ldr	r3, [pc, #16]	; (800e670 <vPortSetupTimerInterrupt+0x34>)
 800e660:	2207      	movs	r2, #7
 800e662:	601a      	str	r2, [r3, #0]
}
 800e664:	bf00      	nop
 800e666:	46bd      	mov	sp, r7
 800e668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	e000e010 	.word	0xe000e010
 800e674:	e000e018 	.word	0xe000e018
 800e678:	20000000 	.word	0x20000000
 800e67c:	10624dd3 	.word	0x10624dd3
 800e680:	e000e014 	.word	0xe000e014

0800e684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e694 <vPortEnableVFP+0x10>
 800e688:	6801      	ldr	r1, [r0, #0]
 800e68a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e68e:	6001      	str	r1, [r0, #0]
 800e690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e692:	bf00      	nop
 800e694:	e000ed88 	.word	0xe000ed88

0800e698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e69e:	f3ef 8305 	mrs	r3, IPSR
 800e6a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b0f      	cmp	r3, #15
 800e6a8:	d914      	bls.n	800e6d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e6aa:	4a17      	ldr	r2, [pc, #92]	; (800e708 <vPortValidateInterruptPriority+0x70>)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e6b4:	4b15      	ldr	r3, [pc, #84]	; (800e70c <vPortValidateInterruptPriority+0x74>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	7afa      	ldrb	r2, [r7, #11]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d20a      	bcs.n	800e6d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	607b      	str	r3, [r7, #4]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e6d4:	4b0e      	ldr	r3, [pc, #56]	; (800e710 <vPortValidateInterruptPriority+0x78>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e6dc:	4b0d      	ldr	r3, [pc, #52]	; (800e714 <vPortValidateInterruptPriority+0x7c>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d90a      	bls.n	800e6fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e8:	f383 8811 	msr	BASEPRI, r3
 800e6ec:	f3bf 8f6f 	isb	sy
 800e6f0:	f3bf 8f4f 	dsb	sy
 800e6f4:	603b      	str	r3, [r7, #0]
}
 800e6f6:	bf00      	nop
 800e6f8:	e7fe      	b.n	800e6f8 <vPortValidateInterruptPriority+0x60>
	}
 800e6fa:	bf00      	nop
 800e6fc:	3714      	adds	r7, #20
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	e000e3f0 	.word	0xe000e3f0
 800e70c:	20000d94 	.word	0x20000d94
 800e710:	e000ed0c 	.word	0xe000ed0c
 800e714:	20000d98 	.word	0x20000d98

0800e718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b08a      	sub	sp, #40	; 0x28
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e720:	2300      	movs	r3, #0
 800e722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e724:	f7fe fc4e 	bl	800cfc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e728:	4b5b      	ldr	r3, [pc, #364]	; (800e898 <pvPortMalloc+0x180>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d101      	bne.n	800e734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e730:	f000 f920 	bl	800e974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e734:	4b59      	ldr	r3, [pc, #356]	; (800e89c <pvPortMalloc+0x184>)
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4013      	ands	r3, r2
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f040 8093 	bne.w	800e868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d01d      	beq.n	800e784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e748:	2208      	movs	r2, #8
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	4413      	add	r3, r2
 800e74e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f003 0307 	and.w	r3, r3, #7
 800e756:	2b00      	cmp	r3, #0
 800e758:	d014      	beq.n	800e784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f023 0307 	bic.w	r3, r3, #7
 800e760:	3308      	adds	r3, #8
 800e762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d00a      	beq.n	800e784 <pvPortMalloc+0x6c>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	617b      	str	r3, [r7, #20]
}
 800e780:	bf00      	nop
 800e782:	e7fe      	b.n	800e782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d06e      	beq.n	800e868 <pvPortMalloc+0x150>
 800e78a:	4b45      	ldr	r3, [pc, #276]	; (800e8a0 <pvPortMalloc+0x188>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	429a      	cmp	r2, r3
 800e792:	d869      	bhi.n	800e868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e794:	4b43      	ldr	r3, [pc, #268]	; (800e8a4 <pvPortMalloc+0x18c>)
 800e796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e798:	4b42      	ldr	r3, [pc, #264]	; (800e8a4 <pvPortMalloc+0x18c>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e79e:	e004      	b.n	800e7aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d903      	bls.n	800e7bc <pvPortMalloc+0xa4>
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1f1      	bne.n	800e7a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e7bc:	4b36      	ldr	r3, [pc, #216]	; (800e898 <pvPortMalloc+0x180>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d050      	beq.n	800e868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e7c6:	6a3b      	ldr	r3, [r7, #32]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	2208      	movs	r2, #8
 800e7cc:	4413      	add	r3, r2
 800e7ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	1ad2      	subs	r2, r2, r3
 800e7e0:	2308      	movs	r3, #8
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d91f      	bls.n	800e828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	f003 0307 	and.w	r3, r3, #7
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00a      	beq.n	800e810 <pvPortMalloc+0xf8>
	__asm volatile
 800e7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fe:	f383 8811 	msr	BASEPRI, r3
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	613b      	str	r3, [r7, #16]
}
 800e80c:	bf00      	nop
 800e80e:	e7fe      	b.n	800e80e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	685a      	ldr	r2, [r3, #4]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	1ad2      	subs	r2, r2, r3
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e822:	69b8      	ldr	r0, [r7, #24]
 800e824:	f000 f908 	bl	800ea38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e828:	4b1d      	ldr	r3, [pc, #116]	; (800e8a0 <pvPortMalloc+0x188>)
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	4a1b      	ldr	r2, [pc, #108]	; (800e8a0 <pvPortMalloc+0x188>)
 800e834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e836:	4b1a      	ldr	r3, [pc, #104]	; (800e8a0 <pvPortMalloc+0x188>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	4b1b      	ldr	r3, [pc, #108]	; (800e8a8 <pvPortMalloc+0x190>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d203      	bcs.n	800e84a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e842:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <pvPortMalloc+0x188>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a18      	ldr	r2, [pc, #96]	; (800e8a8 <pvPortMalloc+0x190>)
 800e848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	685a      	ldr	r2, [r3, #4]
 800e84e:	4b13      	ldr	r3, [pc, #76]	; (800e89c <pvPortMalloc+0x184>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	431a      	orrs	r2, r3
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85a:	2200      	movs	r2, #0
 800e85c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e85e:	4b13      	ldr	r3, [pc, #76]	; (800e8ac <pvPortMalloc+0x194>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3301      	adds	r3, #1
 800e864:	4a11      	ldr	r2, [pc, #68]	; (800e8ac <pvPortMalloc+0x194>)
 800e866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e868:	f7fe fbba 	bl	800cfe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	f003 0307 	and.w	r3, r3, #7
 800e872:	2b00      	cmp	r3, #0
 800e874:	d00a      	beq.n	800e88c <pvPortMalloc+0x174>
	__asm volatile
 800e876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87a:	f383 8811 	msr	BASEPRI, r3
 800e87e:	f3bf 8f6f 	isb	sy
 800e882:	f3bf 8f4f 	dsb	sy
 800e886:	60fb      	str	r3, [r7, #12]
}
 800e888:	bf00      	nop
 800e88a:	e7fe      	b.n	800e88a <pvPortMalloc+0x172>
	return pvReturn;
 800e88c:	69fb      	ldr	r3, [r7, #28]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3728      	adds	r7, #40	; 0x28
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	20008da4 	.word	0x20008da4
 800e89c:	20008db8 	.word	0x20008db8
 800e8a0:	20008da8 	.word	0x20008da8
 800e8a4:	20008d9c 	.word	0x20008d9c
 800e8a8:	20008dac 	.word	0x20008dac
 800e8ac:	20008db0 	.word	0x20008db0

0800e8b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d04d      	beq.n	800e95e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e8c2:	2308      	movs	r3, #8
 800e8c4:	425b      	negs	r3, r3
 800e8c6:	697a      	ldr	r2, [r7, #20]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	4b24      	ldr	r3, [pc, #144]	; (800e968 <vPortFree+0xb8>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4013      	ands	r3, r2
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10a      	bne.n	800e8f4 <vPortFree+0x44>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	60fb      	str	r3, [r7, #12]
}
 800e8f0:	bf00      	nop
 800e8f2:	e7fe      	b.n	800e8f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00a      	beq.n	800e912 <vPortFree+0x62>
	__asm volatile
 800e8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e900:	f383 8811 	msr	BASEPRI, r3
 800e904:	f3bf 8f6f 	isb	sy
 800e908:	f3bf 8f4f 	dsb	sy
 800e90c:	60bb      	str	r3, [r7, #8]
}
 800e90e:	bf00      	nop
 800e910:	e7fe      	b.n	800e910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	685a      	ldr	r2, [r3, #4]
 800e916:	4b14      	ldr	r3, [pc, #80]	; (800e968 <vPortFree+0xb8>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4013      	ands	r3, r2
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d01e      	beq.n	800e95e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d11a      	bne.n	800e95e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	685a      	ldr	r2, [r3, #4]
 800e92c:	4b0e      	ldr	r3, [pc, #56]	; (800e968 <vPortFree+0xb8>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	43db      	mvns	r3, r3
 800e932:	401a      	ands	r2, r3
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e938:	f7fe fb44 	bl	800cfc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	4b0a      	ldr	r3, [pc, #40]	; (800e96c <vPortFree+0xbc>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4413      	add	r3, r2
 800e946:	4a09      	ldr	r2, [pc, #36]	; (800e96c <vPortFree+0xbc>)
 800e948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e94a:	6938      	ldr	r0, [r7, #16]
 800e94c:	f000 f874 	bl	800ea38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e950:	4b07      	ldr	r3, [pc, #28]	; (800e970 <vPortFree+0xc0>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3301      	adds	r3, #1
 800e956:	4a06      	ldr	r2, [pc, #24]	; (800e970 <vPortFree+0xc0>)
 800e958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e95a:	f7fe fb41 	bl	800cfe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e95e:	bf00      	nop
 800e960:	3718      	adds	r7, #24
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	20008db8 	.word	0x20008db8
 800e96c:	20008da8 	.word	0x20008da8
 800e970:	20008db4 	.word	0x20008db4

0800e974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e974:	b480      	push	{r7}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e97a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e97e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e980:	4b27      	ldr	r3, [pc, #156]	; (800ea20 <prvHeapInit+0xac>)
 800e982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f003 0307 	and.w	r3, r3, #7
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00c      	beq.n	800e9a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3307      	adds	r3, #7
 800e992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f023 0307 	bic.w	r3, r3, #7
 800e99a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	1ad3      	subs	r3, r2, r3
 800e9a2:	4a1f      	ldr	r2, [pc, #124]	; (800ea20 <prvHeapInit+0xac>)
 800e9a4:	4413      	add	r3, r2
 800e9a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ea24 <prvHeapInit+0xb0>)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ea24 <prvHeapInit+0xb0>)
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	68ba      	ldr	r2, [r7, #8]
 800e9bc:	4413      	add	r3, r2
 800e9be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e9c0:	2208      	movs	r2, #8
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	1a9b      	subs	r3, r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f023 0307 	bic.w	r3, r3, #7
 800e9ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	4a15      	ldr	r2, [pc, #84]	; (800ea28 <prvHeapInit+0xb4>)
 800e9d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e9d6:	4b14      	ldr	r3, [pc, #80]	; (800ea28 <prvHeapInit+0xb4>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e9de:	4b12      	ldr	r3, [pc, #72]	; (800ea28 <prvHeapInit+0xb4>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <prvHeapInit+0xb4>)
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	4a0a      	ldr	r2, [pc, #40]	; (800ea2c <prvHeapInit+0xb8>)
 800ea02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	4a09      	ldr	r2, [pc, #36]	; (800ea30 <prvHeapInit+0xbc>)
 800ea0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea0c:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <prvHeapInit+0xc0>)
 800ea0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ea12:	601a      	str	r2, [r3, #0]
}
 800ea14:	bf00      	nop
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	20000d9c 	.word	0x20000d9c
 800ea24:	20008d9c 	.word	0x20008d9c
 800ea28:	20008da4 	.word	0x20008da4
 800ea2c:	20008dac 	.word	0x20008dac
 800ea30:	20008da8 	.word	0x20008da8
 800ea34:	20008db8 	.word	0x20008db8

0800ea38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ea40:	4b28      	ldr	r3, [pc, #160]	; (800eae4 <prvInsertBlockIntoFreeList+0xac>)
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	e002      	b.n	800ea4c <prvInsertBlockIntoFreeList+0x14>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	60fb      	str	r3, [r7, #12]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d8f7      	bhi.n	800ea46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	68ba      	ldr	r2, [r7, #8]
 800ea60:	4413      	add	r3, r2
 800ea62:	687a      	ldr	r2, [r7, #4]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d108      	bne.n	800ea7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	685a      	ldr	r2, [r3, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	441a      	add	r2, r3
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	68ba      	ldr	r2, [r7, #8]
 800ea84:	441a      	add	r2, r3
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d118      	bne.n	800eac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	4b15      	ldr	r3, [pc, #84]	; (800eae8 <prvInsertBlockIntoFreeList+0xb0>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d00d      	beq.n	800eab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	685a      	ldr	r2, [r3, #4]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	441a      	add	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	e008      	b.n	800eac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eab6:	4b0c      	ldr	r3, [pc, #48]	; (800eae8 <prvInsertBlockIntoFreeList+0xb0>)
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	601a      	str	r2, [r3, #0]
 800eabe:	e003      	b.n	800eac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d002      	beq.n	800ead6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ead6:	bf00      	nop
 800ead8:	3714      	adds	r7, #20
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	20008d9c 	.word	0x20008d9c
 800eae8:	20008da4 	.word	0x20008da4

0800eaec <__errno>:
 800eaec:	4b01      	ldr	r3, [pc, #4]	; (800eaf4 <__errno+0x8>)
 800eaee:	6818      	ldr	r0, [r3, #0]
 800eaf0:	4770      	bx	lr
 800eaf2:	bf00      	nop
 800eaf4:	20000010 	.word	0x20000010

0800eaf8 <__libc_init_array>:
 800eaf8:	b570      	push	{r4, r5, r6, lr}
 800eafa:	4d0d      	ldr	r5, [pc, #52]	; (800eb30 <__libc_init_array+0x38>)
 800eafc:	4c0d      	ldr	r4, [pc, #52]	; (800eb34 <__libc_init_array+0x3c>)
 800eafe:	1b64      	subs	r4, r4, r5
 800eb00:	10a4      	asrs	r4, r4, #2
 800eb02:	2600      	movs	r6, #0
 800eb04:	42a6      	cmp	r6, r4
 800eb06:	d109      	bne.n	800eb1c <__libc_init_array+0x24>
 800eb08:	4d0b      	ldr	r5, [pc, #44]	; (800eb38 <__libc_init_array+0x40>)
 800eb0a:	4c0c      	ldr	r4, [pc, #48]	; (800eb3c <__libc_init_array+0x44>)
 800eb0c:	f000 fc9c 	bl	800f448 <_init>
 800eb10:	1b64      	subs	r4, r4, r5
 800eb12:	10a4      	asrs	r4, r4, #2
 800eb14:	2600      	movs	r6, #0
 800eb16:	42a6      	cmp	r6, r4
 800eb18:	d105      	bne.n	800eb26 <__libc_init_array+0x2e>
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb20:	4798      	blx	r3
 800eb22:	3601      	adds	r6, #1
 800eb24:	e7ee      	b.n	800eb04 <__libc_init_array+0xc>
 800eb26:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb2a:	4798      	blx	r3
 800eb2c:	3601      	adds	r6, #1
 800eb2e:	e7f2      	b.n	800eb16 <__libc_init_array+0x1e>
 800eb30:	0800faf0 	.word	0x0800faf0
 800eb34:	0800faf0 	.word	0x0800faf0
 800eb38:	0800faf0 	.word	0x0800faf0
 800eb3c:	0800faf4 	.word	0x0800faf4

0800eb40 <memcpy>:
 800eb40:	440a      	add	r2, r1
 800eb42:	4291      	cmp	r1, r2
 800eb44:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb48:	d100      	bne.n	800eb4c <memcpy+0xc>
 800eb4a:	4770      	bx	lr
 800eb4c:	b510      	push	{r4, lr}
 800eb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb56:	4291      	cmp	r1, r2
 800eb58:	d1f9      	bne.n	800eb4e <memcpy+0xe>
 800eb5a:	bd10      	pop	{r4, pc}

0800eb5c <memset>:
 800eb5c:	4402      	add	r2, r0
 800eb5e:	4603      	mov	r3, r0
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d100      	bne.n	800eb66 <memset+0xa>
 800eb64:	4770      	bx	lr
 800eb66:	f803 1b01 	strb.w	r1, [r3], #1
 800eb6a:	e7f9      	b.n	800eb60 <memset+0x4>

0800eb6c <sniprintf>:
 800eb6c:	b40c      	push	{r2, r3}
 800eb6e:	b530      	push	{r4, r5, lr}
 800eb70:	4b17      	ldr	r3, [pc, #92]	; (800ebd0 <sniprintf+0x64>)
 800eb72:	1e0c      	subs	r4, r1, #0
 800eb74:	681d      	ldr	r5, [r3, #0]
 800eb76:	b09d      	sub	sp, #116	; 0x74
 800eb78:	da08      	bge.n	800eb8c <sniprintf+0x20>
 800eb7a:	238b      	movs	r3, #139	; 0x8b
 800eb7c:	602b      	str	r3, [r5, #0]
 800eb7e:	f04f 30ff 	mov.w	r0, #4294967295
 800eb82:	b01d      	add	sp, #116	; 0x74
 800eb84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb88:	b002      	add	sp, #8
 800eb8a:	4770      	bx	lr
 800eb8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800eb90:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eb94:	bf14      	ite	ne
 800eb96:	f104 33ff 	addne.w	r3, r4, #4294967295
 800eb9a:	4623      	moveq	r3, r4
 800eb9c:	9304      	str	r3, [sp, #16]
 800eb9e:	9307      	str	r3, [sp, #28]
 800eba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eba4:	9002      	str	r0, [sp, #8]
 800eba6:	9006      	str	r0, [sp, #24]
 800eba8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ebac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebae:	ab21      	add	r3, sp, #132	; 0x84
 800ebb0:	a902      	add	r1, sp, #8
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	9301      	str	r3, [sp, #4]
 800ebb6:	f000 f8a3 	bl	800ed00 <_svfiprintf_r>
 800ebba:	1c43      	adds	r3, r0, #1
 800ebbc:	bfbc      	itt	lt
 800ebbe:	238b      	movlt	r3, #139	; 0x8b
 800ebc0:	602b      	strlt	r3, [r5, #0]
 800ebc2:	2c00      	cmp	r4, #0
 800ebc4:	d0dd      	beq.n	800eb82 <sniprintf+0x16>
 800ebc6:	9b02      	ldr	r3, [sp, #8]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	701a      	strb	r2, [r3, #0]
 800ebcc:	e7d9      	b.n	800eb82 <sniprintf+0x16>
 800ebce:	bf00      	nop
 800ebd0:	20000010 	.word	0x20000010

0800ebd4 <_vsniprintf_r>:
 800ebd4:	b530      	push	{r4, r5, lr}
 800ebd6:	1e14      	subs	r4, r2, #0
 800ebd8:	4605      	mov	r5, r0
 800ebda:	b09b      	sub	sp, #108	; 0x6c
 800ebdc:	4618      	mov	r0, r3
 800ebde:	da05      	bge.n	800ebec <_vsniprintf_r+0x18>
 800ebe0:	238b      	movs	r3, #139	; 0x8b
 800ebe2:	602b      	str	r3, [r5, #0]
 800ebe4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebe8:	b01b      	add	sp, #108	; 0x6c
 800ebea:	bd30      	pop	{r4, r5, pc}
 800ebec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ebf0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ebf4:	bf14      	ite	ne
 800ebf6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ebfa:	4623      	moveq	r3, r4
 800ebfc:	9302      	str	r3, [sp, #8]
 800ebfe:	9305      	str	r3, [sp, #20]
 800ec00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec04:	9100      	str	r1, [sp, #0]
 800ec06:	9104      	str	r1, [sp, #16]
 800ec08:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ec10:	4669      	mov	r1, sp
 800ec12:	4628      	mov	r0, r5
 800ec14:	f000 f874 	bl	800ed00 <_svfiprintf_r>
 800ec18:	1c43      	adds	r3, r0, #1
 800ec1a:	bfbc      	itt	lt
 800ec1c:	238b      	movlt	r3, #139	; 0x8b
 800ec1e:	602b      	strlt	r3, [r5, #0]
 800ec20:	2c00      	cmp	r4, #0
 800ec22:	d0e1      	beq.n	800ebe8 <_vsniprintf_r+0x14>
 800ec24:	9b00      	ldr	r3, [sp, #0]
 800ec26:	2200      	movs	r2, #0
 800ec28:	701a      	strb	r2, [r3, #0]
 800ec2a:	e7dd      	b.n	800ebe8 <_vsniprintf_r+0x14>

0800ec2c <vsniprintf>:
 800ec2c:	b507      	push	{r0, r1, r2, lr}
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	4613      	mov	r3, r2
 800ec32:	460a      	mov	r2, r1
 800ec34:	4601      	mov	r1, r0
 800ec36:	4803      	ldr	r0, [pc, #12]	; (800ec44 <vsniprintf+0x18>)
 800ec38:	6800      	ldr	r0, [r0, #0]
 800ec3a:	f7ff ffcb 	bl	800ebd4 <_vsniprintf_r>
 800ec3e:	b003      	add	sp, #12
 800ec40:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec44:	20000010 	.word	0x20000010

0800ec48 <__ssputs_r>:
 800ec48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec4c:	688e      	ldr	r6, [r1, #8]
 800ec4e:	429e      	cmp	r6, r3
 800ec50:	4682      	mov	sl, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	4690      	mov	r8, r2
 800ec56:	461f      	mov	r7, r3
 800ec58:	d838      	bhi.n	800eccc <__ssputs_r+0x84>
 800ec5a:	898a      	ldrh	r2, [r1, #12]
 800ec5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec60:	d032      	beq.n	800ecc8 <__ssputs_r+0x80>
 800ec62:	6825      	ldr	r5, [r4, #0]
 800ec64:	6909      	ldr	r1, [r1, #16]
 800ec66:	eba5 0901 	sub.w	r9, r5, r1
 800ec6a:	6965      	ldr	r5, [r4, #20]
 800ec6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec74:	3301      	adds	r3, #1
 800ec76:	444b      	add	r3, r9
 800ec78:	106d      	asrs	r5, r5, #1
 800ec7a:	429d      	cmp	r5, r3
 800ec7c:	bf38      	it	cc
 800ec7e:	461d      	movcc	r5, r3
 800ec80:	0553      	lsls	r3, r2, #21
 800ec82:	d531      	bpl.n	800ece8 <__ssputs_r+0xa0>
 800ec84:	4629      	mov	r1, r5
 800ec86:	f000 fb39 	bl	800f2fc <_malloc_r>
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	b950      	cbnz	r0, 800eca4 <__ssputs_r+0x5c>
 800ec8e:	230c      	movs	r3, #12
 800ec90:	f8ca 3000 	str.w	r3, [sl]
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec9a:	81a3      	strh	r3, [r4, #12]
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca4:	6921      	ldr	r1, [r4, #16]
 800eca6:	464a      	mov	r2, r9
 800eca8:	f7ff ff4a 	bl	800eb40 <memcpy>
 800ecac:	89a3      	ldrh	r3, [r4, #12]
 800ecae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecb6:	81a3      	strh	r3, [r4, #12]
 800ecb8:	6126      	str	r6, [r4, #16]
 800ecba:	6165      	str	r5, [r4, #20]
 800ecbc:	444e      	add	r6, r9
 800ecbe:	eba5 0509 	sub.w	r5, r5, r9
 800ecc2:	6026      	str	r6, [r4, #0]
 800ecc4:	60a5      	str	r5, [r4, #8]
 800ecc6:	463e      	mov	r6, r7
 800ecc8:	42be      	cmp	r6, r7
 800ecca:	d900      	bls.n	800ecce <__ssputs_r+0x86>
 800eccc:	463e      	mov	r6, r7
 800ecce:	4632      	mov	r2, r6
 800ecd0:	6820      	ldr	r0, [r4, #0]
 800ecd2:	4641      	mov	r1, r8
 800ecd4:	f000 faa8 	bl	800f228 <memmove>
 800ecd8:	68a3      	ldr	r3, [r4, #8]
 800ecda:	6822      	ldr	r2, [r4, #0]
 800ecdc:	1b9b      	subs	r3, r3, r6
 800ecde:	4432      	add	r2, r6
 800ece0:	60a3      	str	r3, [r4, #8]
 800ece2:	6022      	str	r2, [r4, #0]
 800ece4:	2000      	movs	r0, #0
 800ece6:	e7db      	b.n	800eca0 <__ssputs_r+0x58>
 800ece8:	462a      	mov	r2, r5
 800ecea:	f000 fb61 	bl	800f3b0 <_realloc_r>
 800ecee:	4606      	mov	r6, r0
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d1e1      	bne.n	800ecb8 <__ssputs_r+0x70>
 800ecf4:	6921      	ldr	r1, [r4, #16]
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	f000 fab0 	bl	800f25c <_free_r>
 800ecfc:	e7c7      	b.n	800ec8e <__ssputs_r+0x46>
	...

0800ed00 <_svfiprintf_r>:
 800ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	4698      	mov	r8, r3
 800ed06:	898b      	ldrh	r3, [r1, #12]
 800ed08:	061b      	lsls	r3, r3, #24
 800ed0a:	b09d      	sub	sp, #116	; 0x74
 800ed0c:	4607      	mov	r7, r0
 800ed0e:	460d      	mov	r5, r1
 800ed10:	4614      	mov	r4, r2
 800ed12:	d50e      	bpl.n	800ed32 <_svfiprintf_r+0x32>
 800ed14:	690b      	ldr	r3, [r1, #16]
 800ed16:	b963      	cbnz	r3, 800ed32 <_svfiprintf_r+0x32>
 800ed18:	2140      	movs	r1, #64	; 0x40
 800ed1a:	f000 faef 	bl	800f2fc <_malloc_r>
 800ed1e:	6028      	str	r0, [r5, #0]
 800ed20:	6128      	str	r0, [r5, #16]
 800ed22:	b920      	cbnz	r0, 800ed2e <_svfiprintf_r+0x2e>
 800ed24:	230c      	movs	r3, #12
 800ed26:	603b      	str	r3, [r7, #0]
 800ed28:	f04f 30ff 	mov.w	r0, #4294967295
 800ed2c:	e0d1      	b.n	800eed2 <_svfiprintf_r+0x1d2>
 800ed2e:	2340      	movs	r3, #64	; 0x40
 800ed30:	616b      	str	r3, [r5, #20]
 800ed32:	2300      	movs	r3, #0
 800ed34:	9309      	str	r3, [sp, #36]	; 0x24
 800ed36:	2320      	movs	r3, #32
 800ed38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed40:	2330      	movs	r3, #48	; 0x30
 800ed42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eeec <_svfiprintf_r+0x1ec>
 800ed46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed4a:	f04f 0901 	mov.w	r9, #1
 800ed4e:	4623      	mov	r3, r4
 800ed50:	469a      	mov	sl, r3
 800ed52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed56:	b10a      	cbz	r2, 800ed5c <_svfiprintf_r+0x5c>
 800ed58:	2a25      	cmp	r2, #37	; 0x25
 800ed5a:	d1f9      	bne.n	800ed50 <_svfiprintf_r+0x50>
 800ed5c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed60:	d00b      	beq.n	800ed7a <_svfiprintf_r+0x7a>
 800ed62:	465b      	mov	r3, fp
 800ed64:	4622      	mov	r2, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	4638      	mov	r0, r7
 800ed6a:	f7ff ff6d 	bl	800ec48 <__ssputs_r>
 800ed6e:	3001      	adds	r0, #1
 800ed70:	f000 80aa 	beq.w	800eec8 <_svfiprintf_r+0x1c8>
 800ed74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed76:	445a      	add	r2, fp
 800ed78:	9209      	str	r2, [sp, #36]	; 0x24
 800ed7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	f000 80a2 	beq.w	800eec8 <_svfiprintf_r+0x1c8>
 800ed84:	2300      	movs	r3, #0
 800ed86:	f04f 32ff 	mov.w	r2, #4294967295
 800ed8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed8e:	f10a 0a01 	add.w	sl, sl, #1
 800ed92:	9304      	str	r3, [sp, #16]
 800ed94:	9307      	str	r3, [sp, #28]
 800ed96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed9a:	931a      	str	r3, [sp, #104]	; 0x68
 800ed9c:	4654      	mov	r4, sl
 800ed9e:	2205      	movs	r2, #5
 800eda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda4:	4851      	ldr	r0, [pc, #324]	; (800eeec <_svfiprintf_r+0x1ec>)
 800eda6:	f7f1 fa3b 	bl	8000220 <memchr>
 800edaa:	9a04      	ldr	r2, [sp, #16]
 800edac:	b9d8      	cbnz	r0, 800ede6 <_svfiprintf_r+0xe6>
 800edae:	06d0      	lsls	r0, r2, #27
 800edb0:	bf44      	itt	mi
 800edb2:	2320      	movmi	r3, #32
 800edb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb8:	0711      	lsls	r1, r2, #28
 800edba:	bf44      	itt	mi
 800edbc:	232b      	movmi	r3, #43	; 0x2b
 800edbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edc2:	f89a 3000 	ldrb.w	r3, [sl]
 800edc6:	2b2a      	cmp	r3, #42	; 0x2a
 800edc8:	d015      	beq.n	800edf6 <_svfiprintf_r+0xf6>
 800edca:	9a07      	ldr	r2, [sp, #28]
 800edcc:	4654      	mov	r4, sl
 800edce:	2000      	movs	r0, #0
 800edd0:	f04f 0c0a 	mov.w	ip, #10
 800edd4:	4621      	mov	r1, r4
 800edd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edda:	3b30      	subs	r3, #48	; 0x30
 800eddc:	2b09      	cmp	r3, #9
 800edde:	d94e      	bls.n	800ee7e <_svfiprintf_r+0x17e>
 800ede0:	b1b0      	cbz	r0, 800ee10 <_svfiprintf_r+0x110>
 800ede2:	9207      	str	r2, [sp, #28]
 800ede4:	e014      	b.n	800ee10 <_svfiprintf_r+0x110>
 800ede6:	eba0 0308 	sub.w	r3, r0, r8
 800edea:	fa09 f303 	lsl.w	r3, r9, r3
 800edee:	4313      	orrs	r3, r2
 800edf0:	9304      	str	r3, [sp, #16]
 800edf2:	46a2      	mov	sl, r4
 800edf4:	e7d2      	b.n	800ed9c <_svfiprintf_r+0x9c>
 800edf6:	9b03      	ldr	r3, [sp, #12]
 800edf8:	1d19      	adds	r1, r3, #4
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	9103      	str	r1, [sp, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	bfbb      	ittet	lt
 800ee02:	425b      	neglt	r3, r3
 800ee04:	f042 0202 	orrlt.w	r2, r2, #2
 800ee08:	9307      	strge	r3, [sp, #28]
 800ee0a:	9307      	strlt	r3, [sp, #28]
 800ee0c:	bfb8      	it	lt
 800ee0e:	9204      	strlt	r2, [sp, #16]
 800ee10:	7823      	ldrb	r3, [r4, #0]
 800ee12:	2b2e      	cmp	r3, #46	; 0x2e
 800ee14:	d10c      	bne.n	800ee30 <_svfiprintf_r+0x130>
 800ee16:	7863      	ldrb	r3, [r4, #1]
 800ee18:	2b2a      	cmp	r3, #42	; 0x2a
 800ee1a:	d135      	bne.n	800ee88 <_svfiprintf_r+0x188>
 800ee1c:	9b03      	ldr	r3, [sp, #12]
 800ee1e:	1d1a      	adds	r2, r3, #4
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	9203      	str	r2, [sp, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bfb8      	it	lt
 800ee28:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee2c:	3402      	adds	r4, #2
 800ee2e:	9305      	str	r3, [sp, #20]
 800ee30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eefc <_svfiprintf_r+0x1fc>
 800ee34:	7821      	ldrb	r1, [r4, #0]
 800ee36:	2203      	movs	r2, #3
 800ee38:	4650      	mov	r0, sl
 800ee3a:	f7f1 f9f1 	bl	8000220 <memchr>
 800ee3e:	b140      	cbz	r0, 800ee52 <_svfiprintf_r+0x152>
 800ee40:	2340      	movs	r3, #64	; 0x40
 800ee42:	eba0 000a 	sub.w	r0, r0, sl
 800ee46:	fa03 f000 	lsl.w	r0, r3, r0
 800ee4a:	9b04      	ldr	r3, [sp, #16]
 800ee4c:	4303      	orrs	r3, r0
 800ee4e:	3401      	adds	r4, #1
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee56:	4826      	ldr	r0, [pc, #152]	; (800eef0 <_svfiprintf_r+0x1f0>)
 800ee58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee5c:	2206      	movs	r2, #6
 800ee5e:	f7f1 f9df 	bl	8000220 <memchr>
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d038      	beq.n	800eed8 <_svfiprintf_r+0x1d8>
 800ee66:	4b23      	ldr	r3, [pc, #140]	; (800eef4 <_svfiprintf_r+0x1f4>)
 800ee68:	bb1b      	cbnz	r3, 800eeb2 <_svfiprintf_r+0x1b2>
 800ee6a:	9b03      	ldr	r3, [sp, #12]
 800ee6c:	3307      	adds	r3, #7
 800ee6e:	f023 0307 	bic.w	r3, r3, #7
 800ee72:	3308      	adds	r3, #8
 800ee74:	9303      	str	r3, [sp, #12]
 800ee76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee78:	4433      	add	r3, r6
 800ee7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee7c:	e767      	b.n	800ed4e <_svfiprintf_r+0x4e>
 800ee7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee82:	460c      	mov	r4, r1
 800ee84:	2001      	movs	r0, #1
 800ee86:	e7a5      	b.n	800edd4 <_svfiprintf_r+0xd4>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	3401      	adds	r4, #1
 800ee8c:	9305      	str	r3, [sp, #20]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	f04f 0c0a 	mov.w	ip, #10
 800ee94:	4620      	mov	r0, r4
 800ee96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee9a:	3a30      	subs	r2, #48	; 0x30
 800ee9c:	2a09      	cmp	r2, #9
 800ee9e:	d903      	bls.n	800eea8 <_svfiprintf_r+0x1a8>
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d0c5      	beq.n	800ee30 <_svfiprintf_r+0x130>
 800eea4:	9105      	str	r1, [sp, #20]
 800eea6:	e7c3      	b.n	800ee30 <_svfiprintf_r+0x130>
 800eea8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeac:	4604      	mov	r4, r0
 800eeae:	2301      	movs	r3, #1
 800eeb0:	e7f0      	b.n	800ee94 <_svfiprintf_r+0x194>
 800eeb2:	ab03      	add	r3, sp, #12
 800eeb4:	9300      	str	r3, [sp, #0]
 800eeb6:	462a      	mov	r2, r5
 800eeb8:	4b0f      	ldr	r3, [pc, #60]	; (800eef8 <_svfiprintf_r+0x1f8>)
 800eeba:	a904      	add	r1, sp, #16
 800eebc:	4638      	mov	r0, r7
 800eebe:	f3af 8000 	nop.w
 800eec2:	1c42      	adds	r2, r0, #1
 800eec4:	4606      	mov	r6, r0
 800eec6:	d1d6      	bne.n	800ee76 <_svfiprintf_r+0x176>
 800eec8:	89ab      	ldrh	r3, [r5, #12]
 800eeca:	065b      	lsls	r3, r3, #25
 800eecc:	f53f af2c 	bmi.w	800ed28 <_svfiprintf_r+0x28>
 800eed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eed2:	b01d      	add	sp, #116	; 0x74
 800eed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed8:	ab03      	add	r3, sp, #12
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	462a      	mov	r2, r5
 800eede:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <_svfiprintf_r+0x1f8>)
 800eee0:	a904      	add	r1, sp, #16
 800eee2:	4638      	mov	r0, r7
 800eee4:	f000 f87a 	bl	800efdc <_printf_i>
 800eee8:	e7eb      	b.n	800eec2 <_svfiprintf_r+0x1c2>
 800eeea:	bf00      	nop
 800eeec:	0800fab4 	.word	0x0800fab4
 800eef0:	0800fabe 	.word	0x0800fabe
 800eef4:	00000000 	.word	0x00000000
 800eef8:	0800ec49 	.word	0x0800ec49
 800eefc:	0800faba 	.word	0x0800faba

0800ef00 <_printf_common>:
 800ef00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef04:	4616      	mov	r6, r2
 800ef06:	4699      	mov	r9, r3
 800ef08:	688a      	ldr	r2, [r1, #8]
 800ef0a:	690b      	ldr	r3, [r1, #16]
 800ef0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef10:	4293      	cmp	r3, r2
 800ef12:	bfb8      	it	lt
 800ef14:	4613      	movlt	r3, r2
 800ef16:	6033      	str	r3, [r6, #0]
 800ef18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef1c:	4607      	mov	r7, r0
 800ef1e:	460c      	mov	r4, r1
 800ef20:	b10a      	cbz	r2, 800ef26 <_printf_common+0x26>
 800ef22:	3301      	adds	r3, #1
 800ef24:	6033      	str	r3, [r6, #0]
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	0699      	lsls	r1, r3, #26
 800ef2a:	bf42      	ittt	mi
 800ef2c:	6833      	ldrmi	r3, [r6, #0]
 800ef2e:	3302      	addmi	r3, #2
 800ef30:	6033      	strmi	r3, [r6, #0]
 800ef32:	6825      	ldr	r5, [r4, #0]
 800ef34:	f015 0506 	ands.w	r5, r5, #6
 800ef38:	d106      	bne.n	800ef48 <_printf_common+0x48>
 800ef3a:	f104 0a19 	add.w	sl, r4, #25
 800ef3e:	68e3      	ldr	r3, [r4, #12]
 800ef40:	6832      	ldr	r2, [r6, #0]
 800ef42:	1a9b      	subs	r3, r3, r2
 800ef44:	42ab      	cmp	r3, r5
 800ef46:	dc26      	bgt.n	800ef96 <_printf_common+0x96>
 800ef48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef4c:	1e13      	subs	r3, r2, #0
 800ef4e:	6822      	ldr	r2, [r4, #0]
 800ef50:	bf18      	it	ne
 800ef52:	2301      	movne	r3, #1
 800ef54:	0692      	lsls	r2, r2, #26
 800ef56:	d42b      	bmi.n	800efb0 <_printf_common+0xb0>
 800ef58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef5c:	4649      	mov	r1, r9
 800ef5e:	4638      	mov	r0, r7
 800ef60:	47c0      	blx	r8
 800ef62:	3001      	adds	r0, #1
 800ef64:	d01e      	beq.n	800efa4 <_printf_common+0xa4>
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	68e5      	ldr	r5, [r4, #12]
 800ef6a:	6832      	ldr	r2, [r6, #0]
 800ef6c:	f003 0306 	and.w	r3, r3, #6
 800ef70:	2b04      	cmp	r3, #4
 800ef72:	bf08      	it	eq
 800ef74:	1aad      	subeq	r5, r5, r2
 800ef76:	68a3      	ldr	r3, [r4, #8]
 800ef78:	6922      	ldr	r2, [r4, #16]
 800ef7a:	bf0c      	ite	eq
 800ef7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef80:	2500      	movne	r5, #0
 800ef82:	4293      	cmp	r3, r2
 800ef84:	bfc4      	itt	gt
 800ef86:	1a9b      	subgt	r3, r3, r2
 800ef88:	18ed      	addgt	r5, r5, r3
 800ef8a:	2600      	movs	r6, #0
 800ef8c:	341a      	adds	r4, #26
 800ef8e:	42b5      	cmp	r5, r6
 800ef90:	d11a      	bne.n	800efc8 <_printf_common+0xc8>
 800ef92:	2000      	movs	r0, #0
 800ef94:	e008      	b.n	800efa8 <_printf_common+0xa8>
 800ef96:	2301      	movs	r3, #1
 800ef98:	4652      	mov	r2, sl
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	4638      	mov	r0, r7
 800ef9e:	47c0      	blx	r8
 800efa0:	3001      	adds	r0, #1
 800efa2:	d103      	bne.n	800efac <_printf_common+0xac>
 800efa4:	f04f 30ff 	mov.w	r0, #4294967295
 800efa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efac:	3501      	adds	r5, #1
 800efae:	e7c6      	b.n	800ef3e <_printf_common+0x3e>
 800efb0:	18e1      	adds	r1, r4, r3
 800efb2:	1c5a      	adds	r2, r3, #1
 800efb4:	2030      	movs	r0, #48	; 0x30
 800efb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efba:	4422      	add	r2, r4
 800efbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efc4:	3302      	adds	r3, #2
 800efc6:	e7c7      	b.n	800ef58 <_printf_common+0x58>
 800efc8:	2301      	movs	r3, #1
 800efca:	4622      	mov	r2, r4
 800efcc:	4649      	mov	r1, r9
 800efce:	4638      	mov	r0, r7
 800efd0:	47c0      	blx	r8
 800efd2:	3001      	adds	r0, #1
 800efd4:	d0e6      	beq.n	800efa4 <_printf_common+0xa4>
 800efd6:	3601      	adds	r6, #1
 800efd8:	e7d9      	b.n	800ef8e <_printf_common+0x8e>
	...

0800efdc <_printf_i>:
 800efdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efe0:	460c      	mov	r4, r1
 800efe2:	4691      	mov	r9, r2
 800efe4:	7e27      	ldrb	r7, [r4, #24]
 800efe6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800efe8:	2f78      	cmp	r7, #120	; 0x78
 800efea:	4680      	mov	r8, r0
 800efec:	469a      	mov	sl, r3
 800efee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eff2:	d807      	bhi.n	800f004 <_printf_i+0x28>
 800eff4:	2f62      	cmp	r7, #98	; 0x62
 800eff6:	d80a      	bhi.n	800f00e <_printf_i+0x32>
 800eff8:	2f00      	cmp	r7, #0
 800effa:	f000 80d8 	beq.w	800f1ae <_printf_i+0x1d2>
 800effe:	2f58      	cmp	r7, #88	; 0x58
 800f000:	f000 80a3 	beq.w	800f14a <_printf_i+0x16e>
 800f004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f00c:	e03a      	b.n	800f084 <_printf_i+0xa8>
 800f00e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f012:	2b15      	cmp	r3, #21
 800f014:	d8f6      	bhi.n	800f004 <_printf_i+0x28>
 800f016:	a001      	add	r0, pc, #4	; (adr r0, 800f01c <_printf_i+0x40>)
 800f018:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f01c:	0800f075 	.word	0x0800f075
 800f020:	0800f089 	.word	0x0800f089
 800f024:	0800f005 	.word	0x0800f005
 800f028:	0800f005 	.word	0x0800f005
 800f02c:	0800f005 	.word	0x0800f005
 800f030:	0800f005 	.word	0x0800f005
 800f034:	0800f089 	.word	0x0800f089
 800f038:	0800f005 	.word	0x0800f005
 800f03c:	0800f005 	.word	0x0800f005
 800f040:	0800f005 	.word	0x0800f005
 800f044:	0800f005 	.word	0x0800f005
 800f048:	0800f195 	.word	0x0800f195
 800f04c:	0800f0b9 	.word	0x0800f0b9
 800f050:	0800f177 	.word	0x0800f177
 800f054:	0800f005 	.word	0x0800f005
 800f058:	0800f005 	.word	0x0800f005
 800f05c:	0800f1b7 	.word	0x0800f1b7
 800f060:	0800f005 	.word	0x0800f005
 800f064:	0800f0b9 	.word	0x0800f0b9
 800f068:	0800f005 	.word	0x0800f005
 800f06c:	0800f005 	.word	0x0800f005
 800f070:	0800f17f 	.word	0x0800f17f
 800f074:	680b      	ldr	r3, [r1, #0]
 800f076:	1d1a      	adds	r2, r3, #4
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	600a      	str	r2, [r1, #0]
 800f07c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f084:	2301      	movs	r3, #1
 800f086:	e0a3      	b.n	800f1d0 <_printf_i+0x1f4>
 800f088:	6825      	ldr	r5, [r4, #0]
 800f08a:	6808      	ldr	r0, [r1, #0]
 800f08c:	062e      	lsls	r6, r5, #24
 800f08e:	f100 0304 	add.w	r3, r0, #4
 800f092:	d50a      	bpl.n	800f0aa <_printf_i+0xce>
 800f094:	6805      	ldr	r5, [r0, #0]
 800f096:	600b      	str	r3, [r1, #0]
 800f098:	2d00      	cmp	r5, #0
 800f09a:	da03      	bge.n	800f0a4 <_printf_i+0xc8>
 800f09c:	232d      	movs	r3, #45	; 0x2d
 800f09e:	426d      	negs	r5, r5
 800f0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0a4:	485e      	ldr	r0, [pc, #376]	; (800f220 <_printf_i+0x244>)
 800f0a6:	230a      	movs	r3, #10
 800f0a8:	e019      	b.n	800f0de <_printf_i+0x102>
 800f0aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f0ae:	6805      	ldr	r5, [r0, #0]
 800f0b0:	600b      	str	r3, [r1, #0]
 800f0b2:	bf18      	it	ne
 800f0b4:	b22d      	sxthne	r5, r5
 800f0b6:	e7ef      	b.n	800f098 <_printf_i+0xbc>
 800f0b8:	680b      	ldr	r3, [r1, #0]
 800f0ba:	6825      	ldr	r5, [r4, #0]
 800f0bc:	1d18      	adds	r0, r3, #4
 800f0be:	6008      	str	r0, [r1, #0]
 800f0c0:	0628      	lsls	r0, r5, #24
 800f0c2:	d501      	bpl.n	800f0c8 <_printf_i+0xec>
 800f0c4:	681d      	ldr	r5, [r3, #0]
 800f0c6:	e002      	b.n	800f0ce <_printf_i+0xf2>
 800f0c8:	0669      	lsls	r1, r5, #25
 800f0ca:	d5fb      	bpl.n	800f0c4 <_printf_i+0xe8>
 800f0cc:	881d      	ldrh	r5, [r3, #0]
 800f0ce:	4854      	ldr	r0, [pc, #336]	; (800f220 <_printf_i+0x244>)
 800f0d0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0d2:	bf0c      	ite	eq
 800f0d4:	2308      	moveq	r3, #8
 800f0d6:	230a      	movne	r3, #10
 800f0d8:	2100      	movs	r1, #0
 800f0da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0de:	6866      	ldr	r6, [r4, #4]
 800f0e0:	60a6      	str	r6, [r4, #8]
 800f0e2:	2e00      	cmp	r6, #0
 800f0e4:	bfa2      	ittt	ge
 800f0e6:	6821      	ldrge	r1, [r4, #0]
 800f0e8:	f021 0104 	bicge.w	r1, r1, #4
 800f0ec:	6021      	strge	r1, [r4, #0]
 800f0ee:	b90d      	cbnz	r5, 800f0f4 <_printf_i+0x118>
 800f0f0:	2e00      	cmp	r6, #0
 800f0f2:	d04d      	beq.n	800f190 <_printf_i+0x1b4>
 800f0f4:	4616      	mov	r6, r2
 800f0f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0fa:	fb03 5711 	mls	r7, r3, r1, r5
 800f0fe:	5dc7      	ldrb	r7, [r0, r7]
 800f100:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f104:	462f      	mov	r7, r5
 800f106:	42bb      	cmp	r3, r7
 800f108:	460d      	mov	r5, r1
 800f10a:	d9f4      	bls.n	800f0f6 <_printf_i+0x11a>
 800f10c:	2b08      	cmp	r3, #8
 800f10e:	d10b      	bne.n	800f128 <_printf_i+0x14c>
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	07df      	lsls	r7, r3, #31
 800f114:	d508      	bpl.n	800f128 <_printf_i+0x14c>
 800f116:	6923      	ldr	r3, [r4, #16]
 800f118:	6861      	ldr	r1, [r4, #4]
 800f11a:	4299      	cmp	r1, r3
 800f11c:	bfde      	ittt	le
 800f11e:	2330      	movle	r3, #48	; 0x30
 800f120:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f124:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f128:	1b92      	subs	r2, r2, r6
 800f12a:	6122      	str	r2, [r4, #16]
 800f12c:	f8cd a000 	str.w	sl, [sp]
 800f130:	464b      	mov	r3, r9
 800f132:	aa03      	add	r2, sp, #12
 800f134:	4621      	mov	r1, r4
 800f136:	4640      	mov	r0, r8
 800f138:	f7ff fee2 	bl	800ef00 <_printf_common>
 800f13c:	3001      	adds	r0, #1
 800f13e:	d14c      	bne.n	800f1da <_printf_i+0x1fe>
 800f140:	f04f 30ff 	mov.w	r0, #4294967295
 800f144:	b004      	add	sp, #16
 800f146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f14a:	4835      	ldr	r0, [pc, #212]	; (800f220 <_printf_i+0x244>)
 800f14c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f150:	6823      	ldr	r3, [r4, #0]
 800f152:	680e      	ldr	r6, [r1, #0]
 800f154:	061f      	lsls	r7, r3, #24
 800f156:	f856 5b04 	ldr.w	r5, [r6], #4
 800f15a:	600e      	str	r6, [r1, #0]
 800f15c:	d514      	bpl.n	800f188 <_printf_i+0x1ac>
 800f15e:	07d9      	lsls	r1, r3, #31
 800f160:	bf44      	itt	mi
 800f162:	f043 0320 	orrmi.w	r3, r3, #32
 800f166:	6023      	strmi	r3, [r4, #0]
 800f168:	b91d      	cbnz	r5, 800f172 <_printf_i+0x196>
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	f023 0320 	bic.w	r3, r3, #32
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	2310      	movs	r3, #16
 800f174:	e7b0      	b.n	800f0d8 <_printf_i+0xfc>
 800f176:	6823      	ldr	r3, [r4, #0]
 800f178:	f043 0320 	orr.w	r3, r3, #32
 800f17c:	6023      	str	r3, [r4, #0]
 800f17e:	2378      	movs	r3, #120	; 0x78
 800f180:	4828      	ldr	r0, [pc, #160]	; (800f224 <_printf_i+0x248>)
 800f182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f186:	e7e3      	b.n	800f150 <_printf_i+0x174>
 800f188:	065e      	lsls	r6, r3, #25
 800f18a:	bf48      	it	mi
 800f18c:	b2ad      	uxthmi	r5, r5
 800f18e:	e7e6      	b.n	800f15e <_printf_i+0x182>
 800f190:	4616      	mov	r6, r2
 800f192:	e7bb      	b.n	800f10c <_printf_i+0x130>
 800f194:	680b      	ldr	r3, [r1, #0]
 800f196:	6826      	ldr	r6, [r4, #0]
 800f198:	6960      	ldr	r0, [r4, #20]
 800f19a:	1d1d      	adds	r5, r3, #4
 800f19c:	600d      	str	r5, [r1, #0]
 800f19e:	0635      	lsls	r5, r6, #24
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	d501      	bpl.n	800f1a8 <_printf_i+0x1cc>
 800f1a4:	6018      	str	r0, [r3, #0]
 800f1a6:	e002      	b.n	800f1ae <_printf_i+0x1d2>
 800f1a8:	0671      	lsls	r1, r6, #25
 800f1aa:	d5fb      	bpl.n	800f1a4 <_printf_i+0x1c8>
 800f1ac:	8018      	strh	r0, [r3, #0]
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	6123      	str	r3, [r4, #16]
 800f1b2:	4616      	mov	r6, r2
 800f1b4:	e7ba      	b.n	800f12c <_printf_i+0x150>
 800f1b6:	680b      	ldr	r3, [r1, #0]
 800f1b8:	1d1a      	adds	r2, r3, #4
 800f1ba:	600a      	str	r2, [r1, #0]
 800f1bc:	681e      	ldr	r6, [r3, #0]
 800f1be:	6862      	ldr	r2, [r4, #4]
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	4630      	mov	r0, r6
 800f1c4:	f7f1 f82c 	bl	8000220 <memchr>
 800f1c8:	b108      	cbz	r0, 800f1ce <_printf_i+0x1f2>
 800f1ca:	1b80      	subs	r0, r0, r6
 800f1cc:	6060      	str	r0, [r4, #4]
 800f1ce:	6863      	ldr	r3, [r4, #4]
 800f1d0:	6123      	str	r3, [r4, #16]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1d8:	e7a8      	b.n	800f12c <_printf_i+0x150>
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	4632      	mov	r2, r6
 800f1de:	4649      	mov	r1, r9
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	47d0      	blx	sl
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d0ab      	beq.n	800f140 <_printf_i+0x164>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	079b      	lsls	r3, r3, #30
 800f1ec:	d413      	bmi.n	800f216 <_printf_i+0x23a>
 800f1ee:	68e0      	ldr	r0, [r4, #12]
 800f1f0:	9b03      	ldr	r3, [sp, #12]
 800f1f2:	4298      	cmp	r0, r3
 800f1f4:	bfb8      	it	lt
 800f1f6:	4618      	movlt	r0, r3
 800f1f8:	e7a4      	b.n	800f144 <_printf_i+0x168>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4632      	mov	r2, r6
 800f1fe:	4649      	mov	r1, r9
 800f200:	4640      	mov	r0, r8
 800f202:	47d0      	blx	sl
 800f204:	3001      	adds	r0, #1
 800f206:	d09b      	beq.n	800f140 <_printf_i+0x164>
 800f208:	3501      	adds	r5, #1
 800f20a:	68e3      	ldr	r3, [r4, #12]
 800f20c:	9903      	ldr	r1, [sp, #12]
 800f20e:	1a5b      	subs	r3, r3, r1
 800f210:	42ab      	cmp	r3, r5
 800f212:	dcf2      	bgt.n	800f1fa <_printf_i+0x21e>
 800f214:	e7eb      	b.n	800f1ee <_printf_i+0x212>
 800f216:	2500      	movs	r5, #0
 800f218:	f104 0619 	add.w	r6, r4, #25
 800f21c:	e7f5      	b.n	800f20a <_printf_i+0x22e>
 800f21e:	bf00      	nop
 800f220:	0800fac5 	.word	0x0800fac5
 800f224:	0800fad6 	.word	0x0800fad6

0800f228 <memmove>:
 800f228:	4288      	cmp	r0, r1
 800f22a:	b510      	push	{r4, lr}
 800f22c:	eb01 0402 	add.w	r4, r1, r2
 800f230:	d902      	bls.n	800f238 <memmove+0x10>
 800f232:	4284      	cmp	r4, r0
 800f234:	4623      	mov	r3, r4
 800f236:	d807      	bhi.n	800f248 <memmove+0x20>
 800f238:	1e43      	subs	r3, r0, #1
 800f23a:	42a1      	cmp	r1, r4
 800f23c:	d008      	beq.n	800f250 <memmove+0x28>
 800f23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f246:	e7f8      	b.n	800f23a <memmove+0x12>
 800f248:	4402      	add	r2, r0
 800f24a:	4601      	mov	r1, r0
 800f24c:	428a      	cmp	r2, r1
 800f24e:	d100      	bne.n	800f252 <memmove+0x2a>
 800f250:	bd10      	pop	{r4, pc}
 800f252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f25a:	e7f7      	b.n	800f24c <memmove+0x24>

0800f25c <_free_r>:
 800f25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f25e:	2900      	cmp	r1, #0
 800f260:	d048      	beq.n	800f2f4 <_free_r+0x98>
 800f262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f266:	9001      	str	r0, [sp, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f1a1 0404 	sub.w	r4, r1, #4
 800f26e:	bfb8      	it	lt
 800f270:	18e4      	addlt	r4, r4, r3
 800f272:	f000 f8d3 	bl	800f41c <__malloc_lock>
 800f276:	4a20      	ldr	r2, [pc, #128]	; (800f2f8 <_free_r+0x9c>)
 800f278:	9801      	ldr	r0, [sp, #4]
 800f27a:	6813      	ldr	r3, [r2, #0]
 800f27c:	4615      	mov	r5, r2
 800f27e:	b933      	cbnz	r3, 800f28e <_free_r+0x32>
 800f280:	6063      	str	r3, [r4, #4]
 800f282:	6014      	str	r4, [r2, #0]
 800f284:	b003      	add	sp, #12
 800f286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f28a:	f000 b8cd 	b.w	800f428 <__malloc_unlock>
 800f28e:	42a3      	cmp	r3, r4
 800f290:	d90b      	bls.n	800f2aa <_free_r+0x4e>
 800f292:	6821      	ldr	r1, [r4, #0]
 800f294:	1862      	adds	r2, r4, r1
 800f296:	4293      	cmp	r3, r2
 800f298:	bf04      	itt	eq
 800f29a:	681a      	ldreq	r2, [r3, #0]
 800f29c:	685b      	ldreq	r3, [r3, #4]
 800f29e:	6063      	str	r3, [r4, #4]
 800f2a0:	bf04      	itt	eq
 800f2a2:	1852      	addeq	r2, r2, r1
 800f2a4:	6022      	streq	r2, [r4, #0]
 800f2a6:	602c      	str	r4, [r5, #0]
 800f2a8:	e7ec      	b.n	800f284 <_free_r+0x28>
 800f2aa:	461a      	mov	r2, r3
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	b10b      	cbz	r3, 800f2b4 <_free_r+0x58>
 800f2b0:	42a3      	cmp	r3, r4
 800f2b2:	d9fa      	bls.n	800f2aa <_free_r+0x4e>
 800f2b4:	6811      	ldr	r1, [r2, #0]
 800f2b6:	1855      	adds	r5, r2, r1
 800f2b8:	42a5      	cmp	r5, r4
 800f2ba:	d10b      	bne.n	800f2d4 <_free_r+0x78>
 800f2bc:	6824      	ldr	r4, [r4, #0]
 800f2be:	4421      	add	r1, r4
 800f2c0:	1854      	adds	r4, r2, r1
 800f2c2:	42a3      	cmp	r3, r4
 800f2c4:	6011      	str	r1, [r2, #0]
 800f2c6:	d1dd      	bne.n	800f284 <_free_r+0x28>
 800f2c8:	681c      	ldr	r4, [r3, #0]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	6053      	str	r3, [r2, #4]
 800f2ce:	4421      	add	r1, r4
 800f2d0:	6011      	str	r1, [r2, #0]
 800f2d2:	e7d7      	b.n	800f284 <_free_r+0x28>
 800f2d4:	d902      	bls.n	800f2dc <_free_r+0x80>
 800f2d6:	230c      	movs	r3, #12
 800f2d8:	6003      	str	r3, [r0, #0]
 800f2da:	e7d3      	b.n	800f284 <_free_r+0x28>
 800f2dc:	6825      	ldr	r5, [r4, #0]
 800f2de:	1961      	adds	r1, r4, r5
 800f2e0:	428b      	cmp	r3, r1
 800f2e2:	bf04      	itt	eq
 800f2e4:	6819      	ldreq	r1, [r3, #0]
 800f2e6:	685b      	ldreq	r3, [r3, #4]
 800f2e8:	6063      	str	r3, [r4, #4]
 800f2ea:	bf04      	itt	eq
 800f2ec:	1949      	addeq	r1, r1, r5
 800f2ee:	6021      	streq	r1, [r4, #0]
 800f2f0:	6054      	str	r4, [r2, #4]
 800f2f2:	e7c7      	b.n	800f284 <_free_r+0x28>
 800f2f4:	b003      	add	sp, #12
 800f2f6:	bd30      	pop	{r4, r5, pc}
 800f2f8:	20008dbc 	.word	0x20008dbc

0800f2fc <_malloc_r>:
 800f2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2fe:	1ccd      	adds	r5, r1, #3
 800f300:	f025 0503 	bic.w	r5, r5, #3
 800f304:	3508      	adds	r5, #8
 800f306:	2d0c      	cmp	r5, #12
 800f308:	bf38      	it	cc
 800f30a:	250c      	movcc	r5, #12
 800f30c:	2d00      	cmp	r5, #0
 800f30e:	4606      	mov	r6, r0
 800f310:	db01      	blt.n	800f316 <_malloc_r+0x1a>
 800f312:	42a9      	cmp	r1, r5
 800f314:	d903      	bls.n	800f31e <_malloc_r+0x22>
 800f316:	230c      	movs	r3, #12
 800f318:	6033      	str	r3, [r6, #0]
 800f31a:	2000      	movs	r0, #0
 800f31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f31e:	f000 f87d 	bl	800f41c <__malloc_lock>
 800f322:	4921      	ldr	r1, [pc, #132]	; (800f3a8 <_malloc_r+0xac>)
 800f324:	680a      	ldr	r2, [r1, #0]
 800f326:	4614      	mov	r4, r2
 800f328:	b99c      	cbnz	r4, 800f352 <_malloc_r+0x56>
 800f32a:	4f20      	ldr	r7, [pc, #128]	; (800f3ac <_malloc_r+0xb0>)
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	b923      	cbnz	r3, 800f33a <_malloc_r+0x3e>
 800f330:	4621      	mov	r1, r4
 800f332:	4630      	mov	r0, r6
 800f334:	f000 f862 	bl	800f3fc <_sbrk_r>
 800f338:	6038      	str	r0, [r7, #0]
 800f33a:	4629      	mov	r1, r5
 800f33c:	4630      	mov	r0, r6
 800f33e:	f000 f85d 	bl	800f3fc <_sbrk_r>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	d123      	bne.n	800f38e <_malloc_r+0x92>
 800f346:	230c      	movs	r3, #12
 800f348:	6033      	str	r3, [r6, #0]
 800f34a:	4630      	mov	r0, r6
 800f34c:	f000 f86c 	bl	800f428 <__malloc_unlock>
 800f350:	e7e3      	b.n	800f31a <_malloc_r+0x1e>
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	1b5b      	subs	r3, r3, r5
 800f356:	d417      	bmi.n	800f388 <_malloc_r+0x8c>
 800f358:	2b0b      	cmp	r3, #11
 800f35a:	d903      	bls.n	800f364 <_malloc_r+0x68>
 800f35c:	6023      	str	r3, [r4, #0]
 800f35e:	441c      	add	r4, r3
 800f360:	6025      	str	r5, [r4, #0]
 800f362:	e004      	b.n	800f36e <_malloc_r+0x72>
 800f364:	6863      	ldr	r3, [r4, #4]
 800f366:	42a2      	cmp	r2, r4
 800f368:	bf0c      	ite	eq
 800f36a:	600b      	streq	r3, [r1, #0]
 800f36c:	6053      	strne	r3, [r2, #4]
 800f36e:	4630      	mov	r0, r6
 800f370:	f000 f85a 	bl	800f428 <__malloc_unlock>
 800f374:	f104 000b 	add.w	r0, r4, #11
 800f378:	1d23      	adds	r3, r4, #4
 800f37a:	f020 0007 	bic.w	r0, r0, #7
 800f37e:	1ac2      	subs	r2, r0, r3
 800f380:	d0cc      	beq.n	800f31c <_malloc_r+0x20>
 800f382:	1a1b      	subs	r3, r3, r0
 800f384:	50a3      	str	r3, [r4, r2]
 800f386:	e7c9      	b.n	800f31c <_malloc_r+0x20>
 800f388:	4622      	mov	r2, r4
 800f38a:	6864      	ldr	r4, [r4, #4]
 800f38c:	e7cc      	b.n	800f328 <_malloc_r+0x2c>
 800f38e:	1cc4      	adds	r4, r0, #3
 800f390:	f024 0403 	bic.w	r4, r4, #3
 800f394:	42a0      	cmp	r0, r4
 800f396:	d0e3      	beq.n	800f360 <_malloc_r+0x64>
 800f398:	1a21      	subs	r1, r4, r0
 800f39a:	4630      	mov	r0, r6
 800f39c:	f000 f82e 	bl	800f3fc <_sbrk_r>
 800f3a0:	3001      	adds	r0, #1
 800f3a2:	d1dd      	bne.n	800f360 <_malloc_r+0x64>
 800f3a4:	e7cf      	b.n	800f346 <_malloc_r+0x4a>
 800f3a6:	bf00      	nop
 800f3a8:	20008dbc 	.word	0x20008dbc
 800f3ac:	20008dc0 	.word	0x20008dc0

0800f3b0 <_realloc_r>:
 800f3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b2:	4607      	mov	r7, r0
 800f3b4:	4614      	mov	r4, r2
 800f3b6:	460e      	mov	r6, r1
 800f3b8:	b921      	cbnz	r1, 800f3c4 <_realloc_r+0x14>
 800f3ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f3be:	4611      	mov	r1, r2
 800f3c0:	f7ff bf9c 	b.w	800f2fc <_malloc_r>
 800f3c4:	b922      	cbnz	r2, 800f3d0 <_realloc_r+0x20>
 800f3c6:	f7ff ff49 	bl	800f25c <_free_r>
 800f3ca:	4625      	mov	r5, r4
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3d0:	f000 f830 	bl	800f434 <_malloc_usable_size_r>
 800f3d4:	42a0      	cmp	r0, r4
 800f3d6:	d20f      	bcs.n	800f3f8 <_realloc_r+0x48>
 800f3d8:	4621      	mov	r1, r4
 800f3da:	4638      	mov	r0, r7
 800f3dc:	f7ff ff8e 	bl	800f2fc <_malloc_r>
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	2800      	cmp	r0, #0
 800f3e4:	d0f2      	beq.n	800f3cc <_realloc_r+0x1c>
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	4622      	mov	r2, r4
 800f3ea:	f7ff fba9 	bl	800eb40 <memcpy>
 800f3ee:	4631      	mov	r1, r6
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	f7ff ff33 	bl	800f25c <_free_r>
 800f3f6:	e7e9      	b.n	800f3cc <_realloc_r+0x1c>
 800f3f8:	4635      	mov	r5, r6
 800f3fa:	e7e7      	b.n	800f3cc <_realloc_r+0x1c>

0800f3fc <_sbrk_r>:
 800f3fc:	b538      	push	{r3, r4, r5, lr}
 800f3fe:	4d06      	ldr	r5, [pc, #24]	; (800f418 <_sbrk_r+0x1c>)
 800f400:	2300      	movs	r3, #0
 800f402:	4604      	mov	r4, r0
 800f404:	4608      	mov	r0, r1
 800f406:	602b      	str	r3, [r5, #0]
 800f408:	f7f3 fcaa 	bl	8002d60 <_sbrk>
 800f40c:	1c43      	adds	r3, r0, #1
 800f40e:	d102      	bne.n	800f416 <_sbrk_r+0x1a>
 800f410:	682b      	ldr	r3, [r5, #0]
 800f412:	b103      	cbz	r3, 800f416 <_sbrk_r+0x1a>
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	bd38      	pop	{r3, r4, r5, pc}
 800f418:	20009b54 	.word	0x20009b54

0800f41c <__malloc_lock>:
 800f41c:	4801      	ldr	r0, [pc, #4]	; (800f424 <__malloc_lock+0x8>)
 800f41e:	f000 b811 	b.w	800f444 <__retarget_lock_acquire_recursive>
 800f422:	bf00      	nop
 800f424:	20009b5c 	.word	0x20009b5c

0800f428 <__malloc_unlock>:
 800f428:	4801      	ldr	r0, [pc, #4]	; (800f430 <__malloc_unlock+0x8>)
 800f42a:	f000 b80c 	b.w	800f446 <__retarget_lock_release_recursive>
 800f42e:	bf00      	nop
 800f430:	20009b5c 	.word	0x20009b5c

0800f434 <_malloc_usable_size_r>:
 800f434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f438:	1f18      	subs	r0, r3, #4
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	bfbc      	itt	lt
 800f43e:	580b      	ldrlt	r3, [r1, r0]
 800f440:	18c0      	addlt	r0, r0, r3
 800f442:	4770      	bx	lr

0800f444 <__retarget_lock_acquire_recursive>:
 800f444:	4770      	bx	lr

0800f446 <__retarget_lock_release_recursive>:
 800f446:	4770      	bx	lr

0800f448 <_init>:
 800f448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f44a:	bf00      	nop
 800f44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f44e:	bc08      	pop	{r3}
 800f450:	469e      	mov	lr, r3
 800f452:	4770      	bx	lr

0800f454 <_fini>:
 800f454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f456:	bf00      	nop
 800f458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f45a:	bc08      	pop	{r3}
 800f45c:	469e      	mov	lr, r3
 800f45e:	4770      	bx	lr
