
I2C_GT911_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08005e84  08005e84  00015e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006388  08006388  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006390  08006390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006394  08006394  00016394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08006408  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08006408  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4be  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba9  00000000  00000000  0002c55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002eac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016303  00000000  00000000  0002f418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf60  00000000  00000000  0004571b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f80  00000000  00000000  0005167b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d95fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d80  00000000  00000000  000d9650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e6c 	.word	0x08005e6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005e6c 	.word	0x08005e6c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b96e 	b.w	800091c <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468c      	mov	ip, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	f040 8083 	bne.w	800076e <__udivmoddi4+0x116>
 8000668:	428a      	cmp	r2, r1
 800066a:	4617      	mov	r7, r2
 800066c:	d947      	bls.n	80006fe <__udivmoddi4+0xa6>
 800066e:	fab2 f282 	clz	r2, r2
 8000672:	b142      	cbz	r2, 8000686 <__udivmoddi4+0x2e>
 8000674:	f1c2 0020 	rsb	r0, r2, #32
 8000678:	fa24 f000 	lsr.w	r0, r4, r0
 800067c:	4091      	lsls	r1, r2
 800067e:	4097      	lsls	r7, r2
 8000680:	ea40 0c01 	orr.w	ip, r0, r1
 8000684:	4094      	lsls	r4, r2
 8000686:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800068a:	0c23      	lsrs	r3, r4, #16
 800068c:	fbbc f6f8 	udiv	r6, ip, r8
 8000690:	fa1f fe87 	uxth.w	lr, r7
 8000694:	fb08 c116 	mls	r1, r8, r6, ip
 8000698:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800069c:	fb06 f10e 	mul.w	r1, r6, lr
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d909      	bls.n	80006b8 <__udivmoddi4+0x60>
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006aa:	f080 8119 	bcs.w	80008e0 <__udivmoddi4+0x288>
 80006ae:	4299      	cmp	r1, r3
 80006b0:	f240 8116 	bls.w	80008e0 <__udivmoddi4+0x288>
 80006b4:	3e02      	subs	r6, #2
 80006b6:	443b      	add	r3, r7
 80006b8:	1a5b      	subs	r3, r3, r1
 80006ba:	b2a4      	uxth	r4, r4
 80006bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c0:	fb08 3310 	mls	r3, r8, r0, r3
 80006c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006cc:	45a6      	cmp	lr, r4
 80006ce:	d909      	bls.n	80006e4 <__udivmoddi4+0x8c>
 80006d0:	193c      	adds	r4, r7, r4
 80006d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006d6:	f080 8105 	bcs.w	80008e4 <__udivmoddi4+0x28c>
 80006da:	45a6      	cmp	lr, r4
 80006dc:	f240 8102 	bls.w	80008e4 <__udivmoddi4+0x28c>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006e8:	eba4 040e 	sub.w	r4, r4, lr
 80006ec:	2600      	movs	r6, #0
 80006ee:	b11d      	cbz	r5, 80006f8 <__udivmoddi4+0xa0>
 80006f0:	40d4      	lsrs	r4, r2
 80006f2:	2300      	movs	r3, #0
 80006f4:	e9c5 4300 	strd	r4, r3, [r5]
 80006f8:	4631      	mov	r1, r6
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	b902      	cbnz	r2, 8000702 <__udivmoddi4+0xaa>
 8000700:	deff      	udf	#255	; 0xff
 8000702:	fab2 f282 	clz	r2, r2
 8000706:	2a00      	cmp	r2, #0
 8000708:	d150      	bne.n	80007ac <__udivmoddi4+0x154>
 800070a:	1bcb      	subs	r3, r1, r7
 800070c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000710:	fa1f f887 	uxth.w	r8, r7
 8000714:	2601      	movs	r6, #1
 8000716:	fbb3 fcfe 	udiv	ip, r3, lr
 800071a:	0c21      	lsrs	r1, r4, #16
 800071c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000720:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000724:	fb08 f30c 	mul.w	r3, r8, ip
 8000728:	428b      	cmp	r3, r1
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0xe4>
 800072c:	1879      	adds	r1, r7, r1
 800072e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0xe2>
 8000734:	428b      	cmp	r3, r1
 8000736:	f200 80e9 	bhi.w	800090c <__udivmoddi4+0x2b4>
 800073a:	4684      	mov	ip, r0
 800073c:	1ac9      	subs	r1, r1, r3
 800073e:	b2a3      	uxth	r3, r4
 8000740:	fbb1 f0fe 	udiv	r0, r1, lr
 8000744:	fb0e 1110 	mls	r1, lr, r0, r1
 8000748:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800074c:	fb08 f800 	mul.w	r8, r8, r0
 8000750:	45a0      	cmp	r8, r4
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0x10c>
 8000754:	193c      	adds	r4, r7, r4
 8000756:	f100 33ff 	add.w	r3, r0, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x10a>
 800075c:	45a0      	cmp	r8, r4
 800075e:	f200 80d9 	bhi.w	8000914 <__udivmoddi4+0x2bc>
 8000762:	4618      	mov	r0, r3
 8000764:	eba4 0408 	sub.w	r4, r4, r8
 8000768:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800076c:	e7bf      	b.n	80006ee <__udivmoddi4+0x96>
 800076e:	428b      	cmp	r3, r1
 8000770:	d909      	bls.n	8000786 <__udivmoddi4+0x12e>
 8000772:	2d00      	cmp	r5, #0
 8000774:	f000 80b1 	beq.w	80008da <__udivmoddi4+0x282>
 8000778:	2600      	movs	r6, #0
 800077a:	e9c5 0100 	strd	r0, r1, [r5]
 800077e:	4630      	mov	r0, r6
 8000780:	4631      	mov	r1, r6
 8000782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000786:	fab3 f683 	clz	r6, r3
 800078a:	2e00      	cmp	r6, #0
 800078c:	d14a      	bne.n	8000824 <__udivmoddi4+0x1cc>
 800078e:	428b      	cmp	r3, r1
 8000790:	d302      	bcc.n	8000798 <__udivmoddi4+0x140>
 8000792:	4282      	cmp	r2, r0
 8000794:	f200 80b8 	bhi.w	8000908 <__udivmoddi4+0x2b0>
 8000798:	1a84      	subs	r4, r0, r2
 800079a:	eb61 0103 	sbc.w	r1, r1, r3
 800079e:	2001      	movs	r0, #1
 80007a0:	468c      	mov	ip, r1
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d0a8      	beq.n	80006f8 <__udivmoddi4+0xa0>
 80007a6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007aa:	e7a5      	b.n	80006f8 <__udivmoddi4+0xa0>
 80007ac:	f1c2 0320 	rsb	r3, r2, #32
 80007b0:	fa20 f603 	lsr.w	r6, r0, r3
 80007b4:	4097      	lsls	r7, r2
 80007b6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007be:	40d9      	lsrs	r1, r3
 80007c0:	4330      	orrs	r0, r6
 80007c2:	0c03      	lsrs	r3, r0, #16
 80007c4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007c8:	fa1f f887 	uxth.w	r8, r7
 80007cc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007d4:	fb06 f108 	mul.w	r1, r6, r8
 80007d8:	4299      	cmp	r1, r3
 80007da:	fa04 f402 	lsl.w	r4, r4, r2
 80007de:	d909      	bls.n	80007f4 <__udivmoddi4+0x19c>
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007e6:	f080 808d 	bcs.w	8000904 <__udivmoddi4+0x2ac>
 80007ea:	4299      	cmp	r1, r3
 80007ec:	f240 808a 	bls.w	8000904 <__udivmoddi4+0x2ac>
 80007f0:	3e02      	subs	r6, #2
 80007f2:	443b      	add	r3, r7
 80007f4:	1a5b      	subs	r3, r3, r1
 80007f6:	b281      	uxth	r1, r0
 80007f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb00 f308 	mul.w	r3, r0, r8
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0x1c4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000812:	d273      	bcs.n	80008fc <__udivmoddi4+0x2a4>
 8000814:	428b      	cmp	r3, r1
 8000816:	d971      	bls.n	80008fc <__udivmoddi4+0x2a4>
 8000818:	3802      	subs	r0, #2
 800081a:	4439      	add	r1, r7
 800081c:	1acb      	subs	r3, r1, r3
 800081e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000822:	e778      	b.n	8000716 <__udivmoddi4+0xbe>
 8000824:	f1c6 0c20 	rsb	ip, r6, #32
 8000828:	fa03 f406 	lsl.w	r4, r3, r6
 800082c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000830:	431c      	orrs	r4, r3
 8000832:	fa20 f70c 	lsr.w	r7, r0, ip
 8000836:	fa01 f306 	lsl.w	r3, r1, r6
 800083a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800083e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000842:	431f      	orrs	r7, r3
 8000844:	0c3b      	lsrs	r3, r7, #16
 8000846:	fbb1 f9fe 	udiv	r9, r1, lr
 800084a:	fa1f f884 	uxth.w	r8, r4
 800084e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000852:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000856:	fb09 fa08 	mul.w	sl, r9, r8
 800085a:	458a      	cmp	sl, r1
 800085c:	fa02 f206 	lsl.w	r2, r2, r6
 8000860:	fa00 f306 	lsl.w	r3, r0, r6
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x220>
 8000866:	1861      	adds	r1, r4, r1
 8000868:	f109 30ff 	add.w	r0, r9, #4294967295
 800086c:	d248      	bcs.n	8000900 <__udivmoddi4+0x2a8>
 800086e:	458a      	cmp	sl, r1
 8000870:	d946      	bls.n	8000900 <__udivmoddi4+0x2a8>
 8000872:	f1a9 0902 	sub.w	r9, r9, #2
 8000876:	4421      	add	r1, r4
 8000878:	eba1 010a 	sub.w	r1, r1, sl
 800087c:	b2bf      	uxth	r7, r7
 800087e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000882:	fb0e 1110 	mls	r1, lr, r0, r1
 8000886:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800088a:	fb00 f808 	mul.w	r8, r0, r8
 800088e:	45b8      	cmp	r8, r7
 8000890:	d907      	bls.n	80008a2 <__udivmoddi4+0x24a>
 8000892:	19e7      	adds	r7, r4, r7
 8000894:	f100 31ff 	add.w	r1, r0, #4294967295
 8000898:	d22e      	bcs.n	80008f8 <__udivmoddi4+0x2a0>
 800089a:	45b8      	cmp	r8, r7
 800089c:	d92c      	bls.n	80008f8 <__udivmoddi4+0x2a0>
 800089e:	3802      	subs	r0, #2
 80008a0:	4427      	add	r7, r4
 80008a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008a6:	eba7 0708 	sub.w	r7, r7, r8
 80008aa:	fba0 8902 	umull	r8, r9, r0, r2
 80008ae:	454f      	cmp	r7, r9
 80008b0:	46c6      	mov	lr, r8
 80008b2:	4649      	mov	r1, r9
 80008b4:	d31a      	bcc.n	80008ec <__udivmoddi4+0x294>
 80008b6:	d017      	beq.n	80008e8 <__udivmoddi4+0x290>
 80008b8:	b15d      	cbz	r5, 80008d2 <__udivmoddi4+0x27a>
 80008ba:	ebb3 020e 	subs.w	r2, r3, lr
 80008be:	eb67 0701 	sbc.w	r7, r7, r1
 80008c2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008c6:	40f2      	lsrs	r2, r6
 80008c8:	ea4c 0202 	orr.w	r2, ip, r2
 80008cc:	40f7      	lsrs	r7, r6
 80008ce:	e9c5 2700 	strd	r2, r7, [r5]
 80008d2:	2600      	movs	r6, #0
 80008d4:	4631      	mov	r1, r6
 80008d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008da:	462e      	mov	r6, r5
 80008dc:	4628      	mov	r0, r5
 80008de:	e70b      	b.n	80006f8 <__udivmoddi4+0xa0>
 80008e0:	4606      	mov	r6, r0
 80008e2:	e6e9      	b.n	80006b8 <__udivmoddi4+0x60>
 80008e4:	4618      	mov	r0, r3
 80008e6:	e6fd      	b.n	80006e4 <__udivmoddi4+0x8c>
 80008e8:	4543      	cmp	r3, r8
 80008ea:	d2e5      	bcs.n	80008b8 <__udivmoddi4+0x260>
 80008ec:	ebb8 0e02 	subs.w	lr, r8, r2
 80008f0:	eb69 0104 	sbc.w	r1, r9, r4
 80008f4:	3801      	subs	r0, #1
 80008f6:	e7df      	b.n	80008b8 <__udivmoddi4+0x260>
 80008f8:	4608      	mov	r0, r1
 80008fa:	e7d2      	b.n	80008a2 <__udivmoddi4+0x24a>
 80008fc:	4660      	mov	r0, ip
 80008fe:	e78d      	b.n	800081c <__udivmoddi4+0x1c4>
 8000900:	4681      	mov	r9, r0
 8000902:	e7b9      	b.n	8000878 <__udivmoddi4+0x220>
 8000904:	4666      	mov	r6, ip
 8000906:	e775      	b.n	80007f4 <__udivmoddi4+0x19c>
 8000908:	4630      	mov	r0, r6
 800090a:	e74a      	b.n	80007a2 <__udivmoddi4+0x14a>
 800090c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000910:	4439      	add	r1, r7
 8000912:	e713      	b.n	800073c <__udivmoddi4+0xe4>
 8000914:	3802      	subs	r0, #2
 8000916:	443c      	add	r4, r7
 8000918:	e724      	b.n	8000764 <__udivmoddi4+0x10c>
 800091a:	bf00      	nop

0800091c <__aeabi_idiv0>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <serialPrintf>:
#define va_start(ap, param) __builtin_va_start(ap, param)
#define va_end(ap)          __builtin_va_end(ap)
#define PRINTF_BUFFER_SIZE    128

void serialPrintf(const char * format, ...)
{
 8000920:	b40f      	push	{r0, r1, r2, r3}
 8000922:	b590      	push	{r4, r7, lr}
 8000924:	b0a5      	sub	sp, #148	; 0x94
 8000926:	af00      	add	r7, sp, #0
	va_list arglist;
	char tmp[PRINTF_BUFFER_SIZE + 1];

	snprintf(tmp, PRINTF_BUFFER_SIZE, "+%05lums: ", HAL_GetTick());
 8000928:	f001 f818 	bl	800195c <HAL_GetTick>
 800092c:	4603      	mov	r3, r0
 800092e:	1d38      	adds	r0, r7, #4
 8000930:	4a1a      	ldr	r2, [pc, #104]	; (800099c <serialPrintf+0x7c>)
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	f004 fe1e 	bl	8005574 <sniprintf>
	va_start(arglist, format);
 8000938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800093c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	vsnprintf(tmp + strlen(tmp), PRINTF_BUFFER_SIZE - strlen(tmp), format, arglist);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc56 	bl	80001f4 <strlen>
 8000948:	4602      	mov	r2, r0
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	189c      	adds	r4, r3, r2
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc4f 	bl	80001f4 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 800095c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000960:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000964:	4620      	mov	r0, r4
 8000966:	f004 fe65 	bl	8005634 <vsniprintf>
	tmp[PRINTF_BUFFER_SIZE] = '\0';
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	va_end(arglist);

	const char *t = tmp;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart2, (uint8_t *) t, strlen(t), 10);
 8000976:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800097a:	f7ff fc3b 	bl	80001f4 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	230a      	movs	r3, #10
 8000984:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <serialPrintf+0x80>)
 800098a:	f004 fb1c 	bl	8004fc6 <HAL_UART_Transmit>
}
 800098e:	bf00      	nop
 8000990:	3794      	adds	r7, #148	; 0x94
 8000992:	46bd      	mov	sp, r7
 8000994:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr
 800099c:	08005e84 	.word	0x08005e84
 80009a0:	20000124 	.word	0x20000124

080009a4 <TOUCH_AF_INT_Change>:
#define debugPrintf(...) do { serialPrintf(__VA_ARGS__); } while(0)
#define TRACE(f_, ...)        debugPrintf((TRACE_TIME_FORMAT f_ CRLF), TRACE_TIME_VALUE, ##__VA_ARGS__)
//#define TRACE(f_, ...)        debugPrintf((TRACE_TIME_FORMAT f_ CRLF), ##__VA_ARGS__)

void TOUCH_AF_INT_Change(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <TOUCH_AF_INT_Change+0x28>)
 80009c0:	f001 f93e 	bl	8001c40 <HAL_GPIO_Init>
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40020000 	.word	0x40020000

080009d0 <TOUCH_AF_GPIOConfig>:

static void TOUCH_AF_GPIOConfig(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = TOUCH_RST_Pin;
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStructure);
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	480f      	ldr	r0, [pc, #60]	; (8000a28 <TOUCH_AF_GPIOConfig+0x58>)
 80009ec:	f001 f928 	bl	8001c40 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <TOUCH_AF_GPIOConfig+0x58>)
 80009f6:	f001 fabf 	bl	8001f78 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 80009fa:	2340      	movs	r3, #64	; 0x40
 80009fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <TOUCH_AF_GPIOConfig+0x58>)
 8000a10:	f001 f916 	bl	8001c40 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <TOUCH_AF_GPIOConfig+0x58>)
 8000a1a:	f001 faad 	bl	8001f78 <HAL_GPIO_WritePin>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40020000 	.word	0x40020000

08000a2c <I2C_GT911_ReadRegister>:

bool I2C_GT911_ReadRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	80fb      	strh	r3, [r7, #6]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	717b      	strb	r3, [r7, #5]
	uint8_t uRegAddr[2];
	uRegAddr[0] = (uint8_t)((reg & 0xFF00) >> 8);
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	733b      	strb	r3, [r7, #12]
	uRegAddr[1] = (uint8_t)(reg & 0x00FF);
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(&hi2c1, GT911_I2C_ADDR << 1, uRegAddr, 2, 10000) != HAL_OK)
 8000a4c:	f107 020c 	add.w	r2, r7, #12
 8000a50:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2302      	movs	r3, #2
 8000a58:	2128      	movs	r1, #40	; 0x28
 8000a5a:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <I2C_GT911_ReadRegister+0xa8>)
 8000a5c:	f001 fc04 	bl	8002268 <HAL_I2C_Master_Transmit>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d011      	beq.n	8000a8a <I2C_GT911_ReadRegister+0x5e>
	{
		TRACE("I2C ERROR: ReadRedister write reg address failed");
 8000a66:	f000 ff79 	bl	800195c <HAL_GetTick>
 8000a6a:	ee07 0a90 	vmov	s15, r0
 8000a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a72:	ee17 0a90 	vmov	r0, s15
 8000a76:	f7ff fd7f 	bl	8000578 <__aeabi_f2d>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <I2C_GT911_ReadRegister+0xac>)
 8000a80:	f7ff ff4e 	bl	8000920 <serialPrintf>
		asm("bkpt 255");
 8000a84:	beff      	bkpt	0x00ff
		return false;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e01f      	b.n	8000aca <I2C_GT911_ReadRegister+0x9e>
	}

	if (HAL_I2C_Master_Receive(&hi2c1, GT911_I2C_ADDR << 1, buf, len, 10000) != HAL_OK)
 8000a8a:	797b      	ldrb	r3, [r7, #5]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a92:	9200      	str	r2, [sp, #0]
 8000a94:	683a      	ldr	r2, [r7, #0]
 8000a96:	2128      	movs	r1, #40	; 0x28
 8000a98:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <I2C_GT911_ReadRegister+0xa8>)
 8000a9a:	f001 fce3 	bl	8002464 <HAL_I2C_Master_Receive>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d011      	beq.n	8000ac8 <I2C_GT911_ReadRegister+0x9c>
	{
		TRACE("I2C ERROR: ReadRedister read reg address failed");
 8000aa4:	f000 ff5a 	bl	800195c <HAL_GetTick>
 8000aa8:	ee07 0a90 	vmov	s15, r0
 8000aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab0:	ee17 0a90 	vmov	r0, s15
 8000ab4:	f7ff fd60 	bl	8000578 <__aeabi_f2d>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	460b      	mov	r3, r1
 8000abc:	4807      	ldr	r0, [pc, #28]	; (8000adc <I2C_GT911_ReadRegister+0xb0>)
 8000abe:	f7ff ff2f 	bl	8000920 <serialPrintf>
		asm("bkpt 255");
 8000ac2:	beff      	bkpt	0x00ff
		return false;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e000      	b.n	8000aca <I2C_GT911_ReadRegister+0x9e>
	}
	return true;
 8000ac8:	2301      	movs	r3, #1
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000009c 	.word	0x2000009c
 8000ad8:	08005e90 	.word	0x08005e90
 8000adc:	08005ecc 	.word	0x08005ecc

08000ae0 <I2C_GT911_WriteRegister>:

uint8_t I2C_GT911_WriteRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b0c6      	sub	sp, #280	; 0x118
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	6019      	str	r1, [r3, #0]
 8000aea:	4611      	mov	r1, r2
 8000aec:	1dbb      	adds	r3, r7, #6
 8000aee:	4602      	mov	r2, r0
 8000af0:	801a      	strh	r2, [r3, #0]
 8000af2:	1d7b      	adds	r3, r7, #5
 8000af4:	460a      	mov	r2, r1
 8000af6:	701a      	strb	r2, [r3, #0]
	uint8_t uAddrAndBuf[258];
	uAddrAndBuf[0] = (uint8_t)((reg & 0xFF00) >> 8);
 8000af8:	1dbb      	adds	r3, r7, #6
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	701a      	strb	r2, [r3, #0]
	uAddrAndBuf[1] = (uint8_t)(reg & 0x00FF);
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	705a      	strb	r2, [r3, #1]

	if (len > 0)
 8000b14:	1d7b      	adds	r3, r7, #5
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d01a      	beq.n	8000b52 <I2C_GT911_WriteRegister+0x72>
	{
		for (int i = 0;i < len;i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b22:	e010      	b.n	8000b46 <I2C_GT911_WriteRegister+0x66>
		{
			uAddrAndBuf[i + 2] = buf[i];
 8000b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b28:	463a      	mov	r2, r7
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	441a      	add	r2, r3
 8000b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b32:	3302      	adds	r3, #2
 8000b34:	7811      	ldrb	r1, [r2, #0]
 8000b36:	f107 0208 	add.w	r2, r7, #8
 8000b3a:	54d1      	strb	r1, [r2, r3]
		for (int i = 0;i < len;i++)
 8000b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b40:	3301      	adds	r3, #1
 8000b42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b46:	1d7b      	adds	r3, r7, #5
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	dbe8      	blt.n	8000b24 <I2C_GT911_WriteRegister+0x44>
		}
	}

	if (HAL_I2C_Master_Transmit(&hi2c1, GT911_I2C_ADDR << 1, uAddrAndBuf, len + 2, 10000) != HAL_OK)
 8000b52:	1d7b      	adds	r3, r7, #5
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	3302      	adds	r3, #2
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	f107 0208 	add.w	r2, r7, #8
 8000b60:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b64:	9100      	str	r1, [sp, #0]
 8000b66:	2128      	movs	r1, #40	; 0x28
 8000b68:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <I2C_GT911_WriteRegister+0xc4>)
 8000b6a:	f001 fb7d 	bl	8002268 <HAL_I2C_Master_Transmit>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d011      	beq.n	8000b98 <I2C_GT911_WriteRegister+0xb8>
	{
		TRACE("I2C ERROR: WriteRegister failed");
 8000b74:	f000 fef2 	bl	800195c <HAL_GetTick>
 8000b78:	ee07 0a90 	vmov	s15, r0
 8000b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b80:	ee17 0a90 	vmov	r0, s15
 8000b84:	f7ff fcf8 	bl	8000578 <__aeabi_f2d>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <I2C_GT911_WriteRegister+0xc8>)
 8000b8e:	f7ff fec7 	bl	8000920 <serialPrintf>
		asm("bkpt 255");
 8000b92:	beff      	bkpt	0x00ff
		return false;
 8000b94:	2300      	movs	r3, #0
 8000b96:	e000      	b.n	8000b9a <I2C_GT911_WriteRegister+0xba>
	}
	return true;
 8000b98:	2301      	movs	r3, #1
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000009c 	.word	0x2000009c
 8000ba8:	08005f04 	.word	0x08005f04

08000bac <I2C_GT911_SendConfig>:

bool I2C_GT911_SendConfig(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint8_t i = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]
	buf[0] = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	713b      	strb	r3, [r7, #4]
	buf[1] = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	717b      	strb	r3, [r7, #5]
	bool bResult = true;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	e009      	b.n	8000bdc <I2C_GT911_SendConfig+0x30>
		buf[0] += TOUCH_GT911_Cfg[i];//check sum
 8000bc8:	793a      	ldrb	r2, [r7, #4]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4924      	ldr	r1, [pc, #144]	; (8000c60 <I2C_GT911_SendConfig+0xb4>)
 8000bce:	5ccb      	ldrb	r3, [r1, r3]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	713b      	strb	r3, [r7, #4]
	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	71fb      	strb	r3, [r7, #7]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2bb7      	cmp	r3, #183	; 0xb7
 8000be0:	d9f2      	bls.n	8000bc8 <I2C_GT911_SendConfig+0x1c>

	buf[0] = (~buf[0]) + 1;
 8000be2:	793b      	ldrb	r3, [r7, #4]
 8000be4:	425b      	negs	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	713b      	strb	r3, [r7, #4]
	if (!I2C_GT911_WriteRegister(GT_CFGS_REG, (uint8_t *) TOUCH_GT911_Cfg, sizeof(TOUCH_GT911_Cfg)))
 8000bea:	22b8      	movs	r2, #184	; 0xb8
 8000bec:	491c      	ldr	r1, [pc, #112]	; (8000c60 <I2C_GT911_SendConfig+0xb4>)
 8000bee:	f248 0047 	movw	r0, #32839	; 0x8047
 8000bf2:	f7ff ff75 	bl	8000ae0 <I2C_GT911_WriteRegister>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d110      	bne.n	8000c1e <I2C_GT911_SendConfig+0x72>
	{
		TRACE("GT911 ERROR: write config failed");
 8000bfc:	f000 feae 	bl	800195c <HAL_GetTick>
 8000c00:	ee07 0a90 	vmov	s15, r0
 8000c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c08:	ee17 0a90 	vmov	r0, s15
 8000c0c:	f7ff fcb4 	bl	8000578 <__aeabi_f2d>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4813      	ldr	r0, [pc, #76]	; (8000c64 <I2C_GT911_SendConfig+0xb8>)
 8000c16:	f7ff fe83 	bl	8000920 <serialPrintf>
		bResult = false;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71bb      	strb	r3, [r7, #6]
	}

	if (!I2C_GT911_WriteRegister(GT_CHECK_REG, buf, 2)) //write checksum
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2202      	movs	r2, #2
 8000c22:	4619      	mov	r1, r3
 8000c24:	f248 00ff 	movw	r0, #33023	; 0x80ff
 8000c28:	f7ff ff5a 	bl	8000ae0 <I2C_GT911_WriteRegister>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d110      	bne.n	8000c54 <I2C_GT911_SendConfig+0xa8>
		{
			TRACE("GT911 ERROR: write config checksum failed");
 8000c32:	f000 fe93 	bl	800195c <HAL_GetTick>
 8000c36:	ee07 0a90 	vmov	s15, r0
 8000c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c3e:	ee17 0a90 	vmov	r0, s15
 8000c42:	f7ff fc99 	bl	8000578 <__aeabi_f2d>
 8000c46:	4602      	mov	r2, r0
 8000c48:	460b      	mov	r3, r1
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <I2C_GT911_SendConfig+0xbc>)
 8000c4c:	f7ff fe68 	bl	8000920 <serialPrintf>
			bResult = false;
 8000c50:	2300      	movs	r3, #0
 8000c52:	71bb      	strb	r3, [r7, #6]
		}
	return bResult;
 8000c54:	79bb      	ldrb	r3, [r7, #6]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	08006284 	.word	0x08006284
 8000c64:	08005f2c 	.word	0x08005f2c
 8000c68:	08005f58 	.word	0x08005f58

08000c6c <touchPanelInit>:

bool touchPanelInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	uint8_t tmp[4] = { 0 };
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]

	TRACE("Touchpanel init start ...");
 8000c76:	f000 fe71 	bl	800195c <HAL_GetTick>
 8000c7a:	ee07 0a90 	vmov	s15, r0
 8000c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c82:	ee17 0a90 	vmov	r0, s15
 8000c86:	f7ff fc77 	bl	8000578 <__aeabi_f2d>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4883      	ldr	r0, [pc, #524]	; (8000e9c <touchPanelInit+0x230>)
 8000c90:	f7ff fe46 	bl	8000920 <serialPrintf>

	TOUCH_AF_GPIOConfig(); //SET RST=OUT INT=OUT INT=LOW
 8000c94:	f7ff fe9c 	bl	80009d0 <TOUCH_AF_GPIOConfig>
	//I2C_Init();

	TPRST_LOW();
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4880      	ldr	r0, [pc, #512]	; (8000ea0 <touchPanelInit+0x234>)
 8000c9e:	f001 f96b 	bl	8001f78 <HAL_GPIO_WritePin>
	TPINT_HIGH();
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	487e      	ldr	r0, [pc, #504]	; (8000ea0 <touchPanelInit+0x234>)
 8000ca8:	f001 f966 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fe61 	bl	8001974 <HAL_Delay>

	TPRST_HIGH();
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	487a      	ldr	r0, [pc, #488]	; (8000ea0 <touchPanelInit+0x234>)
 8000cb8:	f001 f95e 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 8000cbc:	2006      	movs	r0, #6
 8000cbe:	f000 fe59 	bl	8001974 <HAL_Delay>

	TPINT_LOW();
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	4876      	ldr	r0, [pc, #472]	; (8000ea0 <touchPanelInit+0x234>)
 8000cc8:	f001 f956 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_Delay(55);
 8000ccc:	2037      	movs	r0, #55	; 0x37
 8000cce:	f000 fe51 	bl	8001974 <HAL_Delay>

	TOUCH_AF_INT_Change();  //Set INT INPUT INT=LOW
 8000cd2:	f7ff fe67 	bl	80009a4 <TOUCH_AF_INT_Change>

	HAL_Delay(50);
 8000cd6:	2032      	movs	r0, #50	; 0x32
 8000cd8:	f000 fe4c 	bl	8001974 <HAL_Delay>

	TRACE("Reading Touch registry");
 8000cdc:	f000 fe3e 	bl	800195c <HAL_GetTick>
 8000ce0:	ee07 0a90 	vmov	s15, r0
 8000ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce8:	ee17 0a90 	vmov	r0, s15
 8000cec:	f7ff fc44 	bl	8000578 <__aeabi_f2d>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	486b      	ldr	r0, [pc, #428]	; (8000ea4 <touchPanelInit+0x238>)
 8000cf6:	f7ff fe13 	bl	8000920 <serialPrintf>
	if (!I2C_GT911_ReadRegister(GT_PID_REG, tmp, 4))
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f248 1040 	movw	r0, #33088	; 0x8140
 8000d04:	f7ff fe92 	bl	8000a2c <I2C_GT911_ReadRegister>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00e      	beq.n	8000d32 <touchPanelInit+0xc6>
	{
		TRACE("GT911 ERROR: Product ID read failed");
 8000d14:	f000 fe22 	bl	800195c <HAL_GetTick>
 8000d18:	ee07 0a90 	vmov	s15, r0
 8000d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d20:	ee17 0a90 	vmov	r0, s15
 8000d24:	f7ff fc28 	bl	8000578 <__aeabi_f2d>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	485e      	ldr	r0, [pc, #376]	; (8000ea8 <touchPanelInit+0x23c>)
 8000d2e:	f7ff fdf7 	bl	8000920 <serialPrintf>
	}

	if (strcmp((char *) tmp, "911") == 0)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	495d      	ldr	r1, [pc, #372]	; (8000eac <touchPanelInit+0x240>)
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fa52 	bl	80001e0 <strcmp>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8098 	bne.w	8000e74 <touchPanelInit+0x208>
	{
		//TRACE("GT911 chip detected");
		tmp[0] = 0X02;
 8000d44:	2302      	movs	r3, #2
 8000d46:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f248 0040 	movw	r0, #32832	; 0x8040
 8000d52:	f7ff fec5 	bl	8000ae0 <I2C_GT911_WriteRegister>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10e      	bne.n	8000d7a <touchPanelInit+0x10e>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000d5c:	f000 fdfe 	bl	800195c <HAL_GetTick>
 8000d60:	ee07 0a90 	vmov	s15, r0
 8000d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d68:	ee17 0a90 	vmov	r0, s15
 8000d6c:	f7ff fc04 	bl	8000578 <__aeabi_f2d>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	484e      	ldr	r0, [pc, #312]	; (8000eb0 <touchPanelInit+0x244>)
 8000d76:	f7ff fdd3 	bl	8000920 <serialPrintf>
		}
		if (!I2C_GT911_ReadRegister(GT_CFGS_REG, tmp, 1))
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f248 0047 	movw	r0, #32839	; 0x8047
 8000d84:	f7ff fe52 	bl	8000a2c <I2C_GT911_ReadRegister>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f083 0301 	eor.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00e      	beq.n	8000db2 <touchPanelInit+0x146>
		{
			TRACE("GT911 ERROR: configuration register read failed");
 8000d94:	f000 fde2 	bl	800195c <HAL_GetTick>
 8000d98:	ee07 0a90 	vmov	s15, r0
 8000d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da0:	ee17 0a90 	vmov	r0, s15
 8000da4:	f7ff fbe8 	bl	8000578 <__aeabi_f2d>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4841      	ldr	r0, [pc, #260]	; (8000eb4 <touchPanelInit+0x248>)
 8000dae:	f7ff fdb7 	bl	8000920 <serialPrintf>
		}

		//TRACE("Chip config Ver:%x", buffer);
		if (tmp[0] <= GT911_CFG_NUMER)  //Config ver
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	2b6c      	cmp	r3, #108	; 0x6c
 8000db6:	d816      	bhi.n	8000de6 <touchPanelInit+0x17a>
		{
			//TRACE("Sending new config %d", GT911_CFG_NUMER);
			if (!I2C_GT911_SendConfig())
 8000db8:	f7ff fef8 	bl	8000bac <I2C_GT911_SendConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f083 0301 	eor.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00e      	beq.n	8000de6 <touchPanelInit+0x17a>
			{
				TRACE("GT911 ERROR: sending configration failed");
 8000dc8:	f000 fdc8 	bl	800195c <HAL_GetTick>
 8000dcc:	ee07 0a90 	vmov	s15, r0
 8000dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd4:	ee17 0a90 	vmov	r0, s15
 8000dd8:	f7ff fbce 	bl	8000578 <__aeabi_f2d>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4835      	ldr	r0, [pc, #212]	; (8000eb8 <touchPanelInit+0x24c>)
 8000de2:	f7ff fd9d 	bl	8000920 <serialPrintf>
			}
		}

		if (!I2C_GT911_ReadRegister(GT911_FIRMWARE_VERSION_REG, tmp, 2))
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2202      	movs	r2, #2
 8000dea:	4619      	mov	r1, r3
 8000dec:	f248 1044 	movw	r0, #33092	; 0x8144
 8000df0:	f7ff fe1c 	bl	8000a2c <I2C_GT911_ReadRegister>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f083 0301 	eor.w	r3, r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d00f      	beq.n	8000e20 <touchPanelInit+0x1b4>
		{
			TRACE("GT911 ERROR: reading firmware version failed");
 8000e00:	f000 fdac 	bl	800195c <HAL_GetTick>
 8000e04:	ee07 0a90 	vmov	s15, r0
 8000e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e0c:	ee17 0a90 	vmov	r0, s15
 8000e10:	f7ff fbb2 	bl	8000578 <__aeabi_f2d>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4828      	ldr	r0, [pc, #160]	; (8000ebc <touchPanelInit+0x250>)
 8000e1a:	f7ff fd81 	bl	8000920 <serialPrintf>
 8000e1e:	e009      	b.n	8000e34 <touchPanelInit+0x1c8>
		}
		else
		{
			touchGT911fwver = (tmp[1] << 8) + tmp[0];
 8000e20:	797b      	ldrb	r3, [r7, #5]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	793b      	ldrb	r3, [r7, #4]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <touchPanelInit+0x254>)
 8000e32:	801a      	strh	r2, [r3, #0]
			//TRACE("GT911 FW version: %u", touchGT911fwver);
		}

		HAL_Delay(10);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f000 fd9d 	bl	8001974 <HAL_Delay>
		tmp[0] = 0X00;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))  //end reset
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	f248 0040 	movw	r0, #32832	; 0x8040
 8000e48:	f7ff fe4a 	bl	8000ae0 <I2C_GT911_WriteRegister>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10e      	bne.n	8000e70 <touchPanelInit+0x204>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000e52:	f000 fd83 	bl	800195c <HAL_GetTick>
 8000e56:	ee07 0a90 	vmov	s15, r0
 8000e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e5e:	ee17 0a90 	vmov	r0, s15
 8000e62:	f7ff fb89 	bl	8000578 <__aeabi_f2d>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <touchPanelInit+0x244>)
 8000e6c:	f7ff fd58 	bl	8000920 <serialPrintf>
		}
		// touchGT911Flag = true;

		//TOUCH_AF_ExtiConfig();

		return true;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e00f      	b.n	8000e94 <touchPanelInit+0x228>
	}
	TRACE("GT911 chip NOT FOUND");
 8000e74:	f000 fd72 	bl	800195c <HAL_GetTick>
 8000e78:	ee07 0a90 	vmov	s15, r0
 8000e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e80:	ee17 0a90 	vmov	r0, s15
 8000e84:	f7ff fb78 	bl	8000578 <__aeabi_f2d>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <touchPanelInit+0x258>)
 8000e8e:	f7ff fd47 	bl	8000920 <serialPrintf>
	return false;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	08005f8c 	.word	0x08005f8c
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	08005fb0 	.word	0x08005fb0
 8000ea8:	08005fd0 	.word	0x08005fd0
 8000eac:	08005ffc 	.word	0x08005ffc
 8000eb0:	08006000 	.word	0x08006000
 8000eb4:	08006038 	.word	0x08006038
 8000eb8:	08006070 	.word	0x08006070
 8000ebc:	080060a4 	.word	0x080060a4
 8000ec0:	2000008c 	.word	0x2000008c
 8000ec4:	080060dc 	.word	0x080060dc

08000ec8 <touchPanelDeInit>:

void touchPanelDeInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	//TOUCH_AF_ExtiStop();
	//touchGT911Flag = false;
	TRACE("touchPanelDeInit()");
 8000ecc:	f000 fd46 	bl	800195c <HAL_GetTick>
 8000ed0:	ee07 0a90 	vmov	s15, r0
 8000ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed8:	ee17 0a90 	vmov	r0, s15
 8000edc:	f7ff fb4c 	bl	8000578 <__aeabi_f2d>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <touchPanelDeInit+0x28>)
 8000ee6:	f7ff fd1b 	bl	8000920 <serialPrintf>
	asm("bkpt 255");
 8000eea:	beff      	bkpt	0x00ff
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	080060fc 	.word	0x080060fc

08000ef4 <touchPanelRead>:

void touchPanelRead()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
	uint8_t state = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	70bb      	strb	r3, [r7, #2]
	// if (!touchEventOccured)
	//   return;

	// touchEventOccured = false;

	uint32_t startReadStatus = HAL_GetTick();
 8000efe:	f000 fd2d 	bl	800195c <HAL_GetTick>
 8000f02:	6078      	str	r0, [r7, #4]
	do {
		if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG, &state, 1)) {
 8000f04:	1cbb      	adds	r3, r7, #2
 8000f06:	2201      	movs	r2, #1
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f248 104e 	movw	r0, #33102	; 0x814e
 8000f0e:	f7ff fd8d 	bl	8000a2c <I2C_GT911_ReadRegister>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f083 0301 	eor.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01e      	beq.n	8000f5c <touchPanelRead+0x68>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2120      	movs	r1, #32
 8000f22:	48b3      	ldr	r0, [pc, #716]	; (80011f0 <touchPanelRead+0x2fc>)
 8000f24:	f001 f828 	bl	8001f78 <HAL_GPIO_WritePin>
			touchGT911hiccups++;
 8000f28:	4bb2      	ldr	r3, [pc, #712]	; (80011f4 <touchPanelRead+0x300>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4bb0      	ldr	r3, [pc, #704]	; (80011f4 <touchPanelRead+0x300>)
 8000f32:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 I2C read XY error");
 8000f34:	f000 fd12 	bl	800195c <HAL_GetTick>
 8000f38:	ee07 0a90 	vmov	s15, r0
 8000f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f40:	ee17 0a90 	vmov	r0, s15
 8000f44:	f7ff fb18 	bl	8000578 <__aeabi_f2d>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	48aa      	ldr	r0, [pc, #680]	; (80011f8 <touchPanelRead+0x304>)
 8000f4e:	f7ff fce7 	bl	8000920 <serialPrintf>
			touchPanelDeInit();
 8000f52:	f7ff ffb9 	bl	8000ec8 <touchPanelDeInit>
			touchPanelInit();
 8000f56:	f7ff fe89 	bl	8000c6c <touchPanelInit>
			return;
 8000f5a:	e181      	b.n	8001260 <touchPanelRead+0x36c>
		}

		if (state & 0x80u) {
 8000f5c:	78bb      	ldrb	r3, [r7, #2]
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <touchPanelRead+0x86>
			// ready
			break;
		}
		HAL_Delay(1);
 8000f64:	2001      	movs	r0, #1
 8000f66:	f000 fd05 	bl	8001974 <HAL_Delay>
	} while (HAL_GetTick() - startReadStatus < GT911_TIMEOUT);
 8000f6a:	f000 fcf7 	bl	800195c <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d9c5      	bls.n	8000f04 <touchPanelRead+0x10>
 8000f78:	e000      	b.n	8000f7c <touchPanelRead+0x88>
			break;
 8000f7a:	bf00      	nop

	TRACE("touch state = 0x%x", state);
 8000f7c:	f000 fcee 	bl	800195c <HAL_GetTick>
 8000f80:	ee07 0a90 	vmov	s15, r0
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	ee17 0a90 	vmov	r0, s15
 8000f8c:	f7ff faf4 	bl	8000578 <__aeabi_f2d>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	78b9      	ldrb	r1, [r7, #2]
 8000f96:	9100      	str	r1, [sp, #0]
 8000f98:	4898      	ldr	r0, [pc, #608]	; (80011fc <touchPanelRead+0x308>)
 8000f9a:	f7ff fcc1 	bl	8000920 <serialPrintf>
	if (state & 0x80u) {
 8000f9e:	78bb      	ldrb	r3, [r7, #2]
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f280 80b8 	bge.w	8001118 <touchPanelRead+0x224>
		uint8_t pointsCount = (state & 0x0Fu);
 8000fa8:	78bb      	ldrb	r3, [r7, #2]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	70fb      	strb	r3, [r7, #3]

		if (pointsCount > 0 && pointsCount <= GT911_MAX_TP) {
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 8097 	beq.w	80010e6 <touchPanelRead+0x1f2>
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	f200 8093 	bhi.w	80010e6 <touchPanelRead+0x1f2>
			if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG + 1, touchData.data, pointsCount * sizeof(TouchPoint)))
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	498c      	ldr	r1, [pc, #560]	; (8001200 <touchPanelRead+0x30c>)
 8000fd0:	f248 104f 	movw	r0, #33103	; 0x814f
 8000fd4:	f7ff fd2a 	bl	8000a2c <I2C_GT911_ReadRegister>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f083 0301 	eor.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d01e      	beq.n	8001022 <touchPanelRead+0x12e>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	4881      	ldr	r0, [pc, #516]	; (80011f0 <touchPanelRead+0x2fc>)
 8000fea:	f000 ffc5 	bl	8001f78 <HAL_GPIO_WritePin>
				touchGT911hiccups++;
 8000fee:	4b81      	ldr	r3, [pc, #516]	; (80011f4 <touchPanelRead+0x300>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b7f      	ldr	r3, [pc, #508]	; (80011f4 <touchPanelRead+0x300>)
 8000ff8:	801a      	strh	r2, [r3, #0]
				TRACE("GT911 I2C data read error");
 8000ffa:	f000 fcaf 	bl	800195c <HAL_GetTick>
 8000ffe:	ee07 0a90 	vmov	s15, r0
 8001002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001006:	ee17 0a90 	vmov	r0, s15
 800100a:	f7ff fab5 	bl	8000578 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	487c      	ldr	r0, [pc, #496]	; (8001204 <touchPanelRead+0x310>)
 8001014:	f7ff fc84 	bl	8000920 <serialPrintf>
				touchPanelDeInit();
 8001018:	f7ff ff56 	bl	8000ec8 <touchPanelDeInit>
				touchPanelInit();
 800101c:	f7ff fe26 	bl	8000c6c <touchPanelInit>
				return;
 8001020:	e11e      	b.n	8001260 <touchPanelRead+0x36c>
			}
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 8001022:	4b79      	ldr	r3, [pc, #484]	; (8001208 <touchPanelRead+0x314>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <touchPanelRead+0x146>
 800102a:	4b77      	ldr	r3, [pc, #476]	; (8001208 <touchPanelRead+0x314>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d003      	beq.n	800103a <touchPanelRead+0x146>
 8001032:	4b75      	ldr	r3, [pc, #468]	; (8001208 <touchPanelRead+0x314>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b04      	cmp	r3, #4
 8001038:	d117      	bne.n	800106a <touchPanelRead+0x176>
			{
				touchState.event = TE_DOWN;
 800103a:	4b73      	ldr	r3, [pc, #460]	; (8001208 <touchPanelRead+0x314>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
				touchState.startX = touchState.x = touchData.points[0].x;
 8001040:	4b6f      	ldr	r3, [pc, #444]	; (8001200 <touchPanelRead+0x30c>)
 8001042:	885b      	ldrh	r3, [r3, #2]
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b70      	ldr	r3, [pc, #448]	; (8001208 <touchPanelRead+0x314>)
 8001048:	805a      	strh	r2, [r3, #2]
 800104a:	4b6f      	ldr	r3, [pc, #444]	; (8001208 <touchPanelRead+0x314>)
 800104c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001050:	4b6d      	ldr	r3, [pc, #436]	; (8001208 <touchPanelRead+0x314>)
 8001052:	80da      	strh	r2, [r3, #6]
				touchState.startY = touchState.y = touchData.points[0].y;
 8001054:	4b6a      	ldr	r3, [pc, #424]	; (8001200 <touchPanelRead+0x30c>)
 8001056:	889b      	ldrh	r3, [r3, #4]
 8001058:	b21a      	sxth	r2, r3
 800105a:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <touchPanelRead+0x314>)
 800105c:	809a      	strh	r2, [r3, #4]
 800105e:	4b6a      	ldr	r3, [pc, #424]	; (8001208 <touchPanelRead+0x314>)
 8001060:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001064:	4b68      	ldr	r3, [pc, #416]	; (8001208 <touchPanelRead+0x314>)
 8001066:	811a      	strh	r2, [r3, #8]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 8001068:	e055      	b.n	8001116 <touchPanelRead+0x222>
			}
			else
			{
				touchState.deltaX = touchData.points[0].x - touchState.x;
 800106a:	4b65      	ldr	r3, [pc, #404]	; (8001200 <touchPanelRead+0x30c>)
 800106c:	885a      	ldrh	r2, [r3, #2]
 800106e:	4b66      	ldr	r3, [pc, #408]	; (8001208 <touchPanelRead+0x314>)
 8001070:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001074:	b29b      	uxth	r3, r3
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	b21a      	sxth	r2, r3
 800107c:	4b62      	ldr	r3, [pc, #392]	; (8001208 <touchPanelRead+0x314>)
 800107e:	815a      	strh	r2, [r3, #10]
				touchState.deltaY = touchData.points[0].y - touchState.y;
 8001080:	4b5f      	ldr	r3, [pc, #380]	; (8001200 <touchPanelRead+0x30c>)
 8001082:	889a      	ldrh	r2, [r3, #4]
 8001084:	4b60      	ldr	r3, [pc, #384]	; (8001208 <touchPanelRead+0x314>)
 8001086:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800108a:	b29b      	uxth	r3, r3
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b29b      	uxth	r3, r3
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <touchPanelRead+0x314>)
 8001094:	819a      	strh	r2, [r3, #12]
				if (touchState.event == TE_SLIDE || abs(touchState.deltaX) >= SLIDE_RANGE || abs(touchState.deltaY) >= SLIDE_RANGE)
 8001096:	4b5c      	ldr	r3, [pc, #368]	; (8001208 <touchPanelRead+0x314>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d015      	beq.n	80010ca <touchPanelRead+0x1d6>
 800109e:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <touchPanelRead+0x314>)
 80010a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	bfb8      	it	lt
 80010a8:	425b      	neglt	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	2306      	movs	r3, #6
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d20a      	bcs.n	80010ca <touchPanelRead+0x1d6>
 80010b4:	4b54      	ldr	r3, [pc, #336]	; (8001208 <touchPanelRead+0x314>)
 80010b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bfb8      	it	lt
 80010be:	425b      	neglt	r3, r3
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	2306      	movs	r3, #6
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d325      	bcc.n	8001116 <touchPanelRead+0x222>
				{
					touchState.event = TE_SLIDE;
 80010ca:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <touchPanelRead+0x314>)
 80010cc:	2203      	movs	r2, #3
 80010ce:	701a      	strb	r2, [r3, #0]
					touchState.x = touchData.points[0].x;
 80010d0:	4b4b      	ldr	r3, [pc, #300]	; (8001200 <touchPanelRead+0x30c>)
 80010d2:	885b      	ldrh	r3, [r3, #2]
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <touchPanelRead+0x314>)
 80010d8:	805a      	strh	r2, [r3, #2]
					touchState.y = touchData.points[0].y;
 80010da:	4b49      	ldr	r3, [pc, #292]	; (8001200 <touchPanelRead+0x30c>)
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b49      	ldr	r3, [pc, #292]	; (8001208 <touchPanelRead+0x314>)
 80010e2:	809a      	strh	r2, [r3, #4]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80010e4:	e017      	b.n	8001116 <touchPanelRead+0x222>
				}
			}
		}
		else
		{
			if (touchState.event == TE_SLIDE)
 80010e6:	4b48      	ldr	r3, [pc, #288]	; (8001208 <touchPanelRead+0x314>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d103      	bne.n	80010f6 <touchPanelRead+0x202>
			{
				touchState.event = TE_SLIDE_END;
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <touchPanelRead+0x314>)
 80010f0:	2204      	movs	r2, #4
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e010      	b.n	8001118 <touchPanelRead+0x224>
			}
			else if (touchState.event == TE_DOWN)
 80010f6:	4b44      	ldr	r3, [pc, #272]	; (8001208 <touchPanelRead+0x314>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d103      	bne.n	8001106 <touchPanelRead+0x212>
			{
				touchState.event = TE_UP;
 80010fe:	4b42      	ldr	r3, [pc, #264]	; (8001208 <touchPanelRead+0x314>)
 8001100:	2202      	movs	r2, #2
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e008      	b.n	8001118 <touchPanelRead+0x224>
			}
			else if (touchState.event != TE_SLIDE_END) {
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <touchPanelRead+0x314>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b04      	cmp	r3, #4
 800110c:	d004      	beq.n	8001118 <touchPanelRead+0x224>
				touchState.event = TE_NONE;
 800110e:	4b3e      	ldr	r3, [pc, #248]	; (8001208 <touchPanelRead+0x314>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e000      	b.n	8001118 <touchPanelRead+0x224>
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 8001116:	bf00      	nop
			}
		}
	}

	uint8_t zero = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	707b      	strb	r3, [r7, #1]
	if (!I2C_GT911_WriteRegister(GT911_READ_XY_REG, &zero, 1))
 800111c:	1c7b      	adds	r3, r7, #1
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f248 104e 	movw	r0, #33102	; 0x814e
 8001126:	f7ff fcdb 	bl	8000ae0 <I2C_GT911_WriteRegister>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10e      	bne.n	800114e <touchPanelRead+0x25a>
	{
		TRACE("GT911 ERROR: clearing XY register failed");
 8001130:	f000 fc14 	bl	800195c <HAL_GetTick>
 8001134:	ee07 0a90 	vmov	s15, r0
 8001138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113c:	ee17 0a90 	vmov	r0, s15
 8001140:	f7ff fa1a 	bl	8000578 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4830      	ldr	r0, [pc, #192]	; (800120c <touchPanelRead+0x318>)
 800114a:	f7ff fbe9 	bl	8000920 <serialPrintf>
	}

	switch (touchState.event) {
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <touchPanelRead+0x314>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d874      	bhi.n	8001240 <touchPanelRead+0x34c>
 8001156:	a201      	add	r2, pc, #4	; (adr r2, 800115c <touchPanelRead+0x268>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	08001171 	.word	0x08001171
 8001160:	080011b1 	.word	0x080011b1
 8001164:	08001191 	.word	0x08001191
 8001168:	08001221 	.word	0x08001221
 800116c:	080011d1 	.word	0x080011d1
		case TE_NONE:
			TRACE("touch event = NONE"); break;
 8001170:	f000 fbf4 	bl	800195c <HAL_GetTick>
 8001174:	ee07 0a90 	vmov	s15, r0
 8001178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117c:	ee17 0a90 	vmov	r0, s15
 8001180:	f7ff f9fa 	bl	8000578 <__aeabi_f2d>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4821      	ldr	r0, [pc, #132]	; (8001210 <touchPanelRead+0x31c>)
 800118a:	f7ff fbc9 	bl	8000920 <serialPrintf>
 800118e:	e067      	b.n	8001260 <touchPanelRead+0x36c>
		case TE_UP:
			TRACE("touch event = UP"); break;
 8001190:	f000 fbe4 	bl	800195c <HAL_GetTick>
 8001194:	ee07 0a90 	vmov	s15, r0
 8001198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800119c:	ee17 0a90 	vmov	r0, s15
 80011a0:	f7ff f9ea 	bl	8000578 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	481a      	ldr	r0, [pc, #104]	; (8001214 <touchPanelRead+0x320>)
 80011aa:	f7ff fbb9 	bl	8000920 <serialPrintf>
 80011ae:	e057      	b.n	8001260 <touchPanelRead+0x36c>
		case TE_DOWN:
			TRACE("touch event = DOWN"); break;
 80011b0:	f000 fbd4 	bl	800195c <HAL_GetTick>
 80011b4:	ee07 0a90 	vmov	s15, r0
 80011b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011bc:	ee17 0a90 	vmov	r0, s15
 80011c0:	f7ff f9da 	bl	8000578 <__aeabi_f2d>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <touchPanelRead+0x324>)
 80011ca:	f7ff fba9 	bl	8000920 <serialPrintf>
 80011ce:	e047      	b.n	8001260 <touchPanelRead+0x36c>
		case TE_SLIDE_END:
			TRACE("touch event = SLIDE_END"); break;
 80011d0:	f000 fbc4 	bl	800195c <HAL_GetTick>
 80011d4:	ee07 0a90 	vmov	s15, r0
 80011d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011dc:	ee17 0a90 	vmov	r0, s15
 80011e0:	f7ff f9ca 	bl	8000578 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <touchPanelRead+0x328>)
 80011ea:	f7ff fb99 	bl	8000920 <serialPrintf>
 80011ee:	e037      	b.n	8001260 <touchPanelRead+0x36c>
 80011f0:	40020000 	.word	0x40020000
 80011f4:	2000008e 	.word	0x2000008e
 80011f8:	08006118 	.word	0x08006118
 80011fc:	08006138 	.word	0x08006138
 8001200:	200000f0 	.word	0x200000f0
 8001204:	08006154 	.word	0x08006154
 8001208:	20000168 	.word	0x20000168
 800120c:	08006178 	.word	0x08006178
 8001210:	080061ac 	.word	0x080061ac
 8001214:	080061c8 	.word	0x080061c8
 8001218:	080061e4 	.word	0x080061e4
 800121c:	08006200 	.word	0x08006200
		case TE_SLIDE:
			TRACE("touch event = SLIDE"); break;
 8001220:	f000 fb9c 	bl	800195c <HAL_GetTick>
 8001224:	ee07 0a90 	vmov	s15, r0
 8001228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800122c:	ee17 0a90 	vmov	r0, s15
 8001230:	f7ff f9a2 	bl	8000578 <__aeabi_f2d>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <touchPanelRead+0x374>)
 800123a:	f7ff fb71 	bl	8000920 <serialPrintf>
 800123e:	e00f      	b.n	8001260 <touchPanelRead+0x36c>
		default:
			TRACE("touch event = UNKNOWN"); break;
 8001240:	f000 fb8c 	bl	800195c <HAL_GetTick>
 8001244:	ee07 0a90 	vmov	s15, r0
 8001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <touchPanelRead+0x378>)
 800125a:	f7ff fb61 	bl	8000920 <serialPrintf>
 800125e:	bf00      	nop
	}
}
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	08006220 	.word	0x08006220
 800126c:	0800623c 	.word	0x0800623c

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fb0c 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f834 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f000 f8f8 	bl	8001470 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001280:	f000 f8cc 	bl	800141c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001284:	f000 f89a 	bl	80013bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (!touchPanelInit())
 8001288:	f7ff fcf0 	bl	8000c6c <touchPanelInit>
 800128c:	4603      	mov	r3, r0
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00f      	beq.n	80012b8 <main+0x48>
  {
	  TRACE("ERROR: touchPanelInit() failed");
 8001298:	f000 fb60 	bl	800195c <HAL_GetTick>
 800129c:	ee07 0a90 	vmov	s15, r0
 80012a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a4:	ee17 0a90 	vmov	r0, s15
 80012a8:	f7ff f966 	bl	8000578 <__aeabi_f2d>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <main+0x6c>)
 80012b2:	f7ff fb35 	bl	8000920 <serialPrintf>
	  asm("bkpt 255");
 80012b6:	beff      	bkpt	0x00ff
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (HAL_GPIO_ReadPin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin) == GPIO_PIN_SET)
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	4809      	ldr	r0, [pc, #36]	; (80012e0 <main+0x70>)
 80012bc:	f000 fe44 	bl	8001f48 <HAL_GPIO_ReadPin>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <main+0x62>
	{
		touchPanelRead();
 80012c6:	f7ff fe15 	bl	8000ef4 <touchPanelRead>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012ca:	2120      	movs	r1, #32
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <main+0x70>)
 80012ce:	f000 fe6c 	bl	8001faa <HAL_GPIO_TogglePin>
	}
	HAL_Delay(10);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f000 fb4e 	bl	8001974 <HAL_Delay>
	if (HAL_GPIO_ReadPin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin) == GPIO_PIN_SET)
 80012d8:	e7ee      	b.n	80012b8 <main+0x48>
 80012da:	bf00      	nop
 80012dc:	0800625c 	.word	0x0800625c
 80012e0:	40020000 	.word	0x40020000

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 f936 	bl	8005564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <SystemClock_Config+0xd0>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <SystemClock_Config+0xd0>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <SystemClock_Config+0xd0>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <SystemClock_Config+0xd4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001330:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <SystemClock_Config+0xd4>)
 8001332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <SystemClock_Config+0xd4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134c:	2310      	movs	r3, #16
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001350:	2302      	movs	r3, #2
 8001352:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001354:	2300      	movs	r3, #0
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001358:	2310      	movs	r3, #16
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800135c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001362:	2304      	movs	r3, #4
 8001364:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001366:	2307      	movs	r3, #7
 8001368:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	4618      	mov	r0, r3
 8001370:	f003 f968 	bl	8004644 <HAL_RCC_OscConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137a:	f000 f91d 	bl	80015b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137e:	230f      	movs	r3, #15
 8001380:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001382:	2302      	movs	r3, #2
 8001384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2102      	movs	r1, #2
 800139a:	4618      	mov	r0, r3
 800139c:	f003 fbca 	bl	8004b34 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013a6:	f000 f907 	bl	80015b8 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	; 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_I2C1_Init+0x54>)
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <MX_I2C1_Init+0x58>)
 80013c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_I2C1_Init+0x54>)
 80013c8:	4a13      	ldr	r2, [pc, #76]	; (8001418 <MX_I2C1_Init+0x5c>)
 80013ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_I2C1_Init+0x54>)
 80013ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_I2C1_Init+0x54>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MX_I2C1_Init+0x54>)
 80013dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_I2C1_Init+0x54>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_I2C1_Init+0x54>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_I2C1_Init+0x54>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_I2C1_Init+0x54>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_I2C1_Init+0x54>)
 80013fc:	f000 fdf0 	bl	8001fe0 <HAL_I2C_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001406:	f000 f8d7 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000009c 	.word	0x2000009c
 8001414:	40005400 	.word	0x40005400
 8001418:	00061a80 	.word	0x00061a80

0800141c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <MX_USART2_UART_Init+0x48>)
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <MX_USART2_UART_Init+0x4c>)
 8001424:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 400000;
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_USART2_UART_Init+0x48>)
 8001428:	4a10      	ldr	r2, [pc, #64]	; (800146c <MX_USART2_UART_Init+0x50>)
 800142a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <MX_USART2_UART_Init+0x48>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART2_UART_Init+0x48>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_USART2_UART_Init+0x48>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART2_UART_Init+0x48>)
 8001440:	220c      	movs	r2, #12
 8001442:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <MX_USART2_UART_Init+0x48>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART2_UART_Init+0x48>)
 800144c:	2200      	movs	r2, #0
 800144e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <MX_USART2_UART_Init+0x48>)
 8001452:	f003 fd6b 	bl	8004f2c <HAL_UART_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800145c:	f000 f8ac 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000124 	.word	0x20000124
 8001468:	40004400 	.word	0x40004400
 800146c:	00061a80 	.word	0x00061a80

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <MX_GPIO_Init+0x134>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a45      	ldr	r2, [pc, #276]	; (80015a4 <MX_GPIO_Init+0x134>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <MX_GPIO_Init+0x134>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a3e      	ldr	r2, [pc, #248]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b38      	ldr	r3, [pc, #224]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a30      	ldr	r2, [pc, #192]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <MX_GPIO_Init+0x134>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TOUCH_RST_Pin, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	21a0      	movs	r1, #160	; 0xa0
 80014fa:	482b      	ldr	r0, [pc, #172]	; (80015a8 <MX_GPIO_Init+0x138>)
 80014fc:	f000 fd3c 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_DMA_TRACE_OUT_GPIO_Port, I2C_DMA_TRACE_OUT_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4829      	ldr	r0, [pc, #164]	; (80015ac <MX_GPIO_Init+0x13c>)
 8001506:	f000 fd37 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_IRQ_TRACE_OUT_GPIO_Port, I2C_IRQ_TRACE_OUT_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2140      	movs	r1, #64	; 0x40
 800150e:	4828      	ldr	r0, [pc, #160]	; (80015b0 <MX_GPIO_Init+0x140>)
 8001510:	f000 fd32 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <MX_GPIO_Init+0x144>)
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4820      	ldr	r0, [pc, #128]	; (80015ac <MX_GPIO_Init+0x13c>)
 800152a:	f000 fb89 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|TOUCH_RST_Pin;
 800152e:	23a0      	movs	r3, #160	; 0xa0
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_GPIO_Init+0x138>)
 8001546:	f000 fb7b 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_INT_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <MX_GPIO_Init+0x138>)
 800155e:	f000 fb6f 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_DMA_TRACE_OUT_Pin */
  GPIO_InitStruct.Pin = I2C_DMA_TRACE_OUT_Pin;
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_DMA_TRACE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <MX_GPIO_Init+0x13c>)
 800157a:	f000 fb61 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_IRQ_TRACE_OUT_Pin */
  GPIO_InitStruct.Pin = I2C_IRQ_TRACE_OUT_Pin;
 800157e:	2340      	movs	r3, #64	; 0x40
 8001580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_IRQ_TRACE_OUT_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <MX_GPIO_Init+0x140>)
 8001596:	f000 fb53 	bl	8001c40 <HAL_GPIO_Init>
}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020400 	.word	0x40020400
 80015b4:	10210000 	.word	0x10210000

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b10      	ldr	r3, [pc, #64]	; (8001610 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_MspInit+0x4c>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_MspInit+0x4c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001602:	2007      	movs	r0, #7
 8001604:	f000 faaa 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <HAL_I2C_MspInit+0x94>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d134      	bne.n	80016a0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_I2C_MspInit+0x98>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_I2C_MspInit+0x98>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_I2C_MspInit+0x98>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001652:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001658:	2312      	movs	r3, #18
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001664:	2304      	movs	r3, #4
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4810      	ldr	r0, [pc, #64]	; (80016b0 <HAL_I2C_MspInit+0x9c>)
 8001670:	f000 fae6 	bl	8001c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_I2C_MspInit+0x98>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_I2C_MspInit+0x98>)
 800167e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_I2C_MspInit+0x98>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	201f      	movs	r0, #31
 8001696:	f000 fa6c 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800169a:	201f      	movs	r0, #31
 800169c:	f000 fa85 	bl	8001baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020400 	.word	0x40020400

080016b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_UART_MspInit+0x84>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12b      	bne.n	800172e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_UART_MspInit+0x88>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_UART_MspInit+0x88>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_UART_MspInit+0x88>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <HAL_UART_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_UART_MspInit+0x88>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_UART_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800170e:	230c      	movs	r3, #12
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171e:	2307      	movs	r3, #7
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_UART_MspInit+0x8c>)
 800172a:	f000 fa89 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <NMI_Handler+0x4>

0800174a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <HardFault_Handler+0x4>

08001750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <MemManage_Handler+0x4>

08001756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <UsageFault_Handler+0x4>

08001762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001790:	f000 f8d0 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}

08001798 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <I2C1_EV_IRQHandler+0x10>)
 800179e:	f001 f887 	bl	80028b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000009c 	.word	0x2000009c

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f003 fe98 	bl	8005510 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20018000 	.word	0x20018000
 800180c:	00000400 	.word	0x00000400
 8001810:	20000090 	.word	0x20000090
 8001814:	20000190 	.word	0x20000190

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001842:	490e      	ldr	r1, [pc, #56]	; (800187c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001858:	4c0b      	ldr	r4, [pc, #44]	; (8001888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001866:	f7ff ffd7 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f003 fe57 	bl	800551c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff fcff 	bl	8001270 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001874:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001880:	08006398 	.word	0x08006398
  ldr r2, =_sbss
 8001884:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001888:	20000190 	.word	0x20000190

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_Init+0x40>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_Init+0x40>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x40>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f94f 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f808 	bl	80018d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff fe7e 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_InitTick+0x54>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x58>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f967 	bl	8001bc6 <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f000 f92f 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x5c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000000 	.word	0x20000000
 800192c:	20000008 	.word	0x20000008
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008
 8001958:	2000017c 	.word	0x2000017c

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000017c 	.word	0x2000017c

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff ffee 	bl	800195c <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffde 	bl	800195c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	db0b      	blt.n	8001a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	f003 021f 	and.w	r2, r3, #31
 8001a38:	4907      	ldr	r1, [pc, #28]	; (8001a58 <__NVIC_EnableIRQ+0x38>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	2001      	movs	r0, #1
 8001a42:	fa00 f202 	lsl.w	r2, r0, r2
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	e000e100 	.word	0xe000e100

08001a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	6039      	str	r1, [r7, #0]
 8001a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	db0a      	blt.n	8001a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	490c      	ldr	r1, [pc, #48]	; (8001aa8 <__NVIC_SetPriority+0x4c>)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	0112      	lsls	r2, r2, #4
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a84:	e00a      	b.n	8001a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4908      	ldr	r1, [pc, #32]	; (8001aac <__NVIC_SetPriority+0x50>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3b04      	subs	r3, #4
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	761a      	strb	r2, [r3, #24]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000e100 	.word	0xe000e100
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f1c3 0307 	rsb	r3, r3, #7
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	bf28      	it	cs
 8001ace:	2304      	movcs	r3, #4
 8001ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	2b06      	cmp	r3, #6
 8001ad8:	d902      	bls.n	8001ae0 <NVIC_EncodePriority+0x30>
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3b03      	subs	r3, #3
 8001ade:	e000      	b.n	8001ae2 <NVIC_EncodePriority+0x32>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	4313      	orrs	r3, r2
         );
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff8e 	bl	8001a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff29 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff3e 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff8e 	bl	8001ab0 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5d 	bl	8001a5c <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff31 	bl	8001a20 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d004      	beq.n	8001bfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e00c      	b.n	8001c16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2205      	movs	r2, #5
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c30:	b2db      	uxtb	r3, r3
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e159      	b.n	8001f10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8148 	bne.w	8001f0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d005      	beq.n	8001c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d130      	bne.n	8001cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0201 	and.w	r2, r3, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d017      	beq.n	8001d30 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d123      	bne.n	8001d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a2 	beq.w	8001f0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de2:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_GPIO_Init+0x2ec>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a49      	ldr	r2, [pc, #292]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x202>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <HAL_GPIO_Init+0x2f4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x1fe>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x1fa>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_GPIO_Init+0x2fc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x1f6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_GPIO_Init+0x300>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x1f2>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e42:	2300      	movs	r3, #0
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f002 0203 	and.w	r2, r2, #3
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_GPIO_Init+0x2ec>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e86:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eda:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	f67f aea2 	bls.w	8001c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e001      	b.n	8001f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fbc:	887a      	ldrh	r2, [r7, #2]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	041a      	lsls	r2, r3, #16
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	400b      	ands	r3, r1
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e12b      	b.n	800224a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fb04 	bl	8001614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002044:	f002 ff4a 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8002048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a81      	ldr	r2, [pc, #516]	; (8002254 <HAL_I2C_Init+0x274>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d807      	bhi.n	8002064 <HAL_I2C_Init+0x84>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a80      	ldr	r2, [pc, #512]	; (8002258 <HAL_I2C_Init+0x278>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e006      	b.n	8002072 <HAL_I2C_Init+0x92>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a7d      	ldr	r2, [pc, #500]	; (800225c <HAL_I2C_Init+0x27c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0e7      	b.n	800224a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a78      	ldr	r2, [pc, #480]	; (8002260 <HAL_I2C_Init+0x280>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <HAL_I2C_Init+0x274>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d802      	bhi.n	80020b4 <HAL_I2C_Init+0xd4>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	e009      	b.n	80020c8 <HAL_I2C_Init+0xe8>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a69      	ldr	r2, [pc, #420]	; (8002264 <HAL_I2C_Init+0x284>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	3301      	adds	r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	495c      	ldr	r1, [pc, #368]	; (8002254 <HAL_I2C_Init+0x274>)
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d819      	bhi.n	800211c <HAL_I2C_Init+0x13c>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e59      	subs	r1, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f6:	1c59      	adds	r1, r3, #1
 80020f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020fc:	400b      	ands	r3, r1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_I2C_Init+0x138>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	e051      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002118:	2304      	movs	r3, #4
 800211a:	e04f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <HAL_I2C_Init+0x168>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e012      	b.n	800216e <HAL_I2C_Init+0x18e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Init+0x196>
 8002172:	2301      	movs	r3, #1
 8002174:	e022      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10e      	bne.n	800219c <HAL_I2C_Init+0x1bc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e58      	subs	r0, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	440b      	add	r3, r1
 800218c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219a:	e00f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	0099      	lsls	r1, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	6809      	ldr	r1, [r1, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6911      	ldr	r1, [r2, #16]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	000186a0 	.word	0x000186a0
 8002258:	001e847f 	.word	0x001e847f
 800225c:	003d08ff 	.word	0x003d08ff
 8002260:	431bde83 	.word	0x431bde83
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	607a      	str	r2, [r7, #4]
 8002272:	461a      	mov	r2, r3
 8002274:	460b      	mov	r3, r1
 8002276:	817b      	strh	r3, [r7, #10]
 8002278:	4613      	mov	r3, r2
 800227a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff fb6e 	bl	800195c <HAL_GetTick>
 8002280:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	f040 80e0 	bne.w	8002450 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2319      	movs	r3, #25
 8002296:	2201      	movs	r2, #1
 8002298:	4970      	ldr	r1, [pc, #448]	; (800245c <HAL_I2C_Master_Transmit+0x1f4>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f001 ffa8 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
 80022a8:	e0d3      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_I2C_Master_Transmit+0x50>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e0cc      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d007      	beq.n	80022de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2221      	movs	r2, #33	; 0x21
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2210      	movs	r2, #16
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	893a      	ldrh	r2, [r7, #8]
 800230e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a50      	ldr	r2, [pc, #320]	; (8002460 <HAL_I2C_Master_Transmit+0x1f8>)
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002320:	8979      	ldrh	r1, [r7, #10]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f001 fd6a 	bl	8003e00 <I2C_MasterRequestWrite>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e08d      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800234c:	e066      	b.n	800241c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	6a39      	ldr	r1, [r7, #32]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f002 f822 	bl	800439c <I2C_WaitOnTXEFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	2b04      	cmp	r3, #4
 8002364:	d107      	bne.n	8002376 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d11b      	bne.n	80023f0 <HAL_I2C_Master_Transmit+0x188>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d017      	beq.n	80023f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	6a39      	ldr	r1, [r7, #32]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f002 f812 	bl	800441e <I2C_WaitOnBTFFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	2b04      	cmp	r3, #4
 8002406:	d107      	bne.n	8002418 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002416:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e01a      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d194      	bne.n	800234e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	00100002 	.word	0x00100002
 8002460:	ffff0000 	.word	0xffff0000

08002464 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	461a      	mov	r2, r3
 8002470:	460b      	mov	r3, r1
 8002472:	817b      	strh	r3, [r7, #10]
 8002474:	4613      	mov	r3, r2
 8002476:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff fa70 	bl	800195c <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b20      	cmp	r3, #32
 8002488:	f040 820b 	bne.w	80028a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2319      	movs	r3, #25
 8002492:	2201      	movs	r2, #1
 8002494:	497c      	ldr	r1, [pc, #496]	; (8002688 <HAL_I2C_Master_Receive+0x224>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f001 feaa 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
 80024a4:	e1fe      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2C_Master_Receive+0x50>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e1f7      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d007      	beq.n	80024da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2222      	movs	r2, #34	; 0x22
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2210      	movs	r2, #16
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	893a      	ldrh	r2, [r7, #8]
 800250a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a5c      	ldr	r2, [pc, #368]	; (800268c <HAL_I2C_Master_Receive+0x228>)
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f001 fcee 	bl	8003f04 <I2C_MasterRequestRead>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1b8      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e18c      	b.n	800287c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	2b01      	cmp	r3, #1
 8002568:	d11b      	bne.n	80025a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e16c      	b.n	800287c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d11b      	bne.n	80025e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	e14c      	b.n	800287c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002608:	e138      	b.n	800287c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b03      	cmp	r3, #3
 8002610:	f200 80f1 	bhi.w	80027f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b01      	cmp	r3, #1
 800261a:	d123      	bne.n	8002664 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f001 ff6f 	bl	8004504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e139      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002662:	e10b      	b.n	800287c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002668:	2b02      	cmp	r3, #2
 800266a:	d14e      	bne.n	800270a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	2200      	movs	r2, #0
 8002674:	4906      	ldr	r1, [pc, #24]	; (8002690 <HAL_I2C_Master_Receive+0x22c>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f001 fdba 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d008      	beq.n	8002694 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e10e      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
 8002686:	bf00      	nop
 8002688:	00100002 	.word	0x00100002
 800268c:	ffff0000 	.word	0xffff0000
 8002690:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691a      	ldr	r2, [r3, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002708:	e0b8      	b.n	800287c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	2200      	movs	r2, #0
 8002712:	4966      	ldr	r1, [pc, #408]	; (80028ac <HAL_I2C_Master_Receive+0x448>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f001 fd6b 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0bf      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	2200      	movs	r2, #0
 800276e:	494f      	ldr	r1, [pc, #316]	; (80028ac <HAL_I2C_Master_Receive+0x448>)
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f001 fd3d 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e091      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800278e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027f4:	e042      	b.n	800287c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f001 fe82 	bl	8004504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e04c      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d118      	bne.n	800287c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	f47f aec2 	bne.w	800260a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	00010004 	.word	0x00010004

080028b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d003      	beq.n	80028e8 <HAL_I2C_EV_IRQHandler+0x38>
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	f040 80bd 	bne.w	8002a62 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_I2C_EV_IRQHandler+0x6e>
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002908:	d003      	beq.n	8002912 <HAL_I2C_EV_IRQHandler+0x62>
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002910:	d101      	bne.n	8002916 <HAL_I2C_EV_IRQHandler+0x66>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_I2C_EV_IRQHandler+0x68>
 8002916:	2300      	movs	r3, #0
 8002918:	2b01      	cmp	r3, #1
 800291a:	f000 812e 	beq.w	8002b7a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00c      	beq.n	8002942 <HAL_I2C_EV_IRQHandler+0x92>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	0a5b      	lsrs	r3, r3, #9
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f001 fe6a 	bl	800460e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fcbb 	bl	80032b6 <I2C_Master_SB>
 8002940:	e08e      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	08db      	lsrs	r3, r3, #3
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_I2C_EV_IRQHandler+0xb2>
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	0a5b      	lsrs	r3, r3, #9
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fd31 	bl	80033c2 <I2C_Master_ADD10>
 8002960:	e07e      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_I2C_EV_IRQHandler+0xd2>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	0a5b      	lsrs	r3, r3, #9
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fd4b 	bl	8003416 <I2C_Master_ADDR>
 8002980:	e06e      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d037      	beq.n	80029fe <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	f000 80ef 	beq.w	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	09db      	lsrs	r3, r3, #7
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00f      	beq.n	80029cc <HAL_I2C_EV_IRQHandler+0x11c>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	0a9b      	lsrs	r3, r3, #10
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_I2C_EV_IRQHandler+0x11c>
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f948 	bl	8002c5a <I2C_MasterTransmit_TXE>
 80029ca:	e049      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80d2 	beq.w	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	0a5b      	lsrs	r3, r3, #9
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80cb 	beq.w	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d103      	bne.n	80029f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f9cf 	bl	8002d92 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f4:	e0c3      	b.n	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa33 	bl	8002e62 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029fc:	e0bf      	b.n	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0c:	f000 80b7 	beq.w	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00f      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x18c>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	0a9b      	lsrs	r3, r3, #10
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_I2C_EV_IRQHandler+0x18c>
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	089b      	lsrs	r3, r3, #2
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d103      	bne.n	8002a3c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 faa3 	bl	8002f80 <I2C_MasterReceive_RXNE>
 8002a3a:	e011      	b.n	8002a60 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 809a 	beq.w	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	0a5b      	lsrs	r3, r3, #9
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 8093 	beq.w	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fb42 	bl	80030e2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a5e:	e08e      	b.n	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
 8002a60:	e08d      	b.n	8002b7e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e007      	b.n	8002a84 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d012      	beq.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x206>
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	0a5b      	lsrs	r3, r3, #9
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002aac:	69b9      	ldr	r1, [r7, #24]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 ff00 	bl	80038b4 <I2C_Slave_ADDR>
 8002ab4:	e066      	b.n	8002b84 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x226>
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	0a5b      	lsrs	r3, r3, #9
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 ff34 	bl	800393c <I2C_Slave_STOPF>
 8002ad4:	e056      	b.n	8002b84 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ad6:	7bbb      	ldrb	r3, [r7, #14]
 8002ad8:	2b21      	cmp	r3, #33	; 0x21
 8002ada:	d002      	beq.n	8002ae2 <HAL_I2C_EV_IRQHandler+0x232>
 8002adc:	7bbb      	ldrb	r3, [r7, #14]
 8002ade:	2b29      	cmp	r3, #41	; 0x29
 8002ae0:	d125      	bne.n	8002b2e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	09db      	lsrs	r3, r3, #7
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00f      	beq.n	8002b0e <HAL_I2C_EV_IRQHandler+0x25e>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	0a9b      	lsrs	r3, r3, #10
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_I2C_EV_IRQHandler+0x25e>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fe16 	bl	8003738 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b0c:	e039      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d033      	beq.n	8002b82 <HAL_I2C_EV_IRQHandler+0x2d2>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	0a5b      	lsrs	r3, r3, #9
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d02d      	beq.n	8002b82 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fe43 	bl	80037b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b2c:	e029      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	099b      	lsrs	r3, r3, #6
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00f      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x2aa>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	0a9b      	lsrs	r3, r3, #10
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_I2C_EV_IRQHandler+0x2aa>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	089b      	lsrs	r3, r3, #2
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fe4e 	bl	80037f4 <I2C_SlaveReceive_RXNE>
 8002b58:	e014      	b.n	8002b84 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00e      	beq.n	8002b84 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	0a5b      	lsrs	r3, r3, #9
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fe7c 	bl	8003870 <I2C_SlaveReceive_BTF>
 8002b78:	e004      	b.n	8002b84 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8002b7a:	bf00      	nop
 8002b7c:	e002      	b.n	8002b84 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	70fb      	strb	r3, [r7, #3]
 8002be6:	4613      	mov	r3, r2
 8002be8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c70:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d150      	bne.n	8002d22 <I2C_MasterTransmit_TXE+0xc8>
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b21      	cmp	r3, #33	; 0x21
 8002c84:	d14d      	bne.n	8002d22 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d01d      	beq.n	8002cc8 <I2C_MasterTransmit_TXE+0x6e>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d01a      	beq.n	8002cc8 <I2C_MasterTransmit_TXE+0x6e>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c98:	d016      	beq.n	8002cc8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ca8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2211      	movs	r2, #17
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff62 	bl	8002b8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002cc6:	e060      	b.n	8002d8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cd6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b40      	cmp	r3, #64	; 0x40
 8002d00:	d107      	bne.n	8002d12 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ff7d 	bl	8002c0a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d10:	e03b      	b.n	8002d8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ff35 	bl	8002b8a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d20:	e033      	b.n	8002d8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2b21      	cmp	r3, #33	; 0x21
 8002d26:	d005      	beq.n	8002d34 <I2C_MasterTransmit_TXE+0xda>
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d12d      	bne.n	8002d8a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b22      	cmp	r3, #34	; 0x22
 8002d32:	d12a      	bne.n	8002d8a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002d4e:	e01c      	b.n	8002d8a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d103      	bne.n	8002d64 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f880 	bl	8002e62 <I2C_MemoryTransmit_TXE_BTF>
}
 8002d62:	e012      	b.n	8002d8a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d88:	e7ff      	b.n	8002d8a <I2C_MasterTransmit_TXE+0x130>
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b21      	cmp	r3, #33	; 0x21
 8002daa:	d156      	bne.n	8002e5a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d012      	beq.n	8002ddc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002dda:	e03e      	b.n	8002e5a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d01d      	beq.n	8002e1e <I2C_MasterTransmit_BTF+0x8c>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d01a      	beq.n	8002e1e <I2C_MasterTransmit_BTF+0x8c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dee:	d016      	beq.n	8002e1e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dfe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2211      	movs	r2, #17
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff feb7 	bl	8002b8a <HAL_I2C_MasterTxCpltCallback>
}
 8002e1c:	e01d      	b.n	8002e5a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e2c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff fe98 	bl	8002b8a <HAL_I2C_MasterTxCpltCallback>
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d11d      	bne.n	8002eb6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10b      	bne.n	8002e9a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e92:	1c9a      	adds	r2, r3, #2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002e98:	e06e      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	121b      	asrs	r3, r3, #8
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002eb4:	e060      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d10b      	bne.n	8002ed6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ed4:	e050      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d14c      	bne.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b22      	cmp	r3, #34	; 0x22
 8002ee2:	d108      	bne.n	8002ef6 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef2:	601a      	str	r2, [r3, #0]
}
 8002ef4:	e040      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b21      	cmp	r3, #33	; 0x21
 8002f04:	d112      	bne.n	8002f2c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f2a:	e025      	b.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d120      	bne.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
 8002f38:	2b21      	cmp	r3, #33	; 0x21
 8002f3a:	d11d      	bne.n	8002f78 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f4a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fe49 	bl	8002c0a <HAL_I2C_MemTxCpltCallback>
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b22      	cmp	r3, #34	; 0x22
 8002f92:	f040 80a2 	bne.w	80030da <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d921      	bls.n	8002fe8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	f040 8082 	bne.w	80030da <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002fe6:	e078      	b.n	80030da <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d074      	beq.n	80030da <I2C_MasterReceive_RXNE+0x15a>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d002      	beq.n	8002ffc <I2C_MasterReceive_RXNE+0x7c>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d16e      	bne.n	80030da <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f001 fa4f 	bl	80044a0 <I2C_WaitOnSTOPRequestThroughIT>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d142      	bne.n	800308e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003016:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003026:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b40      	cmp	r3, #64	; 0x40
 8003060:	d10a      	bne.n	8003078 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff fdd4 	bl	8002c1e <HAL_I2C_MemRxCpltCallback>
}
 8003076:	e030      	b.n	80030da <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2212      	movs	r2, #18
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff fd89 	bl	8002b9e <HAL_I2C_MasterRxCpltCallback>
}
 800308c:	e025      	b.n	80030da <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800309c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fdac 	bl	8002c32 <HAL_I2C_ErrorCallback>
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d11b      	bne.n	8003132 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003130:	e0bd      	b.n	80032ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b03      	cmp	r3, #3
 800313a:	d129      	bne.n	8003190 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00a      	beq.n	8003168 <I2C_MasterReceive_BTF+0x86>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d007      	beq.n	8003168 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003166:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800318e:	e08e      	b.n	80032ae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d176      	bne.n	8003288 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <I2C_MasterReceive_BTF+0xc4>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d108      	bne.n	80031b8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e019      	b.n	80031ec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d002      	beq.n	80031c4 <I2C_MasterReceive_BTF+0xe2>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d108      	bne.n	80031d6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e00a      	b.n	80031ec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d007      	beq.n	80031ec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003246:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d10a      	bne.n	8003272 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fcd7 	bl	8002c1e <HAL_I2C_MemRxCpltCallback>
}
 8003270:	e01d      	b.n	80032ae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2212      	movs	r2, #18
 800327e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fc8c 	bl	8002b9e <HAL_I2C_MasterRxCpltCallback>
}
 8003286:	e012      	b.n	80032ae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032ae:	bf00      	nop
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d117      	bne.n	80032fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80032e4:	e067      	b.n	80033b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f043 0301 	orr.w	r3, r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]
}
 80032f8:	e05d      	b.n	80033b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003302:	d133      	bne.n	800336c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b21      	cmp	r3, #33	; 0x21
 800330e:	d109      	bne.n	8003324 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003320:	611a      	str	r2, [r3, #16]
 8003322:	e008      	b.n	8003336 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <I2C_Master_SB+0x92>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	2b00      	cmp	r3, #0
 800334e:	d032      	beq.n	80033b6 <I2C_Master_SB+0x100>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d02d      	beq.n	80033b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003368:	605a      	str	r2, [r3, #4]
}
 800336a:	e024      	b.n	80033b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10e      	bne.n	8003392 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	b29b      	uxth	r3, r3
 800337a:	11db      	asrs	r3, r3, #7
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0306 	and.w	r3, r3, #6
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f063 030f 	orn	r3, r3, #15
 8003388:	b2da      	uxtb	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]
}
 8003390:	e011      	b.n	80033b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10d      	bne.n	80033b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	b29b      	uxth	r3, r3
 80033a0:	11db      	asrs	r3, r3, #7
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 0306 	and.w	r3, r3, #6
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f063 030e 	orn	r3, r3, #14
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <I2C_Master_ADD10+0x26>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <I2C_Master_ADD10+0x48>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003408:	605a      	str	r2, [r3, #4]
  }
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003416:	b480      	push	{r7}
 8003418:	b091      	sub	sp, #68	; 0x44
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b22      	cmp	r3, #34	; 0x22
 800343e:	f040 8169 	bne.w	8003714 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <I2C_Master_ADDR+0x54>
 800344a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d10b      	bne.n	800346a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003452:	2300      	movs	r3, #0
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	633b      	str	r3, [r7, #48]	; 0x30
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	e160      	b.n	800372c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	d11d      	bne.n	80034ae <I2C_Master_ADDR+0x98>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800347a:	d118      	bne.n	80034ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347c:	2300      	movs	r3, #0
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003490:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	651a      	str	r2, [r3, #80]	; 0x50
 80034ac:	e13e      	b.n	800372c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d113      	bne.n	80034e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b8:	2300      	movs	r3, #0
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e115      	b.n	800370c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 808a 	bne.w	8003600 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034f2:	d137      	bne.n	8003564 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003502:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d113      	bne.n	800353c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003522:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003524:	2300      	movs	r3, #0
 8003526:	627b      	str	r3, [r7, #36]	; 0x24
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	e0e7      	b.n	800370c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353c:	2300      	movs	r3, #0
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	623b      	str	r3, [r7, #32]
 8003550:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e0d3      	b.n	800370c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	2b08      	cmp	r3, #8
 8003568:	d02e      	beq.n	80035c8 <I2C_Master_ADDR+0x1b2>
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2b20      	cmp	r3, #32
 800356e:	d02b      	beq.n	80035c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003572:	2b12      	cmp	r3, #18
 8003574:	d102      	bne.n	800357c <I2C_Master_ADDR+0x166>
 8003576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003578:	2b01      	cmp	r3, #1
 800357a:	d125      	bne.n	80035c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800357c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357e:	2b04      	cmp	r3, #4
 8003580:	d00e      	beq.n	80035a0 <I2C_Master_ADDR+0x18a>
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	2b02      	cmp	r3, #2
 8003586:	d00b      	beq.n	80035a0 <I2C_Master_ADDR+0x18a>
 8003588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358a:	2b10      	cmp	r3, #16
 800358c:	d008      	beq.n	80035a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e007      	b.n	80035b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	e0a1      	b.n	800370c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e085      	b.n	800370c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d14d      	bne.n	80036a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	2b04      	cmp	r3, #4
 800360e:	d016      	beq.n	800363e <I2C_Master_ADDR+0x228>
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	2b02      	cmp	r3, #2
 8003614:	d013      	beq.n	800363e <I2C_Master_ADDR+0x228>
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	2b10      	cmp	r3, #16
 800361a:	d010      	beq.n	800363e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e007      	b.n	800364e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800364c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365c:	d117      	bne.n	800368e <I2C_Master_ADDR+0x278>
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003664:	d00b      	beq.n	800367e <I2C_Master_ADDR+0x268>
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b01      	cmp	r3, #1
 800366a:	d008      	beq.n	800367e <I2C_Master_ADDR+0x268>
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b08      	cmp	r3, #8
 8003670:	d005      	beq.n	800367e <I2C_Master_ADDR+0x268>
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b10      	cmp	r3, #16
 8003676:	d002      	beq.n	800367e <I2C_Master_ADDR+0x268>
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b20      	cmp	r3, #32
 800367c:	d107      	bne.n	800368e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800368c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	e032      	b.n	800370c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c4:	d117      	bne.n	80036f6 <I2C_Master_ADDR+0x2e0>
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036cc:	d00b      	beq.n	80036e6 <I2C_Master_ADDR+0x2d0>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d008      	beq.n	80036e6 <I2C_Master_ADDR+0x2d0>
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d005      	beq.n	80036e6 <I2C_Master_ADDR+0x2d0>
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d002      	beq.n	80036e6 <I2C_Master_ADDR+0x2d0>
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d107      	bne.n	80036f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003712:	e00b      	b.n	800372c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
}
 800372a:	e7ff      	b.n	800372c <I2C_Master_ADDR+0x316>
 800372c:	bf00      	nop
 800372e:	3744      	adds	r7, #68	; 0x44
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02b      	beq.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d114      	bne.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b29      	cmp	r3, #41	; 0x29
 8003784:	d111      	bne.n	80037aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003794:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2228      	movs	r2, #40	; 0x28
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fa04 	bl	8002bb2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d011      	beq.n	80037e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003802:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02c      	beq.n	8003868 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d114      	bne.n	8003868 <I2C_SlaveReceive_RXNE+0x74>
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b2a      	cmp	r3, #42	; 0x2a
 8003842:	d111      	bne.n	8003868 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003852:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2222      	movs	r2, #34	; 0x22
 8003858:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2228      	movs	r2, #40	; 0x28
 800385e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff f9af 	bl	8002bc6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d012      	beq.n	80038a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80038be:	2300      	movs	r3, #0
 80038c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038ce:	2b28      	cmp	r3, #40	; 0x28
 80038d0:	d127      	bne.n	8003922 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	09db      	lsrs	r3, r3, #7
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	81bb      	strh	r3, [r7, #12]
 8003904:	e002      	b.n	800390c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003914:	89ba      	ldrh	r2, [r7, #12]
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	4619      	mov	r1, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff f95d 	bl	8002bda <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003920:	e008      	b.n	8003934 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f06f 0202 	mvn.w	r2, #2
 800392a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800395a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800395c:	2300      	movs	r3, #0
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003988:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003998:	d172      	bne.n	8003a80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	2b22      	cmp	r3, #34	; 0x22
 800399e:	d002      	beq.n	80039a6 <I2C_Slave_STOPF+0x6a>
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b2a      	cmp	r3, #42	; 0x2a
 80039a4:	d135      	bne.n	8003a12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f043 0204 	orr.w	r2, r3, #4
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe f91f 	bl	8001c22 <HAL_DMA_GetState>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d049      	beq.n	8003a7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	4a69      	ldr	r2, [pc, #420]	; (8003b94 <I2C_Slave_STOPF+0x258>)
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe f8f1 	bl	8001bde <HAL_DMA_Abort_IT>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d03d      	beq.n	8003a7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a10:	e035      	b.n	8003a7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fe f8e9 	bl	8001c22 <HAL_DMA_GetState>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d014      	beq.n	8003a80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	4a4e      	ldr	r2, [pc, #312]	; (8003b94 <I2C_Slave_STOPF+0x258>)
 8003a5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe f8bb 	bl	8001bde <HAL_DMA_Abort_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4798      	blx	r3
 8003a7c:	e000      	b.n	8003a80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03e      	beq.n	8003b08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d112      	bne.n	8003abe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d112      	bne.n	8003af2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	f043 0204 	orr.w	r2, r3, #4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f843 	bl	8003b9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b16:	e039      	b.n	8003b8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b1c:	d109      	bne.n	8003b32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2228      	movs	r2, #40	; 0x28
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff f84a 	bl	8002bc6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b28      	cmp	r3, #40	; 0x28
 8003b3c:	d111      	bne.n	8003b62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <I2C_Slave_STOPF+0x25c>)
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff f84b 	bl	8002bf6 <HAL_I2C_ListenCpltCallback>
}
 8003b60:	e014      	b.n	8003b8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	2b22      	cmp	r3, #34	; 0x22
 8003b68:	d002      	beq.n	8003b70 <I2C_Slave_STOPF+0x234>
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2b22      	cmp	r3, #34	; 0x22
 8003b6e:	d10d      	bne.n	8003b8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff f81d 	bl	8002bc6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	080040a1 	.word	0x080040a1
 8003b98:	ffff0000 	.word	0xffff0000

08003b9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003baa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d002      	beq.n	8003bc0 <I2C_ITError+0x24>
 8003bba:	7bbb      	ldrb	r3, [r7, #14]
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d10a      	bne.n	8003bd6 <I2C_ITError+0x3a>
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b22      	cmp	r3, #34	; 0x22
 8003bc4:	d107      	bne.n	8003bd6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bdc:	2b28      	cmp	r3, #40	; 0x28
 8003bde:	d107      	bne.n	8003bf0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2228      	movs	r2, #40	; 0x28
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003bee:	e015      	b.n	8003c1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfe:	d00a      	beq.n	8003c16 <I2C_ITError+0x7a>
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
 8003c02:	2b60      	cmp	r3, #96	; 0x60
 8003c04:	d007      	beq.n	8003c16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2a:	d162      	bne.n	8003cf2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d020      	beq.n	8003c8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	4a6a      	ldr	r2, [pc, #424]	; (8003df8 <I2C_ITError+0x25c>)
 8003c50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd ffc1 	bl	8001bde <HAL_DMA_Abort_IT>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8089 	beq.w	8003d76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c86:	4610      	mov	r0, r2
 8003c88:	4798      	blx	r3
 8003c8a:	e074      	b.n	8003d76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	4a59      	ldr	r2, [pc, #356]	; (8003df8 <I2C_ITError+0x25c>)
 8003c92:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd ffa0 	bl	8001bde <HAL_DMA_Abort_IT>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d068      	beq.n	8003d76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d10b      	bne.n	8003cca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cec:	4610      	mov	r0, r2
 8003cee:	4798      	blx	r3
 8003cf0:	e041      	b.n	8003d76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b60      	cmp	r3, #96	; 0x60
 8003cfc:	d125      	bne.n	8003d4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d10b      	bne.n	8003d32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fe ff7f 	bl	8002c46 <HAL_I2C_AbortCpltCallback>
 8003d48:	e015      	b.n	8003d76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	d10b      	bne.n	8003d70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fe ff5e 	bl	8002c32 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10e      	bne.n	8003da4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003db2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d113      	bne.n	8003df0 <I2C_ITError+0x254>
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	2b28      	cmp	r3, #40	; 0x28
 8003dcc:	d110      	bne.n	8003df0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	; (8003dfc <I2C_ITError+0x260>)
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe ff03 	bl	8002bf6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	080040a1 	.word	0x080040a1
 8003dfc:	ffff0000 	.word	0xffff0000

08003e00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d006      	beq.n	8003e2a <I2C_MasterRequestWrite+0x2a>
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d003      	beq.n	8003e2a <I2C_MasterRequestWrite+0x2a>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e28:	d108      	bne.n	8003e3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e00b      	b.n	8003e54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	2b12      	cmp	r3, #18
 8003e42:	d107      	bne.n	8003e54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f9c5 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00d      	beq.n	8003e88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7a:	d103      	bne.n	8003e84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e035      	b.n	8003ef4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e90:	d108      	bne.n	8003ea4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e92:	897b      	ldrh	r3, [r7, #10]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ea0:	611a      	str	r2, [r3, #16]
 8003ea2:	e01b      	b.n	8003edc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ea4:	897b      	ldrh	r3, [r7, #10]
 8003ea6:	11db      	asrs	r3, r3, #7
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 0306 	and.w	r3, r3, #6
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f063 030f 	orn	r3, r3, #15
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	490e      	ldr	r1, [pc, #56]	; (8003efc <I2C_MasterRequestWrite+0xfc>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f9eb 	bl	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e010      	b.n	8003ef4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4907      	ldr	r1, [pc, #28]	; (8003f00 <I2C_MasterRequestWrite+0x100>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f9db 	bl	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	00010008 	.word	0x00010008
 8003f00:	00010002 	.word	0x00010002

08003f04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b088      	sub	sp, #32
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	460b      	mov	r3, r1
 8003f12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d006      	beq.n	8003f3e <I2C_MasterRequestRead+0x3a>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d003      	beq.n	8003f3e <I2C_MasterRequestRead+0x3a>
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f3c:	d108      	bne.n	8003f50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e00b      	b.n	8003f68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	2b11      	cmp	r3, #17
 8003f56:	d107      	bne.n	8003f68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f93b 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00d      	beq.n	8003f9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8e:	d103      	bne.n	8003f98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e079      	b.n	8004090 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa4:	d108      	bne.n	8003fb8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fa6:	897b      	ldrh	r3, [r7, #10]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	611a      	str	r2, [r3, #16]
 8003fb6:	e05f      	b.n	8004078 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fb8:	897b      	ldrh	r3, [r7, #10]
 8003fba:	11db      	asrs	r3, r3, #7
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f003 0306 	and.w	r3, r3, #6
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	f063 030f 	orn	r3, r3, #15
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4930      	ldr	r1, [pc, #192]	; (8004098 <I2C_MasterRequestRead+0x194>)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f961 	bl	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e054      	b.n	8004090 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4929      	ldr	r1, [pc, #164]	; (800409c <I2C_MasterRequestRead+0x198>)
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f951 	bl	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e044      	b.n	8004090 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f8d9 	bl	80041f0 <I2C_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004052:	d103      	bne.n	800405c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e017      	b.n	8004090 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004060:	897b      	ldrh	r3, [r7, #10]
 8004062:	11db      	asrs	r3, r3, #7
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0306 	and.w	r3, r3, #6
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f063 030e 	orn	r3, r3, #14
 8004070:	b2da      	uxtb	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4907      	ldr	r1, [pc, #28]	; (800409c <I2C_MasterRequestRead+0x198>)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f90d 	bl	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	00010008 	.word	0x00010008
 800409c:	00010002 	.word	0x00010002

080040a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040ba:	4b4b      	ldr	r3, [pc, #300]	; (80041e8 <I2C_DMAAbort+0x148>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	08db      	lsrs	r3, r3, #3
 80040c0:	4a4a      	ldr	r2, [pc, #296]	; (80041ec <I2C_DMAAbort+0x14c>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0a1a      	lsrs	r2, r3, #8
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00da      	lsls	r2, r3, #3
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80040e6:	e00a      	b.n	80040fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fc:	d0ea      	beq.n	80040d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	2200      	movs	r2, #0
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	2200      	movs	r2, #0
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	2200      	movs	r2, #0
 8004142:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	2200      	movs	r2, #0
 8004152:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d10e      	bne.n	800418e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004186:	6978      	ldr	r0, [r7, #20]
 8004188:	f7fe fd5d 	bl	8002c46 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800418c:	e027      	b.n	80041de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004194:	2b28      	cmp	r3, #40	; 0x28
 8004196:	d117      	bne.n	80041c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2228      	movs	r2, #40	; 0x28
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041c6:	e007      	b.n	80041d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f7fe fd2a 	bl	8002c32 <HAL_I2C_ErrorCallback>
}
 80041de:	bf00      	nop
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000000 	.word	0x20000000
 80041ec:	14f8b589 	.word	0x14f8b589

080041f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004200:	e025      	b.n	800424e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d021      	beq.n	800424e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420a:	f7fd fba7 	bl	800195c <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d302      	bcc.n	8004220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d116      	bne.n	800424e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e023      	b.n	8004296 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10d      	bne.n	8004274 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	e00c      	b.n	800428e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	429a      	cmp	r2, r3
 8004292:	d0b6      	beq.n	8004202 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ac:	e051      	b.n	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042bc:	d123      	bne.n	8004306 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0204 	orr.w	r2, r3, #4
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e046      	b.n	8004394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d021      	beq.n	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fd fb25 	bl	800195c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d116      	bne.n	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f043 0220 	orr.w	r2, r3, #32
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e020      	b.n	8004394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d10c      	bne.n	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	43da      	mvns	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	bf14      	ite	ne
 800436e:	2301      	movne	r3, #1
 8004370:	2300      	moveq	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	e00b      	b.n	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	43da      	mvns	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4013      	ands	r3, r2
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d18d      	bne.n	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a8:	e02d      	b.n	8004406 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 f900 	bl	80045b0 <I2C_IsAcknowledgeFailed>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e02d      	b.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d021      	beq.n	8004406 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fd facb 	bl	800195c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d116      	bne.n	8004406 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e007      	b.n	8004416 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004410:	2b80      	cmp	r3, #128	; 0x80
 8004412:	d1ca      	bne.n	80043aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442a:	e02d      	b.n	8004488 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f8bf 	bl	80045b0 <I2C_IsAcknowledgeFailed>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e02d      	b.n	8004498 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d021      	beq.n	8004488 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004444:	f7fd fa8a 	bl	800195c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	d302      	bcc.n	800445a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f043 0220 	orr.w	r2, r3, #32
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e007      	b.n	8004498 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d1ca      	bne.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	08db      	lsrs	r3, r3, #3
 80044b2:	4a13      	ldr	r2, [pc, #76]	; (8004500 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	0a1a      	lsrs	r2, r3, #8
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3b01      	subs	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e008      	b.n	80044f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ec:	d0e9      	beq.n	80044c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20000000 	.word	0x20000000
 8004500:	14f8b589 	.word	0x14f8b589

08004504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004510:	e042      	b.n	8004598 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d119      	bne.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0210 	mvn.w	r2, #16
 8004528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e029      	b.n	80045a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004554:	f7fd fa02 	bl	800195c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	d302      	bcc.n	800456a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d116      	bne.n	8004598 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e007      	b.n	80045a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d1b5      	bne.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c6:	d11b      	bne.n	8004600 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	f043 0204 	orr.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800461e:	d103      	bne.n	8004628 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004626:	e007      	b.n	8004638 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004630:	d102      	bne.n	8004638 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2208      	movs	r2, #8
 8004636:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e264      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d075      	beq.n	800474e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004662:	4ba3      	ldr	r3, [pc, #652]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b04      	cmp	r3, #4
 800466c:	d00c      	beq.n	8004688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466e:	4ba0      	ldr	r3, [pc, #640]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004676:	2b08      	cmp	r3, #8
 8004678:	d112      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467a:	4b9d      	ldr	r3, [pc, #628]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004686:	d10b      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	4b99      	ldr	r3, [pc, #612]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05b      	beq.n	800474c <HAL_RCC_OscConfig+0x108>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d157      	bne.n	800474c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e23f      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d106      	bne.n	80046b8 <HAL_RCC_OscConfig+0x74>
 80046aa:	4b91      	ldr	r3, [pc, #580]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a90      	ldr	r2, [pc, #576]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e01d      	b.n	80046f4 <HAL_RCC_OscConfig+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0x98>
 80046c2:	4b8b      	ldr	r3, [pc, #556]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a8a      	ldr	r2, [pc, #552]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b88      	ldr	r3, [pc, #544]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a87      	ldr	r2, [pc, #540]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0xb0>
 80046dc:	4b84      	ldr	r3, [pc, #528]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a83      	ldr	r2, [pc, #524]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b81      	ldr	r3, [pc, #516]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a80      	ldr	r2, [pc, #512]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd f92e 	bl	800195c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd f92a 	bl	800195c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e204      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	4b76      	ldr	r3, [pc, #472]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0xc0>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fd f91a 	bl	800195c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd f916 	bl	800195c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1f0      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	4b6c      	ldr	r3, [pc, #432]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0xe8>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d063      	beq.n	8004822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475a:	4b65      	ldr	r3, [pc, #404]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004766:	4b62      	ldr	r3, [pc, #392]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476e:	2b08      	cmp	r3, #8
 8004770:	d11c      	bne.n	80047ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004772:	4b5f      	ldr	r3, [pc, #380]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d116      	bne.n	80047ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477e:	4b5c      	ldr	r3, [pc, #368]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_RCC_OscConfig+0x152>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e1c4      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	4b56      	ldr	r3, [pc, #344]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4952      	ldr	r1, [pc, #328]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	e03a      	b.n	8004822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b4:	4b4f      	ldr	r3, [pc, #316]	; (80048f4 <HAL_RCC_OscConfig+0x2b0>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fd f8cf 	bl	800195c <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c2:	f7fd f8cb 	bl	800195c <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e1a5      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	4b46      	ldr	r3, [pc, #280]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e0:	4b43      	ldr	r3, [pc, #268]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4940      	ldr	r1, [pc, #256]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f6:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <HAL_RCC_OscConfig+0x2b0>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fd f8ae 	bl	800195c <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004804:	f7fd f8aa 	bl	800195c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e184      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d030      	beq.n	8004890 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004836:	4b30      	ldr	r3, [pc, #192]	; (80048f8 <HAL_RCC_OscConfig+0x2b4>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fd f88e 	bl	800195c <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004844:	f7fd f88a 	bl	800195c <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e164      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0x200>
 8004862:	e015      	b.n	8004890 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <HAL_RCC_OscConfig+0x2b4>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486a:	f7fd f877 	bl	800195c <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004872:	f7fd f873 	bl	800195c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e14d      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004884:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 8004886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f0      	bne.n	8004872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a0 	beq.w	80049de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a2:	4b13      	ldr	r3, [pc, #76]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10f      	bne.n	80048ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6413      	str	r3, [r2, #64]	; 0x40
 80048be:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ca:	2301      	movs	r3, #1
 80048cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ce:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_RCC_OscConfig+0x2b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d121      	bne.n	800491e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCC_OscConfig+0x2b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a07      	ldr	r2, [pc, #28]	; (80048fc <HAL_RCC_OscConfig+0x2b8>)
 80048e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e6:	f7fd f839 	bl	800195c <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	e011      	b.n	8004912 <HAL_RCC_OscConfig+0x2ce>
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	42470000 	.word	0x42470000
 80048f8:	42470e80 	.word	0x42470e80
 80048fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004900:	f7fd f82c 	bl	800195c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e106      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004912:	4b85      	ldr	r3, [pc, #532]	; (8004b28 <HAL_RCC_OscConfig+0x4e4>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x2f0>
 8004926:	4b81      	ldr	r3, [pc, #516]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	4a80      	ldr	r2, [pc, #512]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6713      	str	r3, [r2, #112]	; 0x70
 8004932:	e01c      	b.n	800496e <HAL_RCC_OscConfig+0x32a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	2b05      	cmp	r3, #5
 800493a:	d10c      	bne.n	8004956 <HAL_RCC_OscConfig+0x312>
 800493c:	4b7b      	ldr	r3, [pc, #492]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 800493e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004940:	4a7a      	ldr	r2, [pc, #488]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004942:	f043 0304 	orr.w	r3, r3, #4
 8004946:	6713      	str	r3, [r2, #112]	; 0x70
 8004948:	4b78      	ldr	r3, [pc, #480]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a77      	ldr	r2, [pc, #476]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
 8004954:	e00b      	b.n	800496e <HAL_RCC_OscConfig+0x32a>
 8004956:	4b75      	ldr	r3, [pc, #468]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	4a74      	ldr	r2, [pc, #464]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	6713      	str	r3, [r2, #112]	; 0x70
 8004962:	4b72      	ldr	r3, [pc, #456]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a71      	ldr	r2, [pc, #452]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d015      	beq.n	80049a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fc fff1 	bl	800195c <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497c:	e00a      	b.n	8004994 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497e:	f7fc ffed 	bl	800195c <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f241 3288 	movw	r2, #5000	; 0x1388
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e0c5      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	4b65      	ldr	r3, [pc, #404]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0ee      	beq.n	800497e <HAL_RCC_OscConfig+0x33a>
 80049a0:	e014      	b.n	80049cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a2:	f7fc ffdb 	bl	800195c <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a8:	e00a      	b.n	80049c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049aa:	f7fc ffd7 	bl	800195c <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e0af      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c0:	4b5a      	ldr	r3, [pc, #360]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1ee      	bne.n	80049aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049cc:	7dfb      	ldrb	r3, [r7, #23]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d2:	4b56      	ldr	r3, [pc, #344]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	4a55      	ldr	r2, [pc, #340]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 80049d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 809b 	beq.w	8004b1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e8:	4b50      	ldr	r3, [pc, #320]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d05c      	beq.n	8004aae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d141      	bne.n	8004a80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fc:	4b4c      	ldr	r3, [pc, #304]	; (8004b30 <HAL_RCC_OscConfig+0x4ec>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fc ffab 	bl	800195c <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fc ffa7 	bl	800195c <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e081      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1c:	4b43      	ldr	r3, [pc, #268]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	019b      	lsls	r3, r3, #6
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	3b01      	subs	r3, #1
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	4937      	ldr	r1, [pc, #220]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a52:	4b37      	ldr	r3, [pc, #220]	; (8004b30 <HAL_RCC_OscConfig+0x4ec>)
 8004a54:	2201      	movs	r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fc ff80 	bl	800195c <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fc ff7c 	bl	800195c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e056      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a72:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x41c>
 8004a7e:	e04e      	b.n	8004b1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a80:	4b2b      	ldr	r3, [pc, #172]	; (8004b30 <HAL_RCC_OscConfig+0x4ec>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a86:	f7fc ff69 	bl	800195c <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a8e:	f7fc ff65 	bl	800195c <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e03f      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa0:	4b22      	ldr	r3, [pc, #136]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f0      	bne.n	8004a8e <HAL_RCC_OscConfig+0x44a>
 8004aac:	e037      	b.n	8004b1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e032      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aba:	4b1c      	ldr	r3, [pc, #112]	; (8004b2c <HAL_RCC_OscConfig+0x4e8>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d028      	beq.n	8004b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d121      	bne.n	8004b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d11a      	bne.n	8004b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aea:	4013      	ands	r3, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d111      	bne.n	8004b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	3b01      	subs	r3, #1
 8004b04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d107      	bne.n	8004b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d001      	beq.n	8004b1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	42470060 	.word	0x42470060

08004b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0cc      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b48:	4b68      	ldr	r3, [pc, #416]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d90c      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b65      	ldr	r3, [pc, #404]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0b8      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d020      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b88:	4b59      	ldr	r3, [pc, #356]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a58      	ldr	r2, [pc, #352]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba0:	4b53      	ldr	r3, [pc, #332]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a52      	ldr	r2, [pc, #328]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	494d      	ldr	r1, [pc, #308]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d044      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d119      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e07f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e06f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e067      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c12:	4b37      	ldr	r3, [pc, #220]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4934      	ldr	r1, [pc, #208]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c24:	f7fc fe9a 	bl	800195c <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2c:	f7fc fe96 	bl	800195c <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e04f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 020c 	and.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1eb      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d20c      	bcs.n	8004c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b22      	ldr	r3, [pc, #136]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b20      	ldr	r3, [pc, #128]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e032      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4916      	ldr	r1, [pc, #88]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	490e      	ldr	r1, [pc, #56]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cba:	f000 f821 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	490a      	ldr	r1, [pc, #40]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ccc:	5ccb      	ldrb	r3, [r1, r3]
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc fdfa 	bl	80018d4 <HAL_InitTick>

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023c00 	.word	0x40023c00
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	0800633c 	.word	0x0800633c
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	20000004 	.word	0x20000004

08004d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	2300      	movs	r3, #0
 8004d12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d18:	4b67      	ldr	r3, [pc, #412]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d00d      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x40>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	f200 80bd 	bhi.w	8004ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d003      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d32:	e0b7      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d34:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d36:	60bb      	str	r3, [r7, #8]
       break;
 8004d38:	e0b7      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d3a:	4b61      	ldr	r3, [pc, #388]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004d3c:	60bb      	str	r3, [r7, #8]
      break;
 8004d3e:	e0b4      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d40:	4b5d      	ldr	r3, [pc, #372]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d4a:	4b5b      	ldr	r3, [pc, #364]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04d      	beq.n	8004df2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d56:	4b58      	ldr	r3, [pc, #352]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	099b      	lsrs	r3, r3, #6
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d66:	f04f 0100 	mov.w	r1, #0
 8004d6a:	ea02 0800 	and.w	r8, r2, r0
 8004d6e:	ea03 0901 	and.w	r9, r3, r1
 8004d72:	4640      	mov	r0, r8
 8004d74:	4649      	mov	r1, r9
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	014b      	lsls	r3, r1, #5
 8004d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d84:	0142      	lsls	r2, r0, #5
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	ebb0 0008 	subs.w	r0, r0, r8
 8004d8e:	eb61 0109 	sbc.w	r1, r1, r9
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	018b      	lsls	r3, r1, #6
 8004d9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004da0:	0182      	lsls	r2, r0, #6
 8004da2:	1a12      	subs	r2, r2, r0
 8004da4:	eb63 0301 	sbc.w	r3, r3, r1
 8004da8:	f04f 0000 	mov.w	r0, #0
 8004dac:	f04f 0100 	mov.w	r1, #0
 8004db0:	00d9      	lsls	r1, r3, #3
 8004db2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004db6:	00d0      	lsls	r0, r2, #3
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	eb12 0208 	adds.w	r2, r2, r8
 8004dc0:	eb43 0309 	adc.w	r3, r3, r9
 8004dc4:	f04f 0000 	mov.w	r0, #0
 8004dc8:	f04f 0100 	mov.w	r1, #0
 8004dcc:	0259      	lsls	r1, r3, #9
 8004dce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004dd2:	0250      	lsls	r0, r2, #9
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	f7fb fc20 	bl	8000628 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4613      	mov	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e04a      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df2:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e02:	f04f 0100 	mov.w	r1, #0
 8004e06:	ea02 0400 	and.w	r4, r2, r0
 8004e0a:	ea03 0501 	and.w	r5, r3, r1
 8004e0e:	4620      	mov	r0, r4
 8004e10:	4629      	mov	r1, r5
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	014b      	lsls	r3, r1, #5
 8004e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e20:	0142      	lsls	r2, r0, #5
 8004e22:	4610      	mov	r0, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	1b00      	subs	r0, r0, r4
 8004e28:	eb61 0105 	sbc.w	r1, r1, r5
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	018b      	lsls	r3, r1, #6
 8004e36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e3a:	0182      	lsls	r2, r0, #6
 8004e3c:	1a12      	subs	r2, r2, r0
 8004e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f04f 0100 	mov.w	r1, #0
 8004e4a:	00d9      	lsls	r1, r3, #3
 8004e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e50:	00d0      	lsls	r0, r2, #3
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	1912      	adds	r2, r2, r4
 8004e58:	eb45 0303 	adc.w	r3, r5, r3
 8004e5c:	f04f 0000 	mov.w	r0, #0
 8004e60:	f04f 0100 	mov.w	r1, #0
 8004e64:	0299      	lsls	r1, r3, #10
 8004e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e6a:	0290      	lsls	r0, r2, #10
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	f7fb fbd4 	bl	8000628 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	3301      	adds	r3, #1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	60bb      	str	r3, [r7, #8]
      break;
 8004ea2:	e002      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ea6:	60bb      	str	r3, [r7, #8]
      break;
 8004ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00f42400 	.word	0x00f42400
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000000 	.word	0x20000000

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a9b      	lsrs	r3, r3, #10
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4903      	ldr	r1, [pc, #12]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	0800634c 	.word	0x0800634c

08004f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f08:	f7ff ffdc 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0b5b      	lsrs	r3, r3, #13
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	0800634c 	.word	0x0800634c

08004f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e03f      	b.n	8004fbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fc fbae 	bl	80016b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f905 	bl	8005180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b08a      	sub	sp, #40	; 0x28
 8004fca:	af02      	add	r7, sp, #8
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d17c      	bne.n	80050e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_UART_Transmit+0x2c>
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e075      	b.n	80050e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_UART_Transmit+0x3e>
 8005000:	2302      	movs	r3, #2
 8005002:	e06e      	b.n	80050e2 <HAL_UART_Transmit+0x11c>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2221      	movs	r2, #33	; 0x21
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800501a:	f7fc fc9f 	bl	800195c <HAL_GetTick>
 800501e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	88fa      	ldrh	r2, [r7, #6]
 8005024:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	88fa      	ldrh	r2, [r7, #6]
 800502a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005034:	d108      	bne.n	8005048 <HAL_UART_Transmit+0x82>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	e003      	b.n	8005050 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005058:	e02a      	b.n	80050b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2200      	movs	r2, #0
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f840 	bl	80050ea <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e036      	b.n	80050e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	3302      	adds	r3, #2
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e007      	b.n	80050a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	781a      	ldrb	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	3301      	adds	r3, #1
 80050a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1cf      	bne.n	800505a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2140      	movs	r1, #64	; 0x40
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f810 	bl	80050ea <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e006      	b.n	80050e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050fa:	e02c      	b.n	8005156 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d028      	beq.n	8005156 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0x30>
 800510a:	f7fc fc27 	bl	800195c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	429a      	cmp	r2, r3
 8005118:	d21d      	bcs.n	8005156 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005128:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e00f      	b.n	8005176 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	429a      	cmp	r2, r3
 8005172:	d0c3      	beq.n	80050fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	b09f      	sub	sp, #124	; 0x7c
 8005186:	af00      	add	r7, sp, #0
 8005188:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800518a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005196:	68d9      	ldr	r1, [r3, #12]
 8005198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	ea40 0301 	orr.w	r3, r0, r1
 80051a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80051ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051c4:	f021 010c 	bic.w	r1, r1, #12
 80051c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ce:	430b      	orrs	r3, r1
 80051d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051de:	6999      	ldr	r1, [r3, #24]
 80051e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	ea40 0301 	orr.w	r3, r0, r1
 80051e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4bc5      	ldr	r3, [pc, #788]	; (8005504 <UART_SetConfig+0x384>)
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d004      	beq.n	80051fe <UART_SetConfig+0x7e>
 80051f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4bc3      	ldr	r3, [pc, #780]	; (8005508 <UART_SetConfig+0x388>)
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d103      	bne.n	8005206 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051fe:	f7ff fe81 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 8005202:	6778      	str	r0, [r7, #116]	; 0x74
 8005204:	e002      	b.n	800520c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005206:	f7ff fe69 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 800520a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005214:	f040 80b6 	bne.w	8005384 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521a:	461c      	mov	r4, r3
 800521c:	f04f 0500 	mov.w	r5, #0
 8005220:	4622      	mov	r2, r4
 8005222:	462b      	mov	r3, r5
 8005224:	1891      	adds	r1, r2, r2
 8005226:	6439      	str	r1, [r7, #64]	; 0x40
 8005228:	415b      	adcs	r3, r3
 800522a:	647b      	str	r3, [r7, #68]	; 0x44
 800522c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005230:	1912      	adds	r2, r2, r4
 8005232:	eb45 0303 	adc.w	r3, r5, r3
 8005236:	f04f 0000 	mov.w	r0, #0
 800523a:	f04f 0100 	mov.w	r1, #0
 800523e:	00d9      	lsls	r1, r3, #3
 8005240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005244:	00d0      	lsls	r0, r2, #3
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	1911      	adds	r1, r2, r4
 800524c:	6639      	str	r1, [r7, #96]	; 0x60
 800524e:	416b      	adcs	r3, r5
 8005250:	667b      	str	r3, [r7, #100]	; 0x64
 8005252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	461a      	mov	r2, r3
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	1891      	adds	r1, r2, r2
 800525e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005260:	415b      	adcs	r3, r3
 8005262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005268:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800526c:	f7fb f9dc 	bl	8000628 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4ba5      	ldr	r3, [pc, #660]	; (800550c <UART_SetConfig+0x38c>)
 8005276:	fba3 2302 	umull	r2, r3, r3, r2
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	011e      	lsls	r6, r3, #4
 800527e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005280:	461c      	mov	r4, r3
 8005282:	f04f 0500 	mov.w	r5, #0
 8005286:	4622      	mov	r2, r4
 8005288:	462b      	mov	r3, r5
 800528a:	1891      	adds	r1, r2, r2
 800528c:	6339      	str	r1, [r7, #48]	; 0x30
 800528e:	415b      	adcs	r3, r3
 8005290:	637b      	str	r3, [r7, #52]	; 0x34
 8005292:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005296:	1912      	adds	r2, r2, r4
 8005298:	eb45 0303 	adc.w	r3, r5, r3
 800529c:	f04f 0000 	mov.w	r0, #0
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	00d9      	lsls	r1, r3, #3
 80052a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052aa:	00d0      	lsls	r0, r2, #3
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	1911      	adds	r1, r2, r4
 80052b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80052b4:	416b      	adcs	r3, r5
 80052b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	461a      	mov	r2, r3
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	1891      	adds	r1, r2, r2
 80052c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80052c6:	415b      	adcs	r3, r3
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052d2:	f7fb f9a9 	bl	8000628 <__aeabi_uldivmod>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4b8c      	ldr	r3, [pc, #560]	; (800550c <UART_SetConfig+0x38c>)
 80052dc:	fba3 1302 	umull	r1, r3, r3, r2
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	2164      	movs	r1, #100	; 0x64
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	3332      	adds	r3, #50	; 0x32
 80052ee:	4a87      	ldr	r2, [pc, #540]	; (800550c <UART_SetConfig+0x38c>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052fc:	441e      	add	r6, r3
 80052fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005300:	4618      	mov	r0, r3
 8005302:	f04f 0100 	mov.w	r1, #0
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	1894      	adds	r4, r2, r2
 800530c:	623c      	str	r4, [r7, #32]
 800530e:	415b      	adcs	r3, r3
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
 8005312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005316:	1812      	adds	r2, r2, r0
 8005318:	eb41 0303 	adc.w	r3, r1, r3
 800531c:	f04f 0400 	mov.w	r4, #0
 8005320:	f04f 0500 	mov.w	r5, #0
 8005324:	00dd      	lsls	r5, r3, #3
 8005326:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800532a:	00d4      	lsls	r4, r2, #3
 800532c:	4622      	mov	r2, r4
 800532e:	462b      	mov	r3, r5
 8005330:	1814      	adds	r4, r2, r0
 8005332:	653c      	str	r4, [r7, #80]	; 0x50
 8005334:	414b      	adcs	r3, r1
 8005336:	657b      	str	r3, [r7, #84]	; 0x54
 8005338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	461a      	mov	r2, r3
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	1891      	adds	r1, r2, r2
 8005344:	61b9      	str	r1, [r7, #24]
 8005346:	415b      	adcs	r3, r3
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800534e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005352:	f7fb f969 	bl	8000628 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4b6c      	ldr	r3, [pc, #432]	; (800550c <UART_SetConfig+0x38c>)
 800535c:	fba3 1302 	umull	r1, r3, r3, r2
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	2164      	movs	r1, #100	; 0x64
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	3332      	adds	r3, #50	; 0x32
 800536e:	4a67      	ldr	r2, [pc, #412]	; (800550c <UART_SetConfig+0x38c>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	f003 0207 	and.w	r2, r3, #7
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4432      	add	r2, r6
 8005380:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005382:	e0b9      	b.n	80054f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005386:	461c      	mov	r4, r3
 8005388:	f04f 0500 	mov.w	r5, #0
 800538c:	4622      	mov	r2, r4
 800538e:	462b      	mov	r3, r5
 8005390:	1891      	adds	r1, r2, r2
 8005392:	6139      	str	r1, [r7, #16]
 8005394:	415b      	adcs	r3, r3
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800539c:	1912      	adds	r2, r2, r4
 800539e:	eb45 0303 	adc.w	r3, r5, r3
 80053a2:	f04f 0000 	mov.w	r0, #0
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	00d9      	lsls	r1, r3, #3
 80053ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053b0:	00d0      	lsls	r0, r2, #3
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	eb12 0804 	adds.w	r8, r2, r4
 80053ba:	eb43 0905 	adc.w	r9, r3, r5
 80053be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f04f 0100 	mov.w	r1, #0
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	008b      	lsls	r3, r1, #2
 80053d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053d6:	0082      	lsls	r2, r0, #2
 80053d8:	4640      	mov	r0, r8
 80053da:	4649      	mov	r1, r9
 80053dc:	f7fb f924 	bl	8000628 <__aeabi_uldivmod>
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4b49      	ldr	r3, [pc, #292]	; (800550c <UART_SetConfig+0x38c>)
 80053e6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	011e      	lsls	r6, r3, #4
 80053ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053f0:	4618      	mov	r0, r3
 80053f2:	f04f 0100 	mov.w	r1, #0
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	1894      	adds	r4, r2, r2
 80053fc:	60bc      	str	r4, [r7, #8]
 80053fe:	415b      	adcs	r3, r3
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005406:	1812      	adds	r2, r2, r0
 8005408:	eb41 0303 	adc.w	r3, r1, r3
 800540c:	f04f 0400 	mov.w	r4, #0
 8005410:	f04f 0500 	mov.w	r5, #0
 8005414:	00dd      	lsls	r5, r3, #3
 8005416:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800541a:	00d4      	lsls	r4, r2, #3
 800541c:	4622      	mov	r2, r4
 800541e:	462b      	mov	r3, r5
 8005420:	1814      	adds	r4, r2, r0
 8005422:	64bc      	str	r4, [r7, #72]	; 0x48
 8005424:	414b      	adcs	r3, r1
 8005426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4618      	mov	r0, r3
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	008b      	lsls	r3, r1, #2
 800543c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005440:	0082      	lsls	r2, r0, #2
 8005442:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005446:	f7fb f8ef 	bl	8000628 <__aeabi_uldivmod>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4b2f      	ldr	r3, [pc, #188]	; (800550c <UART_SetConfig+0x38c>)
 8005450:	fba3 1302 	umull	r1, r3, r3, r2
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	2164      	movs	r1, #100	; 0x64
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	3332      	adds	r3, #50	; 0x32
 8005462:	4a2a      	ldr	r2, [pc, #168]	; (800550c <UART_SetConfig+0x38c>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800546e:	441e      	add	r6, r3
 8005470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005472:	4618      	mov	r0, r3
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	1894      	adds	r4, r2, r2
 800547e:	603c      	str	r4, [r7, #0]
 8005480:	415b      	adcs	r3, r3
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005488:	1812      	adds	r2, r2, r0
 800548a:	eb41 0303 	adc.w	r3, r1, r3
 800548e:	f04f 0400 	mov.w	r4, #0
 8005492:	f04f 0500 	mov.w	r5, #0
 8005496:	00dd      	lsls	r5, r3, #3
 8005498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800549c:	00d4      	lsls	r4, r2, #3
 800549e:	4622      	mov	r2, r4
 80054a0:	462b      	mov	r3, r5
 80054a2:	eb12 0a00 	adds.w	sl, r2, r0
 80054a6:	eb43 0b01 	adc.w	fp, r3, r1
 80054aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f04f 0100 	mov.w	r1, #0
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	008b      	lsls	r3, r1, #2
 80054be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054c2:	0082      	lsls	r2, r0, #2
 80054c4:	4650      	mov	r0, sl
 80054c6:	4659      	mov	r1, fp
 80054c8:	f7fb f8ae 	bl	8000628 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <UART_SetConfig+0x38c>)
 80054d2:	fba3 1302 	umull	r1, r3, r3, r2
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	2164      	movs	r1, #100	; 0x64
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	3332      	adds	r3, #50	; 0x32
 80054e4:	4a09      	ldr	r2, [pc, #36]	; (800550c <UART_SetConfig+0x38c>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	f003 020f 	and.w	r2, r3, #15
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4432      	add	r2, r6
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	377c      	adds	r7, #124	; 0x7c
 80054fc:	46bd      	mov	sp, r7
 80054fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005502:	bf00      	nop
 8005504:	40011000 	.word	0x40011000
 8005508:	40011400 	.word	0x40011400
 800550c:	51eb851f 	.word	0x51eb851f

08005510 <__errno>:
 8005510:	4b01      	ldr	r3, [pc, #4]	; (8005518 <__errno+0x8>)
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	2000000c 	.word	0x2000000c

0800551c <__libc_init_array>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	4d0d      	ldr	r5, [pc, #52]	; (8005554 <__libc_init_array+0x38>)
 8005520:	4c0d      	ldr	r4, [pc, #52]	; (8005558 <__libc_init_array+0x3c>)
 8005522:	1b64      	subs	r4, r4, r5
 8005524:	10a4      	asrs	r4, r4, #2
 8005526:	2600      	movs	r6, #0
 8005528:	42a6      	cmp	r6, r4
 800552a:	d109      	bne.n	8005540 <__libc_init_array+0x24>
 800552c:	4d0b      	ldr	r5, [pc, #44]	; (800555c <__libc_init_array+0x40>)
 800552e:	4c0c      	ldr	r4, [pc, #48]	; (8005560 <__libc_init_array+0x44>)
 8005530:	f000 fc9c 	bl	8005e6c <_init>
 8005534:	1b64      	subs	r4, r4, r5
 8005536:	10a4      	asrs	r4, r4, #2
 8005538:	2600      	movs	r6, #0
 800553a:	42a6      	cmp	r6, r4
 800553c:	d105      	bne.n	800554a <__libc_init_array+0x2e>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	f855 3b04 	ldr.w	r3, [r5], #4
 8005544:	4798      	blx	r3
 8005546:	3601      	adds	r6, #1
 8005548:	e7ee      	b.n	8005528 <__libc_init_array+0xc>
 800554a:	f855 3b04 	ldr.w	r3, [r5], #4
 800554e:	4798      	blx	r3
 8005550:	3601      	adds	r6, #1
 8005552:	e7f2      	b.n	800553a <__libc_init_array+0x1e>
 8005554:	08006390 	.word	0x08006390
 8005558:	08006390 	.word	0x08006390
 800555c:	08006390 	.word	0x08006390
 8005560:	08006394 	.word	0x08006394

08005564 <memset>:
 8005564:	4402      	add	r2, r0
 8005566:	4603      	mov	r3, r0
 8005568:	4293      	cmp	r3, r2
 800556a:	d100      	bne.n	800556e <memset+0xa>
 800556c:	4770      	bx	lr
 800556e:	f803 1b01 	strb.w	r1, [r3], #1
 8005572:	e7f9      	b.n	8005568 <memset+0x4>

08005574 <sniprintf>:
 8005574:	b40c      	push	{r2, r3}
 8005576:	b530      	push	{r4, r5, lr}
 8005578:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <sniprintf+0x64>)
 800557a:	1e0c      	subs	r4, r1, #0
 800557c:	681d      	ldr	r5, [r3, #0]
 800557e:	b09d      	sub	sp, #116	; 0x74
 8005580:	da08      	bge.n	8005594 <sniprintf+0x20>
 8005582:	238b      	movs	r3, #139	; 0x8b
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	f04f 30ff 	mov.w	r0, #4294967295
 800558a:	b01d      	add	sp, #116	; 0x74
 800558c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005590:	b002      	add	sp, #8
 8005592:	4770      	bx	lr
 8005594:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005598:	f8ad 3014 	strh.w	r3, [sp, #20]
 800559c:	bf14      	ite	ne
 800559e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80055a2:	4623      	moveq	r3, r4
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055ac:	9002      	str	r0, [sp, #8]
 80055ae:	9006      	str	r0, [sp, #24]
 80055b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80055b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80055b6:	ab21      	add	r3, sp, #132	; 0x84
 80055b8:	a902      	add	r1, sp, #8
 80055ba:	4628      	mov	r0, r5
 80055bc:	9301      	str	r3, [sp, #4]
 80055be:	f000 f8a3 	bl	8005708 <_svfiprintf_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	bfbc      	itt	lt
 80055c6:	238b      	movlt	r3, #139	; 0x8b
 80055c8:	602b      	strlt	r3, [r5, #0]
 80055ca:	2c00      	cmp	r4, #0
 80055cc:	d0dd      	beq.n	800558a <sniprintf+0x16>
 80055ce:	9b02      	ldr	r3, [sp, #8]
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
 80055d4:	e7d9      	b.n	800558a <sniprintf+0x16>
 80055d6:	bf00      	nop
 80055d8:	2000000c 	.word	0x2000000c

080055dc <_vsniprintf_r>:
 80055dc:	b530      	push	{r4, r5, lr}
 80055de:	1e14      	subs	r4, r2, #0
 80055e0:	4605      	mov	r5, r0
 80055e2:	b09b      	sub	sp, #108	; 0x6c
 80055e4:	4618      	mov	r0, r3
 80055e6:	da05      	bge.n	80055f4 <_vsniprintf_r+0x18>
 80055e8:	238b      	movs	r3, #139	; 0x8b
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	b01b      	add	sp, #108	; 0x6c
 80055f2:	bd30      	pop	{r4, r5, pc}
 80055f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80055f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80055fc:	bf14      	ite	ne
 80055fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005602:	4623      	moveq	r3, r4
 8005604:	9302      	str	r3, [sp, #8]
 8005606:	9305      	str	r3, [sp, #20]
 8005608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800560c:	9100      	str	r1, [sp, #0]
 800560e:	9104      	str	r1, [sp, #16]
 8005610:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005614:	4602      	mov	r2, r0
 8005616:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005618:	4669      	mov	r1, sp
 800561a:	4628      	mov	r0, r5
 800561c:	f000 f874 	bl	8005708 <_svfiprintf_r>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	bfbc      	itt	lt
 8005624:	238b      	movlt	r3, #139	; 0x8b
 8005626:	602b      	strlt	r3, [r5, #0]
 8005628:	2c00      	cmp	r4, #0
 800562a:	d0e1      	beq.n	80055f0 <_vsniprintf_r+0x14>
 800562c:	9b00      	ldr	r3, [sp, #0]
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e7dd      	b.n	80055f0 <_vsniprintf_r+0x14>

08005634 <vsniprintf>:
 8005634:	b507      	push	{r0, r1, r2, lr}
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	460a      	mov	r2, r1
 800563c:	4601      	mov	r1, r0
 800563e:	4803      	ldr	r0, [pc, #12]	; (800564c <vsniprintf+0x18>)
 8005640:	6800      	ldr	r0, [r0, #0]
 8005642:	f7ff ffcb 	bl	80055dc <_vsniprintf_r>
 8005646:	b003      	add	sp, #12
 8005648:	f85d fb04 	ldr.w	pc, [sp], #4
 800564c:	2000000c 	.word	0x2000000c

08005650 <__ssputs_r>:
 8005650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005654:	688e      	ldr	r6, [r1, #8]
 8005656:	429e      	cmp	r6, r3
 8005658:	4682      	mov	sl, r0
 800565a:	460c      	mov	r4, r1
 800565c:	4690      	mov	r8, r2
 800565e:	461f      	mov	r7, r3
 8005660:	d838      	bhi.n	80056d4 <__ssputs_r+0x84>
 8005662:	898a      	ldrh	r2, [r1, #12]
 8005664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005668:	d032      	beq.n	80056d0 <__ssputs_r+0x80>
 800566a:	6825      	ldr	r5, [r4, #0]
 800566c:	6909      	ldr	r1, [r1, #16]
 800566e:	eba5 0901 	sub.w	r9, r5, r1
 8005672:	6965      	ldr	r5, [r4, #20]
 8005674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800567c:	3301      	adds	r3, #1
 800567e:	444b      	add	r3, r9
 8005680:	106d      	asrs	r5, r5, #1
 8005682:	429d      	cmp	r5, r3
 8005684:	bf38      	it	cc
 8005686:	461d      	movcc	r5, r3
 8005688:	0553      	lsls	r3, r2, #21
 800568a:	d531      	bpl.n	80056f0 <__ssputs_r+0xa0>
 800568c:	4629      	mov	r1, r5
 800568e:	f000 fb47 	bl	8005d20 <_malloc_r>
 8005692:	4606      	mov	r6, r0
 8005694:	b950      	cbnz	r0, 80056ac <__ssputs_r+0x5c>
 8005696:	230c      	movs	r3, #12
 8005698:	f8ca 3000 	str.w	r3, [sl]
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ac:	6921      	ldr	r1, [r4, #16]
 80056ae:	464a      	mov	r2, r9
 80056b0:	f000 fabe 	bl	8005c30 <memcpy>
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056be:	81a3      	strh	r3, [r4, #12]
 80056c0:	6126      	str	r6, [r4, #16]
 80056c2:	6165      	str	r5, [r4, #20]
 80056c4:	444e      	add	r6, r9
 80056c6:	eba5 0509 	sub.w	r5, r5, r9
 80056ca:	6026      	str	r6, [r4, #0]
 80056cc:	60a5      	str	r5, [r4, #8]
 80056ce:	463e      	mov	r6, r7
 80056d0:	42be      	cmp	r6, r7
 80056d2:	d900      	bls.n	80056d6 <__ssputs_r+0x86>
 80056d4:	463e      	mov	r6, r7
 80056d6:	4632      	mov	r2, r6
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	4641      	mov	r1, r8
 80056dc:	f000 fab6 	bl	8005c4c <memmove>
 80056e0:	68a3      	ldr	r3, [r4, #8]
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	1b9b      	subs	r3, r3, r6
 80056e6:	4432      	add	r2, r6
 80056e8:	60a3      	str	r3, [r4, #8]
 80056ea:	6022      	str	r2, [r4, #0]
 80056ec:	2000      	movs	r0, #0
 80056ee:	e7db      	b.n	80056a8 <__ssputs_r+0x58>
 80056f0:	462a      	mov	r2, r5
 80056f2:	f000 fb6f 	bl	8005dd4 <_realloc_r>
 80056f6:	4606      	mov	r6, r0
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d1e1      	bne.n	80056c0 <__ssputs_r+0x70>
 80056fc:	6921      	ldr	r1, [r4, #16]
 80056fe:	4650      	mov	r0, sl
 8005700:	f000 fabe 	bl	8005c80 <_free_r>
 8005704:	e7c7      	b.n	8005696 <__ssputs_r+0x46>
	...

08005708 <_svfiprintf_r>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	4698      	mov	r8, r3
 800570e:	898b      	ldrh	r3, [r1, #12]
 8005710:	061b      	lsls	r3, r3, #24
 8005712:	b09d      	sub	sp, #116	; 0x74
 8005714:	4607      	mov	r7, r0
 8005716:	460d      	mov	r5, r1
 8005718:	4614      	mov	r4, r2
 800571a:	d50e      	bpl.n	800573a <_svfiprintf_r+0x32>
 800571c:	690b      	ldr	r3, [r1, #16]
 800571e:	b963      	cbnz	r3, 800573a <_svfiprintf_r+0x32>
 8005720:	2140      	movs	r1, #64	; 0x40
 8005722:	f000 fafd 	bl	8005d20 <_malloc_r>
 8005726:	6028      	str	r0, [r5, #0]
 8005728:	6128      	str	r0, [r5, #16]
 800572a:	b920      	cbnz	r0, 8005736 <_svfiprintf_r+0x2e>
 800572c:	230c      	movs	r3, #12
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	f04f 30ff 	mov.w	r0, #4294967295
 8005734:	e0d1      	b.n	80058da <_svfiprintf_r+0x1d2>
 8005736:	2340      	movs	r3, #64	; 0x40
 8005738:	616b      	str	r3, [r5, #20]
 800573a:	2300      	movs	r3, #0
 800573c:	9309      	str	r3, [sp, #36]	; 0x24
 800573e:	2320      	movs	r3, #32
 8005740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005744:	f8cd 800c 	str.w	r8, [sp, #12]
 8005748:	2330      	movs	r3, #48	; 0x30
 800574a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80058f4 <_svfiprintf_r+0x1ec>
 800574e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005752:	f04f 0901 	mov.w	r9, #1
 8005756:	4623      	mov	r3, r4
 8005758:	469a      	mov	sl, r3
 800575a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800575e:	b10a      	cbz	r2, 8005764 <_svfiprintf_r+0x5c>
 8005760:	2a25      	cmp	r2, #37	; 0x25
 8005762:	d1f9      	bne.n	8005758 <_svfiprintf_r+0x50>
 8005764:	ebba 0b04 	subs.w	fp, sl, r4
 8005768:	d00b      	beq.n	8005782 <_svfiprintf_r+0x7a>
 800576a:	465b      	mov	r3, fp
 800576c:	4622      	mov	r2, r4
 800576e:	4629      	mov	r1, r5
 8005770:	4638      	mov	r0, r7
 8005772:	f7ff ff6d 	bl	8005650 <__ssputs_r>
 8005776:	3001      	adds	r0, #1
 8005778:	f000 80aa 	beq.w	80058d0 <_svfiprintf_r+0x1c8>
 800577c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800577e:	445a      	add	r2, fp
 8005780:	9209      	str	r2, [sp, #36]	; 0x24
 8005782:	f89a 3000 	ldrb.w	r3, [sl]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 80a2 	beq.w	80058d0 <_svfiprintf_r+0x1c8>
 800578c:	2300      	movs	r3, #0
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005796:	f10a 0a01 	add.w	sl, sl, #1
 800579a:	9304      	str	r3, [sp, #16]
 800579c:	9307      	str	r3, [sp, #28]
 800579e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057a2:	931a      	str	r3, [sp, #104]	; 0x68
 80057a4:	4654      	mov	r4, sl
 80057a6:	2205      	movs	r2, #5
 80057a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ac:	4851      	ldr	r0, [pc, #324]	; (80058f4 <_svfiprintf_r+0x1ec>)
 80057ae:	f7fa fd2f 	bl	8000210 <memchr>
 80057b2:	9a04      	ldr	r2, [sp, #16]
 80057b4:	b9d8      	cbnz	r0, 80057ee <_svfiprintf_r+0xe6>
 80057b6:	06d0      	lsls	r0, r2, #27
 80057b8:	bf44      	itt	mi
 80057ba:	2320      	movmi	r3, #32
 80057bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057c0:	0711      	lsls	r1, r2, #28
 80057c2:	bf44      	itt	mi
 80057c4:	232b      	movmi	r3, #43	; 0x2b
 80057c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ca:	f89a 3000 	ldrb.w	r3, [sl]
 80057ce:	2b2a      	cmp	r3, #42	; 0x2a
 80057d0:	d015      	beq.n	80057fe <_svfiprintf_r+0xf6>
 80057d2:	9a07      	ldr	r2, [sp, #28]
 80057d4:	4654      	mov	r4, sl
 80057d6:	2000      	movs	r0, #0
 80057d8:	f04f 0c0a 	mov.w	ip, #10
 80057dc:	4621      	mov	r1, r4
 80057de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057e2:	3b30      	subs	r3, #48	; 0x30
 80057e4:	2b09      	cmp	r3, #9
 80057e6:	d94e      	bls.n	8005886 <_svfiprintf_r+0x17e>
 80057e8:	b1b0      	cbz	r0, 8005818 <_svfiprintf_r+0x110>
 80057ea:	9207      	str	r2, [sp, #28]
 80057ec:	e014      	b.n	8005818 <_svfiprintf_r+0x110>
 80057ee:	eba0 0308 	sub.w	r3, r0, r8
 80057f2:	fa09 f303 	lsl.w	r3, r9, r3
 80057f6:	4313      	orrs	r3, r2
 80057f8:	9304      	str	r3, [sp, #16]
 80057fa:	46a2      	mov	sl, r4
 80057fc:	e7d2      	b.n	80057a4 <_svfiprintf_r+0x9c>
 80057fe:	9b03      	ldr	r3, [sp, #12]
 8005800:	1d19      	adds	r1, r3, #4
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	9103      	str	r1, [sp, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	bfbb      	ittet	lt
 800580a:	425b      	neglt	r3, r3
 800580c:	f042 0202 	orrlt.w	r2, r2, #2
 8005810:	9307      	strge	r3, [sp, #28]
 8005812:	9307      	strlt	r3, [sp, #28]
 8005814:	bfb8      	it	lt
 8005816:	9204      	strlt	r2, [sp, #16]
 8005818:	7823      	ldrb	r3, [r4, #0]
 800581a:	2b2e      	cmp	r3, #46	; 0x2e
 800581c:	d10c      	bne.n	8005838 <_svfiprintf_r+0x130>
 800581e:	7863      	ldrb	r3, [r4, #1]
 8005820:	2b2a      	cmp	r3, #42	; 0x2a
 8005822:	d135      	bne.n	8005890 <_svfiprintf_r+0x188>
 8005824:	9b03      	ldr	r3, [sp, #12]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	9203      	str	r2, [sp, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	bfb8      	it	lt
 8005830:	f04f 33ff 	movlt.w	r3, #4294967295
 8005834:	3402      	adds	r4, #2
 8005836:	9305      	str	r3, [sp, #20]
 8005838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005904 <_svfiprintf_r+0x1fc>
 800583c:	7821      	ldrb	r1, [r4, #0]
 800583e:	2203      	movs	r2, #3
 8005840:	4650      	mov	r0, sl
 8005842:	f7fa fce5 	bl	8000210 <memchr>
 8005846:	b140      	cbz	r0, 800585a <_svfiprintf_r+0x152>
 8005848:	2340      	movs	r3, #64	; 0x40
 800584a:	eba0 000a 	sub.w	r0, r0, sl
 800584e:	fa03 f000 	lsl.w	r0, r3, r0
 8005852:	9b04      	ldr	r3, [sp, #16]
 8005854:	4303      	orrs	r3, r0
 8005856:	3401      	adds	r4, #1
 8005858:	9304      	str	r3, [sp, #16]
 800585a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800585e:	4826      	ldr	r0, [pc, #152]	; (80058f8 <_svfiprintf_r+0x1f0>)
 8005860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005864:	2206      	movs	r2, #6
 8005866:	f7fa fcd3 	bl	8000210 <memchr>
 800586a:	2800      	cmp	r0, #0
 800586c:	d038      	beq.n	80058e0 <_svfiprintf_r+0x1d8>
 800586e:	4b23      	ldr	r3, [pc, #140]	; (80058fc <_svfiprintf_r+0x1f4>)
 8005870:	bb1b      	cbnz	r3, 80058ba <_svfiprintf_r+0x1b2>
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	3307      	adds	r3, #7
 8005876:	f023 0307 	bic.w	r3, r3, #7
 800587a:	3308      	adds	r3, #8
 800587c:	9303      	str	r3, [sp, #12]
 800587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005880:	4433      	add	r3, r6
 8005882:	9309      	str	r3, [sp, #36]	; 0x24
 8005884:	e767      	b.n	8005756 <_svfiprintf_r+0x4e>
 8005886:	fb0c 3202 	mla	r2, ip, r2, r3
 800588a:	460c      	mov	r4, r1
 800588c:	2001      	movs	r0, #1
 800588e:	e7a5      	b.n	80057dc <_svfiprintf_r+0xd4>
 8005890:	2300      	movs	r3, #0
 8005892:	3401      	adds	r4, #1
 8005894:	9305      	str	r3, [sp, #20]
 8005896:	4619      	mov	r1, r3
 8005898:	f04f 0c0a 	mov.w	ip, #10
 800589c:	4620      	mov	r0, r4
 800589e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058a2:	3a30      	subs	r2, #48	; 0x30
 80058a4:	2a09      	cmp	r2, #9
 80058a6:	d903      	bls.n	80058b0 <_svfiprintf_r+0x1a8>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0c5      	beq.n	8005838 <_svfiprintf_r+0x130>
 80058ac:	9105      	str	r1, [sp, #20]
 80058ae:	e7c3      	b.n	8005838 <_svfiprintf_r+0x130>
 80058b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80058b4:	4604      	mov	r4, r0
 80058b6:	2301      	movs	r3, #1
 80058b8:	e7f0      	b.n	800589c <_svfiprintf_r+0x194>
 80058ba:	ab03      	add	r3, sp, #12
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	462a      	mov	r2, r5
 80058c0:	4b0f      	ldr	r3, [pc, #60]	; (8005900 <_svfiprintf_r+0x1f8>)
 80058c2:	a904      	add	r1, sp, #16
 80058c4:	4638      	mov	r0, r7
 80058c6:	f3af 8000 	nop.w
 80058ca:	1c42      	adds	r2, r0, #1
 80058cc:	4606      	mov	r6, r0
 80058ce:	d1d6      	bne.n	800587e <_svfiprintf_r+0x176>
 80058d0:	89ab      	ldrh	r3, [r5, #12]
 80058d2:	065b      	lsls	r3, r3, #25
 80058d4:	f53f af2c 	bmi.w	8005730 <_svfiprintf_r+0x28>
 80058d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058da:	b01d      	add	sp, #116	; 0x74
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	ab03      	add	r3, sp, #12
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	462a      	mov	r2, r5
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <_svfiprintf_r+0x1f8>)
 80058e8:	a904      	add	r1, sp, #16
 80058ea:	4638      	mov	r0, r7
 80058ec:	f000 f87a 	bl	80059e4 <_printf_i>
 80058f0:	e7eb      	b.n	80058ca <_svfiprintf_r+0x1c2>
 80058f2:	bf00      	nop
 80058f4:	08006354 	.word	0x08006354
 80058f8:	0800635e 	.word	0x0800635e
 80058fc:	00000000 	.word	0x00000000
 8005900:	08005651 	.word	0x08005651
 8005904:	0800635a 	.word	0x0800635a

08005908 <_printf_common>:
 8005908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800590c:	4616      	mov	r6, r2
 800590e:	4699      	mov	r9, r3
 8005910:	688a      	ldr	r2, [r1, #8]
 8005912:	690b      	ldr	r3, [r1, #16]
 8005914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005918:	4293      	cmp	r3, r2
 800591a:	bfb8      	it	lt
 800591c:	4613      	movlt	r3, r2
 800591e:	6033      	str	r3, [r6, #0]
 8005920:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005924:	4607      	mov	r7, r0
 8005926:	460c      	mov	r4, r1
 8005928:	b10a      	cbz	r2, 800592e <_printf_common+0x26>
 800592a:	3301      	adds	r3, #1
 800592c:	6033      	str	r3, [r6, #0]
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	0699      	lsls	r1, r3, #26
 8005932:	bf42      	ittt	mi
 8005934:	6833      	ldrmi	r3, [r6, #0]
 8005936:	3302      	addmi	r3, #2
 8005938:	6033      	strmi	r3, [r6, #0]
 800593a:	6825      	ldr	r5, [r4, #0]
 800593c:	f015 0506 	ands.w	r5, r5, #6
 8005940:	d106      	bne.n	8005950 <_printf_common+0x48>
 8005942:	f104 0a19 	add.w	sl, r4, #25
 8005946:	68e3      	ldr	r3, [r4, #12]
 8005948:	6832      	ldr	r2, [r6, #0]
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	42ab      	cmp	r3, r5
 800594e:	dc26      	bgt.n	800599e <_printf_common+0x96>
 8005950:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005954:	1e13      	subs	r3, r2, #0
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	bf18      	it	ne
 800595a:	2301      	movne	r3, #1
 800595c:	0692      	lsls	r2, r2, #26
 800595e:	d42b      	bmi.n	80059b8 <_printf_common+0xb0>
 8005960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005964:	4649      	mov	r1, r9
 8005966:	4638      	mov	r0, r7
 8005968:	47c0      	blx	r8
 800596a:	3001      	adds	r0, #1
 800596c:	d01e      	beq.n	80059ac <_printf_common+0xa4>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	68e5      	ldr	r5, [r4, #12]
 8005972:	6832      	ldr	r2, [r6, #0]
 8005974:	f003 0306 	and.w	r3, r3, #6
 8005978:	2b04      	cmp	r3, #4
 800597a:	bf08      	it	eq
 800597c:	1aad      	subeq	r5, r5, r2
 800597e:	68a3      	ldr	r3, [r4, #8]
 8005980:	6922      	ldr	r2, [r4, #16]
 8005982:	bf0c      	ite	eq
 8005984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005988:	2500      	movne	r5, #0
 800598a:	4293      	cmp	r3, r2
 800598c:	bfc4      	itt	gt
 800598e:	1a9b      	subgt	r3, r3, r2
 8005990:	18ed      	addgt	r5, r5, r3
 8005992:	2600      	movs	r6, #0
 8005994:	341a      	adds	r4, #26
 8005996:	42b5      	cmp	r5, r6
 8005998:	d11a      	bne.n	80059d0 <_printf_common+0xc8>
 800599a:	2000      	movs	r0, #0
 800599c:	e008      	b.n	80059b0 <_printf_common+0xa8>
 800599e:	2301      	movs	r3, #1
 80059a0:	4652      	mov	r2, sl
 80059a2:	4649      	mov	r1, r9
 80059a4:	4638      	mov	r0, r7
 80059a6:	47c0      	blx	r8
 80059a8:	3001      	adds	r0, #1
 80059aa:	d103      	bne.n	80059b4 <_printf_common+0xac>
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b4:	3501      	adds	r5, #1
 80059b6:	e7c6      	b.n	8005946 <_printf_common+0x3e>
 80059b8:	18e1      	adds	r1, r4, r3
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	2030      	movs	r0, #48	; 0x30
 80059be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059c2:	4422      	add	r2, r4
 80059c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059cc:	3302      	adds	r3, #2
 80059ce:	e7c7      	b.n	8005960 <_printf_common+0x58>
 80059d0:	2301      	movs	r3, #1
 80059d2:	4622      	mov	r2, r4
 80059d4:	4649      	mov	r1, r9
 80059d6:	4638      	mov	r0, r7
 80059d8:	47c0      	blx	r8
 80059da:	3001      	adds	r0, #1
 80059dc:	d0e6      	beq.n	80059ac <_printf_common+0xa4>
 80059de:	3601      	adds	r6, #1
 80059e0:	e7d9      	b.n	8005996 <_printf_common+0x8e>
	...

080059e4 <_printf_i>:
 80059e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059e8:	460c      	mov	r4, r1
 80059ea:	4691      	mov	r9, r2
 80059ec:	7e27      	ldrb	r7, [r4, #24]
 80059ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059f0:	2f78      	cmp	r7, #120	; 0x78
 80059f2:	4680      	mov	r8, r0
 80059f4:	469a      	mov	sl, r3
 80059f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059fa:	d807      	bhi.n	8005a0c <_printf_i+0x28>
 80059fc:	2f62      	cmp	r7, #98	; 0x62
 80059fe:	d80a      	bhi.n	8005a16 <_printf_i+0x32>
 8005a00:	2f00      	cmp	r7, #0
 8005a02:	f000 80d8 	beq.w	8005bb6 <_printf_i+0x1d2>
 8005a06:	2f58      	cmp	r7, #88	; 0x58
 8005a08:	f000 80a3 	beq.w	8005b52 <_printf_i+0x16e>
 8005a0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a14:	e03a      	b.n	8005a8c <_printf_i+0xa8>
 8005a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a1a:	2b15      	cmp	r3, #21
 8005a1c:	d8f6      	bhi.n	8005a0c <_printf_i+0x28>
 8005a1e:	a001      	add	r0, pc, #4	; (adr r0, 8005a24 <_printf_i+0x40>)
 8005a20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a24:	08005a7d 	.word	0x08005a7d
 8005a28:	08005a91 	.word	0x08005a91
 8005a2c:	08005a0d 	.word	0x08005a0d
 8005a30:	08005a0d 	.word	0x08005a0d
 8005a34:	08005a0d 	.word	0x08005a0d
 8005a38:	08005a0d 	.word	0x08005a0d
 8005a3c:	08005a91 	.word	0x08005a91
 8005a40:	08005a0d 	.word	0x08005a0d
 8005a44:	08005a0d 	.word	0x08005a0d
 8005a48:	08005a0d 	.word	0x08005a0d
 8005a4c:	08005a0d 	.word	0x08005a0d
 8005a50:	08005b9d 	.word	0x08005b9d
 8005a54:	08005ac1 	.word	0x08005ac1
 8005a58:	08005b7f 	.word	0x08005b7f
 8005a5c:	08005a0d 	.word	0x08005a0d
 8005a60:	08005a0d 	.word	0x08005a0d
 8005a64:	08005bbf 	.word	0x08005bbf
 8005a68:	08005a0d 	.word	0x08005a0d
 8005a6c:	08005ac1 	.word	0x08005ac1
 8005a70:	08005a0d 	.word	0x08005a0d
 8005a74:	08005a0d 	.word	0x08005a0d
 8005a78:	08005b87 	.word	0x08005b87
 8005a7c:	680b      	ldr	r3, [r1, #0]
 8005a7e:	1d1a      	adds	r2, r3, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	600a      	str	r2, [r1, #0]
 8005a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0a3      	b.n	8005bd8 <_printf_i+0x1f4>
 8005a90:	6825      	ldr	r5, [r4, #0]
 8005a92:	6808      	ldr	r0, [r1, #0]
 8005a94:	062e      	lsls	r6, r5, #24
 8005a96:	f100 0304 	add.w	r3, r0, #4
 8005a9a:	d50a      	bpl.n	8005ab2 <_printf_i+0xce>
 8005a9c:	6805      	ldr	r5, [r0, #0]
 8005a9e:	600b      	str	r3, [r1, #0]
 8005aa0:	2d00      	cmp	r5, #0
 8005aa2:	da03      	bge.n	8005aac <_printf_i+0xc8>
 8005aa4:	232d      	movs	r3, #45	; 0x2d
 8005aa6:	426d      	negs	r5, r5
 8005aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aac:	485e      	ldr	r0, [pc, #376]	; (8005c28 <_printf_i+0x244>)
 8005aae:	230a      	movs	r3, #10
 8005ab0:	e019      	b.n	8005ae6 <_printf_i+0x102>
 8005ab2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ab6:	6805      	ldr	r5, [r0, #0]
 8005ab8:	600b      	str	r3, [r1, #0]
 8005aba:	bf18      	it	ne
 8005abc:	b22d      	sxthne	r5, r5
 8005abe:	e7ef      	b.n	8005aa0 <_printf_i+0xbc>
 8005ac0:	680b      	ldr	r3, [r1, #0]
 8005ac2:	6825      	ldr	r5, [r4, #0]
 8005ac4:	1d18      	adds	r0, r3, #4
 8005ac6:	6008      	str	r0, [r1, #0]
 8005ac8:	0628      	lsls	r0, r5, #24
 8005aca:	d501      	bpl.n	8005ad0 <_printf_i+0xec>
 8005acc:	681d      	ldr	r5, [r3, #0]
 8005ace:	e002      	b.n	8005ad6 <_printf_i+0xf2>
 8005ad0:	0669      	lsls	r1, r5, #25
 8005ad2:	d5fb      	bpl.n	8005acc <_printf_i+0xe8>
 8005ad4:	881d      	ldrh	r5, [r3, #0]
 8005ad6:	4854      	ldr	r0, [pc, #336]	; (8005c28 <_printf_i+0x244>)
 8005ad8:	2f6f      	cmp	r7, #111	; 0x6f
 8005ada:	bf0c      	ite	eq
 8005adc:	2308      	moveq	r3, #8
 8005ade:	230a      	movne	r3, #10
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ae6:	6866      	ldr	r6, [r4, #4]
 8005ae8:	60a6      	str	r6, [r4, #8]
 8005aea:	2e00      	cmp	r6, #0
 8005aec:	bfa2      	ittt	ge
 8005aee:	6821      	ldrge	r1, [r4, #0]
 8005af0:	f021 0104 	bicge.w	r1, r1, #4
 8005af4:	6021      	strge	r1, [r4, #0]
 8005af6:	b90d      	cbnz	r5, 8005afc <_printf_i+0x118>
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	d04d      	beq.n	8005b98 <_printf_i+0x1b4>
 8005afc:	4616      	mov	r6, r2
 8005afe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b02:	fb03 5711 	mls	r7, r3, r1, r5
 8005b06:	5dc7      	ldrb	r7, [r0, r7]
 8005b08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b0c:	462f      	mov	r7, r5
 8005b0e:	42bb      	cmp	r3, r7
 8005b10:	460d      	mov	r5, r1
 8005b12:	d9f4      	bls.n	8005afe <_printf_i+0x11a>
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d10b      	bne.n	8005b30 <_printf_i+0x14c>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	07df      	lsls	r7, r3, #31
 8005b1c:	d508      	bpl.n	8005b30 <_printf_i+0x14c>
 8005b1e:	6923      	ldr	r3, [r4, #16]
 8005b20:	6861      	ldr	r1, [r4, #4]
 8005b22:	4299      	cmp	r1, r3
 8005b24:	bfde      	ittt	le
 8005b26:	2330      	movle	r3, #48	; 0x30
 8005b28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b30:	1b92      	subs	r2, r2, r6
 8005b32:	6122      	str	r2, [r4, #16]
 8005b34:	f8cd a000 	str.w	sl, [sp]
 8005b38:	464b      	mov	r3, r9
 8005b3a:	aa03      	add	r2, sp, #12
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4640      	mov	r0, r8
 8005b40:	f7ff fee2 	bl	8005908 <_printf_common>
 8005b44:	3001      	adds	r0, #1
 8005b46:	d14c      	bne.n	8005be2 <_printf_i+0x1fe>
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	b004      	add	sp, #16
 8005b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b52:	4835      	ldr	r0, [pc, #212]	; (8005c28 <_printf_i+0x244>)
 8005b54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	680e      	ldr	r6, [r1, #0]
 8005b5c:	061f      	lsls	r7, r3, #24
 8005b5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b62:	600e      	str	r6, [r1, #0]
 8005b64:	d514      	bpl.n	8005b90 <_printf_i+0x1ac>
 8005b66:	07d9      	lsls	r1, r3, #31
 8005b68:	bf44      	itt	mi
 8005b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b6e:	6023      	strmi	r3, [r4, #0]
 8005b70:	b91d      	cbnz	r5, 8005b7a <_printf_i+0x196>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f023 0320 	bic.w	r3, r3, #32
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	e7b0      	b.n	8005ae0 <_printf_i+0xfc>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f043 0320 	orr.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	2378      	movs	r3, #120	; 0x78
 8005b88:	4828      	ldr	r0, [pc, #160]	; (8005c2c <_printf_i+0x248>)
 8005b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b8e:	e7e3      	b.n	8005b58 <_printf_i+0x174>
 8005b90:	065e      	lsls	r6, r3, #25
 8005b92:	bf48      	it	mi
 8005b94:	b2ad      	uxthmi	r5, r5
 8005b96:	e7e6      	b.n	8005b66 <_printf_i+0x182>
 8005b98:	4616      	mov	r6, r2
 8005b9a:	e7bb      	b.n	8005b14 <_printf_i+0x130>
 8005b9c:	680b      	ldr	r3, [r1, #0]
 8005b9e:	6826      	ldr	r6, [r4, #0]
 8005ba0:	6960      	ldr	r0, [r4, #20]
 8005ba2:	1d1d      	adds	r5, r3, #4
 8005ba4:	600d      	str	r5, [r1, #0]
 8005ba6:	0635      	lsls	r5, r6, #24
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	d501      	bpl.n	8005bb0 <_printf_i+0x1cc>
 8005bac:	6018      	str	r0, [r3, #0]
 8005bae:	e002      	b.n	8005bb6 <_printf_i+0x1d2>
 8005bb0:	0671      	lsls	r1, r6, #25
 8005bb2:	d5fb      	bpl.n	8005bac <_printf_i+0x1c8>
 8005bb4:	8018      	strh	r0, [r3, #0]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	4616      	mov	r6, r2
 8005bbc:	e7ba      	b.n	8005b34 <_printf_i+0x150>
 8005bbe:	680b      	ldr	r3, [r1, #0]
 8005bc0:	1d1a      	adds	r2, r3, #4
 8005bc2:	600a      	str	r2, [r1, #0]
 8005bc4:	681e      	ldr	r6, [r3, #0]
 8005bc6:	6862      	ldr	r2, [r4, #4]
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7fa fb20 	bl	8000210 <memchr>
 8005bd0:	b108      	cbz	r0, 8005bd6 <_printf_i+0x1f2>
 8005bd2:	1b80      	subs	r0, r0, r6
 8005bd4:	6060      	str	r0, [r4, #4]
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	6123      	str	r3, [r4, #16]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be0:	e7a8      	b.n	8005b34 <_printf_i+0x150>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	4632      	mov	r2, r6
 8005be6:	4649      	mov	r1, r9
 8005be8:	4640      	mov	r0, r8
 8005bea:	47d0      	blx	sl
 8005bec:	3001      	adds	r0, #1
 8005bee:	d0ab      	beq.n	8005b48 <_printf_i+0x164>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	079b      	lsls	r3, r3, #30
 8005bf4:	d413      	bmi.n	8005c1e <_printf_i+0x23a>
 8005bf6:	68e0      	ldr	r0, [r4, #12]
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	4298      	cmp	r0, r3
 8005bfc:	bfb8      	it	lt
 8005bfe:	4618      	movlt	r0, r3
 8005c00:	e7a4      	b.n	8005b4c <_printf_i+0x168>
 8005c02:	2301      	movs	r3, #1
 8005c04:	4632      	mov	r2, r6
 8005c06:	4649      	mov	r1, r9
 8005c08:	4640      	mov	r0, r8
 8005c0a:	47d0      	blx	sl
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d09b      	beq.n	8005b48 <_printf_i+0x164>
 8005c10:	3501      	adds	r5, #1
 8005c12:	68e3      	ldr	r3, [r4, #12]
 8005c14:	9903      	ldr	r1, [sp, #12]
 8005c16:	1a5b      	subs	r3, r3, r1
 8005c18:	42ab      	cmp	r3, r5
 8005c1a:	dcf2      	bgt.n	8005c02 <_printf_i+0x21e>
 8005c1c:	e7eb      	b.n	8005bf6 <_printf_i+0x212>
 8005c1e:	2500      	movs	r5, #0
 8005c20:	f104 0619 	add.w	r6, r4, #25
 8005c24:	e7f5      	b.n	8005c12 <_printf_i+0x22e>
 8005c26:	bf00      	nop
 8005c28:	08006365 	.word	0x08006365
 8005c2c:	08006376 	.word	0x08006376

08005c30 <memcpy>:
 8005c30:	440a      	add	r2, r1
 8005c32:	4291      	cmp	r1, r2
 8005c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c38:	d100      	bne.n	8005c3c <memcpy+0xc>
 8005c3a:	4770      	bx	lr
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c46:	4291      	cmp	r1, r2
 8005c48:	d1f9      	bne.n	8005c3e <memcpy+0xe>
 8005c4a:	bd10      	pop	{r4, pc}

08005c4c <memmove>:
 8005c4c:	4288      	cmp	r0, r1
 8005c4e:	b510      	push	{r4, lr}
 8005c50:	eb01 0402 	add.w	r4, r1, r2
 8005c54:	d902      	bls.n	8005c5c <memmove+0x10>
 8005c56:	4284      	cmp	r4, r0
 8005c58:	4623      	mov	r3, r4
 8005c5a:	d807      	bhi.n	8005c6c <memmove+0x20>
 8005c5c:	1e43      	subs	r3, r0, #1
 8005c5e:	42a1      	cmp	r1, r4
 8005c60:	d008      	beq.n	8005c74 <memmove+0x28>
 8005c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c6a:	e7f8      	b.n	8005c5e <memmove+0x12>
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4601      	mov	r1, r0
 8005c70:	428a      	cmp	r2, r1
 8005c72:	d100      	bne.n	8005c76 <memmove+0x2a>
 8005c74:	bd10      	pop	{r4, pc}
 8005c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c7e:	e7f7      	b.n	8005c70 <memmove+0x24>

08005c80 <_free_r>:
 8005c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c82:	2900      	cmp	r1, #0
 8005c84:	d048      	beq.n	8005d18 <_free_r+0x98>
 8005c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c8a:	9001      	str	r0, [sp, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8005c92:	bfb8      	it	lt
 8005c94:	18e4      	addlt	r4, r4, r3
 8005c96:	f000 f8d3 	bl	8005e40 <__malloc_lock>
 8005c9a:	4a20      	ldr	r2, [pc, #128]	; (8005d1c <_free_r+0x9c>)
 8005c9c:	9801      	ldr	r0, [sp, #4]
 8005c9e:	6813      	ldr	r3, [r2, #0]
 8005ca0:	4615      	mov	r5, r2
 8005ca2:	b933      	cbnz	r3, 8005cb2 <_free_r+0x32>
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	6014      	str	r4, [r2, #0]
 8005ca8:	b003      	add	sp, #12
 8005caa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cae:	f000 b8cd 	b.w	8005e4c <__malloc_unlock>
 8005cb2:	42a3      	cmp	r3, r4
 8005cb4:	d90b      	bls.n	8005cce <_free_r+0x4e>
 8005cb6:	6821      	ldr	r1, [r4, #0]
 8005cb8:	1862      	adds	r2, r4, r1
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	bf04      	itt	eq
 8005cbe:	681a      	ldreq	r2, [r3, #0]
 8005cc0:	685b      	ldreq	r3, [r3, #4]
 8005cc2:	6063      	str	r3, [r4, #4]
 8005cc4:	bf04      	itt	eq
 8005cc6:	1852      	addeq	r2, r2, r1
 8005cc8:	6022      	streq	r2, [r4, #0]
 8005cca:	602c      	str	r4, [r5, #0]
 8005ccc:	e7ec      	b.n	8005ca8 <_free_r+0x28>
 8005cce:	461a      	mov	r2, r3
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b10b      	cbz	r3, 8005cd8 <_free_r+0x58>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d9fa      	bls.n	8005cce <_free_r+0x4e>
 8005cd8:	6811      	ldr	r1, [r2, #0]
 8005cda:	1855      	adds	r5, r2, r1
 8005cdc:	42a5      	cmp	r5, r4
 8005cde:	d10b      	bne.n	8005cf8 <_free_r+0x78>
 8005ce0:	6824      	ldr	r4, [r4, #0]
 8005ce2:	4421      	add	r1, r4
 8005ce4:	1854      	adds	r4, r2, r1
 8005ce6:	42a3      	cmp	r3, r4
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	d1dd      	bne.n	8005ca8 <_free_r+0x28>
 8005cec:	681c      	ldr	r4, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	6053      	str	r3, [r2, #4]
 8005cf2:	4421      	add	r1, r4
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	e7d7      	b.n	8005ca8 <_free_r+0x28>
 8005cf8:	d902      	bls.n	8005d00 <_free_r+0x80>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	6003      	str	r3, [r0, #0]
 8005cfe:	e7d3      	b.n	8005ca8 <_free_r+0x28>
 8005d00:	6825      	ldr	r5, [r4, #0]
 8005d02:	1961      	adds	r1, r4, r5
 8005d04:	428b      	cmp	r3, r1
 8005d06:	bf04      	itt	eq
 8005d08:	6819      	ldreq	r1, [r3, #0]
 8005d0a:	685b      	ldreq	r3, [r3, #4]
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	bf04      	itt	eq
 8005d10:	1949      	addeq	r1, r1, r5
 8005d12:	6021      	streq	r1, [r4, #0]
 8005d14:	6054      	str	r4, [r2, #4]
 8005d16:	e7c7      	b.n	8005ca8 <_free_r+0x28>
 8005d18:	b003      	add	sp, #12
 8005d1a:	bd30      	pop	{r4, r5, pc}
 8005d1c:	20000094 	.word	0x20000094

08005d20 <_malloc_r>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	1ccd      	adds	r5, r1, #3
 8005d24:	f025 0503 	bic.w	r5, r5, #3
 8005d28:	3508      	adds	r5, #8
 8005d2a:	2d0c      	cmp	r5, #12
 8005d2c:	bf38      	it	cc
 8005d2e:	250c      	movcc	r5, #12
 8005d30:	2d00      	cmp	r5, #0
 8005d32:	4606      	mov	r6, r0
 8005d34:	db01      	blt.n	8005d3a <_malloc_r+0x1a>
 8005d36:	42a9      	cmp	r1, r5
 8005d38:	d903      	bls.n	8005d42 <_malloc_r+0x22>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	6033      	str	r3, [r6, #0]
 8005d3e:	2000      	movs	r0, #0
 8005d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d42:	f000 f87d 	bl	8005e40 <__malloc_lock>
 8005d46:	4921      	ldr	r1, [pc, #132]	; (8005dcc <_malloc_r+0xac>)
 8005d48:	680a      	ldr	r2, [r1, #0]
 8005d4a:	4614      	mov	r4, r2
 8005d4c:	b99c      	cbnz	r4, 8005d76 <_malloc_r+0x56>
 8005d4e:	4f20      	ldr	r7, [pc, #128]	; (8005dd0 <_malloc_r+0xb0>)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	b923      	cbnz	r3, 8005d5e <_malloc_r+0x3e>
 8005d54:	4621      	mov	r1, r4
 8005d56:	4630      	mov	r0, r6
 8005d58:	f000 f862 	bl	8005e20 <_sbrk_r>
 8005d5c:	6038      	str	r0, [r7, #0]
 8005d5e:	4629      	mov	r1, r5
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 f85d 	bl	8005e20 <_sbrk_r>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d123      	bne.n	8005db2 <_malloc_r+0x92>
 8005d6a:	230c      	movs	r3, #12
 8005d6c:	6033      	str	r3, [r6, #0]
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f000 f86c 	bl	8005e4c <__malloc_unlock>
 8005d74:	e7e3      	b.n	8005d3e <_malloc_r+0x1e>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	1b5b      	subs	r3, r3, r5
 8005d7a:	d417      	bmi.n	8005dac <_malloc_r+0x8c>
 8005d7c:	2b0b      	cmp	r3, #11
 8005d7e:	d903      	bls.n	8005d88 <_malloc_r+0x68>
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	441c      	add	r4, r3
 8005d84:	6025      	str	r5, [r4, #0]
 8005d86:	e004      	b.n	8005d92 <_malloc_r+0x72>
 8005d88:	6863      	ldr	r3, [r4, #4]
 8005d8a:	42a2      	cmp	r2, r4
 8005d8c:	bf0c      	ite	eq
 8005d8e:	600b      	streq	r3, [r1, #0]
 8005d90:	6053      	strne	r3, [r2, #4]
 8005d92:	4630      	mov	r0, r6
 8005d94:	f000 f85a 	bl	8005e4c <__malloc_unlock>
 8005d98:	f104 000b 	add.w	r0, r4, #11
 8005d9c:	1d23      	adds	r3, r4, #4
 8005d9e:	f020 0007 	bic.w	r0, r0, #7
 8005da2:	1ac2      	subs	r2, r0, r3
 8005da4:	d0cc      	beq.n	8005d40 <_malloc_r+0x20>
 8005da6:	1a1b      	subs	r3, r3, r0
 8005da8:	50a3      	str	r3, [r4, r2]
 8005daa:	e7c9      	b.n	8005d40 <_malloc_r+0x20>
 8005dac:	4622      	mov	r2, r4
 8005dae:	6864      	ldr	r4, [r4, #4]
 8005db0:	e7cc      	b.n	8005d4c <_malloc_r+0x2c>
 8005db2:	1cc4      	adds	r4, r0, #3
 8005db4:	f024 0403 	bic.w	r4, r4, #3
 8005db8:	42a0      	cmp	r0, r4
 8005dba:	d0e3      	beq.n	8005d84 <_malloc_r+0x64>
 8005dbc:	1a21      	subs	r1, r4, r0
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 f82e 	bl	8005e20 <_sbrk_r>
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	d1dd      	bne.n	8005d84 <_malloc_r+0x64>
 8005dc8:	e7cf      	b.n	8005d6a <_malloc_r+0x4a>
 8005dca:	bf00      	nop
 8005dcc:	20000094 	.word	0x20000094
 8005dd0:	20000098 	.word	0x20000098

08005dd4 <_realloc_r>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	4607      	mov	r7, r0
 8005dd8:	4614      	mov	r4, r2
 8005dda:	460e      	mov	r6, r1
 8005ddc:	b921      	cbnz	r1, 8005de8 <_realloc_r+0x14>
 8005dde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005de2:	4611      	mov	r1, r2
 8005de4:	f7ff bf9c 	b.w	8005d20 <_malloc_r>
 8005de8:	b922      	cbnz	r2, 8005df4 <_realloc_r+0x20>
 8005dea:	f7ff ff49 	bl	8005c80 <_free_r>
 8005dee:	4625      	mov	r5, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005df4:	f000 f830 	bl	8005e58 <_malloc_usable_size_r>
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d20f      	bcs.n	8005e1c <_realloc_r+0x48>
 8005dfc:	4621      	mov	r1, r4
 8005dfe:	4638      	mov	r0, r7
 8005e00:	f7ff ff8e 	bl	8005d20 <_malloc_r>
 8005e04:	4605      	mov	r5, r0
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d0f2      	beq.n	8005df0 <_realloc_r+0x1c>
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	f7ff ff0f 	bl	8005c30 <memcpy>
 8005e12:	4631      	mov	r1, r6
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7ff ff33 	bl	8005c80 <_free_r>
 8005e1a:	e7e9      	b.n	8005df0 <_realloc_r+0x1c>
 8005e1c:	4635      	mov	r5, r6
 8005e1e:	e7e7      	b.n	8005df0 <_realloc_r+0x1c>

08005e20 <_sbrk_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d06      	ldr	r5, [pc, #24]	; (8005e3c <_sbrk_r+0x1c>)
 8005e24:	2300      	movs	r3, #0
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	602b      	str	r3, [r5, #0]
 8005e2c:	f7fb fcbe 	bl	80017ac <_sbrk>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_sbrk_r+0x1a>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_sbrk_r+0x1a>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20000180 	.word	0x20000180

08005e40 <__malloc_lock>:
 8005e40:	4801      	ldr	r0, [pc, #4]	; (8005e48 <__malloc_lock+0x8>)
 8005e42:	f000 b811 	b.w	8005e68 <__retarget_lock_acquire_recursive>
 8005e46:	bf00      	nop
 8005e48:	20000188 	.word	0x20000188

08005e4c <__malloc_unlock>:
 8005e4c:	4801      	ldr	r0, [pc, #4]	; (8005e54 <__malloc_unlock+0x8>)
 8005e4e:	f000 b80c 	b.w	8005e6a <__retarget_lock_release_recursive>
 8005e52:	bf00      	nop
 8005e54:	20000188 	.word	0x20000188

08005e58 <_malloc_usable_size_r>:
 8005e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e5c:	1f18      	subs	r0, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bfbc      	itt	lt
 8005e62:	580b      	ldrlt	r3, [r1, r0]
 8005e64:	18c0      	addlt	r0, r0, r3
 8005e66:	4770      	bx	lr

08005e68 <__retarget_lock_acquire_recursive>:
 8005e68:	4770      	bx	lr

08005e6a <__retarget_lock_release_recursive>:
 8005e6a:	4770      	bx	lr

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
