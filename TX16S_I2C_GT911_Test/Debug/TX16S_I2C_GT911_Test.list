
TX16S_I2C_GT911_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009254  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08009404  08009404  00019404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009994  08009994  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800999c  0800999c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800999c  0800999c  0001999c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080099a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c80  20000070  08009a14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cf0  08009a14  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9bf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd7  00000000  00000000  0003ea5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00042838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  00044078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ece  00000000  00000000  00045748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e341  00000000  00000000  0006f616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2d50  00000000  00000000  0008d957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001806a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c28  00000000  00000000  001806fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080093ec 	.word	0x080093ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080093ec 	.word	0x080093ec

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <serialPrintf>:
#define CRLF "\r\n"

#define PRINTF_BUFFER_SIZE    128

void serialPrintf(const char * format, ...)
{
 8000930:	b40f      	push	{r0, r1, r2, r3}
 8000932:	b590      	push	{r4, r7, lr}
 8000934:	b0a5      	sub	sp, #148	; 0x94
 8000936:	af00      	add	r7, sp, #0
	va_list arglist;
	char tmp[PRINTF_BUFFER_SIZE + 1];

	snprintf(tmp, PRINTF_BUFFER_SIZE, "+%05lums: ", HAL_GetTick());
 8000938:	f002 f8b0 	bl	8002a9c <HAL_GetTick>
 800093c:	4603      	mov	r3, r0
 800093e:	1d38      	adds	r0, r7, #4
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <serialPrintf+0x7c>)
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	f008 f8d6 	bl	8008af4 <sniprintf>
	va_start(arglist, format);
 8000948:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800094c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	vsnprintf(tmp + strlen(tmp), PRINTF_BUFFER_SIZE - strlen(tmp), format, arglist);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc56 	bl	8000204 <strlen>
 8000958:	4602      	mov	r2, r0
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	189c      	adds	r4, r3, r2
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fc4f 	bl	8000204 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 800096c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000970:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000974:	4620      	mov	r0, r4
 8000976:	f008 f91d 	bl	8008bb4 <vsniprintf>
	tmp[PRINTF_BUFFER_SIZE] = '\0';
 800097a:	2300      	movs	r3, #0
 800097c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	va_end(arglist);

	const char *t = tmp;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart3, (uint8_t *) t, strlen(t), 10);
 8000986:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800098a:	f7ff fc3b 	bl	8000204 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	230a      	movs	r3, #10
 8000994:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <serialPrintf+0x80>)
 800099a:	f006 fabe 	bl	8006f1a <HAL_UART_Transmit>
}
 800099e:	bf00      	nop
 80009a0:	3794      	adds	r7, #148	; 0x94
 80009a2:	46bd      	mov	sp, r7
 80009a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009a8:	b004      	add	sp, #16
 80009aa:	4770      	bx	lr
 80009ac:	08009404 	.word	0x08009404
 80009b0:	20000104 	.word	0x20000104

080009b4 <TOUCH_AF_INT_Change>:

#define debugPrintf(...) do { serialPrintf(__VA_ARGS__); } while(0)
#define TRACE(f_, ...)        debugPrintf((TRACE_TIME_FORMAT f_ CRLF), TRACE_TIME_VALUE, ##__VA_ARGS__)

void TOUCH_AF_INT_Change(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <TOUCH_AF_INT_Change+0x28>)
 80009d0:	f002 fc5c 	bl	800328c <HAL_GPIO_Init>
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021c00 	.word	0x40021c00

080009e0 <TOUCH_AF_GPIOConfig>:

static void TOUCH_AF_GPIOConfig(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = TOUCH_RST_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStructure);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <TOUCH_AF_GPIOConfig+0x5c>)
 80009fe:	f002 fc45 	bl	800328c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <TOUCH_AF_GPIOConfig+0x5c>)
 8000a0a:	f002 fe03 	bl	8003614 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <TOUCH_AF_GPIOConfig+0x60>)
 8000a24:	f002 fc32 	bl	800328c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <TOUCH_AF_GPIOConfig+0x60>)
 8000a2e:	f002 fdf1 	bl	8003614 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021400 	.word	0x40021400
 8000a40:	40021c00 	.word	0x40021c00

08000a44 <I2C_GT911_ReadRegister>:

bool I2C_GT911_ReadRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	80fb      	strh	r3, [r7, #6]
 8000a50:	4613      	mov	r3, r2
 8000a52:	717b      	strb	r3, [r7, #5]
	uint8_t uRegAddr[2];
	uRegAddr[0] = (uint8_t)((reg & 0xFF00) >> 8);
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	733b      	strb	r3, [r7, #12]
	uRegAddr[1] = (uint8_t)(reg & 0x00FF);
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(&hi2c1, GT911_I2C_ADDR << 1, uRegAddr, 2, 10000) != HAL_OK)
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	f242 7310 	movw	r3, #10000	; 0x2710
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2302      	movs	r3, #2
 8000a70:	2128      	movs	r1, #40	; 0x28
 8000a72:	481e      	ldr	r0, [pc, #120]	; (8000aec <I2C_GT911_ReadRegister+0xa8>)
 8000a74:	f002 ff2c 	bl	80038d0 <HAL_I2C_Master_Transmit>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d011      	beq.n	8000aa2 <I2C_GT911_ReadRegister+0x5e>
	{
		TRACE("I2C ERROR: ReadRedister write reg address failed");
 8000a7e:	f002 f80d 	bl	8002a9c <HAL_GetTick>
 8000a82:	ee07 0a90 	vmov	s15, r0
 8000a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a8a:	ee17 0a90 	vmov	r0, s15
 8000a8e:	f7ff fd7b 	bl	8000588 <__aeabi_f2d>
 8000a92:	4602      	mov	r2, r0
 8000a94:	460b      	mov	r3, r1
 8000a96:	4816      	ldr	r0, [pc, #88]	; (8000af0 <I2C_GT911_ReadRegister+0xac>)
 8000a98:	f7ff ff4a 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000a9c:	beff      	bkpt	0x00ff
		return false;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e01f      	b.n	8000ae2 <I2C_GT911_ReadRegister+0x9e>
	}

	if (HAL_I2C_Master_Receive(&hi2c1, GT911_I2C_ADDR << 1, buf, len, 10000) != HAL_OK)
 8000aa2:	797b      	ldrb	r3, [r7, #5]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000aaa:	9200      	str	r2, [sp, #0]
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	2128      	movs	r1, #40	; 0x28
 8000ab0:	480e      	ldr	r0, [pc, #56]	; (8000aec <I2C_GT911_ReadRegister+0xa8>)
 8000ab2:	f003 f80b 	bl	8003acc <HAL_I2C_Master_Receive>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d011      	beq.n	8000ae0 <I2C_GT911_ReadRegister+0x9c>
	{
		TRACE("I2C ERROR: ReadRedister read reg address failed");
 8000abc:	f001 ffee 	bl	8002a9c <HAL_GetTick>
 8000ac0:	ee07 0a90 	vmov	s15, r0
 8000ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ac8:	ee17 0a90 	vmov	r0, s15
 8000acc:	f7ff fd5c 	bl	8000588 <__aeabi_f2d>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <I2C_GT911_ReadRegister+0xb0>)
 8000ad6:	f7ff ff2b 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000ada:	beff      	bkpt	0x00ff
		return false;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e000      	b.n	8000ae2 <I2C_GT911_ReadRegister+0x9e>
	}
	return true;
 8000ae0:	2301      	movs	r3, #1
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000148 	.word	0x20000148
 8000af0:	08009410 	.word	0x08009410
 8000af4:	0800944c 	.word	0x0800944c

08000af8 <I2C_GT911_WriteRegister>:

uint8_t I2C_GT911_WriteRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0c6      	sub	sp, #280	; 0x118
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	463b      	mov	r3, r7
 8000b00:	6019      	str	r1, [r3, #0]
 8000b02:	4611      	mov	r1, r2
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	4602      	mov	r2, r0
 8000b08:	801a      	strh	r2, [r3, #0]
 8000b0a:	1d7b      	adds	r3, r7, #5
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
	uint8_t uAddrAndBuf[258];
	uAddrAndBuf[0] = (uint8_t)((reg & 0xFF00) >> 8);
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	701a      	strb	r2, [r3, #0]
	uAddrAndBuf[1] = (uint8_t)(reg & 0x00FF);
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	705a      	strb	r2, [r3, #1]

	if (len > 0)
 8000b2c:	1d7b      	adds	r3, r7, #5
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01a      	beq.n	8000b6a <I2C_GT911_WriteRegister+0x72>
	{
		for (int i = 0;i < len;i++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b3a:	e010      	b.n	8000b5e <I2C_GT911_WriteRegister+0x66>
		{
			uAddrAndBuf[i + 2] = buf[i];
 8000b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b40:	463a      	mov	r2, r7
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	441a      	add	r2, r3
 8000b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	7811      	ldrb	r1, [r2, #0]
 8000b4e:	f107 0208 	add.w	r2, r7, #8
 8000b52:	54d1      	strb	r1, [r2, r3]
		for (int i = 0;i < len;i++)
 8000b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b58:	3301      	adds	r3, #1
 8000b5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b5e:	1d7b      	adds	r3, r7, #5
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbe8      	blt.n	8000b3c <I2C_GT911_WriteRegister+0x44>
		}
	}

	if (HAL_I2C_Master_Transmit(&hi2c1, GT911_I2C_ADDR << 1, uAddrAndBuf, len + 2, 10000) != HAL_OK)
 8000b6a:	1d7b      	adds	r3, r7, #5
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	3302      	adds	r3, #2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	f107 0208 	add.w	r2, r7, #8
 8000b78:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b7c:	9100      	str	r1, [sp, #0]
 8000b7e:	2128      	movs	r1, #40	; 0x28
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <I2C_GT911_WriteRegister+0xc4>)
 8000b82:	f002 fea5 	bl	80038d0 <HAL_I2C_Master_Transmit>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d011      	beq.n	8000bb0 <I2C_GT911_WriteRegister+0xb8>
	{
		TRACE("I2C ERROR: WriteRegister failed");
 8000b8c:	f001 ff86 	bl	8002a9c <HAL_GetTick>
 8000b90:	ee07 0a90 	vmov	s15, r0
 8000b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b98:	ee17 0a90 	vmov	r0, s15
 8000b9c:	f7ff fcf4 	bl	8000588 <__aeabi_f2d>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <I2C_GT911_WriteRegister+0xc8>)
 8000ba6:	f7ff fec3 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000baa:	beff      	bkpt	0x00ff
		return false;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e000      	b.n	8000bb2 <I2C_GT911_WriteRegister+0xba>
	}
	return true;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000148 	.word	0x20000148
 8000bc0:	08009484 	.word	0x08009484

08000bc4 <I2C_GT911_SendConfig>:

bool I2C_GT911_SendConfig(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint8_t i = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	buf[0] = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	713b      	strb	r3, [r7, #4]
	buf[1] = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	717b      	strb	r3, [r7, #5]
	bool bResult = true;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e009      	b.n	8000bf4 <I2C_GT911_SendConfig+0x30>
		buf[0] += TOUCH_GT911_Cfg[i];//check sum
 8000be0:	793a      	ldrb	r2, [r7, #4]
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4924      	ldr	r1, [pc, #144]	; (8000c78 <I2C_GT911_SendConfig+0xb4>)
 8000be6:	5ccb      	ldrb	r3, [r1, r3]
 8000be8:	4413      	add	r3, r2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	713b      	strb	r3, [r7, #4]
	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	71fb      	strb	r3, [r7, #7]
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2bb7      	cmp	r3, #183	; 0xb7
 8000bf8:	d9f2      	bls.n	8000be0 <I2C_GT911_SendConfig+0x1c>

	buf[0] = (~buf[0]) + 1;
 8000bfa:	793b      	ldrb	r3, [r7, #4]
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	713b      	strb	r3, [r7, #4]
	if (!I2C_GT911_WriteRegister(GT_CFGS_REG, (uint8_t *) TOUCH_GT911_Cfg, sizeof(TOUCH_GT911_Cfg)))
 8000c02:	22b8      	movs	r2, #184	; 0xb8
 8000c04:	491c      	ldr	r1, [pc, #112]	; (8000c78 <I2C_GT911_SendConfig+0xb4>)
 8000c06:	f248 0047 	movw	r0, #32839	; 0x8047
 8000c0a:	f7ff ff75 	bl	8000af8 <I2C_GT911_WriteRegister>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d110      	bne.n	8000c36 <I2C_GT911_SendConfig+0x72>
	{
		TRACE("GT911 ERROR: write config failed");
 8000c14:	f001 ff42 	bl	8002a9c <HAL_GetTick>
 8000c18:	ee07 0a90 	vmov	s15, r0
 8000c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c20:	ee17 0a90 	vmov	r0, s15
 8000c24:	f7ff fcb0 	bl	8000588 <__aeabi_f2d>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	4813      	ldr	r0, [pc, #76]	; (8000c7c <I2C_GT911_SendConfig+0xb8>)
 8000c2e:	f7ff fe7f 	bl	8000930 <serialPrintf>
		bResult = false;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71bb      	strb	r3, [r7, #6]
	}

	if (!I2C_GT911_WriteRegister(GT_CHECK_REG, buf, 2)) //write checksum
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2202      	movs	r2, #2
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f248 00ff 	movw	r0, #33023	; 0x80ff
 8000c40:	f7ff ff5a 	bl	8000af8 <I2C_GT911_WriteRegister>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d110      	bne.n	8000c6c <I2C_GT911_SendConfig+0xa8>
		{
			TRACE("GT911 ERROR: write config checksum failed");
 8000c4a:	f001 ff27 	bl	8002a9c <HAL_GetTick>
 8000c4e:	ee07 0a90 	vmov	s15, r0
 8000c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c56:	ee17 0a90 	vmov	r0, s15
 8000c5a:	f7ff fc95 	bl	8000588 <__aeabi_f2d>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <I2C_GT911_SendConfig+0xbc>)
 8000c64:	f7ff fe64 	bl	8000930 <serialPrintf>
			bResult = false;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	71bb      	strb	r3, [r7, #6]
		}
	return bResult;
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	0800987c 	.word	0x0800987c
 8000c7c:	080094ac 	.word	0x080094ac
 8000c80:	080094d8 	.word	0x080094d8

08000c84 <touchPanelInit>:

bool touchPanelInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af02      	add	r7, sp, #8
	uint8_t tmp[4] = { 0 };
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]

	TRACE("Touchpanel init start ...");
 8000c8e:	f001 ff05 	bl	8002a9c <HAL_GetTick>
 8000c92:	ee07 0a90 	vmov	s15, r0
 8000c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c9a:	ee17 0a90 	vmov	r0, s15
 8000c9e:	f7ff fc73 	bl	8000588 <__aeabi_f2d>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	48a6      	ldr	r0, [pc, #664]	; (8000f40 <touchPanelInit+0x2bc>)
 8000ca8:	f7ff fe42 	bl	8000930 <serialPrintf>

	TOUCH_AF_GPIOConfig(); //SET RST=OUT INT=OUT INT=LOW
 8000cac:	f7ff fe98 	bl	80009e0 <TOUCH_AF_GPIOConfig>
	//I2C_Init();

	TPRST_LOW();
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb6:	48a3      	ldr	r0, [pc, #652]	; (8000f44 <touchPanelInit+0x2c0>)
 8000cb8:	f002 fcac 	bl	8003614 <HAL_GPIO_WritePin>
	TPINT_HIGH();
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	48a1      	ldr	r0, [pc, #644]	; (8000f48 <touchPanelInit+0x2c4>)
 8000cc2:	f002 fca7 	bl	8003614 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f001 fef4 	bl	8002ab4 <HAL_Delay>

	TPRST_HIGH();
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd2:	489c      	ldr	r0, [pc, #624]	; (8000f44 <touchPanelInit+0x2c0>)
 8000cd4:	f002 fc9e 	bl	8003614 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 8000cd8:	2006      	movs	r0, #6
 8000cda:	f001 feeb 	bl	8002ab4 <HAL_Delay>

	TPINT_LOW();
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4899      	ldr	r0, [pc, #612]	; (8000f48 <touchPanelInit+0x2c4>)
 8000ce4:	f002 fc96 	bl	8003614 <HAL_GPIO_WritePin>
	HAL_Delay(55);
 8000ce8:	2037      	movs	r0, #55	; 0x37
 8000cea:	f001 fee3 	bl	8002ab4 <HAL_Delay>

	TOUCH_AF_INT_Change();  //Set INT INPUT INT=LOW
 8000cee:	f7ff fe61 	bl	80009b4 <TOUCH_AF_INT_Change>

	HAL_Delay(50);
 8000cf2:	2032      	movs	r0, #50	; 0x32
 8000cf4:	f001 fede 	bl	8002ab4 <HAL_Delay>

	TRACE("Reading Touch registry");
 8000cf8:	f001 fed0 	bl	8002a9c <HAL_GetTick>
 8000cfc:	ee07 0a90 	vmov	s15, r0
 8000d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d04:	ee17 0a90 	vmov	r0, s15
 8000d08:	f7ff fc3e 	bl	8000588 <__aeabi_f2d>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	488e      	ldr	r0, [pc, #568]	; (8000f4c <touchPanelInit+0x2c8>)
 8000d12:	f7ff fe0d 	bl	8000930 <serialPrintf>
	if (!I2C_GT911_ReadRegister(GT_PID_REG, tmp, 4))
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2204      	movs	r2, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f248 1040 	movw	r0, #33088	; 0x8140
 8000d20:	f7ff fe90 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00e      	beq.n	8000d4e <touchPanelInit+0xca>
	{
		TRACE("GT911 ERROR: Product ID read failed");
 8000d30:	f001 feb4 	bl	8002a9c <HAL_GetTick>
 8000d34:	ee07 0a90 	vmov	s15, r0
 8000d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3c:	ee17 0a90 	vmov	r0, s15
 8000d40:	f7ff fc22 	bl	8000588 <__aeabi_f2d>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4881      	ldr	r0, [pc, #516]	; (8000f50 <touchPanelInit+0x2cc>)
 8000d4a:	f7ff fdf1 	bl	8000930 <serialPrintf>
	}

	if (strcmp((char *) tmp, "911") == 0)
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4980      	ldr	r1, [pc, #512]	; (8000f54 <touchPanelInit+0x2d0>)
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fa4c 	bl	80001f0 <strcmp>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f040 80db 	bne.w	8000f16 <touchPanelInit+0x292>
	{
		TRACE("GT911 chip detected");
 8000d60:	f001 fe9c 	bl	8002a9c <HAL_GetTick>
 8000d64:	ee07 0a90 	vmov	s15, r0
 8000d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6c:	ee17 0a90 	vmov	r0, s15
 8000d70:	f7ff fc0a 	bl	8000588 <__aeabi_f2d>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4877      	ldr	r0, [pc, #476]	; (8000f58 <touchPanelInit+0x2d4>)
 8000d7a:	f7ff fdd9 	bl	8000930 <serialPrintf>
		tmp[0] = 0X02;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	f248 0040 	movw	r0, #32832	; 0x8040
 8000d8c:	f7ff feb4 	bl	8000af8 <I2C_GT911_WriteRegister>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10e      	bne.n	8000db4 <touchPanelInit+0x130>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000d96:	f001 fe81 	bl	8002a9c <HAL_GetTick>
 8000d9a:	ee07 0a90 	vmov	s15, r0
 8000d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da2:	ee17 0a90 	vmov	r0, s15
 8000da6:	f7ff fbef 	bl	8000588 <__aeabi_f2d>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	486b      	ldr	r0, [pc, #428]	; (8000f5c <touchPanelInit+0x2d8>)
 8000db0:	f7ff fdbe 	bl	8000930 <serialPrintf>
		}
		if (!I2C_GT911_ReadRegister(GT_CFGS_REG, tmp, 1))
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2201      	movs	r2, #1
 8000db8:	4619      	mov	r1, r3
 8000dba:	f248 0047 	movw	r0, #32839	; 0x8047
 8000dbe:	f7ff fe41 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f083 0301 	eor.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d00e      	beq.n	8000dec <touchPanelInit+0x168>
		{
			TRACE("GT911 ERROR: configuration register read failed");
 8000dce:	f001 fe65 	bl	8002a9c <HAL_GetTick>
 8000dd2:	ee07 0a90 	vmov	s15, r0
 8000dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dda:	ee17 0a90 	vmov	r0, s15
 8000dde:	f7ff fbd3 	bl	8000588 <__aeabi_f2d>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	485e      	ldr	r0, [pc, #376]	; (8000f60 <touchPanelInit+0x2dc>)
 8000de8:	f7ff fda2 	bl	8000930 <serialPrintf>
		}

		TRACE("Chip config Ver:%x", tmp[0]);
 8000dec:	f001 fe56 	bl	8002a9c <HAL_GetTick>
 8000df0:	ee07 0a90 	vmov	s15, r0
 8000df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df8:	ee17 0a90 	vmov	r0, s15
 8000dfc:	f7ff fbc4 	bl	8000588 <__aeabi_f2d>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	7939      	ldrb	r1, [r7, #4]
 8000e06:	9100      	str	r1, [sp, #0]
 8000e08:	4856      	ldr	r0, [pc, #344]	; (8000f64 <touchPanelInit+0x2e0>)
 8000e0a:	f7ff fd91 	bl	8000930 <serialPrintf>
		if (tmp[0] <= GT911_CFG_NUMER)  //Config ver
 8000e0e:	793b      	ldrb	r3, [r7, #4]
 8000e10:	2b6c      	cmp	r3, #108	; 0x6c
 8000e12:	d827      	bhi.n	8000e64 <touchPanelInit+0x1e0>
		{
			TRACE("Sending new config %d", GT911_CFG_NUMER);
 8000e14:	f001 fe42 	bl	8002a9c <HAL_GetTick>
 8000e18:	ee07 0a90 	vmov	s15, r0
 8000e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e20:	ee17 0a90 	vmov	r0, s15
 8000e24:	f7ff fbb0 	bl	8000588 <__aeabi_f2d>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	216c      	movs	r1, #108	; 0x6c
 8000e2e:	9100      	str	r1, [sp, #0]
 8000e30:	484d      	ldr	r0, [pc, #308]	; (8000f68 <touchPanelInit+0x2e4>)
 8000e32:	f7ff fd7d 	bl	8000930 <serialPrintf>
			if (!I2C_GT911_SendConfig())
 8000e36:	f7ff fec5 	bl	8000bc4 <I2C_GT911_SendConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f083 0301 	eor.w	r3, r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00e      	beq.n	8000e64 <touchPanelInit+0x1e0>
			{
				TRACE("GT911 ERROR: sending configration failed");
 8000e46:	f001 fe29 	bl	8002a9c <HAL_GetTick>
 8000e4a:	ee07 0a90 	vmov	s15, r0
 8000e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e52:	ee17 0a90 	vmov	r0, s15
 8000e56:	f7ff fb97 	bl	8000588 <__aeabi_f2d>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4843      	ldr	r0, [pc, #268]	; (8000f6c <touchPanelInit+0x2e8>)
 8000e60:	f7ff fd66 	bl	8000930 <serialPrintf>
			}
		}

		if (!I2C_GT911_ReadRegister(GT911_FIRMWARE_VERSION_REG, tmp, 2))
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2202      	movs	r2, #2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f248 1044 	movw	r0, #33092	; 0x8144
 8000e6e:	f7ff fde9 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00f      	beq.n	8000e9e <touchPanelInit+0x21a>
		{
			TRACE("GT911 ERROR: reading firmware version failed");
 8000e7e:	f001 fe0d 	bl	8002a9c <HAL_GetTick>
 8000e82:	ee07 0a90 	vmov	s15, r0
 8000e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e8a:	ee17 0a90 	vmov	r0, s15
 8000e8e:	f7ff fb7b 	bl	8000588 <__aeabi_f2d>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4836      	ldr	r0, [pc, #216]	; (8000f70 <touchPanelInit+0x2ec>)
 8000e98:	f7ff fd4a 	bl	8000930 <serialPrintf>
 8000e9c:	e01b      	b.n	8000ed6 <touchPanelInit+0x252>
		}
		else
		{
			touchGT911fwver = (tmp[1] << 8) + tmp[0];
 8000e9e:	797b      	ldrb	r3, [r7, #5]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	793b      	ldrb	r3, [r7, #4]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <touchPanelInit+0x2f0>)
 8000eb0:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 FW version: %u", touchGT911fwver);
 8000eb2:	f001 fdf3 	bl	8002a9c <HAL_GetTick>
 8000eb6:	ee07 0a90 	vmov	s15, r0
 8000eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ebe:	ee17 0a90 	vmov	r0, s15
 8000ec2:	f7ff fb61 	bl	8000588 <__aeabi_f2d>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	492a      	ldr	r1, [pc, #168]	; (8000f74 <touchPanelInit+0x2f0>)
 8000ecc:	8809      	ldrh	r1, [r1, #0]
 8000ece:	9100      	str	r1, [sp, #0]
 8000ed0:	4829      	ldr	r0, [pc, #164]	; (8000f78 <touchPanelInit+0x2f4>)
 8000ed2:	f7ff fd2d 	bl	8000930 <serialPrintf>
		}

		HAL_Delay(10);
 8000ed6:	200a      	movs	r0, #10
 8000ed8:	f001 fdec 	bl	8002ab4 <HAL_Delay>
		tmp[0] = 0X00;
 8000edc:	2300      	movs	r3, #0
 8000ede:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))  //end reset
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f248 0040 	movw	r0, #32832	; 0x8040
 8000eea:	f7ff fe05 	bl	8000af8 <I2C_GT911_WriteRegister>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10e      	bne.n	8000f12 <touchPanelInit+0x28e>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000ef4:	f001 fdd2 	bl	8002a9c <HAL_GetTick>
 8000ef8:	ee07 0a90 	vmov	s15, r0
 8000efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f00:	ee17 0a90 	vmov	r0, s15
 8000f04:	f7ff fb40 	bl	8000588 <__aeabi_f2d>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4813      	ldr	r0, [pc, #76]	; (8000f5c <touchPanelInit+0x2d8>)
 8000f0e:	f7ff fd0f 	bl	8000930 <serialPrintf>
		}
		// touchGT911Flag = true;

		//TOUCH_AF_ExtiConfig();

		return true;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <touchPanelInit+0x2b2>
	}
	TRACE("GT911 chip NOT FOUND");
 8000f16:	f001 fdc1 	bl	8002a9c <HAL_GetTick>
 8000f1a:	ee07 0a90 	vmov	s15, r0
 8000f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f22:	ee17 0a90 	vmov	r0, s15
 8000f26:	f7ff fb2f 	bl	8000588 <__aeabi_f2d>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4813      	ldr	r0, [pc, #76]	; (8000f7c <touchPanelInit+0x2f8>)
 8000f30:	f7ff fcfe 	bl	8000930 <serialPrintf>
	return false;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	0800950c 	.word	0x0800950c
 8000f44:	40021400 	.word	0x40021400
 8000f48:	40021c00 	.word	0x40021c00
 8000f4c:	08009530 	.word	0x08009530
 8000f50:	08009550 	.word	0x08009550
 8000f54:	0800957c 	.word	0x0800957c
 8000f58:	08009580 	.word	0x08009580
 8000f5c:	0800959c 	.word	0x0800959c
 8000f60:	080095d4 	.word	0x080095d4
 8000f64:	0800960c 	.word	0x0800960c
 8000f68:	08009628 	.word	0x08009628
 8000f6c:	08009648 	.word	0x08009648
 8000f70:	0800967c 	.word	0x0800967c
 8000f74:	2000008c 	.word	0x2000008c
 8000f78:	080096b4 	.word	0x080096b4
 8000f7c:	080096d4 	.word	0x080096d4

08000f80 <touchPanelDeInit>:

void touchPanelDeInit(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	//TOUCH_AF_ExtiStop();
	//touchGT911Flag = false;
	TRACE("touchPanelDeInit()");
 8000f84:	f001 fd8a 	bl	8002a9c <HAL_GetTick>
 8000f88:	ee07 0a90 	vmov	s15, r0
 8000f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f90:	ee17 0a90 	vmov	r0, s15
 8000f94:	f7ff faf8 	bl	8000588 <__aeabi_f2d>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <touchPanelDeInit+0x28>)
 8000f9e:	f7ff fcc7 	bl	8000930 <serialPrintf>
	asm("bkpt 255");
 8000fa2:	beff      	bkpt	0x00ff
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	080096f4 	.word	0x080096f4

08000fac <touchPanelRead>:

void touchPanelRead()
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
	uint8_t state = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	70bb      	strb	r3, [r7, #2]
	// if (!touchEventOccured)
	//   return;

	// touchEventOccured = false;

	uint32_t startReadStatus = HAL_GetTick();
 8000fb6:	f001 fd71 	bl	8002a9c <HAL_GetTick>
 8000fba:	6078      	str	r0, [r7, #4]
	do {
		if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG, &state, 1)) {
 8000fbc:	1cbb      	adds	r3, r7, #2
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f248 104e 	movw	r0, #33102	; 0x814e
 8000fc6:	f7ff fd3d 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d028      	beq.n	8001028 <touchPanelRead+0x7c>
			HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2104      	movs	r1, #4
 8000fda:	48b5      	ldr	r0, [pc, #724]	; (80012b0 <touchPanelRead+0x304>)
 8000fdc:	f002 fb1a 	bl	8003614 <HAL_GPIO_WritePin>
		        HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	48b2      	ldr	r0, [pc, #712]	; (80012b0 <touchPanelRead+0x304>)
 8000fe6:	f002 fb15 	bl	8003614 <HAL_GPIO_WritePin>
		        HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);			
 8000fea:	2200      	movs	r2, #0
 8000fec:	2120      	movs	r1, #32
 8000fee:	48b0      	ldr	r0, [pc, #704]	; (80012b0 <touchPanelRead+0x304>)
 8000ff0:	f002 fb10 	bl	8003614 <HAL_GPIO_WritePin>
			touchGT911hiccups++;
 8000ff4:	4baf      	ldr	r3, [pc, #700]	; (80012b4 <touchPanelRead+0x308>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4bad      	ldr	r3, [pc, #692]	; (80012b4 <touchPanelRead+0x308>)
 8000ffe:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 I2C read XY error");
 8001000:	f001 fd4c 	bl	8002a9c <HAL_GetTick>
 8001004:	ee07 0a90 	vmov	s15, r0
 8001008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff faba 	bl	8000588 <__aeabi_f2d>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	48a7      	ldr	r0, [pc, #668]	; (80012b8 <touchPanelRead+0x30c>)
 800101a:	f7ff fc89 	bl	8000930 <serialPrintf>
			touchPanelDeInit();
 800101e:	f7ff ffaf 	bl	8000f80 <touchPanelDeInit>
			touchPanelInit();
 8001022:	f7ff fe2f 	bl	8000c84 <touchPanelInit>
			return;
 8001026:	e189      	b.n	800133c <touchPanelRead+0x390>
		}

		if (state & 0x80u) {
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	b25b      	sxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <touchPanelRead+0x9a>
			// ready
			break;
		}
		HAL_Delay(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f001 fd3f 	bl	8002ab4 <HAL_Delay>
	} while (HAL_GetTick() - startReadStatus < GT911_TIMEOUT);
 8001036:	f001 fd31 	bl	8002a9c <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d9bb      	bls.n	8000fbc <touchPanelRead+0x10>
 8001044:	e000      	b.n	8001048 <touchPanelRead+0x9c>
			break;
 8001046:	bf00      	nop

	TRACE("touch state = 0x%x", state);
 8001048:	f001 fd28 	bl	8002a9c <HAL_GetTick>
 800104c:	ee07 0a90 	vmov	s15, r0
 8001050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001054:	ee17 0a90 	vmov	r0, s15
 8001058:	f7ff fa96 	bl	8000588 <__aeabi_f2d>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	78b9      	ldrb	r1, [r7, #2]
 8001062:	9100      	str	r1, [sp, #0]
 8001064:	4895      	ldr	r0, [pc, #596]	; (80012bc <touchPanelRead+0x310>)
 8001066:	f7ff fc63 	bl	8000930 <serialPrintf>
	if (state & 0x80u) {
 800106a:	78bb      	ldrb	r3, [r7, #2]
 800106c:	b25b      	sxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	f280 80c2 	bge.w	80011f8 <touchPanelRead+0x24c>
		uint8_t pointsCount = (state & 0x0Fu);
 8001074:	78bb      	ldrb	r3, [r7, #2]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	70fb      	strb	r3, [r7, #3]

		if (pointsCount > 0 && pointsCount <= GT911_MAX_TP) {
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80a1 	beq.w	80011c6 <touchPanelRead+0x21a>
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2b05      	cmp	r3, #5
 8001088:	f200 809d 	bhi.w	80011c6 <touchPanelRead+0x21a>
			if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG + 1, touchData.data, pointsCount * sizeof(TouchPoint)))
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	461a      	mov	r2, r3
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4413      	add	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	4989      	ldr	r1, [pc, #548]	; (80012c0 <touchPanelRead+0x314>)
 800109c:	f248 104f 	movw	r0, #33103	; 0x814f
 80010a0:	f7ff fcd0 	bl	8000a44 <I2C_GT911_ReadRegister>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d028      	beq.n	8001102 <touchPanelRead+0x156>
			{
				HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2104      	movs	r1, #4
 80010b4:	487e      	ldr	r0, [pc, #504]	; (80012b0 <touchPanelRead+0x304>)
 80010b6:	f002 faad 	bl	8003614 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2110      	movs	r1, #16
 80010be:	487c      	ldr	r0, [pc, #496]	; (80012b0 <touchPanelRead+0x304>)
 80010c0:	f002 faa8 	bl	8003614 <HAL_GPIO_WritePin>
		                HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);			
 80010c4:	2200      	movs	r2, #0
 80010c6:	2120      	movs	r1, #32
 80010c8:	4879      	ldr	r0, [pc, #484]	; (80012b0 <touchPanelRead+0x304>)
 80010ca:	f002 faa3 	bl	8003614 <HAL_GPIO_WritePin>
				touchGT911hiccups++;
 80010ce:	4b79      	ldr	r3, [pc, #484]	; (80012b4 <touchPanelRead+0x308>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	4b77      	ldr	r3, [pc, #476]	; (80012b4 <touchPanelRead+0x308>)
 80010d8:	801a      	strh	r2, [r3, #0]
				TRACE("GT911 I2C data read error");
 80010da:	f001 fcdf 	bl	8002a9c <HAL_GetTick>
 80010de:	ee07 0a90 	vmov	s15, r0
 80010e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e6:	ee17 0a90 	vmov	r0, s15
 80010ea:	f7ff fa4d 	bl	8000588 <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4874      	ldr	r0, [pc, #464]	; (80012c4 <touchPanelRead+0x318>)
 80010f4:	f7ff fc1c 	bl	8000930 <serialPrintf>
				touchPanelDeInit();
 80010f8:	f7ff ff42 	bl	8000f80 <touchPanelDeInit>
				touchPanelInit();
 80010fc:	f7ff fdc2 	bl	8000c84 <touchPanelInit>
				return;
 8001100:	e11c      	b.n	800133c <touchPanelRead+0x390>
			}
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 8001102:	4b71      	ldr	r3, [pc, #452]	; (80012c8 <touchPanelRead+0x31c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d007      	beq.n	800111a <touchPanelRead+0x16e>
 800110a:	4b6f      	ldr	r3, [pc, #444]	; (80012c8 <touchPanelRead+0x31c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d003      	beq.n	800111a <touchPanelRead+0x16e>
 8001112:	4b6d      	ldr	r3, [pc, #436]	; (80012c8 <touchPanelRead+0x31c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b04      	cmp	r3, #4
 8001118:	d117      	bne.n	800114a <touchPanelRead+0x19e>
			{
				touchState.event = TE_DOWN;
 800111a:	4b6b      	ldr	r3, [pc, #428]	; (80012c8 <touchPanelRead+0x31c>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]
				touchState.startX = touchState.x = touchData.points[0].x;
 8001120:	4b67      	ldr	r3, [pc, #412]	; (80012c0 <touchPanelRead+0x314>)
 8001122:	885b      	ldrh	r3, [r3, #2]
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <touchPanelRead+0x31c>)
 8001128:	805a      	strh	r2, [r3, #2]
 800112a:	4b67      	ldr	r3, [pc, #412]	; (80012c8 <touchPanelRead+0x31c>)
 800112c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001130:	4b65      	ldr	r3, [pc, #404]	; (80012c8 <touchPanelRead+0x31c>)
 8001132:	80da      	strh	r2, [r3, #6]
				touchState.startY = touchState.y = touchData.points[0].y;
 8001134:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <touchPanelRead+0x314>)
 8001136:	889b      	ldrh	r3, [r3, #4]
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <touchPanelRead+0x31c>)
 800113c:	809a      	strh	r2, [r3, #4]
 800113e:	4b62      	ldr	r3, [pc, #392]	; (80012c8 <touchPanelRead+0x31c>)
 8001140:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001144:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <touchPanelRead+0x31c>)
 8001146:	811a      	strh	r2, [r3, #8]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 8001148:	e055      	b.n	80011f6 <touchPanelRead+0x24a>
			}
			else
			{
				touchState.deltaX = touchData.points[0].x - touchState.x;
 800114a:	4b5d      	ldr	r3, [pc, #372]	; (80012c0 <touchPanelRead+0x314>)
 800114c:	885a      	ldrh	r2, [r3, #2]
 800114e:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <touchPanelRead+0x31c>)
 8001150:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001154:	b29b      	uxth	r3, r3
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	b21a      	sxth	r2, r3
 800115c:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <touchPanelRead+0x31c>)
 800115e:	815a      	strh	r2, [r3, #10]
				touchState.deltaY = touchData.points[0].y - touchState.y;
 8001160:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <touchPanelRead+0x314>)
 8001162:	889a      	ldrh	r2, [r3, #4]
 8001164:	4b58      	ldr	r3, [pc, #352]	; (80012c8 <touchPanelRead+0x31c>)
 8001166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800116a:	b29b      	uxth	r3, r3
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	b29b      	uxth	r3, r3
 8001170:	b21a      	sxth	r2, r3
 8001172:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <touchPanelRead+0x31c>)
 8001174:	819a      	strh	r2, [r3, #12]
				if (touchState.event == TE_SLIDE || abs(touchState.deltaX) >= SLIDE_RANGE || abs(touchState.deltaY) >= SLIDE_RANGE)
 8001176:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <touchPanelRead+0x31c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d015      	beq.n	80011aa <touchPanelRead+0x1fe>
 800117e:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <touchPanelRead+0x31c>)
 8001180:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001184:	2b00      	cmp	r3, #0
 8001186:	bfb8      	it	lt
 8001188:	425b      	neglt	r3, r3
 800118a:	b29a      	uxth	r2, r3
 800118c:	2306      	movs	r3, #6
 800118e:	b29b      	uxth	r3, r3
 8001190:	429a      	cmp	r2, r3
 8001192:	d20a      	bcs.n	80011aa <touchPanelRead+0x1fe>
 8001194:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <touchPanelRead+0x31c>)
 8001196:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	bfb8      	it	lt
 800119e:	425b      	neglt	r3, r3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	2306      	movs	r3, #6
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d325      	bcc.n	80011f6 <touchPanelRead+0x24a>
				{
					touchState.event = TE_SLIDE;
 80011aa:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <touchPanelRead+0x31c>)
 80011ac:	2203      	movs	r2, #3
 80011ae:	701a      	strb	r2, [r3, #0]
					touchState.x = touchData.points[0].x;
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <touchPanelRead+0x314>)
 80011b2:	885b      	ldrh	r3, [r3, #2]
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <touchPanelRead+0x31c>)
 80011b8:	805a      	strh	r2, [r3, #2]
					touchState.y = touchData.points[0].y;
 80011ba:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <touchPanelRead+0x314>)
 80011bc:	889b      	ldrh	r3, [r3, #4]
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <touchPanelRead+0x31c>)
 80011c2:	809a      	strh	r2, [r3, #4]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80011c4:	e017      	b.n	80011f6 <touchPanelRead+0x24a>
				}
			}
		}
		else
		{
			if (touchState.event == TE_SLIDE)
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <touchPanelRead+0x31c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d103      	bne.n	80011d6 <touchPanelRead+0x22a>
			{
				touchState.event = TE_SLIDE_END;
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <touchPanelRead+0x31c>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e010      	b.n	80011f8 <touchPanelRead+0x24c>
			}
			else if (touchState.event == TE_DOWN)
 80011d6:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <touchPanelRead+0x31c>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d103      	bne.n	80011e6 <touchPanelRead+0x23a>
			{
				touchState.event = TE_UP;
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <touchPanelRead+0x31c>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e008      	b.n	80011f8 <touchPanelRead+0x24c>
			}
			else if (touchState.event != TE_SLIDE_END) {
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <touchPanelRead+0x31c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d004      	beq.n	80011f8 <touchPanelRead+0x24c>
				touchState.event = TE_NONE;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <touchPanelRead+0x31c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e000      	b.n	80011f8 <touchPanelRead+0x24c>
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80011f6:	bf00      	nop
			}
		}
	}

	uint8_t zero = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	707b      	strb	r3, [r7, #1]
	if (!I2C_GT911_WriteRegister(GT911_READ_XY_REG, &zero, 1))
 80011fc:	1c7b      	adds	r3, r7, #1
 80011fe:	2201      	movs	r2, #1
 8001200:	4619      	mov	r1, r3
 8001202:	f248 104e 	movw	r0, #33102	; 0x814e
 8001206:	f7ff fc77 	bl	8000af8 <I2C_GT911_WriteRegister>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10e      	bne.n	800122e <touchPanelRead+0x282>
	{
		TRACE("GT911 ERROR: clearing XY register failed");
 8001210:	f001 fc44 	bl	8002a9c <HAL_GetTick>
 8001214:	ee07 0a90 	vmov	s15, r0
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9b2 	bl	8000588 <__aeabi_f2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4828      	ldr	r0, [pc, #160]	; (80012cc <touchPanelRead+0x320>)
 800122a:	f7ff fb81 	bl	8000930 <serialPrintf>
	}

	switch (touchState.event) {
 800122e:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <touchPanelRead+0x31c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d872      	bhi.n	800131c <touchPanelRead+0x370>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <touchPanelRead+0x290>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	08001251 	.word	0x08001251
 8001240:	08001291 	.word	0x08001291
 8001244:	08001271 	.word	0x08001271
 8001248:	080012fd 	.word	0x080012fd
 800124c:	080012dd 	.word	0x080012dd
		case TE_NONE:
			TRACE("touch event = NONE"); break;
 8001250:	f001 fc24 	bl	8002a9c <HAL_GetTick>
 8001254:	ee07 0a90 	vmov	s15, r0
 8001258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800125c:	ee17 0a90 	vmov	r0, s15
 8001260:	f7ff f992 	bl	8000588 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <touchPanelRead+0x324>)
 800126a:	f7ff fb61 	bl	8000930 <serialPrintf>
 800126e:	e065      	b.n	800133c <touchPanelRead+0x390>
		case TE_UP:
			TRACE("touch event = UP"); break;
 8001270:	f001 fc14 	bl	8002a9c <HAL_GetTick>
 8001274:	ee07 0a90 	vmov	s15, r0
 8001278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127c:	ee17 0a90 	vmov	r0, s15
 8001280:	f7ff f982 	bl	8000588 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <touchPanelRead+0x328>)
 800128a:	f7ff fb51 	bl	8000930 <serialPrintf>
 800128e:	e055      	b.n	800133c <touchPanelRead+0x390>
		case TE_DOWN:
			TRACE("touch event = DOWN"); break;
 8001290:	f001 fc04 	bl	8002a9c <HAL_GetTick>
 8001294:	ee07 0a90 	vmov	s15, r0
 8001298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129c:	ee17 0a90 	vmov	r0, s15
 80012a0:	f7ff f972 	bl	8000588 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <touchPanelRead+0x32c>)
 80012aa:	f7ff fb41 	bl	8000930 <serialPrintf>
 80012ae:	e045      	b.n	800133c <touchPanelRead+0x390>
 80012b0:	40021000 	.word	0x40021000
 80012b4:	2000008e 	.word	0x2000008e
 80012b8:	08009710 	.word	0x08009710
 80012bc:	08009730 	.word	0x08009730
 80012c0:	200006d8 	.word	0x200006d8
 80012c4:	0800974c 	.word	0x0800974c
 80012c8:	20000860 	.word	0x20000860
 80012cc:	08009770 	.word	0x08009770
 80012d0:	080097a4 	.word	0x080097a4
 80012d4:	080097c0 	.word	0x080097c0
 80012d8:	080097dc 	.word	0x080097dc
		case TE_SLIDE_END:
			TRACE("touch event = SLIDE_END"); break;
 80012dc:	f001 fbde 	bl	8002a9c <HAL_GetTick>
 80012e0:	ee07 0a90 	vmov	s15, r0
 80012e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e8:	ee17 0a90 	vmov	r0, s15
 80012ec:	f7ff f94c 	bl	8000588 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <touchPanelRead+0x398>)
 80012f6:	f7ff fb1b 	bl	8000930 <serialPrintf>
 80012fa:	e01f      	b.n	800133c <touchPanelRead+0x390>
		case TE_SLIDE:
			TRACE("touch event = SLIDE"); break;
 80012fc:	f001 fbce 	bl	8002a9c <HAL_GetTick>
 8001300:	ee07 0a90 	vmov	s15, r0
 8001304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001308:	ee17 0a90 	vmov	r0, s15
 800130c:	f7ff f93c 	bl	8000588 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	480c      	ldr	r0, [pc, #48]	; (8001348 <touchPanelRead+0x39c>)
 8001316:	f7ff fb0b 	bl	8000930 <serialPrintf>
 800131a:	e00f      	b.n	800133c <touchPanelRead+0x390>
		default:
			TRACE("touch event = UNKNOWN"); break;
 800131c:	f001 fbbe 	bl	8002a9c <HAL_GetTick>
 8001320:	ee07 0a90 	vmov	s15, r0
 8001324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001328:	ee17 0a90 	vmov	r0, s15
 800132c:	f7ff f92c 	bl	8000588 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <touchPanelRead+0x3a0>)
 8001336:	f7ff fafb 	bl	8000930 <serialPrintf>
 800133a:	bf00      	nop
	}
}
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	080097f8 	.word	0x080097f8
 8001348:	08009818 	.word	0x08009818
 800134c:	08009834 	.word	0x08009834

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001354:	f001 fb3c 	bl	80029d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001358:	f000 f882 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135c:	f000 fbf6 	bl	8001b4c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001360:	f000 fb78 	bl	8001a54 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8001364:	f000 fba4 	bl	8001ab0 <MX_FMC_Init>
  MX_USART3_UART_Init();
 8001368:	f000 fb20 	bl	80019ac <MX_USART3_UART_Init>
  MX_LTDC_Init();
 800136c:	f000 f9b8 	bl	80016e0 <MX_LTDC_Init>
  MX_I2C1_Init();
 8001370:	f000 f974 	bl	800165c <MX_I2C1_Init>
  MX_ADC3_Init();
 8001374:	f000 f8f6 	bl	8001564 <MX_ADC3_Init>
  MX_DAC_Init();
 8001378:	f000 f946 	bl	8001608 <MX_DAC_Init>
  MX_SDIO_SD_Init();
 800137c:	f000 fa6c 	bl	8001858 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8001380:	f000 fa8a 	bl	8001898 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001384:	f000 fabe 	bl	8001904 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001388:	f000 fae6 	bl	8001958 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800138c:	f000 fb38 	bl	8001a00 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001390:	f007 f984 	bl	800869c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET); // Turn on power
 8001394:	2201      	movs	r2, #1
 8001396:	2102      	movs	r1, #2
 8001398:	482d      	ldr	r0, [pc, #180]	; (8001450 <main+0x100>)
 800139a:	f002 f93b 	bl	8003614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2104      	movs	r1, #4
 80013a2:	482c      	ldr	r0, [pc, #176]	; (8001454 <main+0x104>)
 80013a4:	f002 f936 	bl	8003614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2110      	movs	r1, #16
 80013ac:	4829      	ldr	r0, [pc, #164]	; (8001454 <main+0x104>)
 80013ae:	f002 f931 	bl	8003614 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2120      	movs	r1, #32
 80013b6:	4827      	ldr	r0, [pc, #156]	; (8001454 <main+0x104>)
 80013b8:	f002 f92c 	bl	8003614 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80013bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c0:	f001 fb78 	bl	8002ab4 <HAL_Delay>

  if (!touchPanelInit())
 80013c4:	f7ff fc5e 	bl	8000c84 <touchPanelInit>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00f      	beq.n	80013f4 <main+0xa4>
  {
	  TRACE("ERROR: touchPanelInit() failed");
 80013d4:	f001 fb62 	bl	8002a9c <HAL_GetTick>
 80013d8:	ee07 0a90 	vmov	s15, r0
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	ee17 0a90 	vmov	r0, s15
 80013e4:	f7ff f8d0 	bl	8000588 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <main+0x108>)
 80013ee:	f7ff fa9f 	bl	8000930 <serialPrintf>
	  asm("bkpt 255");
 80013f2:	beff      	bkpt	0x00ff
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin) == GPIO_PIN_SET)
 80013f4:	2104      	movs	r1, #4
 80013f6:	4819      	ldr	r0, [pc, #100]	; (800145c <main+0x10c>)
 80013f8:	f002 f8f4 	bl	80035e4 <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <main+0xb6>
	  {
		  touchPanelRead();
 8001402:	f7ff fdd3 	bl	8000fac <touchPanelRead>
	  }



	  // Check Power-Off
	  if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8001406:	2101      	movs	r1, #1
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <main+0x100>)
 800140a:	f002 f8eb 	bl	80035e4 <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d114      	bne.n	800143e <main+0xee>
	  {
		  //HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
		  //HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2120      	movs	r1, #32
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <main+0x104>)
 800141a:	f002 f8fb 	bl	8003614 <HAL_GPIO_WritePin>

		  // Check again in 1 second
		  HAL_Delay(1000);
 800141e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001422:	f001 fb47 	bl	8002ab4 <HAL_Delay>
		  if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8001426:	2101      	movs	r1, #1
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <main+0x100>)
 800142a:	f002 f8db 	bl	80035e4 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d104      	bne.n	800143e <main+0xee>
		  {
			  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_RESET); // Turn off power
 8001434:	2200      	movs	r2, #0
 8001436:	2102      	movs	r1, #2
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <main+0x100>)
 800143a:	f002 f8eb 	bl	8003614 <HAL_GPIO_WritePin>
		  }
	  }
	  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2120      	movs	r1, #32
 8001442:	4804      	ldr	r0, [pc, #16]	; (8001454 <main+0x104>)
 8001444:	f002 f8e6 	bl	8003614 <HAL_GPIO_WritePin>

	  HAL_Delay(50);
 8001448:	2032      	movs	r0, #50	; 0x32
 800144a:	f001 fb33 	bl	8002ab4 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin) == GPIO_PIN_SET)
 800144e:	e7d1      	b.n	80013f4 <main+0xa4>
 8001450:	40022400 	.word	0x40022400
 8001454:	40021000 	.word	0x40021000
 8001458:	08009854 	.word	0x08009854
 800145c:	40021c00 	.word	0x40021c00

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0a0      	sub	sp, #128	; 0x80
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800146a:	2230      	movs	r2, #48	; 0x30
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f007 fb38 	bl	8008ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2230      	movs	r2, #48	; 0x30
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f007 fb29 	bl	8008ae4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b31      	ldr	r3, [pc, #196]	; (800155c <SystemClock_Config+0xfc>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a30      	ldr	r2, [pc, #192]	; (800155c <SystemClock_Config+0xfc>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <SystemClock_Config+0xfc>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <SystemClock_Config+0x100>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <SystemClock_Config+0x100>)
 80014b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <SystemClock_Config+0x100>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80014de:	2306      	movs	r3, #6
 80014e0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014e2:	23a8      	movs	r3, #168	; 0xa8
 80014e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ea:	2307      	movs	r3, #7
 80014ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 fc7a 	bl	8004dec <HAL_RCC_OscConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014fe:	f000 fd7b 	bl	8001ff8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001502:	230f      	movs	r3, #15
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001506:	2302      	movs	r3, #2
 8001508:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800150e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001514:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001518:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800151a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800151e:	2105      	movs	r1, #5
 8001520:	4618      	mov	r0, r3
 8001522:	f003 fedb 	bl	80052dc <HAL_RCC_ClockConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800152c:	f000 fd64 	bl	8001ff8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001530:	2308      	movs	r3, #8
 8001532:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001534:	2332      	movs	r3, #50	; 0x32
 8001536:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001538:	2302      	movs	r3, #2
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4618      	mov	r0, r3
 8001546:	f004 f899 	bl	800567c <HAL_RCCEx_PeriphCLKConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001550:	f000 fd52 	bl	8001ff8 <Error_Handler>
  }
}
 8001554:	bf00      	nop
 8001556:	3780      	adds	r7, #128	; 0x80
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800156a:	463b      	mov	r3, r7
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_ADC3_Init+0x98>)
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <MX_ADC3_Init+0x9c>)
 800157a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_ADC3_Init+0x98>)
 800157e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001582:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_ADC3_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_ADC3_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_ADC3_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_ADC3_Init+0x98>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <MX_ADC3_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <MX_ADC3_Init+0x98>)
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <MX_ADC3_Init+0xa0>)
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_ADC3_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <MX_ADC3_Init+0x98>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_ADC3_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_ADC3_Init+0x98>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <MX_ADC3_Init+0x98>)
 80015c6:	f001 fa99 	bl	8002afc <HAL_ADC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80015d0:	f000 fd12 	bl	8001ff8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_ADC3_Init+0x98>)
 80015e6:	f001 facd 	bl	8002b84 <HAL_ADC_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80015f0:	f000 fd02 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000064c 	.word	0x2000064c
 8001600:	40012200 	.word	0x40012200
 8001604:	0f000001 	.word	0x0f000001

08001608 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800160e:	463b      	mov	r3, r7
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_DAC_Init+0x4c>)
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <MX_DAC_Init+0x50>)
 800161a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_DAC_Init+0x4c>)
 800161e:	f001 fdc4 	bl	80031aa <HAL_DAC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001628:	f000 fce6 	bl	8001ff8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800162c:	2300      	movs	r3, #0
 800162e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	4619      	mov	r1, r3
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <MX_DAC_Init+0x4c>)
 800163c:	f001 fdd7 	bl	80031ee <HAL_DAC_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001646:	f000 fcd7 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000070c 	.word	0x2000070c
 8001658:	40007400 	.word	0x40007400

0800165c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <MX_I2C1_Init+0x78>)
 8001662:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <MX_I2C1_Init+0x7c>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_I2C1_Init+0x78>)
 8001668:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <MX_I2C1_Init+0x80>)
 800166a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_I2C1_Init+0x78>)
 800166e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001672:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_I2C1_Init+0x78>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_I2C1_Init+0x78>)
 800167c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001680:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_I2C1_Init+0x78>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_I2C1_Init+0x78>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_I2C1_Init+0x78>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_I2C1_Init+0x78>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <MX_I2C1_Init+0x78>)
 800169c:	f001 ffd4 	bl	8003648 <HAL_I2C_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80016a6:	f000 fca7 	bl	8001ff8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <MX_I2C1_Init+0x78>)
 80016ae:	f002 ff60 	bl	8004572 <HAL_I2CEx_ConfigAnalogFilter>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80016b8:	f000 fc9e 	bl	8001ff8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_I2C1_Init+0x78>)
 80016c0:	f002 ff93 	bl	80045ea <HAL_I2CEx_ConfigDigitalFilter>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80016ca:	f000 fc95 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000148 	.word	0x20000148
 80016d8:	40005400 	.word	0x40005400
 80016dc:	00061a80 	.word	0x00061a80

080016e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b09a      	sub	sp, #104	; 0x68
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80016e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ea:	2234      	movs	r2, #52	; 0x34
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f007 f9f8 	bl	8008ae4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2234      	movs	r2, #52	; 0x34
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f007 f9f2 	bl	8008ae4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001700:	4b53      	ldr	r3, [pc, #332]	; (8001850 <MX_LTDC_Init+0x170>)
 8001702:	4a54      	ldr	r2, [pc, #336]	; (8001854 <MX_LTDC_Init+0x174>)
 8001704:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <MX_LTDC_Init+0x170>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <MX_LTDC_Init+0x170>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <MX_LTDC_Init+0x170>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <MX_LTDC_Init+0x170>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 2;
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <MX_LTDC_Init+0x170>)
 8001720:	2202      	movs	r2, #2
 8001722:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 10;
 8001724:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <MX_LTDC_Init+0x170>)
 8001726:	220a      	movs	r2, #10
 8001728:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <MX_LTDC_Init+0x170>)
 800172c:	222a      	movs	r2, #42	; 0x2a
 800172e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 12;
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <MX_LTDC_Init+0x170>)
 8001732:	220c      	movs	r2, #12
 8001734:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <MX_LTDC_Init+0x170>)
 8001738:	f240 220a 	movw	r2, #522	; 0x20a
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 284;
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <MX_LTDC_Init+0x170>)
 8001740:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <MX_LTDC_Init+0x170>)
 8001748:	f240 220d 	movw	r2, #525	; 0x20d
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 286;
 800174e:	4b40      	ldr	r3, [pc, #256]	; (8001850 <MX_LTDC_Init+0x170>)
 8001750:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <MX_LTDC_Init+0x170>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <MX_LTDC_Init+0x170>)
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <MX_LTDC_Init+0x170>)
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800176e:	4838      	ldr	r0, [pc, #224]	; (8001850 <MX_LTDC_Init+0x170>)
 8001770:	f002 ff7a 	bl	8004668 <HAL_LTDC_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800177a:	f000 fc3d 	bl	8001ff8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 479;
 8001782:	f240 13df 	movw	r3, #479	; 0x1df
 8001786:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 271;
 800178c:	f240 130f 	movw	r3, #271	; 0x10f
 8001790:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001792:	2302      	movs	r3, #2
 8001794:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001796:	23ff      	movs	r3, #255	; 0xff
 8001798:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800179e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80017a4:	2305      	movs	r3, #5
 80017a6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 261120;
 80017a8:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 80017ac:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80017ae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80017b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80017b4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80017b8:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d0:	2200      	movs	r2, #0
 80017d2:	4619      	mov	r1, r3
 80017d4:	481e      	ldr	r0, [pc, #120]	; (8001850 <MX_LTDC_Init+0x170>)
 80017d6:	f003 f817 	bl	8004808 <HAL_LTDC_ConfigLayer>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 80017e0:	f000 fc0a 	bl	8001ff8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 479;
 80017e8:	f240 13df 	movw	r3, #479	; 0x1df
 80017ec:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 271;
 80017f2:	f240 130f 	movw	r3, #271	; 0x10f
 80017f6:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 80017fc:	23ff      	movs	r3, #255	; 0xff
 80017fe:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001808:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800180a:	2305      	movs	r3, #5
 800180c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 261120;
 800180e:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 8001814:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 800181a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	2201      	movs	r2, #1
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_LTDC_Init+0x170>)
 800183a:	f002 ffe5 	bl	8004808 <HAL_LTDC_ConfigLayer>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_LTDC_Init+0x168>
  {
    Error_Handler();
 8001844:	f000 fbd8 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	3768      	adds	r7, #104	; 0x68
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200005a4 	.word	0x200005a4
 8001854:	40016800 	.word	0x40016800

08001858 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_SDIO_SD_Init+0x38>)
 800185e:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <MX_SDIO_SD_Init+0x3c>)
 8001860:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_SDIO_SD_Init+0x38>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_SDIO_SD_Init+0x38>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_SDIO_SD_Init+0x38>)
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_SDIO_SD_Init+0x38>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <MX_SDIO_SD_Init+0x38>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <MX_SDIO_SD_Init+0x38>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000720 	.word	0x20000720
 8001894:	40012c00 	.word	0x40012c00

08001898 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800189c:	4b17      	ldr	r3, [pc, #92]	; (80018fc <MX_SPI2_Init+0x64>)
 800189e:	4a18      	ldr	r2, [pc, #96]	; (8001900 <MX_SPI2_Init+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_SPI2_Init+0x64>)
 80018a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <MX_SPI2_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_SPI2_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_SPI2_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_SPI2_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_SPI2_Init+0x64>)
 80018c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_SPI2_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <MX_SPI2_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_SPI2_Init+0x64>)
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_SPI2_Init+0x64>)
 80018de:	2200      	movs	r2, #0
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_SPI2_Init+0x64>)
 80018e4:	220a      	movs	r2, #10
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_SPI2_Init+0x64>)
 80018ea:	f005 fa40 	bl	8006d6e <HAL_SPI_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018f4:	f000 fb80 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200000ac 	.word	0x200000ac
 8001900:	40003800 	.word	0x40003800

08001904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_USART1_UART_Init+0x50>)
 800190c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART1_UART_Init+0x4c>)
 800193c:	f005 faa0 	bl	8006e80 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001946:	f000 fb57 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000694 	.word	0x20000694
 8001954:	40011000 	.word	0x40011000

08001958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART2_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001990:	f005 fa76 	bl	8006e80 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f000 fb2d 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200007e8 	.word	0x200007e8
 80019a8:	40004400 	.word	0x40004400

080019ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <MX_USART3_UART_Init+0x4c>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 400000;
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019b8:	4a10      	ldr	r2, [pc, #64]	; (80019fc <MX_USART3_UART_Init+0x50>)
 80019ba:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019d0:	220c      	movs	r2, #12
 80019d2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_USART3_UART_Init+0x48>)
 80019e2:	f005 fa4d 	bl	8006e80 <HAL_UART_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80019ec:	f000 fb04 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000104 	.word	0x20000104
 80019f8:	40004800 	.word	0x40004800
 80019fc:	00061a80 	.word	0x00061a80

08001a00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <MX_USART6_UART_Init+0x50>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a38:	f005 fa22 	bl	8006e80 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a42:	f000 fad9 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200007a4 	.word	0x200007a4
 8001a50:	40011400 	.word	0x40011400

08001a54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a5a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a5e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a62:	2204      	movs	r2, #4
 8001a64:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a68:	2202      	movs	r2, #2
 8001a6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a74:	2202      	movs	r2, #2
 8001a76:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a98:	f003 f88b 	bl	8004bb2 <HAL_PCD_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001aa2:	f000 faa9 	bl	8001ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000019c 	.word	0x2000019c

08001ab0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <MX_FMC_Init+0x94>)
 8001aca:	4a1f      	ldr	r2, [pc, #124]	; (8001b48 <MX_FMC_Init+0x98>)
 8001acc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <MX_FMC_Init+0x94>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <MX_FMC_Init+0x94>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <MX_FMC_Init+0x94>)
 8001adc:	2204      	movs	r2, #4
 8001ade:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <MX_FMC_Init+0x94>)
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <MX_FMC_Init+0x94>)
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <MX_FMC_Init+0x94>)
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <MX_FMC_Init+0x94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_FMC_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_FMC_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_FMC_Init+0x94>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001b0a:	2310      	movs	r3, #16
 8001b0c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001b0e:	2310      	movs	r3, #16
 8001b10:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001b12:	2310      	movs	r3, #16
 8001b14:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001b16:	2310      	movs	r3, #16
 8001b18:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001b1e:	2310      	movs	r3, #16
 8001b20:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001b22:	2310      	movs	r3, #16
 8001b24:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4806      	ldr	r0, [pc, #24]	; (8001b44 <MX_FMC_Init+0x94>)
 8001b2c:	f005 f8eb 	bl	8006d06 <HAL_SDRAM_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001b36:	f000 fa5f 	bl	8001ff8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000082c 	.word	0x2000082c
 8001b48:	a0000140 	.word	0xa0000140

08001b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b090      	sub	sp, #64	; 0x40
 8001b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b66:	4bb0      	ldr	r3, [pc, #704]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4aaf      	ldr	r2, [pc, #700]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001b6c:	f043 0310 	orr.w	r3, r3, #16
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4bad      	ldr	r3, [pc, #692]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	4ba9      	ldr	r3, [pc, #676]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4aa8      	ldr	r2, [pc, #672]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4ba6      	ldr	r3, [pc, #664]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	4ba2      	ldr	r3, [pc, #648]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4aa1      	ldr	r2, [pc, #644]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b9f      	ldr	r3, [pc, #636]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	4b9b      	ldr	r3, [pc, #620]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a9a      	ldr	r2, [pc, #616]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a93      	ldr	r2, [pc, #588]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b91      	ldr	r3, [pc, #580]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a8c      	ldr	r2, [pc, #560]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b8a      	ldr	r3, [pc, #552]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b86      	ldr	r3, [pc, #536]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a85      	ldr	r2, [pc, #532]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b83      	ldr	r3, [pc, #524]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a7e      	ldr	r2, [pc, #504]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b7c      	ldr	r3, [pc, #496]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b78      	ldr	r3, [pc, #480]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a77      	ldr	r2, [pc, #476]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b75      	ldr	r3, [pc, #468]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	607b      	str	r3, [r7, #4]
 8001c62:	4b71      	ldr	r3, [pc, #452]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a70      	ldr	r2, [pc, #448]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c68:	f043 0308 	orr.w	r3, r3, #8
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4b6a      	ldr	r3, [pc, #424]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a69      	ldr	r2, [pc, #420]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <MX_GPIO_Init+0x2dc>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2174      	movs	r1, #116	; 0x74
 8001c9a:	4864      	ldr	r0, [pc, #400]	; (8001e2c <MX_GPIO_Init+0x2e0>)
 8001c9c:	f001 fcba 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTMODboot_GPIO_Port, INTMODboot_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca6:	4862      	ldr	r0, [pc, #392]	; (8001e30 <MX_GPIO_Init+0x2e4>)
 8001ca8:	f001 fcb4 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDnRST_GPIO_Port, LCDnRST_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb2:	485f      	ldr	r0, [pc, #380]	; (8001e30 <MX_GPIO_Init+0x2e4>)
 8001cb4:	f001 fcae 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cbe:	485d      	ldr	r0, [pc, #372]	; (8001e34 <MX_GPIO_Init+0x2e8>)
 8001cc0:	f001 fca8 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TESTPOINT_Pin|IntModPwr_Pin|UART3Pwr_Pin, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f248 1120 	movw	r1, #33056	; 0x8120
 8001cca:	485b      	ldr	r0, [pc, #364]	; (8001e38 <MX_GPIO_Init+0x2ec>)
 8001ccc:	f001 fca2 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioMute_GPIO_Port, AudioMute_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	4858      	ldr	r0, [pc, #352]	; (8001e38 <MX_GPIO_Init+0x2ec>)
 8001cd6:	f001 fc9d 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	210b      	movs	r1, #11
 8001cde:	4857      	ldr	r0, [pc, #348]	; (8001e3c <MX_GPIO_Init+0x2f0>)
 8001ce0:	f001 fc98 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	4855      	ldr	r0, [pc, #340]	; (8001e40 <MX_GPIO_Init+0x2f4>)
 8001cea:	f001 fc93 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TrainerOut_GPIO_Port, TrainerOut_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	4854      	ldr	r0, [pc, #336]	; (8001e44 <MX_GPIO_Init+0x2f8>)
 8001cf4:	f001 fc8e 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TelemDir_GPIO_Port, TelemDir_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2110      	movs	r1, #16
 8001cfc:	4852      	ldr	r0, [pc, #328]	; (8001e48 <MX_GPIO_Init+0x2fc>)
 8001cfe:	f001 fc89 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothEn_GPIO_Port, BluetoothEn_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d08:	4850      	ldr	r0, [pc, #320]	; (8001e4c <MX_GPIO_Init+0x300>)
 8001d0a:	f001 fc83 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDred_Pin LEDgreen_Pin LEDblue_Pin HAPTIC_Pin */
  GPIO_InitStruct.Pin = LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin;
 8001d0e:	2374      	movs	r3, #116	; 0x74
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d22:	4619      	mov	r1, r3
 8001d24:	4841      	ldr	r0, [pc, #260]	; (8001e2c <MX_GPIO_Init+0x2e0>)
 8001d26:	f001 fab1 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : SWEL_Pin */
  GPIO_InitStruct.Pin = SWEL_Pin;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SWEL_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	483b      	ldr	r0, [pc, #236]	; (8001e2c <MX_GPIO_Init+0x2e0>)
 8001d3e:	f001 faa5 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYenter_Pin KEYpageprevious_Pin SWAL_Pin KEYrtn_Pin
                           KEYtelem_Pin KEYmdl_Pin KEYsys_Pin */
  GPIO_InitStruct.Pin = KEYenter_Pin|KEYpageprevious_Pin|SWAL_Pin|KEYrtn_Pin
 8001d42:	f648 13f0 	movw	r3, #35312	; 0x89f0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |KEYtelem_Pin|KEYmdl_Pin|KEYsys_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d54:	4619      	mov	r1, r3
 8001d56:	4836      	ldr	r0, [pc, #216]	; (8001e30 <MX_GPIO_Init+0x2e4>)
 8001d58:	f001 fa98 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYpagenext_Pin TrimLHR_Pin */
  GPIO_InitStruct.Pin = KEYpagenext_Pin|TrimLHR_Pin;
 8001d5c:	f242 0310 	movw	r3, #8208	; 0x2010
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d66:	2301      	movs	r3, #1
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4834      	ldr	r0, [pc, #208]	; (8001e44 <MX_GPIO_Init+0x2f8>)
 8001d72:	f001 fa8b 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTMODboot_Pin LCDnRST_Pin */
  GPIO_InitStruct.Pin = INTMODboot_Pin|LCDnRST_Pin;
 8001d76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4828      	ldr	r0, [pc, #160]	; (8001e30 <MX_GPIO_Init+0x2e4>)
 8001d90:	f001 fa7c 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001daa:	4619      	mov	r1, r3
 8001dac:	4821      	ldr	r0, [pc, #132]	; (8001e34 <MX_GPIO_Init+0x2e8>)
 8001dae:	f001 fa6d 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_INT_Pin PCBREV1_Pin PCBREV2_Pin ROTENCB_Pin
                           ROTENCA_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin|PCBREV1_Pin|PCBREV2_Pin|ROTENCB_Pin
 8001db2:	f640 5384 	movw	r3, #3460	; 0xd84
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ROTENCA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4822      	ldr	r0, [pc, #136]	; (8001e50 <MX_GPIO_Init+0x304>)
 8001dc8:	f001 fa60 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWF_Pin SWEH_Pin SWAH_Pin SWBH_Pin
                           SWI_Pin SWJ_Pin */
  GPIO_InitStruct.Pin = SWF_Pin|SWEH_Pin|SWAH_Pin|SWBH_Pin
 8001dcc:	f24d 2318 	movw	r3, #53784	; 0xd218
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SWI_Pin|SWJ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	4619      	mov	r1, r3
 8001de0:	481b      	ldr	r0, [pc, #108]	; (8001e50 <MX_GPIO_Init+0x304>)
 8001de2:	f001 fa53 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : TESTPOINT_Pin AudioMute_Pin IntModPwr_Pin UART3Pwr_Pin */
  GPIO_InitStruct.Pin = TESTPOINT_Pin|AudioMute_Pin|IntModPwr_Pin|UART3Pwr_Pin;
 8001de6:	f248 13a0 	movw	r3, #33184	; 0x81a0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	480e      	ldr	r0, [pc, #56]	; (8001e38 <MX_GPIO_Init+0x2ec>)
 8001e00:	f001 fa44 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : TrimLHL_Pin */
  GPIO_InitStruct.Pin = TrimLHL_Pin;
 8001e04:	2340      	movs	r3, #64	; 0x40
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TrimLHL_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e14:	4619      	mov	r1, r3
 8001e16:	4808      	ldr	r0, [pc, #32]	; (8001e38 <MX_GPIO_Init+0x2ec>)
 8001e18:	f001 fa38 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDpresent_Pin TrainerIn_Pin */
  GPIO_InitStruct.Pin = SDpresent_Pin|TrainerIn_Pin;
 8001e1c:	2360      	movs	r3, #96	; 0x60
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e015      	b.n	8001e54 <MX_GPIO_Init+0x308>
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40021400 	.word	0x40021400
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40022400 	.word	0x40022400
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	40021800 	.word	0x40021800
 8001e50:	40021c00 	.word	0x40021c00
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4860      	ldr	r0, [pc, #384]	; (8001fe0 <MX_GPIO_Init+0x494>)
 8001e5e:	f001 fa15 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : UART6pwr_Pin LCDbacklight_Pin ExtModPwr_Pin */
  GPIO_InitStruct.Pin = UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin;
 8001e62:	230b      	movs	r3, #11
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e76:	4619      	mov	r1, r3
 8001e78:	485a      	ldr	r0, [pc, #360]	; (8001fe4 <MX_GPIO_Init+0x498>)
 8001e7a:	f001 fa07 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRswitch_Pin */
  GPIO_InitStruct.Pin = PWRswitch_Pin;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e82:	2300      	movs	r3, #0
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PWRswitch_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4855      	ldr	r0, [pc, #340]	; (8001fe8 <MX_GPIO_Init+0x49c>)
 8001e92:	f001 f9fb 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRon_Pin */
  GPIO_InitStruct.Pin = PWRon_Pin;
 8001e96:	2302      	movs	r3, #2
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(PWRon_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	484e      	ldr	r0, [pc, #312]	; (8001fe8 <MX_GPIO_Init+0x49c>)
 8001eae:	f001 f9ed 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWBL_Pin TrainerDetect_Pin */
  GPIO_InitStruct.Pin = SWBL_Pin|TrainerDetect_Pin;
 8001eb2:	f241 0310 	movw	r3, #4112	; 0x1010
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4847      	ldr	r0, [pc, #284]	; (8001fe4 <MX_GPIO_Init+0x498>)
 8001ec8:	f001 f9e0 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : TrimRSD_Pin TrimRSU_Pin SWCL_Pin */
  GPIO_InitStruct.Pin = TrimRSD_Pin|TrimRSU_Pin|SWCL_Pin;
 8001ecc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4840      	ldr	r0, [pc, #256]	; (8001fe4 <MX_GPIO_Init+0x498>)
 8001ee2:	f001 f9d3 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWCH_Pin TrimLSU_Pin TrimR_Pin TrimRHR_Pin */
  GPIO_InitStruct.Pin = SWCH_Pin|TrimLSU_Pin|TrimR_Pin|TrimRHR_Pin;
 8001ee6:	f642 0388 	movw	r3, #10376	; 0x2888
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	483c      	ldr	r0, [pc, #240]	; (8001fec <MX_GPIO_Init+0x4a0>)
 8001efc:	f001 f9c6 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f06:	2300      	movs	r3, #0
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f12:	4619      	mov	r1, r3
 8001f14:	4835      	ldr	r0, [pc, #212]	; (8001fec <MX_GPIO_Init+0x4a0>)
 8001f16:	f001 f9b9 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDH_Pin TrimLSD_Pin TrimRV_Pin TrimRVD_Pin
                           TrimLVU_Pin */
  GPIO_InitStruct.Pin = SWDH_Pin|TrimLSD_Pin|TrimRV_Pin|TrimRVD_Pin
 8001f1a:	f44f 43e3 	mov.w	r3, #29056	; 0x7180
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	482e      	ldr	r0, [pc, #184]	; (8001fe8 <MX_GPIO_Init+0x49c>)
 8001f30:	f001 f9ac 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDL_Pin SWGL_Pin SWGH_Pin SWH_Pin
                           TrimLVD_Pin */
  GPIO_InitStruct.Pin = SWDL_Pin|SWGL_Pin|SWGH_Pin|SWH_Pin
 8001f34:	f241 03cc 	movw	r3, #4300	; 0x10cc
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f46:	4619      	mov	r1, r3
 8001f48:	4829      	ldr	r0, [pc, #164]	; (8001ff0 <MX_GPIO_Init+0x4a4>)
 8001f4a:	f001 f99f 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : TrainerOut_Pin */
  GPIO_InitStruct.Pin = TrainerOut_Pin;
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TrainerOut_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f62:	4619      	mov	r1, r3
 8001f64:	481e      	ldr	r0, [pc, #120]	; (8001fe0 <MX_GPIO_Init+0x494>)
 8001f66:	f001 f991 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : ExtModTX_Pin */
  GPIO_InitStruct.Pin = ExtModTX_Pin;
 8001f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f70:	2300      	movs	r3, #0
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ExtModTX_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	481d      	ldr	r0, [pc, #116]	; (8001ff4 <MX_GPIO_Init+0x4a8>)
 8001f80:	f001 f984 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : TelemDir_Pin */
  GPIO_InitStruct.Pin = TelemDir_Pin;
 8001f84:	2310      	movs	r3, #16
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TelemDir_GPIO_Port, &GPIO_InitStruct);
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4814      	ldr	r0, [pc, #80]	; (8001fec <MX_GPIO_Init+0x4a0>)
 8001f9c:	f001 f976 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothEn_Pin */
  GPIO_InitStruct.Pin = BluetoothEn_Pin;
 8001fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(BluetoothEn_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <MX_GPIO_Init+0x4a4>)
 8001fba:	f001 f967 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : USBchaCtrl_Pin USBchgDetect_Pin */
  GPIO_InitStruct.Pin = USBchaCtrl_Pin|USBchgDetect_Pin;
 8001fbe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4807      	ldr	r0, [pc, #28]	; (8001ff0 <MX_GPIO_Init+0x4a4>)
 8001fd4:	f001 f95a 	bl	800328c <HAL_GPIO_Init>

}
 8001fd8:	bf00      	nop
 8001fda:	3740      	adds	r7, #64	; 0x40
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40022400 	.word	0x40022400
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ffc:	b672      	cpsid	i
}
 8001ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002000:	e7fe      	b.n	8002000 <Error_Handler+0x8>
	...

08002004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_MspInit+0x4c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <HAL_MspInit+0x4c>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_MspInit+0x4c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_MspInit+0x4c>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_MspInit+0x4c>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_MspInit+0x4c>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a31      	ldr	r2, [pc, #196]	; (8002138 <HAL_ADC_MspInit+0xe4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d15c      	bne.n	8002130 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_ADC_MspInit+0xe8>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a2f      	ldr	r2, [pc, #188]	; (800213c <HAL_ADC_MspInit+0xe8>)
 8002080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_ADC_MspInit+0xe8>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_ADC_MspInit+0xe8>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a28      	ldr	r2, [pc, #160]	; (800213c <HAL_ADC_MspInit+0xe8>)
 800209c:	f043 0320 	orr.w	r3, r3, #32
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <HAL_ADC_MspInit+0xe8>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_ADC_MspInit+0xe8>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a21      	ldr	r2, [pc, #132]	; (800213c <HAL_ADC_MspInit+0xe8>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b1f      	ldr	r3, [pc, #124]	; (800213c <HAL_ADC_MspInit+0xe8>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <HAL_ADC_MspInit+0xe8>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a1a      	ldr	r2, [pc, #104]	; (800213c <HAL_ADC_MspInit+0xe8>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_ADC_MspInit+0xe8>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = SLIDER1_Pin|VBattery_Pin|EX1_Pin|EX2_Pin;
 80020e6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ec:	2303      	movs	r3, #3
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4619      	mov	r1, r3
 80020fa:	4811      	ldr	r0, [pc, #68]	; (8002140 <HAL_ADC_MspInit+0xec>)
 80020fc:	f001 f8c6 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin|POS6_Pin|POT2_Pin|SLIDER2_Pin;
 8002100:	230f      	movs	r3, #15
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002104:	2303      	movs	r3, #3
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	4619      	mov	r1, r3
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <HAL_ADC_MspInit+0xf0>)
 8002114:	f001 f8ba 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = StickLH_Pin|StickLV_Pin|StickRH_Pin|StickRV_Pin;
 8002118:	230f      	movs	r3, #15
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211c:	2303      	movs	r3, #3
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4619      	mov	r1, r3
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <HAL_ADC_MspInit+0xf4>)
 800212c:	f001 f8ae 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002130:	bf00      	nop
 8002132:	3730      	adds	r7, #48	; 0x30
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40012200 	.word	0x40012200
 800213c:	40023800 	.word	0x40023800
 8002140:	40021400 	.word	0x40021400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020000 	.word	0x40020000

0800214c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_DAC_MspInit+0x7c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d127      	bne.n	80021be <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_DAC_MspInit+0x80>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a15      	ldr	r2, [pc, #84]	; (80021cc <HAL_DAC_MspInit+0x80>)
 8002178:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_DAC_MspInit+0x80>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_DAC_MspInit+0x80>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_DAC_MspInit+0x80>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_DAC_MspInit+0x80>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Audio_Pin;
 80021a6:	2310      	movs	r3, #16
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021aa:	2303      	movs	r3, #3
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Audio_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <HAL_DAC_MspInit+0x84>)
 80021ba:	f001 f867 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	; 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40007400 	.word	0x40007400
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_I2C_MspInit+0x84>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d12c      	bne.n	8002250 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_I2C_MspInit+0x88>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_I2C_MspInit+0x88>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_I2C_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002212:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002218:	2312      	movs	r3, #18
 800221a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002224:	2304      	movs	r3, #4
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	480c      	ldr	r0, [pc, #48]	; (8002260 <HAL_I2C_MspInit+0x8c>)
 8002230:	f001 f82c 	bl	800328c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_I2C_MspInit+0x88>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_I2C_MspInit+0x88>)
 800223e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002242:	6413      	str	r3, [r2, #64]	; 0x40
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_I2C_MspInit+0x88>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002250:	bf00      	nop
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40005400 	.word	0x40005400
 800225c:	40023800 	.word	0x40023800
 8002260:	40020400 	.word	0x40020400

08002264 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a38      	ldr	r2, [pc, #224]	; (8002364 <HAL_LTDC_MspInit+0x100>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d169      	bne.n	800235a <HAL_LTDC_MspInit+0xf6>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a36      	ldr	r2, [pc, #216]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 8002290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a28      	ldr	r2, [pc, #160]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <HAL_LTDC_MspInit+0x104>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80022f6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002308:	230e      	movs	r3, #14
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	4816      	ldr	r0, [pc, #88]	; (800236c <HAL_LTDC_MspInit+0x108>)
 8002314:	f000 ffba 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002318:	f648 637c 	movw	r3, #36476	; 0x8e7c
 800231c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800232a:	230e      	movs	r3, #14
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	480e      	ldr	r0, [pc, #56]	; (8002370 <HAL_LTDC_MspInit+0x10c>)
 8002336:	f000 ffa9 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800233a:	23ff      	movs	r3, #255	; 0xff
 800233c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800234a:	230e      	movs	r3, #14
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <HAL_LTDC_MspInit+0x110>)
 8002356:	f000 ff99 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800235a:	bf00      	nop
 800235c:	3730      	adds	r7, #48	; 0x30
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40016800 	.word	0x40016800
 8002368:	40023800 	.word	0x40023800
 800236c:	40022000 	.word	0x40022000
 8002370:	40022400 	.word	0x40022400
 8002374:	40022800 	.word	0x40022800

08002378 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a28      	ldr	r2, [pc, #160]	; (8002438 <HAL_SD_MspInit+0xc0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d14a      	bne.n	8002430 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023dc:	f043 0308 	orr.w	r3, r3, #8
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_SD_MspInit+0xc4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023ee:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80023f2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002400:	230c      	movs	r3, #12
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	480d      	ldr	r0, [pc, #52]	; (8002440 <HAL_SD_MspInit+0xc8>)
 800240c:	f000 ff3e 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002410:	2304      	movs	r3, #4
 8002412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002420:	230c      	movs	r3, #12
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <HAL_SD_MspInit+0xcc>)
 800242c:	f000 ff2e 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40023800 	.word	0x40023800
 8002440:	40020800 	.word	0x40020800
 8002444:	40020c00 	.word	0x40020c00

08002448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_SPI_MspInit+0x84>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d12b      	bne.n	80024c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    PI0     ------> SPI2_NSS
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024a2:	230f      	movs	r3, #15
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ae:	2303      	movs	r3, #3
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024b2:	2305      	movs	r3, #5
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 80024be:	f000 fee5 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40003800 	.word	0x40003800
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b090      	sub	sp, #64	; 0x40
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a65      	ldr	r2, [pc, #404]	; (800268c <HAL_UART_MspInit+0x1b4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d12c      	bne.n	8002554 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024fe:	4b64      	ldr	r3, [pc, #400]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a63      	ldr	r2, [pc, #396]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002504:	f043 0310 	orr.w	r3, r3, #16
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b61      	ldr	r3, [pc, #388]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	62bb      	str	r3, [r7, #40]	; 0x28
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a5c      	ldr	r2, [pc, #368]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002532:	23c0      	movs	r3, #192	; 0xc0
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002542:	2307      	movs	r3, #7
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4851      	ldr	r0, [pc, #324]	; (8002694 <HAL_UART_MspInit+0x1bc>)
 800254e:	f000 fe9d 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002552:	e096      	b.n	8002682 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a4f      	ldr	r2, [pc, #316]	; (8002698 <HAL_UART_MspInit+0x1c0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d12c      	bne.n	80025b8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
 8002562:	4b4b      	ldr	r3, [pc, #300]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a4a      	ldr	r2, [pc, #296]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b48      	ldr	r3, [pc, #288]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	4b44      	ldr	r3, [pc, #272]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a43      	ldr	r2, [pc, #268]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002596:	2360      	movs	r3, #96	; 0x60
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025a6:	2307      	movs	r3, #7
 80025a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ae:	4619      	mov	r1, r3
 80025b0:	483a      	ldr	r0, [pc, #232]	; (800269c <HAL_UART_MspInit+0x1c4>)
 80025b2:	f000 fe6b 	bl	800328c <HAL_GPIO_Init>
}
 80025b6:	e064      	b.n	8002682 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a38      	ldr	r2, [pc, #224]	; (80026a0 <HAL_UART_MspInit+0x1c8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d12d      	bne.n	800261e <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	4b32      	ldr	r3, [pc, #200]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a31      	ldr	r2, [pc, #196]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b28      	ldr	r3, [pc, #160]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800260c:	2307      	movs	r3, #7
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	481f      	ldr	r0, [pc, #124]	; (8002694 <HAL_UART_MspInit+0x1bc>)
 8002618:	f000 fe38 	bl	800328c <HAL_GPIO_Init>
}
 800261c:	e031      	b.n	8002682 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <HAL_UART_MspInit+0x1cc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d12c      	bne.n	8002682 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 800262e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002632:	f043 0320 	orr.w	r3, r3, #32
 8002636:	6453      	str	r3, [r2, #68]	; 0x44
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	4a10      	ldr	r2, [pc, #64]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 800264e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002652:	6313      	str	r3, [r2, #48]	; 0x30
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_UART_MspInit+0x1b8>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002660:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002672:	2308      	movs	r3, #8
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267a:	4619      	mov	r1, r3
 800267c:	480a      	ldr	r0, [pc, #40]	; (80026a8 <HAL_UART_MspInit+0x1d0>)
 800267e:	f000 fe05 	bl	800328c <HAL_GPIO_Init>
}
 8002682:	bf00      	nop
 8002684:	3740      	adds	r7, #64	; 0x40
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40011000 	.word	0x40011000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020400 	.word	0x40020400
 8002698:	40004400 	.word	0x40004400
 800269c:	40020c00 	.word	0x40020c00
 80026a0:	40004800 	.word	0x40004800
 80026a4:	40011400 	.word	0x40011400
 80026a8:	40021800 	.word	0x40021800

080026ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026cc:	d13f      	bne.n	800274e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <HAL_PCD_MspInit+0xac>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <HAL_PCD_MspInit+0xac>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <HAL_PCD_MspInit+0xac>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4817      	ldr	r0, [pc, #92]	; (800275c <HAL_PCD_MspInit+0xb0>)
 8002700:	f000 fdc4 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002704:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002716:	230a      	movs	r3, #10
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	480e      	ldr	r0, [pc, #56]	; (800275c <HAL_PCD_MspInit+0xb0>)
 8002722:	f000 fdb3 	bl	800328c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_PCD_MspInit+0xac>)
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_PCD_MspInit+0xac>)
 800272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002730:	6353      	str	r3, [r2, #52]	; 0x34
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_PCD_MspInit+0xac>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_PCD_MspInit+0xac>)
 800273c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002740:	6453      	str	r3, [r2, #68]	; 0x44
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_PCD_MspInit+0xac>)
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800274e:	bf00      	nop
 8002750:	3728      	adds	r7, #40	; 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40020000 	.word	0x40020000

08002760 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002774:	4b3b      	ldr	r3, [pc, #236]	; (8002864 <HAL_FMC_MspInit+0x104>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d16f      	bne.n	800285c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_FMC_MspInit+0x104>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	4b38      	ldr	r3, [pc, #224]	; (8002868 <HAL_FMC_MspInit+0x108>)
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	4a37      	ldr	r2, [pc, #220]	; (8002868 <HAL_FMC_MspInit+0x108>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6393      	str	r3, [r2, #56]	; 0x38
 8002792:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_FMC_MspInit+0x108>)
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800279e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027b0:	230c      	movs	r3, #12
 80027b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	4619      	mov	r1, r3
 80027b8:	482c      	ldr	r0, [pc, #176]	; (800286c <HAL_FMC_MspInit+0x10c>)
 80027ba:	f000 fd67 	bl	800328c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027be:	2360      	movs	r3, #96	; 0x60
 80027c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ce:	230c      	movs	r3, #12
 80027d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027d2:	1d3b      	adds	r3, r7, #4
 80027d4:	4619      	mov	r1, r3
 80027d6:	4826      	ldr	r0, [pc, #152]	; (8002870 <HAL_FMC_MspInit+0x110>)
 80027d8:	f000 fd58 	bl	800328c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80027dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80027e0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027ee:	230c      	movs	r3, #12
 80027f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	481f      	ldr	r0, [pc, #124]	; (8002874 <HAL_FMC_MspInit+0x114>)
 80027f8:	f000 fd48 	bl	800328c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80027fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002800:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800280e:	230c      	movs	r3, #12
 8002810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4818      	ldr	r0, [pc, #96]	; (8002878 <HAL_FMC_MspInit+0x118>)
 8002818:	f000 fd38 	bl	800328c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800281c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002820:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800282e:	230c      	movs	r3, #12
 8002830:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	4619      	mov	r1, r3
 8002836:	4811      	ldr	r0, [pc, #68]	; (800287c <HAL_FMC_MspInit+0x11c>)
 8002838:	f000 fd28 	bl	800328c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800283c:	2320      	movs	r3, #32
 800283e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800284c:	230c      	movs	r3, #12
 800284e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	1d3b      	adds	r3, r7, #4
 8002852:	4619      	mov	r1, r3
 8002854:	480a      	ldr	r0, [pc, #40]	; (8002880 <HAL_FMC_MspInit+0x120>)
 8002856:	f000 fd19 	bl	800328c <HAL_GPIO_Init>
 800285a:	e000      	b.n	800285e <HAL_FMC_MspInit+0xfe>
    return;
 800285c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20000090 	.word	0x20000090
 8002868:	40023800 	.word	0x40023800
 800286c:	40021400 	.word	0x40021400
 8002870:	40021c00 	.word	0x40021c00
 8002874:	40021800 	.word	0x40021800
 8002878:	40021000 	.word	0x40021000
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40020400 	.word	0x40020400

08002884 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800288c:	f7ff ff68 	bl	8002760 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800289c:	e7fe      	b.n	800289c <NMI_Handler+0x4>

0800289e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <HardFault_Handler+0x4>

080028a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <MemManage_Handler+0x4>

080028aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ae:	e7fe      	b.n	80028ae <BusFault_Handler+0x4>

080028b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <UsageFault_Handler+0x4>

080028b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e4:	f000 f8c6 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <_sbrk+0x5c>)
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <_sbrk+0x60>)
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d102      	bne.n	800290e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <_sbrk+0x64>)
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <_sbrk+0x68>)
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800291c:	f006 f8b8 	bl	8008a90 <__errno>
 8002920:	4603      	mov	r3, r0
 8002922:	220c      	movs	r2, #12
 8002924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	e009      	b.n	8002940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <_sbrk+0x64>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <_sbrk+0x64>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	4a05      	ldr	r2, [pc, #20]	; (8002950 <_sbrk+0x64>)
 800293c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20030000 	.word	0x20030000
 800294c:	00000400 	.word	0x00000400
 8002950:	20000094 	.word	0x20000094
 8002954:	20000cf0 	.word	0x20000cf0

08002958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <SystemInit+0x20>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <SystemInit+0x20>)
 8002964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002982:	490e      	ldr	r1, [pc, #56]	; (80029bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002998:	4c0b      	ldr	r4, [pc, #44]	; (80029c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029a6:	f7ff ffd7 	bl	8002958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f006 f877 	bl	8008a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ae:	f7fe fccf 	bl	8001350 <main>
  bx  lr    
 80029b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80029c0:	080099a4 	.word	0x080099a4
  ldr r2, =_sbss
 80029c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80029c8:	20000cf0 	.word	0x20000cf0

080029cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <HAL_Init+0x40>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_Init+0x40>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_Init+0x40>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 fba3 	bl	8003144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff fafe 	bl	8002004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fbad 	bl	8003192 <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 fb83 	bl	800315a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000008 	.word	0x20000008
 8002a98:	20000874 	.word	0x20000874

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000874 	.word	0x20000874

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e033      	b.n	8002b7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fa9a 	bl	8002054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b42:	f023 0302 	bic.w	r3, r3, #2
 8002b46:	f043 0202 	orr.w	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f94a 	bl	8002de8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
 8002b6a:	e001      	b.n	8002b70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e113      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x244>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	d925      	bls.n	8002bfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68d9      	ldr	r1, [r3, #12]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b1e      	subs	r3, #30
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68d9      	ldr	r1, [r3, #12]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	4603      	mov	r3, r0
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4403      	add	r3, r0
 8002bee:	3b1e      	subs	r3, #30
 8002bf0:	409a      	lsls	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	e022      	b.n	8002c42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6919      	ldr	r1, [r3, #16]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	2207      	movs	r2, #7
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6919      	ldr	r1, [r3, #16]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	4618      	mov	r0, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4403      	add	r3, r0
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b06      	cmp	r3, #6
 8002c48:	d824      	bhi.n	8002c94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b05      	subs	r3, #5
 8002c5c:	221f      	movs	r2, #31
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	400a      	ands	r2, r1
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	3b05      	subs	r3, #5
 8002c86:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34
 8002c92:	e04c      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d824      	bhi.n	8002ce6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	3b23      	subs	r3, #35	; 0x23
 8002cae:	221f      	movs	r2, #31
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	400a      	ands	r2, r1
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b23      	subs	r3, #35	; 0x23
 8002cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce4:	e023      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3b41      	subs	r3, #65	; 0x41
 8002cf8:	221f      	movs	r2, #31
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	400a      	ands	r2, r1
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4618      	mov	r0, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b41      	subs	r3, #65	; 0x41
 8002d22:	fa00 f203 	lsl.w	r2, r0, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d2e:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <HAL_ADC_ConfigChannel+0x250>)
 8002d30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <HAL_ADC_ConfigChannel+0x254>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10f      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1d8>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b12      	cmp	r3, #18
 8002d42:	d10b      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_ADC_ConfigChannel+0x254>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d12b      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x23a>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_ADC_ConfigChannel+0x258>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x1f4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b11      	cmp	r3, #17
 8002d76:	d122      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_ADC_ConfigChannel+0x258>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d111      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_ADC_ConfigChannel+0x25c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <HAL_ADC_ConfigChannel+0x260>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	0c9a      	lsrs	r2, r3, #18
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002db0:	e002      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f9      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40012300 	.word	0x40012300
 8002dd8:	40012000 	.word	0x40012000
 8002ddc:	10000012 	.word	0x10000012
 8002de0:	20000000 	.word	0x20000000
 8002de4:	431bde83 	.word	0x431bde83

08002de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002df0:	4b79      	ldr	r3, [pc, #484]	; (8002fd8 <ADC_Init+0x1f0>)
 8002df2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	021a      	lsls	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	4a58      	ldr	r2, [pc, #352]	; (8002fdc <ADC_Init+0x1f4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d022      	beq.n	8002ec6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6899      	ldr	r1, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	e00f      	b.n	8002ee6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0202 	bic.w	r2, r2, #2
 8002ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7e1b      	ldrb	r3, [r3, #24]
 8002f00:	005a      	lsls	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01b      	beq.n	8002f4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6859      	ldr	r1, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	035a      	lsls	r2, r3, #13
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	e007      	b.n	8002f5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	051a      	lsls	r2, r3, #20
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6899      	ldr	r1, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f9e:	025a      	lsls	r2, r3, #9
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	029a      	lsls	r2, r3, #10
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40012300 	.word	0x40012300
 8002fdc:	0f000001 	.word	0x0f000001

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	; (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	6039      	str	r1, [r7, #0]
 800304e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	2b00      	cmp	r3, #0
 8003056:	db0a      	blt.n	800306e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	490c      	ldr	r1, [pc, #48]	; (8003090 <__NVIC_SetPriority+0x4c>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	440b      	add	r3, r1
 8003068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800306c:	e00a      	b.n	8003084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	4908      	ldr	r1, [pc, #32]	; (8003094 <__NVIC_SetPriority+0x50>)
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	3b04      	subs	r3, #4
 800307c:	0112      	lsls	r2, r2, #4
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	440b      	add	r3, r1
 8003082:	761a      	strb	r2, [r3, #24]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000e100 	.word	0xe000e100
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003098:	b480      	push	{r7}
 800309a:	b089      	sub	sp, #36	; 0x24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f1c3 0307 	rsb	r3, r3, #7
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	bf28      	it	cs
 80030b6:	2304      	movcs	r3, #4
 80030b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3304      	adds	r3, #4
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d902      	bls.n	80030c8 <NVIC_EncodePriority+0x30>
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3b03      	subs	r3, #3
 80030c6:	e000      	b.n	80030ca <NVIC_EncodePriority+0x32>
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	401a      	ands	r2, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e0:	f04f 31ff 	mov.w	r1, #4294967295
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	43d9      	mvns	r1, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	4313      	orrs	r3, r2
         );
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3724      	adds	r7, #36	; 0x24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003110:	d301      	bcc.n	8003116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003112:	2301      	movs	r3, #1
 8003114:	e00f      	b.n	8003136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <SysTick_Config+0x40>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311e:	210f      	movs	r1, #15
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f7ff ff8e 	bl	8003044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <SysTick_Config+0x40>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <SysTick_Config+0x40>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010

08003144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ff47 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316c:	f7ff ff5c 	bl	8003028 <__NVIC_GetPriorityGrouping>
 8003170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff8e 	bl	8003098 <NVIC_EncodePriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff5d 	bl	8003044 <__NVIC_SetPriority>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffb0 	bl	8003100 <SysTick_Config>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e014      	b.n	80031e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	791b      	ldrb	r3, [r3, #4]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fe ffbd 	bl	800214c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b087      	sub	sp, #28
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	795b      	ldrb	r3, [r3, #5]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_DAC_ConfigChannel+0x18>
 8003202:	2302      	movs	r3, #2
 8003204:	e03c      	b.n	8003280 <HAL_DAC_ConfigChannel+0x92>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2202      	movs	r2, #2
 8003210:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4013      	ands	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6819      	ldr	r1, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	22c0      	movs	r2, #192	; 0xc0
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43da      	mvns	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	400a      	ands	r2, r1
 8003270:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800328c:	b480      	push	{r7}
 800328e:	b089      	sub	sp, #36	; 0x24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	e177      	b.n	8003598 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032a8:	2201      	movs	r2, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	f040 8166 	bne.w	8003592 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d005      	beq.n	80032de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d130      	bne.n	8003340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	2203      	movs	r2, #3
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 0201 	and.w	r2, r3, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b03      	cmp	r3, #3
 800334a:	d017      	beq.n	800337c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2203      	movs	r2, #3
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d123      	bne.n	80033d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	08da      	lsrs	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3208      	adds	r2, #8
 8003390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	220f      	movs	r2, #15
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	08da      	lsrs	r2, r3, #3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3208      	adds	r2, #8
 80033ca:	69b9      	ldr	r1, [r7, #24]
 80033cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80c0 	beq.w	8003592 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <HAL_GPIO_Init+0x324>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	4a65      	ldr	r2, [pc, #404]	; (80035b0 <HAL_GPIO_Init+0x324>)
 800341c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003420:	6453      	str	r3, [r2, #68]	; 0x44
 8003422:	4b63      	ldr	r3, [pc, #396]	; (80035b0 <HAL_GPIO_Init+0x324>)
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800342e:	4a61      	ldr	r2, [pc, #388]	; (80035b4 <HAL_GPIO_Init+0x328>)
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	089b      	lsrs	r3, r3, #2
 8003434:	3302      	adds	r3, #2
 8003436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <HAL_GPIO_Init+0x32c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d037      	beq.n	80034ca <HAL_GPIO_Init+0x23e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a57      	ldr	r2, [pc, #348]	; (80035bc <HAL_GPIO_Init+0x330>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d031      	beq.n	80034c6 <HAL_GPIO_Init+0x23a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a56      	ldr	r2, [pc, #344]	; (80035c0 <HAL_GPIO_Init+0x334>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d02b      	beq.n	80034c2 <HAL_GPIO_Init+0x236>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a55      	ldr	r2, [pc, #340]	; (80035c4 <HAL_GPIO_Init+0x338>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d025      	beq.n	80034be <HAL_GPIO_Init+0x232>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a54      	ldr	r2, [pc, #336]	; (80035c8 <HAL_GPIO_Init+0x33c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01f      	beq.n	80034ba <HAL_GPIO_Init+0x22e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a53      	ldr	r2, [pc, #332]	; (80035cc <HAL_GPIO_Init+0x340>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d019      	beq.n	80034b6 <HAL_GPIO_Init+0x22a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_GPIO_Init+0x344>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x226>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a51      	ldr	r2, [pc, #324]	; (80035d4 <HAL_GPIO_Init+0x348>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00d      	beq.n	80034ae <HAL_GPIO_Init+0x222>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a50      	ldr	r2, [pc, #320]	; (80035d8 <HAL_GPIO_Init+0x34c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x21e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a4f      	ldr	r2, [pc, #316]	; (80035dc <HAL_GPIO_Init+0x350>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_GPIO_Init+0x21a>
 80034a2:	2309      	movs	r3, #9
 80034a4:	e012      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034a6:	230a      	movs	r3, #10
 80034a8:	e010      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034aa:	2308      	movs	r3, #8
 80034ac:	e00e      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034ae:	2307      	movs	r3, #7
 80034b0:	e00c      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034b2:	2306      	movs	r3, #6
 80034b4:	e00a      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034b6:	2305      	movs	r3, #5
 80034b8:	e008      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034ba:	2304      	movs	r3, #4
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034be:	2303      	movs	r3, #3
 80034c0:	e004      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_GPIO_Init+0x240>
 80034ca:	2300      	movs	r3, #0
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	f002 0203 	and.w	r2, r2, #3
 80034d2:	0092      	lsls	r2, r2, #2
 80034d4:	4093      	lsls	r3, r2
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034dc:	4935      	ldr	r1, [pc, #212]	; (80035b4 <HAL_GPIO_Init+0x328>)
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034ea:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <HAL_GPIO_Init+0x354>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800350e:	4a34      	ldr	r2, [pc, #208]	; (80035e0 <HAL_GPIO_Init+0x354>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003514:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <HAL_GPIO_Init+0x354>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003538:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <HAL_GPIO_Init+0x354>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800353e:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <HAL_GPIO_Init+0x354>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003562:	4a1f      	ldr	r2, [pc, #124]	; (80035e0 <HAL_GPIO_Init+0x354>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_GPIO_Init+0x354>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800358c:	4a14      	ldr	r2, [pc, #80]	; (80035e0 <HAL_GPIO_Init+0x354>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3301      	adds	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	f67f ae84 	bls.w	80032a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3724      	adds	r7, #36	; 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40021c00 	.word	0x40021c00
 80035d8:	40022000 	.word	0x40022000
 80035dc:	40022400 	.word	0x40022400
 80035e0:	40013c00 	.word	0x40013c00

080035e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e001      	b.n	8003606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
 8003620:	4613      	mov	r3, r2
 8003622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003624:	787b      	ldrb	r3, [r7, #1]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003630:	e003      	b.n	800363a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003632:	887b      	ldrh	r3, [r7, #2]
 8003634:	041a      	lsls	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	619a      	str	r2, [r3, #24]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e12b      	b.n	80038b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fe fdb0 	bl	80021d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800369a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036ac:	f001 ffbe 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 80036b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4a81      	ldr	r2, [pc, #516]	; (80038bc <HAL_I2C_Init+0x274>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d807      	bhi.n	80036cc <HAL_I2C_Init+0x84>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a80      	ldr	r2, [pc, #512]	; (80038c0 <HAL_I2C_Init+0x278>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bf94      	ite	ls
 80036c4:	2301      	movls	r3, #1
 80036c6:	2300      	movhi	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e006      	b.n	80036da <HAL_I2C_Init+0x92>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a7d      	ldr	r2, [pc, #500]	; (80038c4 <HAL_I2C_Init+0x27c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	bf94      	ite	ls
 80036d4:	2301      	movls	r3, #1
 80036d6:	2300      	movhi	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0e7      	b.n	80038b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a78      	ldr	r2, [pc, #480]	; (80038c8 <HAL_I2C_Init+0x280>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0c9b      	lsrs	r3, r3, #18
 80036ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a6a      	ldr	r2, [pc, #424]	; (80038bc <HAL_I2C_Init+0x274>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d802      	bhi.n	800371c <HAL_I2C_Init+0xd4>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	3301      	adds	r3, #1
 800371a:	e009      	b.n	8003730 <HAL_I2C_Init+0xe8>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a69      	ldr	r2, [pc, #420]	; (80038cc <HAL_I2C_Init+0x284>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	3301      	adds	r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003742:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	495c      	ldr	r1, [pc, #368]	; (80038bc <HAL_I2C_Init+0x274>)
 800374c:	428b      	cmp	r3, r1
 800374e:	d819      	bhi.n	8003784 <HAL_I2C_Init+0x13c>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e59      	subs	r1, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fbb1 f3f3 	udiv	r3, r1, r3
 800375e:	1c59      	adds	r1, r3, #1
 8003760:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003764:	400b      	ands	r3, r1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_I2C_Init+0x138>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1e59      	subs	r1, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fbb1 f3f3 	udiv	r3, r1, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377e:	e051      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003780:	2304      	movs	r3, #4
 8003782:	e04f      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <HAL_I2C_Init+0x168>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	440b      	add	r3, r1
 800379a:	fbb0 f3f3 	udiv	r3, r0, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e012      	b.n	80037d6 <HAL_I2C_Init+0x18e>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e58      	subs	r0, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	0099      	lsls	r1, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Init+0x196>
 80037da:	2301      	movs	r3, #1
 80037dc:	e022      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10e      	bne.n	8003804 <HAL_I2C_Init+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1e58      	subs	r0, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	440b      	add	r3, r1
 80037f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003802:	e00f      	b.n	8003824 <HAL_I2C_Init+0x1dc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	0099      	lsls	r1, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	fbb0 f3f3 	udiv	r3, r0, r3
 800381a:	3301      	adds	r3, #1
 800381c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	6809      	ldr	r1, [r1, #0]
 8003828:	4313      	orrs	r3, r2
 800382a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003852:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6911      	ldr	r1, [r2, #16]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68d2      	ldr	r2, [r2, #12]
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	430b      	orrs	r3, r1
 8003866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	000186a0 	.word	0x000186a0
 80038c0:	001e847f 	.word	0x001e847f
 80038c4:	003d08ff 	.word	0x003d08ff
 80038c8:	431bde83 	.word	0x431bde83
 80038cc:	10624dd3 	.word	0x10624dd3

080038d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	461a      	mov	r2, r3
 80038dc:	460b      	mov	r3, r1
 80038de:	817b      	strh	r3, [r7, #10]
 80038e0:	4613      	mov	r3, r2
 80038e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7ff f8da 	bl	8002a9c <HAL_GetTick>
 80038e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	f040 80e0 	bne.w	8003ab8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2319      	movs	r3, #25
 80038fe:	2201      	movs	r2, #1
 8003900:	4970      	ldr	r1, [pc, #448]	; (8003ac4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fc58 	bl	80041b8 <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	e0d3      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2C_Master_Transmit+0x50>
 800391c:	2302      	movs	r3, #2
 800391e:	e0cc      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d007      	beq.n	8003946 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2221      	movs	r2, #33	; 0x21
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2210      	movs	r2, #16
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	893a      	ldrh	r2, [r7, #8]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a50      	ldr	r2, [pc, #320]	; (8003ac8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003988:	8979      	ldrh	r1, [r7, #10]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fac2 	bl	8003f18 <I2C_MasterRequestWrite>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e08d      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	613b      	str	r3, [r7, #16]
 80039b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039b4:	e066      	b.n	8003a84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	6a39      	ldr	r1, [r7, #32]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fcd2 	bl	8004364 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00d      	beq.n	80039e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d107      	bne.n	80039de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06b      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	781a      	ldrb	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d11b      	bne.n	8003a58 <HAL_I2C_Master_Transmit+0x188>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d017      	beq.n	8003a58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	781a      	ldrb	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	6a39      	ldr	r1, [r7, #32]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fcc2 	bl	80043e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d107      	bne.n	8003a80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e01a      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d194      	bne.n	80039b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e000      	b.n	8003aba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ab8:	2302      	movs	r3, #2
  }
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	00100002 	.word	0x00100002
 8003ac8:	ffff0000 	.word	0xffff0000

08003acc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7fe ffdc 	bl	8002a9c <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 820b 	bne.w	8003f0a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	497c      	ldr	r1, [pc, #496]	; (8003cf0 <HAL_I2C_Master_Receive+0x224>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fb5a 	bl	80041b8 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e1fe      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2C_Master_Receive+0x50>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e1f7      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d007      	beq.n	8003b42 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2222      	movs	r2, #34	; 0x22
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a5c      	ldr	r2, [pc, #368]	; (8003cf4 <HAL_I2C_Master_Receive+0x228>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b84:	8979      	ldrh	r1, [r7, #10]
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fa46 	bl	800401c <I2C_MasterRequestRead>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e1b8      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d113      	bne.n	8003bca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	623b      	str	r3, [r7, #32]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	623b      	str	r3, [r7, #32]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e18c      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d11b      	bne.n	8003c0a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e16c      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d11b      	bne.n	8003c4a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	e14c      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c70:	e138      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	f200 80f1 	bhi.w	8003e5e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d123      	bne.n	8003ccc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fbed 	bl	8004468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e139      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cca:	e10b      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d14e      	bne.n	8003d72 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	2200      	movs	r2, #0
 8003cdc:	4906      	ldr	r1, [pc, #24]	; (8003cf8 <HAL_I2C_Master_Receive+0x22c>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fa6a 	bl	80041b8 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e10e      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
 8003cee:	bf00      	nop
 8003cf0:	00100002 	.word	0x00100002
 8003cf4:	ffff0000 	.word	0xffff0000
 8003cf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d70:	e0b8      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4966      	ldr	r1, [pc, #408]	; (8003f14 <HAL_I2C_Master_Receive+0x448>)
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fa1b 	bl	80041b8 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0bf      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	494f      	ldr	r1, [pc, #316]	; (8003f14 <HAL_I2C_Master_Receive+0x448>)
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f9ed 	bl	80041b8 <I2C_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e091      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e5c:	e042      	b.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fb00 	bl	8004468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e04c      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d118      	bne.n	8003ee4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f47f aec2 	bne.w	8003c72 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3728      	adds	r7, #40	; 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	00010004 	.word	0x00010004

08003f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	460b      	mov	r3, r1
 8003f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d006      	beq.n	8003f42 <I2C_MasterRequestWrite+0x2a>
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d003      	beq.n	8003f42 <I2C_MasterRequestWrite+0x2a>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f40:	d108      	bne.n	8003f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e00b      	b.n	8003f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	2b12      	cmp	r3, #18
 8003f5a:	d107      	bne.n	8003f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f91d 	bl	80041b8 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00d      	beq.n	8003fa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f92:	d103      	bne.n	8003f9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e035      	b.n	800400c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa8:	d108      	bne.n	8003fbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003faa:	897b      	ldrh	r3, [r7, #10]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fb8:	611a      	str	r2, [r3, #16]
 8003fba:	e01b      	b.n	8003ff4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fbc:	897b      	ldrh	r3, [r7, #10]
 8003fbe:	11db      	asrs	r3, r3, #7
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 0306 	and.w	r3, r3, #6
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f063 030f 	orn	r3, r3, #15
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <I2C_MasterRequestWrite+0xfc>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f943 	bl	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e010      	b.n	800400c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	4907      	ldr	r1, [pc, #28]	; (8004018 <I2C_MasterRequestWrite+0x100>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f933 	bl	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	00010008 	.word	0x00010008
 8004018:	00010002 	.word	0x00010002

0800401c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	460b      	mov	r3, r1
 800402a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004040:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b08      	cmp	r3, #8
 8004046:	d006      	beq.n	8004056 <I2C_MasterRequestRead+0x3a>
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d003      	beq.n	8004056 <I2C_MasterRequestRead+0x3a>
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004054:	d108      	bne.n	8004068 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	e00b      	b.n	8004080 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	2b11      	cmp	r3, #17
 800406e:	d107      	bne.n	8004080 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800407e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f893 	bl	80041b8 <I2C_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00d      	beq.n	80040b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a6:	d103      	bne.n	80040b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e079      	b.n	80041a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040bc:	d108      	bne.n	80040d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]
 80040ce:	e05f      	b.n	8004190 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040d0:	897b      	ldrh	r3, [r7, #10]
 80040d2:	11db      	asrs	r3, r3, #7
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 0306 	and.w	r3, r3, #6
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f063 030f 	orn	r3, r3, #15
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4930      	ldr	r1, [pc, #192]	; (80041b0 <I2C_MasterRequestRead+0x194>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f8b9 	bl	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e054      	b.n	80041a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4929      	ldr	r1, [pc, #164]	; (80041b4 <I2C_MasterRequestRead+0x198>)
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f8a9 	bl	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e044      	b.n	80041a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004142:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f831 	bl	80041b8 <I2C_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416a:	d103      	bne.n	8004174 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e017      	b.n	80041a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004178:	897b      	ldrh	r3, [r7, #10]
 800417a:	11db      	asrs	r3, r3, #7
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0306 	and.w	r3, r3, #6
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f063 030e 	orn	r3, r3, #14
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4907      	ldr	r1, [pc, #28]	; (80041b4 <I2C_MasterRequestRead+0x198>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f865 	bl	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	00010008 	.word	0x00010008
 80041b4:	00010002 	.word	0x00010002

080041b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c8:	e025      	b.n	8004216 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d021      	beq.n	8004216 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fe fc63 	bl	8002a9c <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d116      	bne.n	8004216 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f043 0220 	orr.w	r2, r3, #32
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e023      	b.n	800425e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10d      	bne.n	800423c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf0c      	ite	eq
 8004232:	2301      	moveq	r3, #1
 8004234:	2300      	movne	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	e00c      	b.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	43da      	mvns	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf0c      	ite	eq
 800424e:	2301      	moveq	r3, #1
 8004250:	2300      	movne	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	461a      	mov	r2, r3
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	429a      	cmp	r2, r3
 800425a:	d0b6      	beq.n	80041ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004274:	e051      	b.n	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004284:	d123      	bne.n	80042ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004294:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800429e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f043 0204 	orr.w	r2, r3, #4
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e046      	b.n	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d021      	beq.n	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d6:	f7fe fbe1 	bl	8002a9c <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d302      	bcc.n	80042ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d116      	bne.n	800431a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f043 0220 	orr.w	r2, r3, #32
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e020      	b.n	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10c      	bne.n	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	43da      	mvns	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e00b      	b.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	43da      	mvns	r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4013      	ands	r3, r2
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d18d      	bne.n	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004370:	e02d      	b.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f8ce 	bl	8004514 <I2C_IsAcknowledgeFailed>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e02d      	b.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d021      	beq.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fe fb87 	bl	8002a9c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d116      	bne.n	80043ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e007      	b.n	80043de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d1ca      	bne.n	8004372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043f2:	e02d      	b.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f88d 	bl	8004514 <I2C_IsAcknowledgeFailed>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e02d      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d021      	beq.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440c:	f7fe fb46 	bl	8002a9c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e007      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d1ca      	bne.n	80043f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004474:	e042      	b.n	80044fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b10      	cmp	r3, #16
 8004482:	d119      	bne.n	80044b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f06f 0210 	mvn.w	r2, #16
 800448c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e029      	b.n	800450c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b8:	f7fe faf0 	bl	8002a9c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d302      	bcc.n	80044ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d116      	bne.n	80044fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e007      	b.n	800450c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d1b5      	bne.n	8004476 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452a:	d11b      	bne.n	8004564 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004534:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f043 0204 	orr.w	r2, r3, #4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b20      	cmp	r3, #32
 8004586:	d129      	bne.n	80045dc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0210 	bic.w	r2, r2, #16
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b20      	cmp	r3, #32
 8004602:	d12a      	bne.n	800465a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004624:	89fb      	ldrh	r3, [r7, #14]
 8004626:	f023 030f 	bic.w	r3, r3, #15
 800462a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	b29a      	uxth	r2, r3
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	4313      	orrs	r3, r2
 8004634:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	89fa      	ldrh	r2, [r7, #14]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	e000      	b.n	800465c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800465a:	2302      	movs	r3, #2
  }
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0bf      	b.n	80047fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd fde8 	bl	8002264 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80046aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6999      	ldr	r1, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6899      	ldr	r1, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <HAL_LTDC_Init+0x19c>)
 80046dc:	400b      	ands	r3, r1
 80046de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	041b      	lsls	r3, r3, #16
 80046e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6899      	ldr	r1, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68d9      	ldr	r1, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b3e      	ldr	r3, [pc, #248]	; (8004804 <HAL_LTDC_Init+0x19c>)
 800470a:	400b      	ands	r3, r1
 800470c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68d9      	ldr	r1, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1a      	ldr	r2, [r3, #32]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6919      	ldr	r1, [r3, #16]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b33      	ldr	r3, [pc, #204]	; (8004804 <HAL_LTDC_Init+0x19c>)
 8004738:	400b      	ands	r3, r1
 800473a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6919      	ldr	r1, [r3, #16]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6959      	ldr	r1, [r3, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4b27      	ldr	r3, [pc, #156]	; (8004804 <HAL_LTDC_Init+0x19c>)
 8004766:	400b      	ands	r3, r1
 8004768:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6959      	ldr	r1, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004798:	041b      	lsls	r3, r3, #16
 800479a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0206 	orr.w	r2, r2, #6
 80047d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	f000f800 	.word	0xf000f800

08004808 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004808:	b5b0      	push	{r4, r5, r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_LTDC_ConfigLayer+0x1a>
 800481e:	2302      	movs	r3, #2
 8004820:	e02c      	b.n	800487c <HAL_LTDC_ConfigLayer+0x74>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2134      	movs	r1, #52	; 0x34
 8004838:	fb01 f303 	mul.w	r3, r1, r3
 800483c:	4413      	add	r3, r2
 800483e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4614      	mov	r4, r2
 8004846:	461d      	mov	r5, r3
 8004848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800484a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800484c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800484e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f811 	bl	8004884 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2201      	movs	r2, #1
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bdb0      	pop	{r4, r5, r7, pc}

08004884 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	0c1b      	lsrs	r3, r3, #16
 800489c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a0:	4413      	add	r3, r2
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	01db      	lsls	r3, r3, #7
 80048b0:	4413      	add	r3, r2
 80048b2:	3384      	adds	r3, #132	; 0x84
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	4611      	mov	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	01d2      	lsls	r2, r2, #7
 80048c0:	440a      	add	r2, r1
 80048c2:	3284      	adds	r2, #132	; 0x84
 80048c4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048c8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048da:	4413      	add	r3, r2
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4619      	mov	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	01db      	lsls	r3, r3, #7
 80048e8:	440b      	add	r3, r1
 80048ea:	3384      	adds	r3, #132	; 0x84
 80048ec:	4619      	mov	r1, r3
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004902:	4413      	add	r3, r2
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	01db      	lsls	r3, r3, #7
 8004912:	4413      	add	r3, r2
 8004914:	3384      	adds	r3, #132	; 0x84
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	4611      	mov	r1, r2
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	01d2      	lsls	r2, r2, #7
 8004922:	440a      	add	r2, r1
 8004924:	3284      	adds	r2, #132	; 0x84
 8004926:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800492a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800493a:	4413      	add	r3, r2
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	01db      	lsls	r3, r3, #7
 8004948:	440b      	add	r3, r1
 800494a:	3384      	adds	r3, #132	; 0x84
 800494c:	4619      	mov	r1, r3
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	01db      	lsls	r3, r3, #7
 800495e:	4413      	add	r3, r2
 8004960:	3384      	adds	r3, #132	; 0x84
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	6812      	ldr	r2, [r2, #0]
 8004968:	4611      	mov	r1, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	01d2      	lsls	r2, r2, #7
 800496e:	440a      	add	r2, r1
 8004970:	3284      	adds	r2, #132	; 0x84
 8004972:	f023 0307 	bic.w	r3, r3, #7
 8004976:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	01db      	lsls	r3, r3, #7
 8004982:	4413      	add	r3, r2
 8004984:	3384      	adds	r3, #132	; 0x84
 8004986:	461a      	mov	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	4413      	add	r3, r2
 80049b6:	3384      	adds	r3, #132	; 0x84
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	01db      	lsls	r3, r3, #7
 80049c4:	4413      	add	r3, r2
 80049c6:	3384      	adds	r3, #132	; 0x84
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049d4:	461a      	mov	r2, r3
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	431a      	orrs	r2, r3
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	431a      	orrs	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4619      	mov	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	01db      	lsls	r3, r3, #7
 80049e8:	440b      	add	r3, r1
 80049ea:	3384      	adds	r3, #132	; 0x84
 80049ec:	4619      	mov	r1, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	01db      	lsls	r3, r3, #7
 80049fe:	4413      	add	r3, r2
 8004a00:	3384      	adds	r3, #132	; 0x84
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	4611      	mov	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	01d2      	lsls	r2, r2, #7
 8004a0e:	440a      	add	r2, r1
 8004a10:	3284      	adds	r2, #132	; 0x84
 8004a12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	01db      	lsls	r3, r3, #7
 8004a22:	4413      	add	r3, r2
 8004a24:	3384      	adds	r3, #132	; 0x84
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	01db      	lsls	r3, r3, #7
 8004a38:	4413      	add	r3, r2
 8004a3a:	3384      	adds	r3, #132	; 0x84
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	4611      	mov	r1, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	01d2      	lsls	r2, r2, #7
 8004a48:	440a      	add	r2, r1
 8004a4a:	3284      	adds	r2, #132	; 0x84
 8004a4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	68f9      	ldr	r1, [r7, #12]
 8004a60:	6809      	ldr	r1, [r1, #0]
 8004a62:	4608      	mov	r0, r1
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	01c9      	lsls	r1, r1, #7
 8004a68:	4401      	add	r1, r0
 8004a6a:	3184      	adds	r1, #132	; 0x84
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	01db      	lsls	r3, r3, #7
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3384      	adds	r3, #132	; 0x84
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	01db      	lsls	r3, r3, #7
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3384      	adds	r3, #132	; 0x84
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2300      	movs	r3, #0
 8004a92:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	01db      	lsls	r3, r3, #7
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3384      	adds	r3, #132	; 0x84
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	e01b      	b.n	8004af0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d102      	bne.n	8004ac6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	e014      	b.n	8004af0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d00b      	beq.n	8004ae6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d007      	beq.n	8004ae6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d003      	beq.n	8004ae6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ae2:	2b07      	cmp	r3, #7
 8004ae4:	d102      	bne.n	8004aec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	e001      	b.n	8004af0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	01db      	lsls	r3, r3, #7
 8004afa:	4413      	add	r3, r2
 8004afc:	3384      	adds	r3, #132	; 0x84
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	4611      	mov	r1, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	01d2      	lsls	r2, r2, #7
 8004b0a:	440a      	add	r2, r1
 8004b0c:	3284      	adds	r2, #132	; 0x84
 8004b0e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004b12:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	041a      	lsls	r2, r3, #16
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	1acb      	subs	r3, r1, r3
 8004b2a:	69f9      	ldr	r1, [r7, #28]
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	3303      	adds	r3, #3
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	6809      	ldr	r1, [r1, #0]
 8004b36:	4608      	mov	r0, r1
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	01c9      	lsls	r1, r1, #7
 8004b3c:	4401      	add	r1, r0
 8004b3e:	3184      	adds	r1, #132	; 0x84
 8004b40:	4313      	orrs	r3, r2
 8004b42:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	01db      	lsls	r3, r3, #7
 8004b4e:	4413      	add	r3, r2
 8004b50:	3384      	adds	r3, #132	; 0x84
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	01d2      	lsls	r2, r2, #7
 8004b5e:	440a      	add	r2, r1
 8004b60:	3284      	adds	r2, #132	; 0x84
 8004b62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	01db      	lsls	r3, r3, #7
 8004b76:	4413      	add	r3, r2
 8004b78:	3384      	adds	r3, #132	; 0x84
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	01db      	lsls	r3, r3, #7
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3384      	adds	r3, #132	; 0x84
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4611      	mov	r1, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	01d2      	lsls	r2, r2, #7
 8004b9c:	440a      	add	r2, r1
 8004b9e:	3284      	adds	r2, #132	; 0x84
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6013      	str	r3, [r2, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	3724      	adds	r7, #36	; 0x24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb4:	b08f      	sub	sp, #60	; 0x3c
 8004bb6:	af0a      	add	r7, sp, #40	; 0x28
 8004bb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e10f      	b.n	8004de4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fd fd64 	bl	80026ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2203      	movs	r2, #3
 8004be8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f003 faf5 	bl	80081f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	603b      	str	r3, [r7, #0]
 8004c0e:	687e      	ldr	r6, [r7, #4]
 8004c10:	466d      	mov	r5, sp
 8004c12:	f106 0410 	add.w	r4, r6, #16
 8004c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c22:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c26:	1d33      	adds	r3, r6, #4
 8004c28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c2a:	6838      	ldr	r0, [r7, #0]
 8004c2c:	f003 fa80 	bl	8008130 <USB_CoreInit>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e0d0      	b.n	8004de4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2100      	movs	r1, #0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f003 fae3 	bl	8008214 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	73fb      	strb	r3, [r7, #15]
 8004c52:	e04a      	b.n	8004cea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	333d      	adds	r3, #61	; 0x3d
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c68:	7bfa      	ldrb	r2, [r7, #15]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	333c      	adds	r3, #60	; 0x3c
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c7c:	7bfa      	ldrb	r2, [r7, #15]
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	b298      	uxth	r0, r3
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3342      	adds	r3, #66	; 0x42
 8004c90:	4602      	mov	r2, r0
 8004c92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	333f      	adds	r3, #63	; 0x3f
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3344      	adds	r3, #68	; 0x44
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	3348      	adds	r3, #72	; 0x48
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cd0:	7bfa      	ldrb	r2, [r7, #15]
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3350      	adds	r3, #80	; 0x50
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
 8004cea:	7bfa      	ldrb	r2, [r7, #15]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d3af      	bcc.n	8004c54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e044      	b.n	8004d84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cfa:	7bfa      	ldrb	r2, [r7, #15]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d10:	7bfa      	ldrb	r2, [r7, #15]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d22:	7bfa      	ldrb	r2, [r7, #15]
 8004d24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d26:	7bfa      	ldrb	r2, [r7, #15]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d3c:	7bfa      	ldrb	r2, [r7, #15]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d52:	7bfa      	ldrb	r2, [r7, #15]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	3301      	adds	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d3b5      	bcc.n	8004cfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	687e      	ldr	r6, [r7, #4]
 8004d96:	466d      	mov	r5, sp
 8004d98:	f106 0410 	add.w	r4, r6, #16
 8004d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004da4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004da8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dac:	1d33      	adds	r3, r6, #4
 8004dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004db0:	6838      	ldr	r0, [r7, #0]
 8004db2:	f003 fa59 	bl	8008268 <USB_DevInit>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e00d      	b.n	8004de4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f003 fc08 	bl	80085f2 <USB_DevDisconnect>

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e264      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d075      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e0a:	4ba3      	ldr	r3, [pc, #652]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d00c      	beq.n	8004e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e16:	4ba0      	ldr	r3, [pc, #640]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d112      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e22:	4b9d      	ldr	r3, [pc, #628]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e30:	4b99      	ldr	r3, [pc, #612]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05b      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x108>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d157      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e23f      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e50:	d106      	bne.n	8004e60 <HAL_RCC_OscConfig+0x74>
 8004e52:	4b91      	ldr	r3, [pc, #580]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a90      	ldr	r2, [pc, #576]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e01d      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e68:	d10c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x98>
 8004e6a:	4b8b      	ldr	r3, [pc, #556]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a8a      	ldr	r2, [pc, #552]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4b88      	ldr	r3, [pc, #544]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a87      	ldr	r2, [pc, #540]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e00b      	b.n	8004e9c <HAL_RCC_OscConfig+0xb0>
 8004e84:	4b84      	ldr	r3, [pc, #528]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a83      	ldr	r2, [pc, #524]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	4b81      	ldr	r3, [pc, #516]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a80      	ldr	r2, [pc, #512]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fd fdfa 	bl	8002a9c <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fd fdf6 	bl	8002a9c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e204      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ebe:	4b76      	ldr	r3, [pc, #472]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0xc0>
 8004eca:	e014      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd fde6 	bl	8002a9c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed4:	f7fd fde2 	bl	8002a9c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b64      	cmp	r3, #100	; 0x64
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e1f0      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee6:	4b6c      	ldr	r3, [pc, #432]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f0      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xe8>
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d063      	beq.n	8004fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f02:	4b65      	ldr	r3, [pc, #404]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f0e:	4b62      	ldr	r3, [pc, #392]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d11c      	bne.n	8004f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1a:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d116      	bne.n	8004f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f26:	4b5c      	ldr	r3, [pc, #368]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_RCC_OscConfig+0x152>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e1c4      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3e:	4b56      	ldr	r3, [pc, #344]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4952      	ldr	r1, [pc, #328]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f52:	e03a      	b.n	8004fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d020      	beq.n	8004f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f5c:	4b4f      	ldr	r3, [pc, #316]	; (800509c <HAL_RCC_OscConfig+0x2b0>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f62:	f7fd fd9b 	bl	8002a9c <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6a:	f7fd fd97 	bl	8002a9c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e1a5      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7c:	4b46      	ldr	r3, [pc, #280]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f88:	4b43      	ldr	r3, [pc, #268]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	4940      	ldr	r1, [pc, #256]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	600b      	str	r3, [r1, #0]
 8004f9c:	e015      	b.n	8004fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	; (800509c <HAL_RCC_OscConfig+0x2b0>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fd fd7a 	bl	8002a9c <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fac:	f7fd fd76 	bl	8002a9c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e184      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbe:	4b36      	ldr	r3, [pc, #216]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d030      	beq.n	8005038 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d016      	beq.n	800500c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fde:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <HAL_RCC_OscConfig+0x2b4>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fd fd5a 	bl	8002a9c <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fec:	f7fd fd56 	bl	8002a9c <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e164      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffe:	4b26      	ldr	r3, [pc, #152]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0f0      	beq.n	8004fec <HAL_RCC_OscConfig+0x200>
 800500a:	e015      	b.n	8005038 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800500c:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <HAL_RCC_OscConfig+0x2b4>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005012:	f7fd fd43 	bl	8002a9c <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800501a:	f7fd fd3f 	bl	8002a9c <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e14d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800502c:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800502e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80a0 	beq.w	8005186 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800504a:	4b13      	ldr	r3, [pc, #76]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	4a0e      	ldr	r2, [pc, #56]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005064:	6413      	str	r3, [r2, #64]	; 0x40
 8005066:	4b0c      	ldr	r3, [pc, #48]	; (8005098 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_OscConfig+0x2b8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d121      	bne.n	80050c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <HAL_RCC_OscConfig+0x2b8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <HAL_RCC_OscConfig+0x2b8>)
 8005088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508e:	f7fd fd05 	bl	8002a9c <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005094:	e011      	b.n	80050ba <HAL_RCC_OscConfig+0x2ce>
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800
 800509c:	42470000 	.word	0x42470000
 80050a0:	42470e80 	.word	0x42470e80
 80050a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a8:	f7fd fcf8 	bl	8002a9c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e106      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ba:	4b85      	ldr	r3, [pc, #532]	; (80052d0 <HAL_RCC_OscConfig+0x4e4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d106      	bne.n	80050dc <HAL_RCC_OscConfig+0x2f0>
 80050ce:	4b81      	ldr	r3, [pc, #516]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d2:	4a80      	ldr	r2, [pc, #512]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050d4:	f043 0301 	orr.w	r3, r3, #1
 80050d8:	6713      	str	r3, [r2, #112]	; 0x70
 80050da:	e01c      	b.n	8005116 <HAL_RCC_OscConfig+0x32a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b05      	cmp	r3, #5
 80050e2:	d10c      	bne.n	80050fe <HAL_RCC_OscConfig+0x312>
 80050e4:	4b7b      	ldr	r3, [pc, #492]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	4a7a      	ldr	r2, [pc, #488]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050ea:	f043 0304 	orr.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	; 0x70
 80050f0:	4b78      	ldr	r3, [pc, #480]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a77      	ldr	r2, [pc, #476]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
 80050fc:	e00b      	b.n	8005116 <HAL_RCC_OscConfig+0x32a>
 80050fe:	4b75      	ldr	r3, [pc, #468]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a74      	ldr	r2, [pc, #464]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
 800510a:	4b72      	ldr	r3, [pc, #456]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a71      	ldr	r2, [pc, #452]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d015      	beq.n	800514a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511e:	f7fd fcbd 	bl	8002a9c <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005124:	e00a      	b.n	800513c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005126:	f7fd fcb9 	bl	8002a9c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f241 3288 	movw	r2, #5000	; 0x1388
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e0c5      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513c:	4b65      	ldr	r3, [pc, #404]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ee      	beq.n	8005126 <HAL_RCC_OscConfig+0x33a>
 8005148:	e014      	b.n	8005174 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800514a:	f7fd fca7 	bl	8002a9c <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005150:	e00a      	b.n	8005168 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005152:	f7fd fca3 	bl	8002a9c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	4293      	cmp	r3, r2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e0af      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005168:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1ee      	bne.n	8005152 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517a:	4b56      	ldr	r3, [pc, #344]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	4a55      	ldr	r2, [pc, #340]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005184:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 809b 	beq.w	80052c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005190:	4b50      	ldr	r3, [pc, #320]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b08      	cmp	r3, #8
 800519a:	d05c      	beq.n	8005256 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d141      	bne.n	8005228 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a4:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <HAL_RCC_OscConfig+0x4ec>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051aa:	f7fd fc77 	bl	8002a9c <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b2:	f7fd fc73 	bl	8002a9c <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e081      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f0      	bne.n	80051b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	019b      	lsls	r3, r3, #6
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	3b01      	subs	r3, #1
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	4937      	ldr	r1, [pc, #220]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051fa:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_RCC_OscConfig+0x4ec>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fd fc4c 	bl	8002a9c <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005208:	f7fd fc48 	bl	8002a9c <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e056      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f0      	beq.n	8005208 <HAL_RCC_OscConfig+0x41c>
 8005226:	e04e      	b.n	80052c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005228:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <HAL_RCC_OscConfig+0x4ec>)
 800522a:	2200      	movs	r2, #0
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522e:	f7fd fc35 	bl	8002a9c <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fd fc31 	bl	8002a9c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e03f      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005248:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f0      	bne.n	8005236 <HAL_RCC_OscConfig+0x44a>
 8005254:	e037      	b.n	80052c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e032      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <HAL_RCC_OscConfig+0x4e8>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d028      	beq.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d121      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d11a      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005292:	4013      	ands	r3, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005298:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800529a:	4293      	cmp	r3, r2
 800529c:	d111      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	3b01      	subs	r3, #1
 80052ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40007000 	.word	0x40007000
 80052d4:	40023800 	.word	0x40023800
 80052d8:	42470060 	.word	0x42470060

080052dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0cc      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f0:	4b68      	ldr	r3, [pc, #416]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d90c      	bls.n	8005318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fe:	4b65      	ldr	r3, [pc, #404]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b63      	ldr	r3, [pc, #396]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 030f 	and.w	r3, r3, #15
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0b8      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005330:	4b59      	ldr	r3, [pc, #356]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	4a58      	ldr	r2, [pc, #352]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800533a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005348:	4b53      	ldr	r3, [pc, #332]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a52      	ldr	r2, [pc, #328]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800534e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b50      	ldr	r3, [pc, #320]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	494d      	ldr	r1, [pc, #308]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d044      	beq.n	80053fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d119      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d003      	beq.n	800539a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005396:	2b03      	cmp	r3, #3
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800539a:	4b3f      	ldr	r3, [pc, #252]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e06f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053aa:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e067      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ba:	4b37      	ldr	r3, [pc, #220]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f023 0203 	bic.w	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4934      	ldr	r1, [pc, #208]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053cc:	f7fd fb66 	bl	8002a9c <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d4:	f7fd fb62 	bl	8002a9c <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e04f      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 020c 	and.w	r2, r3, #12
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d1eb      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053fc:	4b25      	ldr	r3, [pc, #148]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d20c      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b22      	ldr	r3, [pc, #136]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b20      	ldr	r3, [pc, #128]	; (8005494 <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e032      	b.n	800548a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b19      	ldr	r3, [pc, #100]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4916      	ldr	r1, [pc, #88]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	4313      	orrs	r3, r2
 8005440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490e      	ldr	r1, [pc, #56]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005462:	f000 f821 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <HAL_RCC_ClockConfig+0x1bc>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490a      	ldr	r1, [pc, #40]	; (800549c <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800547e:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fd fac6 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40023c00 	.word	0x40023c00
 8005498:	40023800 	.word	0x40023800
 800549c:	08009934 	.word	0x08009934
 80054a0:	20000000 	.word	0x20000000
 80054a4:	20000004 	.word	0x20000004

080054a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	b5b0      	push	{r4, r5, r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ae:	2100      	movs	r1, #0
 80054b0:	6079      	str	r1, [r7, #4]
 80054b2:	2100      	movs	r1, #0
 80054b4:	60f9      	str	r1, [r7, #12]
 80054b6:	2100      	movs	r1, #0
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054ba:	2100      	movs	r1, #0
 80054bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054be:	4952      	ldr	r1, [pc, #328]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80054c0:	6889      	ldr	r1, [r1, #8]
 80054c2:	f001 010c 	and.w	r1, r1, #12
 80054c6:	2908      	cmp	r1, #8
 80054c8:	d00d      	beq.n	80054e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80054ca:	2908      	cmp	r1, #8
 80054cc:	f200 8094 	bhi.w	80055f8 <HAL_RCC_GetSysClockFreq+0x150>
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d002      	beq.n	80054da <HAL_RCC_GetSysClockFreq+0x32>
 80054d4:	2904      	cmp	r1, #4
 80054d6:	d003      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0x38>
 80054d8:	e08e      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054da:	4b4c      	ldr	r3, [pc, #304]	; (800560c <HAL_RCC_GetSysClockFreq+0x164>)
 80054dc:	60bb      	str	r3, [r7, #8]
       break;
 80054de:	e08e      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054e0:	4b4b      	ldr	r3, [pc, #300]	; (8005610 <HAL_RCC_GetSysClockFreq+0x168>)
 80054e2:	60bb      	str	r3, [r7, #8]
      break;
 80054e4:	e08b      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054e6:	4948      	ldr	r1, [pc, #288]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80054e8:	6849      	ldr	r1, [r1, #4]
 80054ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80054ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054f0:	4945      	ldr	r1, [pc, #276]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80054f2:	6849      	ldr	r1, [r1, #4]
 80054f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d024      	beq.n	8005546 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fc:	4942      	ldr	r1, [pc, #264]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80054fe:	6849      	ldr	r1, [r1, #4]
 8005500:	0989      	lsrs	r1, r1, #6
 8005502:	4608      	mov	r0, r1
 8005504:	f04f 0100 	mov.w	r1, #0
 8005508:	f240 14ff 	movw	r4, #511	; 0x1ff
 800550c:	f04f 0500 	mov.w	r5, #0
 8005510:	ea00 0204 	and.w	r2, r0, r4
 8005514:	ea01 0305 	and.w	r3, r1, r5
 8005518:	493d      	ldr	r1, [pc, #244]	; (8005610 <HAL_RCC_GetSysClockFreq+0x168>)
 800551a:	fb01 f003 	mul.w	r0, r1, r3
 800551e:	2100      	movs	r1, #0
 8005520:	fb01 f102 	mul.w	r1, r1, r2
 8005524:	1844      	adds	r4, r0, r1
 8005526:	493a      	ldr	r1, [pc, #232]	; (8005610 <HAL_RCC_GetSysClockFreq+0x168>)
 8005528:	fba2 0101 	umull	r0, r1, r2, r1
 800552c:	1863      	adds	r3, r4, r1
 800552e:	4619      	mov	r1, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	461a      	mov	r2, r3
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	f7fb f87e 	bl	8000638 <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4613      	mov	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e04a      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	099b      	lsrs	r3, r3, #6
 800554c:	461a      	mov	r2, r3
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005556:	f04f 0100 	mov.w	r1, #0
 800555a:	ea02 0400 	and.w	r4, r2, r0
 800555e:	ea03 0501 	and.w	r5, r3, r1
 8005562:	4620      	mov	r0, r4
 8005564:	4629      	mov	r1, r5
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	014b      	lsls	r3, r1, #5
 8005570:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005574:	0142      	lsls	r2, r0, #5
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	1b00      	subs	r0, r0, r4
 800557c:	eb61 0105 	sbc.w	r1, r1, r5
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	018b      	lsls	r3, r1, #6
 800558a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800558e:	0182      	lsls	r2, r0, #6
 8005590:	1a12      	subs	r2, r2, r0
 8005592:	eb63 0301 	sbc.w	r3, r3, r1
 8005596:	f04f 0000 	mov.w	r0, #0
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	00d9      	lsls	r1, r3, #3
 80055a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055a4:	00d0      	lsls	r0, r2, #3
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	1912      	adds	r2, r2, r4
 80055ac:	eb45 0303 	adc.w	r3, r5, r3
 80055b0:	f04f 0000 	mov.w	r0, #0
 80055b4:	f04f 0100 	mov.w	r1, #0
 80055b8:	0299      	lsls	r1, r3, #10
 80055ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055be:	0290      	lsls	r0, r2, #10
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4610      	mov	r0, r2
 80055c6:	4619      	mov	r1, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	f7fb f832 	bl	8000638 <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4613      	mov	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <HAL_RCC_GetSysClockFreq+0x160>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	0c1b      	lsrs	r3, r3, #16
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	3301      	adds	r3, #1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	60bb      	str	r3, [r7, #8]
      break;
 80055f6:	e002      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_RCC_GetSysClockFreq+0x164>)
 80055fa:	60bb      	str	r3, [r7, #8]
      break;
 80055fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055fe:	68bb      	ldr	r3, [r7, #8]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bdb0      	pop	{r4, r5, r7, pc}
 8005608:	40023800 	.word	0x40023800
 800560c:	00f42400 	.word	0x00f42400
 8005610:	00b71b00 	.word	0x00b71b00

08005614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005618:	4b03      	ldr	r3, [pc, #12]	; (8005628 <HAL_RCC_GetHCLKFreq+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000000 	.word	0x20000000

0800562c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005630:	f7ff fff0 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	0a9b      	lsrs	r3, r3, #10
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	4903      	ldr	r1, [pc, #12]	; (8005650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005642:	5ccb      	ldrb	r3, [r1, r3]
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005648:	4618      	mov	r0, r3
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40023800 	.word	0x40023800
 8005650:	08009944 	.word	0x08009944

08005654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005658:	f7ff ffdc 	bl	8005614 <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0b5b      	lsrs	r3, r3, #13
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	08009944 	.word	0x08009944

0800567c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10b      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d105      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d075      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056b0:	4bad      	ldr	r3, [pc, #692]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056b6:	f7fd f9f1 	bl	8002a9c <HAL_GetTick>
 80056ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80056be:	f7fd f9ed 	bl	8002a9c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e18b      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056d0:	4ba6      	ldr	r3, [pc, #664]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1f0      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d009      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	019a      	lsls	r2, r3, #6
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	071b      	lsls	r3, r3, #28
 80056f4:	499d      	ldr	r1, [pc, #628]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01f      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005708:	4b98      	ldr	r3, [pc, #608]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800570e:	0f1b      	lsrs	r3, r3, #28
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	019a      	lsls	r2, r3, #6
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	431a      	orrs	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	071b      	lsls	r3, r3, #28
 8005728:	4990      	ldr	r1, [pc, #576]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005730:	4b8e      	ldr	r3, [pc, #568]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005736:	f023 021f 	bic.w	r2, r3, #31
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	3b01      	subs	r3, #1
 8005740:	498a      	ldr	r1, [pc, #552]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	019a      	lsls	r2, r3, #6
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	071b      	lsls	r3, r3, #28
 8005768:	4980      	ldr	r1, [pc, #512]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005770:	4b7d      	ldr	r3, [pc, #500]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005772:	2201      	movs	r2, #1
 8005774:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005776:	f7fd f991 	bl	8002a9c <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800577c:	e008      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800577e:	f7fd f98d 	bl	8002a9c <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e12b      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005790:	4b76      	ldr	r3, [pc, #472]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d105      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d079      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057b4:	4b6e      	ldr	r3, [pc, #440]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057ba:	f7fd f96f 	bl	8002a9c <HAL_GetTick>
 80057be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057c0:	e008      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80057c2:	f7fd f96b 	bl	8002a9c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e109      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057d4:	4b65      	ldr	r3, [pc, #404]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e0:	d0ef      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d020      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057ee:	4b5f      	ldr	r3, [pc, #380]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	0f1b      	lsrs	r3, r3, #28
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	019a      	lsls	r2, r3, #6
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	061b      	lsls	r3, r3, #24
 8005808:	431a      	orrs	r2, r3
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	071b      	lsls	r3, r3, #28
 800580e:	4957      	ldr	r1, [pc, #348]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005816:	4b55      	ldr	r3, [pc, #340]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	3b01      	subs	r3, #1
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	4950      	ldr	r1, [pc, #320]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800582a:	4313      	orrs	r3, r2
 800582c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01e      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800583c:	4b4b      	ldr	r3, [pc, #300]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	0e1b      	lsrs	r3, r3, #24
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	019a      	lsls	r2, r3, #6
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	071b      	lsls	r3, r3, #28
 800585c:	4943      	ldr	r1, [pc, #268]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005864:	4b41      	ldr	r3, [pc, #260]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800586a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	493e      	ldr	r1, [pc, #248]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800587a:	4b3d      	ldr	r3, [pc, #244]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587c:	2201      	movs	r2, #1
 800587e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005880:	f7fd f90c 	bl	8002a9c <HAL_GetTick>
 8005884:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005886:	e008      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005888:	f7fd f908 	bl	8002a9c <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e0a6      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800589a:	4b34      	ldr	r3, [pc, #208]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a6:	d1ef      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 808d 	beq.w	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	4b2c      	ldr	r3, [pc, #176]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a2b      	ldr	r2, [pc, #172]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b29      	ldr	r3, [pc, #164]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058d2:	4b28      	ldr	r3, [pc, #160]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a27      	ldr	r2, [pc, #156]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80058d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058de:	f7fd f8dd 	bl	8002a9c <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058e4:	e008      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058e6:	f7fd f8d9 	bl	8002a9c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e077      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058f8:	4b1e      	ldr	r3, [pc, #120]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005904:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d039      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	429a      	cmp	r2, r3
 8005920:	d032      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800592c:	4b12      	ldr	r3, [pc, #72]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005932:	4b11      	ldr	r3, [pc, #68]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005938:	4a0c      	ldr	r2, [pc, #48]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800593e:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d11e      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800594a:	f7fd f8a7 	bl	8002a9c <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	e014      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fd f8a3 	bl	8002a9c <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d90b      	bls.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e03f      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005968:	42470068 	.word	0x42470068
 800596c:	40023800 	.word	0x40023800
 8005970:	42470070 	.word	0x42470070
 8005974:	40007000 	.word	0x40007000
 8005978:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597c:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0e4      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005994:	d10d      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005996:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059aa:	4911      	ldr	r1, [pc, #68]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	608b      	str	r3, [r1, #8]
 80059b0:	e005      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x342>
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	4a0e      	ldr	r2, [pc, #56]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059bc:	6093      	str	r3, [r2, #8]
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ca:	4909      	ldr	r1, [pc, #36]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80059e2:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40023800 	.word	0x40023800
 80059f4:	424711e0 	.word	0x424711e0

080059f8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e022      	b.n	8005a50 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fc fcab 	bl	8002378 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2203      	movs	r2, #3
 8005a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f814 	bl	8005a58 <HAL_SD_InitCard>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e00a      	b.n	8005a50 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005a58:	b5b0      	push	{r4, r5, r7, lr}
 8005a5a:	b08e      	sub	sp, #56	; 0x38
 8005a5c:	af04      	add	r7, sp, #16
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005a74:	2376      	movs	r3, #118	; 0x76
 8005a76:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681d      	ldr	r5, [r3, #0]
 8005a7c:	466c      	mov	r4, sp
 8005a7e:	f107 0314 	add.w	r3, r7, #20
 8005a82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a90:	4628      	mov	r0, r5
 8005a92:	f001 fdd9 	bl	8007648 <SDIO_Init>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e04c      	b.n	8005b42 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005aa8:	4b28      	ldr	r3, [pc, #160]	; (8005b4c <HAL_SD_InitCard+0xf4>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 fe11 	bl	80076da <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005ab8:	4b24      	ldr	r3, [pc, #144]	; (8005b4c <HAL_SD_InitCard+0xf4>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 ff02 	bl	80068c8 <SD_PowerON>
 8005ac4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e02e      	b.n	8005b42 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 fe23 	bl	8006730 <SD_InitCard>
 8005aea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e01b      	b.n	8005b42 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 fe74 	bl	8007800 <SDMMC_CmdBlockLength>
 8005b18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00f      	beq.n	8005b40 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <HAL_SD_InitCard+0xf8>)
 8005b26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3728      	adds	r7, #40	; 0x28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bdb0      	pop	{r4, r5, r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	422580a0 	.word	0x422580a0
 8005b50:	004005ff 	.word	0x004005ff

08005b54 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b092      	sub	sp, #72	; 0x48
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005b62:	f7fc ff9b 	bl	8002a9c <HAL_GetTick>
 8005b66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e1bd      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	f040 81b0 	bne.w	8005ef4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	441a      	add	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d907      	bls.n	8005bb8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e1a4      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d002      	beq.n	8005bd6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd2:	025b      	lsls	r3, r3, #9
 8005bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bda:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	025b      	lsls	r3, r3, #9
 8005be0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005be2:	2390      	movs	r3, #144	; 0x90
 8005be4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005be6:	2302      	movs	r3, #2
 8005be8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f107 0214 	add.w	r2, r7, #20
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 fdd3 	bl	80077a8 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d90a      	bls.n	8005c1e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fe37 	bl	8007888 <SDMMC_CmdReadMultiBlock>
 8005c1a:	6478      	str	r0, [r7, #68]	; 0x44
 8005c1c:	e009      	b.n	8005c32 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 fe0a 	bl	8007844 <SDMMC_CmdReadSingleBlock>
 8005c30:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d012      	beq.n	8005c5e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a7a      	ldr	r2, [pc, #488]	; (8005e28 <HAL_SD_ReadBlocks+0x2d4>)
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e151      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005c62:	e061      	b.n	8005d28 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d03c      	beq.n	8005cec <HAL_SD_ReadBlocks+0x198>
 8005c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d039      	beq.n	8005cec <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c78:	2300      	movs	r3, #0
 8005c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7c:	e033      	b.n	8005ce6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fd0b 	bl	800769e <SDIO_ReadFIFO>
 8005c88:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c90:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c94:	3301      	adds	r3, #1
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	3301      	adds	r3, #1
 8005cac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	0c1b      	lsrs	r3, r3, #16
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	0e1b      	lsrs	r3, r3, #24
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce8:	2b07      	cmp	r3, #7
 8005cea:	d9c8      	bls.n	8005c7e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005cec:	f7fc fed6 	bl	8002a9c <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d902      	bls.n	8005d02 <HAL_SD_ReadBlocks+0x1ae>
 8005cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d112      	bne.n	8005d28 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a48      	ldr	r2, [pc, #288]	; (8005e28 <HAL_SD_ReadBlocks+0x2d4>)
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e0ec      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d2e:	f240 332a 	movw	r3, #810	; 0x32a
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d095      	beq.n	8005c64 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d022      	beq.n	8005d8c <HAL_SD_ReadBlocks+0x238>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d91f      	bls.n	8005d8c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d01b      	beq.n	8005d8c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fdfb 	bl	8007954 <SDMMC_CmdStopTransfer>
 8005d5e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d012      	beq.n	8005d8c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2f      	ldr	r2, [pc, #188]	; (8005e28 <HAL_SD_ReadBlocks+0x2d4>)
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d74:	431a      	orrs	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0ba      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d012      	beq.n	8005dc0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <HAL_SD_ReadBlocks+0x2d4>)
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	f043 0208 	orr.w	r2, r3, #8
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0a0      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d012      	beq.n	8005df4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a15      	ldr	r2, [pc, #84]	; (8005e28 <HAL_SD_ReadBlocks+0x2d4>)
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	f043 0202 	orr.w	r2, r3, #2
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e086      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d063      	beq.n	8005eca <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <HAL_SD_ReadBlocks+0x2d4>)
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e06c      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
 8005e28:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fc34 	bl	800769e <SDIO_ReadFIFO>
 8005e36:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	3301      	adds	r3, #1
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e58:	3301      	adds	r3, #1
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e64:	0c1b      	lsrs	r3, r3, #16
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	3301      	adds	r3, #1
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e74:	3b01      	subs	r3, #1
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	0e1b      	lsrs	r3, r3, #24
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	3301      	adds	r3, #1
 8005e86:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e8e:	f7fc fe05 	bl	8002a9c <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d902      	bls.n	8005ea4 <HAL_SD_ReadBlocks+0x350>
 8005e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d112      	bne.n	8005eca <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <HAL_SD_ReadBlocks+0x3b8>)
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e01b      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <HAL_SD_ReadBlocks+0x38a>
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1a6      	bne.n	8005e2c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f240 523a 	movw	r2, #1338	; 0x53a
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e006      	b.n	8005f02 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
  }
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3748      	adds	r7, #72	; 0x48
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	004005ff 	.word	0x004005ff

08005f10 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b092      	sub	sp, #72	; 0x48
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f1e:	f7fc fdbd 	bl	8002a9c <HAL_GetTick>
 8005f22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d107      	bne.n	8005f42 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e166      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	f040 8159 	bne.w	8006202 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d907      	bls.n	8005f74 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e14d      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2203      	movs	r2, #3
 8005f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2200      	movs	r2, #0
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d002      	beq.n	8005f92 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	025b      	lsls	r3, r3, #9
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f92:	f04f 33ff 	mov.w	r3, #4294967295
 8005f96:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	025b      	lsls	r3, r3, #9
 8005f9c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005f9e:	2390      	movs	r3, #144	; 0x90
 8005fa0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005faa:	2301      	movs	r3, #1
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f107 0218 	add.w	r2, r7, #24
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fbf5 	bl	80077a8 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d90a      	bls.n	8005fda <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fc9d 	bl	8007910 <SDMMC_CmdWriteMultiBlock>
 8005fd6:	6478      	str	r0, [r7, #68]	; 0x44
 8005fd8:	e009      	b.n	8005fee <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2210      	movs	r2, #16
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fc70 	bl	80078cc <SDMMC_CmdWriteSingleBlock>
 8005fec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d012      	beq.n	800601a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a87      	ldr	r2, [pc, #540]	; (8006218 <HAL_SD_WriteBlocks+0x308>)
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006000:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006002:	431a      	orrs	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0fa      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800601e:	e065      	b.n	80060ec <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d040      	beq.n	80060b0 <HAL_SD_WriteBlocks+0x1a0>
 800602e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d03d      	beq.n	80060b0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006034:	2300      	movs	r3, #0
 8006036:	643b      	str	r3, [r7, #64]	; 0x40
 8006038:	e037      	b.n	80060aa <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	3301      	adds	r3, #1
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	3b01      	subs	r3, #1
 800604a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800604c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	021a      	lsls	r2, r3, #8
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605a:	3301      	adds	r3, #1
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800605e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006060:	3b01      	subs	r3, #1
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	041a      	lsls	r2, r3, #16
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006072:	3301      	adds	r3, #1
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8006076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006078:	3b01      	subs	r3, #1
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	061a      	lsls	r2, r3, #24
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608a:	3301      	adds	r3, #1
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800608e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006090:	3b01      	subs	r3, #1
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f107 0214 	add.w	r2, r7, #20
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fb0a 	bl	80076b8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80060a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a6:	3301      	adds	r3, #1
 80060a8:	643b      	str	r3, [r7, #64]	; 0x40
 80060aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060ac:	2b07      	cmp	r3, #7
 80060ae:	d9c4      	bls.n	800603a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80060b0:	f7fc fcf4 	bl	8002a9c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060bc:	429a      	cmp	r2, r3
 80060be:	d902      	bls.n	80060c6 <HAL_SD_WriteBlocks+0x1b6>
 80060c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d112      	bne.n	80060ec <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a53      	ldr	r2, [pc, #332]	; (8006218 <HAL_SD_WriteBlocks+0x308>)
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d4:	431a      	orrs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e091      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060f2:	f240 331a 	movw	r3, #794	; 0x31a
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d091      	beq.n	8006020 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d022      	beq.n	8006150 <HAL_SD_WriteBlocks+0x240>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d91f      	bls.n	8006150 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006114:	2b03      	cmp	r3, #3
 8006116:	d01b      	beq.n	8006150 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fc19 	bl	8007954 <SDMMC_CmdStopTransfer>
 8006122:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006126:	2b00      	cmp	r3, #0
 8006128:	d012      	beq.n	8006150 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3a      	ldr	r2, [pc, #232]	; (8006218 <HAL_SD_WriteBlocks+0x308>)
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006138:	431a      	orrs	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e05f      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d012      	beq.n	8006184 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a2d      	ldr	r2, [pc, #180]	; (8006218 <HAL_SD_WriteBlocks+0x308>)
 8006164:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	f043 0208 	orr.w	r2, r3, #8
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e045      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d012      	beq.n	80061b8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a20      	ldr	r2, [pc, #128]	; (8006218 <HAL_SD_WriteBlocks+0x308>)
 8006198:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	f043 0202 	orr.w	r2, r3, #2
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e02b      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d012      	beq.n	80061ec <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a13      	ldr	r2, [pc, #76]	; (8006218 <HAL_SD_WriteBlocks+0x308>)
 80061cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	f043 0210 	orr.w	r2, r3, #16
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e011      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e006      	b.n	8006210 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
  }
}
 8006210:	4618      	mov	r0, r3
 8006212:	3748      	adds	r7, #72	; 0x48
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	004005ff 	.word	0x004005ff

0800621c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800622a:	0f9b      	lsrs	r3, r3, #30
 800622c:	b2da      	uxtb	r2, r3
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006236:	0e9b      	lsrs	r3, r3, #26
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	b2da      	uxtb	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006248:	0e1b      	lsrs	r3, r3, #24
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	b2da      	uxtb	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625a:	0c1b      	lsrs	r3, r3, #16
 800625c:	b2da      	uxtb	r2, r3
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	b2da      	uxtb	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006272:	b2da      	uxtb	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800627c:	0d1b      	lsrs	r3, r3, #20
 800627e:	b29a      	uxth	r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006288:	0c1b      	lsrs	r3, r3, #16
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	b2da      	uxtb	r2, r3
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800629a:	0bdb      	lsrs	r3, r3, #15
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ac:	0b9b      	lsrs	r3, r3, #14
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062be:	0b5b      	lsrs	r3, r3, #13
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062d0:	0b1b      	lsrs	r3, r3, #12
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2200      	movs	r2, #0
 80062e2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d163      	bne.n	80063b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f0:	009a      	lsls	r2, r3, #2
 80062f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80062f6:	4013      	ands	r3, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80062fc:	0f92      	lsrs	r2, r2, #30
 80062fe:	431a      	orrs	r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006308:	0edb      	lsrs	r3, r3, #27
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	b2da      	uxtb	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631a:	0e1b      	lsrs	r3, r3, #24
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	b2da      	uxtb	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632c:	0d5b      	lsrs	r3, r3, #21
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	b2da      	uxtb	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633e:	0c9b      	lsrs	r3, r3, #18
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	b2da      	uxtb	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006350:	0bdb      	lsrs	r3, r3, #15
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	b2da      	uxtb	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	7e1b      	ldrb	r3, [r3, #24]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	3302      	adds	r3, #2
 8006374:	2201      	movs	r2, #1
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800637e:	fb02 f203 	mul.w	r2, r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	7a1b      	ldrb	r3, [r3, #8]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	2201      	movs	r2, #1
 8006392:	409a      	lsls	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80063a0:	0a52      	lsrs	r2, r2, #9
 80063a2:	fb02 f203 	mul.w	r2, r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063b0:	661a      	str	r2, [r3, #96]	; 0x60
 80063b2:	e031      	b.n	8006418 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d11d      	bne.n	80063f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c0:	041b      	lsls	r3, r3, #16
 80063c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	431a      	orrs	r2, r3
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	3301      	adds	r3, #1
 80063d8:	029a      	lsls	r2, r3, #10
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	661a      	str	r2, [r3, #96]	; 0x60
 80063f6:	e00f      	b.n	8006418 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a58      	ldr	r2, [pc, #352]	; (8006560 <HAL_SD_GetCardCSD+0x344>)
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e09d      	b.n	8006554 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800641c:	0b9b      	lsrs	r3, r3, #14
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	b2da      	uxtb	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800642e:	09db      	lsrs	r3, r3, #7
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006436:	b2da      	uxtb	r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006440:	b2db      	uxtb	r3, r3
 8006442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006446:	b2da      	uxtb	r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006450:	0fdb      	lsrs	r3, r3, #31
 8006452:	b2da      	uxtb	r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645c:	0f5b      	lsrs	r3, r3, #29
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f003 0303 	and.w	r3, r3, #3
 8006464:	b2da      	uxtb	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646e:	0e9b      	lsrs	r3, r3, #26
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	b2da      	uxtb	r2, r3
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	0d9b      	lsrs	r3, r3, #22
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	b2da      	uxtb	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	0d5b      	lsrs	r3, r3, #21
 8006494:	b2db      	uxtb	r3, r3
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	b2da      	uxtb	r2, r3
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	0bdb      	lsrs	r3, r3, #15
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	0b9b      	lsrs	r3, r3, #14
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ea:	0b5b      	lsrs	r3, r3, #13
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fe:	0b1b      	lsrs	r3, r3, #12
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	b2da      	uxtb	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	0a9b      	lsrs	r3, r3, #10
 8006514:	b2db      	uxtb	r3, r3
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	b2da      	uxtb	r2, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	b2da      	uxtb	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006542:	b2da      	uxtb	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	004005ff 	.word	0x004005ff

08006564 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80065bc:	b5b0      	push	{r4, r5, r7, lr}
 80065be:	b08e      	sub	sp, #56	; 0x38
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2203      	movs	r2, #3
 80065d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d02e      	beq.n	800663a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e2:	d106      	bne.n	80065f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38
 80065f0:	e029      	b.n	8006646 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d10a      	bne.n	8006610 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa1a 	bl	8006a34 <SD_WideBus_Enable>
 8006600:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	639a      	str	r2, [r3, #56]	; 0x38
 800660e:	e01a      	b.n	8006646 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fa57 	bl	8006aca <SD_WideBus_Disable>
 800661c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	431a      	orrs	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
 800662a:	e00c      	b.n	8006646 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
 8006638:	e005      	b.n	8006646 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a26      	ldr	r2, [pc, #152]	; (80066ec <HAL_SD_ConfigWideBusOperation+0x130>)
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006664:	e01f      	b.n	80066a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681d      	ldr	r5, [r3, #0]
 800668c:	466c      	mov	r4, sp
 800668e:	f107 0314 	add.w	r3, r7, #20
 8006692:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800669a:	f107 0308 	add.w	r3, r7, #8
 800669e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066a0:	4628      	mov	r0, r5
 80066a2:	f000 ffd1 	bl	8007648 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066ae:	4618      	mov	r0, r3
 80066b0:	f001 f8a6 	bl	8007800 <SDMMC_CmdBlockLength>
 80066b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00c      	beq.n	80066d6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <HAL_SD_ConfigWideBusOperation+0x130>)
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80066de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3728      	adds	r7, #40	; 0x28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bdb0      	pop	{r4, r5, r7, pc}
 80066ea:	bf00      	nop
 80066ec:	004005ff 	.word	0x004005ff

080066f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80066fc:	f107 030c 	add.w	r3, r7, #12
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f96e 	bl	80069e4 <SD_SendStatus>
 8006708:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	0a5b      	lsrs	r3, r3, #9
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006726:	693b      	ldr	r3, [r7, #16]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006730:	b5b0      	push	{r4, r5, r7, lr}
 8006732:	b094      	sub	sp, #80	; 0x50
 8006734:	af04      	add	r7, sp, #16
 8006736:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006738:	2301      	movs	r3, #1
 800673a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f000 ffd9 	bl	80076f8 <SDIO_GetPowerState>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800674c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006750:	e0b6      	b.n	80068c0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006756:	2b03      	cmp	r3, #3
 8006758:	d02f      	beq.n	80067ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f001 fa02 	bl	8007b68 <SDMMC_CmdSendCID>
 8006764:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <SD_InitCard+0x40>
    {
      return errorstate;
 800676c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676e:	e0a7      	b.n	80068c0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f001 f803 	bl	8007782 <SDIO_GetResponse>
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2104      	movs	r1, #4
 8006788:	4618      	mov	r0, r3
 800678a:	f000 fffa 	bl	8007782 <SDIO_GetResponse>
 800678e:	4602      	mov	r2, r0
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2108      	movs	r1, #8
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fff1 	bl	8007782 <SDIO_GetResponse>
 80067a0:	4602      	mov	r2, r0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	210c      	movs	r1, #12
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 ffe8 	bl	8007782 <SDIO_GetResponse>
 80067b2:	4602      	mov	r2, r0
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d00d      	beq.n	80067de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f107 020e 	add.w	r2, r7, #14
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f001 fa08 	bl	8007be2 <SDMMC_CmdSetRelAdd>
 80067d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <SD_InitCard+0xae>
    {
      return errorstate;
 80067da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067dc:	e070      	b.n	80068c0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d036      	beq.n	8006854 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80067e6:	89fb      	ldrh	r3, [r7, #14]
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f001 f9d2 	bl	8007ba4 <SDMMC_CmdSendCSD>
 8006800:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680a:	e059      	b.n	80068c0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2100      	movs	r1, #0
 8006812:	4618      	mov	r0, r3
 8006814:	f000 ffb5 	bl	8007782 <SDIO_GetResponse>
 8006818:	4602      	mov	r2, r0
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2104      	movs	r1, #4
 8006824:	4618      	mov	r0, r3
 8006826:	f000 ffac 	bl	8007782 <SDIO_GetResponse>
 800682a:	4602      	mov	r2, r0
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2108      	movs	r1, #8
 8006836:	4618      	mov	r0, r3
 8006838:	f000 ffa3 	bl	8007782 <SDIO_GetResponse>
 800683c:	4602      	mov	r2, r0
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	210c      	movs	r1, #12
 8006848:	4618      	mov	r0, r3
 800684a:	f000 ff9a 	bl	8007782 <SDIO_GetResponse>
 800684e:	4602      	mov	r2, r0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2104      	movs	r1, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f000 ff91 	bl	8007782 <SDIO_GetResponse>
 8006860:	4603      	mov	r3, r0
 8006862:	0d1a      	lsrs	r2, r3, #20
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006868:	f107 0310 	add.w	r3, r7, #16
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fcd4 	bl	800621c <HAL_SD_GetCardCSD>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800687a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800687e:	e01f      	b.n	80068c0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	461a      	mov	r2, r3
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	4608      	mov	r0, r1
 8006892:	f001 f881 	bl	8007998 <SDMMC_CmdSelDesel>
 8006896:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <SD_InitCard+0x172>
  {
    return errorstate;
 800689e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a0:	e00e      	b.n	80068c0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681d      	ldr	r5, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	466c      	mov	r4, sp
 80068aa:	f103 0210 	add.w	r2, r3, #16
 80068ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80068b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068b4:	3304      	adds	r3, #4
 80068b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068b8:	4628      	mov	r0, r5
 80068ba:	f000 fec5 	bl	8007648 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3740      	adds	r7, #64	; 0x40
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bdb0      	pop	{r4, r5, r7, pc}

080068c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 f87c 	bl	80079de <SDMMC_CmdGoIdleState>
 80068e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	e072      	b.n	80069d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f88f 	bl	8007a1a <SDMMC_CmdOperCond>
 80068fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00d      	beq.n	8006920 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f001 f865 	bl	80079de <SDMMC_CmdGoIdleState>
 8006914:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d004      	beq.n	8006926 <SD_PowerON+0x5e>
    {
      return errorstate;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	e05b      	b.n	80069d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800692a:	2b01      	cmp	r3, #1
 800692c:	d137      	bne.n	800699e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2100      	movs	r1, #0
 8006934:	4618      	mov	r0, r3
 8006936:	f001 f88f 	bl	8007a58 <SDMMC_CmdAppCommand>
 800693a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d02d      	beq.n	800699e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006942:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006946:	e047      	b.n	80069d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2100      	movs	r1, #0
 800694e:	4618      	mov	r0, r3
 8006950:	f001 f882 	bl	8007a58 <SDMMC_CmdAppCommand>
 8006954:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <SD_PowerON+0x98>
    {
      return errorstate;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	e03b      	b.n	80069d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	491e      	ldr	r1, [pc, #120]	; (80069e0 <SD_PowerON+0x118>)
 8006966:	4618      	mov	r0, r3
 8006968:	f001 f898 	bl	8007a9c <SDMMC_CmdAppOperCommand>
 800696c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006978:	e02e      	b.n	80069d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fefe 	bl	8007782 <SDIO_GetResponse>
 8006986:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	0fdb      	lsrs	r3, r3, #31
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <SD_PowerON+0xcc>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <SD_PowerON+0xce>
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]

    count++;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	3301      	adds	r3, #1
 800699c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d802      	bhi.n	80069ae <SD_PowerON+0xe6>
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0cc      	beq.n	8006948 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d902      	bls.n	80069be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80069b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069bc:	e00c      	b.n	80069d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	645a      	str	r2, [r3, #68]	; 0x44
 80069ce:	e002      	b.n	80069d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	c1100000 	.word	0xc1100000

080069e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d102      	bne.n	80069fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80069f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069f8:	e018      	b.n	8006a2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a02:	041b      	lsls	r3, r3, #16
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f001 f90c 	bl	8007c24 <SDMMC_CmdSendStatus>
 8006a0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	e009      	b.n	8006a2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 feaf 	bl	8007782 <SDIO_GetResponse>
 8006a24:	4602      	mov	r2, r0
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 fe99 	bl	8007782 <SDIO_GetResponse>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a5a:	d102      	bne.n	8006a62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a60:	e02f      	b.n	8006ac2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a62:	f107 030c 	add.w	r3, r7, #12
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f879 	bl	8006b60 <SD_FindSCR>
 8006a6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	e023      	b.n	8006ac2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01c      	beq.n	8006abe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	041b      	lsls	r3, r3, #16
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f000 ffe1 	bl	8007a58 <SDMMC_CmdAppCommand>
 8006a96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	e00f      	b.n	8006ac2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 f81a 	bl	8007ae2 <SDMMC_CmdBusWidth>
 8006aae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	e003      	b.n	8006ac2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e001      	b.n	8006ac2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006abe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2100      	movs	r1, #0
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fe4e 	bl	8007782 <SDIO_GetResponse>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006af0:	d102      	bne.n	8006af8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006af6:	e02f      	b.n	8006b58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006af8:	f107 030c 	add.w	r3, r7, #12
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f82e 	bl	8006b60 <SD_FindSCR>
 8006b04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	e023      	b.n	8006b58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01c      	beq.n	8006b54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 ff96 	bl	8007a58 <SDMMC_CmdAppCommand>
 8006b2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	e00f      	b.n	8006b58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 ffcf 	bl	8007ae2 <SDMMC_CmdBusWidth>
 8006b44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	e003      	b.n	8006b58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e001      	b.n	8006b58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b08f      	sub	sp, #60	; 0x3c
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006b6a:	f7fb ff97 	bl	8002a9c <HAL_GetTick>
 8006b6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006b74:	2300      	movs	r3, #0
 8006b76:	60bb      	str	r3, [r7, #8]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2108      	movs	r1, #8
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 fe3a 	bl	8007800 <SDMMC_CmdBlockLength>
 8006b8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	e0b2      	b.n	8006cfe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	f000 ff57 	bl	8007a58 <SDMMC_CmdAppCommand>
 8006baa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	e0a3      	b.n	8006cfe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006bbc:	2308      	movs	r3, #8
 8006bbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006bc0:	2330      	movs	r3, #48	; 0x30
 8006bc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f107 0210 	add.w	r2, r7, #16
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fde4 	bl	80077a8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 ff9e 	bl	8007b26 <SDMMC_CmdSendSCR>
 8006bea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d02a      	beq.n	8006c48 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	e083      	b.n	8006cfe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00f      	beq.n	8006c24 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6819      	ldr	r1, [r3, #0]
 8006c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	f107 0208 	add.w	r2, r7, #8
 8006c10:	18d4      	adds	r4, r2, r3
 8006c12:	4608      	mov	r0, r1
 8006c14:	f000 fd43 	bl	800769e <SDIO_ReadFIFO>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	6023      	str	r3, [r4, #0]
      index++;
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	3301      	adds	r3, #1
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
 8006c22:	e006      	b.n	8006c32 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d012      	beq.n	8006c58 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c32:	f7fb ff33 	bl	8002a9c <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d102      	bne.n	8006c48 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c46:	e05a      	b.n	8006cfe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0cf      	beq.n	8006bf6 <SD_FindSCR+0x96>
 8006c56:	e000      	b.n	8006c5a <SD_FindSCR+0xfa>
      break;
 8006c58:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c70:	2308      	movs	r3, #8
 8006c72:	e044      	b.n	8006cfe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d005      	beq.n	8006c8e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2202      	movs	r2, #2
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	e037      	b.n	8006cfe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	e02a      	b.n	8006cfe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f240 523a 	movw	r2, #1338	; 0x53a
 8006cb0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	061a      	lsls	r2, r3, #24
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cbe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	0a1b      	lsrs	r3, r3, #8
 8006cc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006cc8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	0e1b      	lsrs	r3, r3, #24
 8006cce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	601a      	str	r2, [r3, #0]
    scr++;
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	061a      	lsls	r2, r3, #24
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ce6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	0a1b      	lsrs	r3, r3, #8
 8006cec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cf0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	0e1b      	lsrs	r3, r3, #24
 8006cf6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	373c      	adds	r7, #60	; 0x3c
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd90      	pop	{r4, r7, pc}

08006d06 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e025      	b.n	8006d66 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fb fda8 	bl	8002884 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f000 fb8c 	bl	8007464 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	461a      	mov	r2, r3
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	f000 fbf7 	bl	800754a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e07b      	b.n	8006e78 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d90:	d009      	beq.n	8006da6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	61da      	str	r2, [r3, #28]
 8006d98:	e005      	b.n	8006da6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d106      	bne.n	8006dc6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fb fb41 	bl	8002448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ddc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2a:	ea42 0103 	orr.w	r1, r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	f003 0104 	and.w	r1, r3, #4
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	f003 0210 	and.w	r2, r3, #16
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	69da      	ldr	r2, [r3, #28]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e66:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e03f      	b.n	8006f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fb fb16 	bl	80024d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2224      	movs	r2, #36	; 0x24
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f905 	bl	80070d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691a      	ldr	r2, [r3, #16]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695a      	ldr	r2, [r3, #20]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b08a      	sub	sp, #40	; 0x28
 8006f1e:	af02      	add	r7, sp, #8
 8006f20:	60f8      	str	r0, [r7, #12]
 8006f22:	60b9      	str	r1, [r7, #8]
 8006f24:	603b      	str	r3, [r7, #0]
 8006f26:	4613      	mov	r3, r2
 8006f28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b20      	cmp	r3, #32
 8006f38:	d17c      	bne.n	8007034 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_UART_Transmit+0x2c>
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e075      	b.n	8007036 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_UART_Transmit+0x3e>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e06e      	b.n	8007036 <HAL_UART_Transmit+0x11c>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2221      	movs	r2, #33	; 0x21
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f6e:	f7fb fd95 	bl	8002a9c <HAL_GetTick>
 8006f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f88:	d108      	bne.n	8006f9c <HAL_UART_Transmit+0x82>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	e003      	b.n	8006fa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fac:	e02a      	b.n	8007004 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2180      	movs	r1, #128	; 0x80
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f840 	bl	800703e <UART_WaitOnFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e036      	b.n	8007036 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10b      	bne.n	8006fe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	881b      	ldrh	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	3302      	adds	r3, #2
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	e007      	b.n	8006ff6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	781a      	ldrb	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1cf      	bne.n	8006fae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2200      	movs	r2, #0
 8007016:	2140      	movs	r1, #64	; 0x40
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f810 	bl	800703e <UART_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e006      	b.n	8007036 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	e000      	b.n	8007036 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007034:	2302      	movs	r3, #2
  }
}
 8007036:	4618      	mov	r0, r3
 8007038:	3720      	adds	r7, #32
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	603b      	str	r3, [r7, #0]
 800704a:	4613      	mov	r3, r2
 800704c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704e:	e02c      	b.n	80070aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007056:	d028      	beq.n	80070aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d007      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0x30>
 800705e:	f7fb fd1d 	bl	8002a9c <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	429a      	cmp	r2, r3
 800706c:	d21d      	bcs.n	80070aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800707c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695a      	ldr	r2, [r3, #20]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0201 	bic.w	r2, r2, #1
 800708c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e00f      	b.n	80070ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	4013      	ands	r3, r2
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	bf0c      	ite	eq
 80070ba:	2301      	moveq	r3, #1
 80070bc:	2300      	movne	r3, #0
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d0c3      	beq.n	8007050 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
	...

080070d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d8:	b09f      	sub	sp, #124	; 0x7c
 80070da:	af00      	add	r7, sp, #0
 80070dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80070e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ea:	68d9      	ldr	r1, [r3, #12]
 80070ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	ea40 0301 	orr.w	r3, r0, r1
 80070f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	431a      	orrs	r2, r3
 8007100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	431a      	orrs	r2, r3
 8007106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	4313      	orrs	r3, r2
 800710c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007118:	f021 010c 	bic.w	r1, r1, #12
 800711c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007122:	430b      	orrs	r3, r1
 8007124:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007132:	6999      	ldr	r1, [r3, #24]
 8007134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	ea40 0301 	orr.w	r3, r0, r1
 800713c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800713e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4bc5      	ldr	r3, [pc, #788]	; (8007458 <UART_SetConfig+0x384>)
 8007144:	429a      	cmp	r2, r3
 8007146:	d004      	beq.n	8007152 <UART_SetConfig+0x7e>
 8007148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4bc3      	ldr	r3, [pc, #780]	; (800745c <UART_SetConfig+0x388>)
 800714e:	429a      	cmp	r2, r3
 8007150:	d103      	bne.n	800715a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007152:	f7fe fa7f 	bl	8005654 <HAL_RCC_GetPCLK2Freq>
 8007156:	6778      	str	r0, [r7, #116]	; 0x74
 8007158:	e002      	b.n	8007160 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800715a:	f7fe fa67 	bl	800562c <HAL_RCC_GetPCLK1Freq>
 800715e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007168:	f040 80b6 	bne.w	80072d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800716c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800716e:	461c      	mov	r4, r3
 8007170:	f04f 0500 	mov.w	r5, #0
 8007174:	4622      	mov	r2, r4
 8007176:	462b      	mov	r3, r5
 8007178:	1891      	adds	r1, r2, r2
 800717a:	6439      	str	r1, [r7, #64]	; 0x40
 800717c:	415b      	adcs	r3, r3
 800717e:	647b      	str	r3, [r7, #68]	; 0x44
 8007180:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007184:	1912      	adds	r2, r2, r4
 8007186:	eb45 0303 	adc.w	r3, r5, r3
 800718a:	f04f 0000 	mov.w	r0, #0
 800718e:	f04f 0100 	mov.w	r1, #0
 8007192:	00d9      	lsls	r1, r3, #3
 8007194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007198:	00d0      	lsls	r0, r2, #3
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	1911      	adds	r1, r2, r4
 80071a0:	6639      	str	r1, [r7, #96]	; 0x60
 80071a2:	416b      	adcs	r3, r5
 80071a4:	667b      	str	r3, [r7, #100]	; 0x64
 80071a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	461a      	mov	r2, r3
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	1891      	adds	r1, r2, r2
 80071b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80071b4:	415b      	adcs	r3, r3
 80071b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80071bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80071c0:	f7f9 fa3a 	bl	8000638 <__aeabi_uldivmod>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4ba5      	ldr	r3, [pc, #660]	; (8007460 <UART_SetConfig+0x38c>)
 80071ca:	fba3 2302 	umull	r2, r3, r3, r2
 80071ce:	095b      	lsrs	r3, r3, #5
 80071d0:	011e      	lsls	r6, r3, #4
 80071d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071d4:	461c      	mov	r4, r3
 80071d6:	f04f 0500 	mov.w	r5, #0
 80071da:	4622      	mov	r2, r4
 80071dc:	462b      	mov	r3, r5
 80071de:	1891      	adds	r1, r2, r2
 80071e0:	6339      	str	r1, [r7, #48]	; 0x30
 80071e2:	415b      	adcs	r3, r3
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
 80071e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80071ea:	1912      	adds	r2, r2, r4
 80071ec:	eb45 0303 	adc.w	r3, r5, r3
 80071f0:	f04f 0000 	mov.w	r0, #0
 80071f4:	f04f 0100 	mov.w	r1, #0
 80071f8:	00d9      	lsls	r1, r3, #3
 80071fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071fe:	00d0      	lsls	r0, r2, #3
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	1911      	adds	r1, r2, r4
 8007206:	65b9      	str	r1, [r7, #88]	; 0x58
 8007208:	416b      	adcs	r3, r5
 800720a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800720c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	461a      	mov	r2, r3
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	1891      	adds	r1, r2, r2
 8007218:	62b9      	str	r1, [r7, #40]	; 0x28
 800721a:	415b      	adcs	r3, r3
 800721c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007222:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007226:	f7f9 fa07 	bl	8000638 <__aeabi_uldivmod>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4b8c      	ldr	r3, [pc, #560]	; (8007460 <UART_SetConfig+0x38c>)
 8007230:	fba3 1302 	umull	r1, r3, r3, r2
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	2164      	movs	r1, #100	; 0x64
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	3332      	adds	r3, #50	; 0x32
 8007242:	4a87      	ldr	r2, [pc, #540]	; (8007460 <UART_SetConfig+0x38c>)
 8007244:	fba2 2303 	umull	r2, r3, r2, r3
 8007248:	095b      	lsrs	r3, r3, #5
 800724a:	005b      	lsls	r3, r3, #1
 800724c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007250:	441e      	add	r6, r3
 8007252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007254:	4618      	mov	r0, r3
 8007256:	f04f 0100 	mov.w	r1, #0
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	1894      	adds	r4, r2, r2
 8007260:	623c      	str	r4, [r7, #32]
 8007262:	415b      	adcs	r3, r3
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
 8007266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800726a:	1812      	adds	r2, r2, r0
 800726c:	eb41 0303 	adc.w	r3, r1, r3
 8007270:	f04f 0400 	mov.w	r4, #0
 8007274:	f04f 0500 	mov.w	r5, #0
 8007278:	00dd      	lsls	r5, r3, #3
 800727a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800727e:	00d4      	lsls	r4, r2, #3
 8007280:	4622      	mov	r2, r4
 8007282:	462b      	mov	r3, r5
 8007284:	1814      	adds	r4, r2, r0
 8007286:	653c      	str	r4, [r7, #80]	; 0x50
 8007288:	414b      	adcs	r3, r1
 800728a:	657b      	str	r3, [r7, #84]	; 0x54
 800728c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	461a      	mov	r2, r3
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	1891      	adds	r1, r2, r2
 8007298:	61b9      	str	r1, [r7, #24]
 800729a:	415b      	adcs	r3, r3
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072a6:	f7f9 f9c7 	bl	8000638 <__aeabi_uldivmod>
 80072aa:	4602      	mov	r2, r0
 80072ac:	460b      	mov	r3, r1
 80072ae:	4b6c      	ldr	r3, [pc, #432]	; (8007460 <UART_SetConfig+0x38c>)
 80072b0:	fba3 1302 	umull	r1, r3, r3, r2
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	2164      	movs	r1, #100	; 0x64
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	3332      	adds	r3, #50	; 0x32
 80072c2:	4a67      	ldr	r2, [pc, #412]	; (8007460 <UART_SetConfig+0x38c>)
 80072c4:	fba2 2303 	umull	r2, r3, r2, r3
 80072c8:	095b      	lsrs	r3, r3, #5
 80072ca:	f003 0207 	and.w	r2, r3, #7
 80072ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4432      	add	r2, r6
 80072d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072d6:	e0b9      	b.n	800744c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072da:	461c      	mov	r4, r3
 80072dc:	f04f 0500 	mov.w	r5, #0
 80072e0:	4622      	mov	r2, r4
 80072e2:	462b      	mov	r3, r5
 80072e4:	1891      	adds	r1, r2, r2
 80072e6:	6139      	str	r1, [r7, #16]
 80072e8:	415b      	adcs	r3, r3
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80072f0:	1912      	adds	r2, r2, r4
 80072f2:	eb45 0303 	adc.w	r3, r5, r3
 80072f6:	f04f 0000 	mov.w	r0, #0
 80072fa:	f04f 0100 	mov.w	r1, #0
 80072fe:	00d9      	lsls	r1, r3, #3
 8007300:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007304:	00d0      	lsls	r0, r2, #3
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	eb12 0804 	adds.w	r8, r2, r4
 800730e:	eb43 0905 	adc.w	r9, r3, r5
 8007312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	4618      	mov	r0, r3
 8007318:	f04f 0100 	mov.w	r1, #0
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	008b      	lsls	r3, r1, #2
 8007326:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800732a:	0082      	lsls	r2, r0, #2
 800732c:	4640      	mov	r0, r8
 800732e:	4649      	mov	r1, r9
 8007330:	f7f9 f982 	bl	8000638 <__aeabi_uldivmod>
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	4b49      	ldr	r3, [pc, #292]	; (8007460 <UART_SetConfig+0x38c>)
 800733a:	fba3 2302 	umull	r2, r3, r3, r2
 800733e:	095b      	lsrs	r3, r3, #5
 8007340:	011e      	lsls	r6, r3, #4
 8007342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007344:	4618      	mov	r0, r3
 8007346:	f04f 0100 	mov.w	r1, #0
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	1894      	adds	r4, r2, r2
 8007350:	60bc      	str	r4, [r7, #8]
 8007352:	415b      	adcs	r3, r3
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800735a:	1812      	adds	r2, r2, r0
 800735c:	eb41 0303 	adc.w	r3, r1, r3
 8007360:	f04f 0400 	mov.w	r4, #0
 8007364:	f04f 0500 	mov.w	r5, #0
 8007368:	00dd      	lsls	r5, r3, #3
 800736a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800736e:	00d4      	lsls	r4, r2, #3
 8007370:	4622      	mov	r2, r4
 8007372:	462b      	mov	r3, r5
 8007374:	1814      	adds	r4, r2, r0
 8007376:	64bc      	str	r4, [r7, #72]	; 0x48
 8007378:	414b      	adcs	r3, r1
 800737a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800737c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	4618      	mov	r0, r3
 8007382:	f04f 0100 	mov.w	r1, #0
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	008b      	lsls	r3, r1, #2
 8007390:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007394:	0082      	lsls	r2, r0, #2
 8007396:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800739a:	f7f9 f94d 	bl	8000638 <__aeabi_uldivmod>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4b2f      	ldr	r3, [pc, #188]	; (8007460 <UART_SetConfig+0x38c>)
 80073a4:	fba3 1302 	umull	r1, r3, r3, r2
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	2164      	movs	r1, #100	; 0x64
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	3332      	adds	r3, #50	; 0x32
 80073b6:	4a2a      	ldr	r2, [pc, #168]	; (8007460 <UART_SetConfig+0x38c>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073c2:	441e      	add	r6, r3
 80073c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c6:	4618      	mov	r0, r3
 80073c8:	f04f 0100 	mov.w	r1, #0
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	1894      	adds	r4, r2, r2
 80073d2:	603c      	str	r4, [r7, #0]
 80073d4:	415b      	adcs	r3, r3
 80073d6:	607b      	str	r3, [r7, #4]
 80073d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073dc:	1812      	adds	r2, r2, r0
 80073de:	eb41 0303 	adc.w	r3, r1, r3
 80073e2:	f04f 0400 	mov.w	r4, #0
 80073e6:	f04f 0500 	mov.w	r5, #0
 80073ea:	00dd      	lsls	r5, r3, #3
 80073ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073f0:	00d4      	lsls	r4, r2, #3
 80073f2:	4622      	mov	r2, r4
 80073f4:	462b      	mov	r3, r5
 80073f6:	eb12 0a00 	adds.w	sl, r2, r0
 80073fa:	eb43 0b01 	adc.w	fp, r3, r1
 80073fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	4618      	mov	r0, r3
 8007404:	f04f 0100 	mov.w	r1, #0
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	008b      	lsls	r3, r1, #2
 8007412:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007416:	0082      	lsls	r2, r0, #2
 8007418:	4650      	mov	r0, sl
 800741a:	4659      	mov	r1, fp
 800741c:	f7f9 f90c 	bl	8000638 <__aeabi_uldivmod>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4b0e      	ldr	r3, [pc, #56]	; (8007460 <UART_SetConfig+0x38c>)
 8007426:	fba3 1302 	umull	r1, r3, r3, r2
 800742a:	095b      	lsrs	r3, r3, #5
 800742c:	2164      	movs	r1, #100	; 0x64
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	011b      	lsls	r3, r3, #4
 8007436:	3332      	adds	r3, #50	; 0x32
 8007438:	4a09      	ldr	r2, [pc, #36]	; (8007460 <UART_SetConfig+0x38c>)
 800743a:	fba2 2303 	umull	r2, r3, r2, r3
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	f003 020f 	and.w	r2, r3, #15
 8007444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4432      	add	r2, r6
 800744a:	609a      	str	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	377c      	adds	r7, #124	; 0x7c
 8007450:	46bd      	mov	sp, r7
 8007452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007456:	bf00      	nop
 8007458:	40011000 	.word	0x40011000
 800745c:	40011400 	.word	0x40011400
 8007460:	51eb851f 	.word	0x51eb851f

08007464 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d029      	beq.n	80074d2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800748a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800748e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007498:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800749e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80074a4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80074aa:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80074b0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80074b6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80074bc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80074c2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	e034      	b.n	800753c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074de:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80074e8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80074ee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007502:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007506:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007510:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007516:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800751c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007522:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007528:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	4313      	orrs	r3, r2
 800752e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800754a:	b480      	push	{r7}
 800754c:	b087      	sub	sp, #28
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d02e      	beq.n	80075c2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007570:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	3b01      	subs	r3, #1
 800757e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007580:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	3b01      	subs	r3, #1
 8007588:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800758a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	3b01      	subs	r3, #1
 8007592:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007594:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	3b01      	subs	r3, #1
 800759c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800759e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80075a8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80075b2:	4313      	orrs	r3, r2
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	609a      	str	r2, [r3, #8]
 80075c0:	e03b      	b.n	800763a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075d2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	3b01      	subs	r3, #1
 80075da:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80075e4:	4313      	orrs	r3, r2
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075f8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	3b01      	subs	r3, #1
 8007606:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007608:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	3b01      	subs	r3, #1
 8007610:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007612:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	3b01      	subs	r3, #1
 800761a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800761c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	3b01      	subs	r3, #1
 8007624:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007626:	4313      	orrs	r3, r2
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007648:	b084      	sub	sp, #16
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	f107 001c 	add.w	r0, r7, #28
 8007656:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800765e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007660:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007662:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007666:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800766a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800766e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007672:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007682:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	b004      	add	sp, #16
 800769c:	4770      	bx	lr

0800769e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2203      	movs	r2, #3
 80076e6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80076e8:	2002      	movs	r0, #2
 80076ea:	f7fb f9e3 	bl	8002ab4 <HAL_Delay>
  
  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0303 	and.w	r3, r3, #3
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007732:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007738:	431a      	orrs	r2, r3
                       Command->CPSM);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800773e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800774e:	f023 030f 	bic.w	r3, r3, #15
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	b2db      	uxtb	r3, r3
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007782:	b480      	push	{r7}
 8007784:	b085      	sub	sp, #20
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3314      	adds	r3, #20
 8007790:	461a      	mov	r2, r3
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	4413      	add	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
}  
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80077d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80077da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4313      	orrs	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0

}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800780e:	2310      	movs	r3, #16
 8007810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007812:	2340      	movs	r3, #64	; 0x40
 8007814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800781a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800781e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007820:	f107 0308 	add.w	r3, r7, #8
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff ff74 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800782c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007830:	2110      	movs	r1, #16
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fa44 	bl	8007cc0 <SDMMC_GetCmdResp1>
 8007838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800783a:	69fb      	ldr	r3, [r7, #28]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007852:	2311      	movs	r3, #17
 8007854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007856:	2340      	movs	r3, #64	; 0x40
 8007858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800785e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007862:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007864:	f107 0308 	add.w	r3, r7, #8
 8007868:	4619      	mov	r1, r3
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff ff52 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007870:	f241 3288 	movw	r2, #5000	; 0x1388
 8007874:	2111      	movs	r1, #17
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa22 	bl	8007cc0 <SDMMC_GetCmdResp1>
 800787c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800787e:	69fb      	ldr	r3, [r7, #28]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007896:	2312      	movs	r3, #18
 8007898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800789a:	2340      	movs	r3, #64	; 0x40
 800789c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078a8:	f107 0308 	add.w	r3, r7, #8
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff ff30 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80078b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b8:	2112      	movs	r1, #18
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fa00 	bl	8007cc0 <SDMMC_GetCmdResp1>
 80078c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078c2:	69fb      	ldr	r3, [r7, #28]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80078da:	2318      	movs	r3, #24
 80078dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078de:	2340      	movs	r3, #64	; 0x40
 80078e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078ec:	f107 0308 	add.w	r3, r7, #8
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff ff0e 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80078f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078fc:	2118      	movs	r1, #24
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f9de 	bl	8007cc0 <SDMMC_GetCmdResp1>
 8007904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007906:	69fb      	ldr	r3, [r7, #28]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3720      	adds	r7, #32
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800791e:	2319      	movs	r3, #25
 8007920:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007922:	2340      	movs	r3, #64	; 0x40
 8007924:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800792a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800792e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007930:	f107 0308 	add.w	r3, r7, #8
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff feec 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800793c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007940:	2119      	movs	r1, #25
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9bc 	bl	8007cc0 <SDMMC_GetCmdResp1>
 8007948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800794a:	69fb      	ldr	r3, [r7, #28]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3720      	adds	r7, #32
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b088      	sub	sp, #32
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007960:	230c      	movs	r3, #12
 8007962:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007964:	2340      	movs	r3, #64	; 0x40
 8007966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007968:	2300      	movs	r3, #0
 800796a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800796c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007970:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007972:	f107 0308 	add.w	r3, r7, #8
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff fecb 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800797e:	4a05      	ldr	r2, [pc, #20]	; (8007994 <SDMMC_CmdStopTransfer+0x40>)
 8007980:	210c      	movs	r1, #12
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f99c 	bl	8007cc0 <SDMMC_GetCmdResp1>
 8007988:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800798a:	69fb      	ldr	r3, [r7, #28]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3720      	adds	r7, #32
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	05f5e100 	.word	0x05f5e100

08007998 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	; 0x28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80079a8:	2307      	movs	r3, #7
 80079aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079ac:	2340      	movs	r3, #64	; 0x40
 80079ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ba:	f107 0310 	add.w	r3, r7, #16
 80079be:	4619      	mov	r1, r3
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff fea7 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80079c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ca:	2107      	movs	r1, #7
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f977 	bl	8007cc0 <SDMMC_GetCmdResp1>
 80079d2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3728      	adds	r7, #40	; 0x28
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b088      	sub	sp, #32
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80079ee:	2300      	movs	r3, #0
 80079f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079f2:	2300      	movs	r3, #0
 80079f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079fc:	f107 0308 	add.w	r3, r7, #8
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fe86 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f92d 	bl	8007c68 <SDMMC_GetCmdError>
 8007a0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a10:	69fb      	ldr	r3, [r7, #28]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b088      	sub	sp, #32
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007a22:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007a26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007a28:	2308      	movs	r3, #8
 8007a2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a2c:	2340      	movs	r3, #64	; 0x40
 8007a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a30:	2300      	movs	r3, #0
 8007a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a3a:	f107 0308 	add.w	r3, r7, #8
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fe67 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fb24 	bl	8008094 <SDMMC_GetCmdResp7>
 8007a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a4e:	69fb      	ldr	r3, [r7, #28]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3720      	adds	r7, #32
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007a66:	2337      	movs	r3, #55	; 0x37
 8007a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a6a:	2340      	movs	r3, #64	; 0x40
 8007a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a78:	f107 0308 	add.w	r3, r7, #8
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fe48 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a88:	2137      	movs	r1, #55	; 0x37
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f918 	bl	8007cc0 <SDMMC_GetCmdResp1>
 8007a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a92:	69fb      	ldr	r3, [r7, #28]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007ab2:	2329      	movs	r3, #41	; 0x29
 8007ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ab6:	2340      	movs	r3, #64	; 0x40
 8007ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ac4:	f107 0308 	add.w	r3, r7, #8
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fe22 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fa2b 	bl	8007f2c <SDMMC_GetCmdResp3>
 8007ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b088      	sub	sp, #32
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007af0:	2306      	movs	r3, #6
 8007af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007af4:	2340      	movs	r3, #64	; 0x40
 8007af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b02:	f107 0308 	add.w	r3, r7, #8
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff fe03 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b12:	2106      	movs	r1, #6
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f8d3 	bl	8007cc0 <SDMMC_GetCmdResp1>
 8007b1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b1c:	69fb      	ldr	r3, [r7, #28]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3720      	adds	r7, #32
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b088      	sub	sp, #32
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007b32:	2333      	movs	r3, #51	; 0x33
 8007b34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b36:	2340      	movs	r3, #64	; 0x40
 8007b38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b44:	f107 0308 	add.w	r3, r7, #8
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fde2 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b54:	2133      	movs	r1, #51	; 0x33
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8b2 	bl	8007cc0 <SDMMC_GetCmdResp1>
 8007b5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3720      	adds	r7, #32
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007b74:	2302      	movs	r3, #2
 8007b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007b78:	23c0      	movs	r3, #192	; 0xc0
 8007b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b86:	f107 0308 	add.w	r3, r7, #8
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f7ff fdc1 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f982 	bl	8007e9c <SDMMC_GetCmdResp2>
 8007b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3720      	adds	r7, #32
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007bb2:	2309      	movs	r3, #9
 8007bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007bb6:	23c0      	movs	r3, #192	; 0xc0
 8007bb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bc4:	f107 0308 	add.w	r3, r7, #8
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff fda2 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f963 	bl	8007e9c <SDMMC_GetCmdResp2>
 8007bd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bd8:	69fb      	ldr	r3, [r7, #28]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3720      	adds	r7, #32
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b088      	sub	sp, #32
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bf4:	2340      	movs	r3, #64	; 0x40
 8007bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fd83 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	2103      	movs	r1, #3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f9c8 	bl	8007fa8 <SDMMC_GetCmdResp6>
 8007c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007c32:	230d      	movs	r3, #13
 8007c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c36:	2340      	movs	r3, #64	; 0x40
 8007c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7ff fd62 	bl	8007714 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c54:	210d      	movs	r1, #13
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f832 	bl	8007cc0 <SDMMC_GetCmdResp1>
 8007c5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c5e:	69fb      	ldr	r3, [r7, #28]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c70:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <SDMMC_GetCmdError+0x50>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a11      	ldr	r2, [pc, #68]	; (8007cbc <SDMMC_GetCmdError+0x54>)
 8007c76:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7a:	0a5b      	lsrs	r3, r3, #9
 8007c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c80:	fb02 f303 	mul.w	r3, r2, r3
 8007c84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	1e5a      	subs	r2, r3, #1
 8007c8a:	60fa      	str	r2, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d102      	bne.n	8007c96 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c94:	e009      	b.n	8007caa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0f1      	beq.n	8007c86 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	22c5      	movs	r2, #197	; 0xc5
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000000 	.word	0x20000000
 8007cbc:	10624dd3 	.word	0x10624dd3

08007cc0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007cce:	4b70      	ldr	r3, [pc, #448]	; (8007e90 <SDMMC_GetCmdResp1+0x1d0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a70      	ldr	r2, [pc, #448]	; (8007e94 <SDMMC_GetCmdResp1+0x1d4>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	0a5a      	lsrs	r2, r3, #9
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	fb02 f303 	mul.w	r3, r2, r3
 8007ce0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	61fa      	str	r2, [r7, #28]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cf0:	e0c9      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0ef      	beq.n	8007ce2 <SDMMC_GetCmdResp1+0x22>
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1ea      	bne.n	8007ce2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d1e:	2304      	movs	r3, #4
 8007d20:	e0b1      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0a6      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	22c5      	movs	r2, #197	; 0xc5
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f7ff fd12 	bl	8007768 <SDIO_GetCommandResponse>
 8007d44:	4603      	mov	r3, r0
 8007d46:	461a      	mov	r2, r3
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d001      	beq.n	8007d52 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e099      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007d52:	2100      	movs	r1, #0
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7ff fd14 	bl	8007782 <SDIO_GetResponse>
 8007d5a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4b4e      	ldr	r3, [pc, #312]	; (8007e98 <SDMMC_GetCmdResp1+0x1d8>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e08d      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da02      	bge.n	8007d76 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d74:	e087      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d80:	2340      	movs	r3, #64	; 0x40
 8007d82:	e080      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d8e:	2380      	movs	r3, #128	; 0x80
 8007d90:	e079      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007da0:	e071      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007db0:	e069      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc0:	e061      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dd0:	e059      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007de0:	e051      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007df0:	e049      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007dfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e00:	e041      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e10:	e039      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e20:	e031      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007e2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e30:	e029      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e40:	e021      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d002      	beq.n	8007e52 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007e4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e50:	e019      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007e5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e60:	e011      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007e6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e70:	e009      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e80:	e001      	b.n	8007e86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000000 	.word	0x20000000
 8007e94:	10624dd3 	.word	0x10624dd3
 8007e98:	fdffe008 	.word	0xfdffe008

08007e9c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ea4:	4b1f      	ldr	r3, [pc, #124]	; (8007f24 <SDMMC_GetCmdResp2+0x88>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <SDMMC_GetCmdResp2+0x8c>)
 8007eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007eae:	0a5b      	lsrs	r3, r3, #9
 8007eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
 8007eb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	1e5a      	subs	r2, r3, #1
 8007ebe:	60fa      	str	r2, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ec8:	e026      	b.n	8007f18 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ece:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0ef      	beq.n	8007eba <SDMMC_GetCmdResp2+0x1e>
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1ea      	bne.n	8007eba <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2204      	movs	r2, #4
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ef6:	2304      	movs	r3, #4
 8007ef8:	e00e      	b.n	8007f18 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e003      	b.n	8007f18 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	22c5      	movs	r2, #197	; 0xc5
 8007f14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	20000000 	.word	0x20000000
 8007f28:	10624dd3 	.word	0x10624dd3

08007f2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f34:	4b1a      	ldr	r3, [pc, #104]	; (8007fa0 <SDMMC_GetCmdResp3+0x74>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <SDMMC_GetCmdResp3+0x78>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	0a5b      	lsrs	r3, r3, #9
 8007f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f44:	fb02 f303 	mul.w	r3, r2, r3
 8007f48:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	1e5a      	subs	r2, r3, #1
 8007f4e:	60fa      	str	r2, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f58:	e01b      	b.n	8007f92 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0ef      	beq.n	8007f4a <SDMMC_GetCmdResp3+0x1e>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1ea      	bne.n	8007f4a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2204      	movs	r2, #4
 8007f84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f86:	2304      	movs	r3, #4
 8007f88:	e003      	b.n	8007f92 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	22c5      	movs	r2, #197	; 0xc5
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	20000000 	.word	0x20000000
 8007fa4:	10624dd3 	.word	0x10624dd3

08007fa8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fb6:	4b35      	ldr	r3, [pc, #212]	; (800808c <SDMMC_GetCmdResp6+0xe4>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a35      	ldr	r2, [pc, #212]	; (8008090 <SDMMC_GetCmdResp6+0xe8>)
 8007fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc0:	0a5b      	lsrs	r3, r3, #9
 8007fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc6:	fb02 f303 	mul.w	r3, r2, r3
 8007fca:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	1e5a      	subs	r2, r3, #1
 8007fd0:	61fa      	str	r2, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fda:	e052      	b.n	8008082 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0ef      	beq.n	8007fcc <SDMMC_GetCmdResp6+0x24>
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1ea      	bne.n	8007fcc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2204      	movs	r2, #4
 8008006:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008008:	2304      	movs	r3, #4
 800800a:	e03a      	b.n	8008082 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d004      	beq.n	8008022 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800801e:	2301      	movs	r3, #1
 8008020:	e02f      	b.n	8008082 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff fba0 	bl	8007768 <SDIO_GetCommandResponse>
 8008028:	4603      	mov	r3, r0
 800802a:	461a      	mov	r2, r3
 800802c:	7afb      	ldrb	r3, [r7, #11]
 800802e:	4293      	cmp	r3, r2
 8008030:	d001      	beq.n	8008036 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008032:	2301      	movs	r3, #1
 8008034:	e025      	b.n	8008082 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	22c5      	movs	r2, #197	; 0xc5
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800803c:	2100      	movs	r1, #0
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f7ff fb9f 	bl	8007782 <SDIO_GetResponse>
 8008044:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d106      	bne.n	800805e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	b29a      	uxth	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800805a:	2300      	movs	r3, #0
 800805c:	e011      	b.n	8008082 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800806c:	e009      	b.n	8008082 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800807c:	e001      	b.n	8008082 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800807e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008082:	4618      	mov	r0, r3
 8008084:	3720      	adds	r7, #32
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000000 	.word	0x20000000
 8008090:	10624dd3 	.word	0x10624dd3

08008094 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800809c:	4b22      	ldr	r3, [pc, #136]	; (8008128 <SDMMC_GetCmdResp7+0x94>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a22      	ldr	r2, [pc, #136]	; (800812c <SDMMC_GetCmdResp7+0x98>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	0a5b      	lsrs	r3, r3, #9
 80080a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
 80080b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	60fa      	str	r2, [r7, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080c0:	e02c      	b.n	800811c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0ef      	beq.n	80080b2 <SDMMC_GetCmdResp7+0x1e>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1ea      	bne.n	80080b2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d004      	beq.n	80080f2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2204      	movs	r2, #4
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080ee:	2304      	movs	r3, #4
 80080f0:	e014      	b.n	800811c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008104:	2301      	movs	r3, #1
 8008106:	e009      	b.n	800811c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2240      	movs	r2, #64	; 0x40
 8008118:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800811a:	2300      	movs	r3, #0
  
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	20000000 	.word	0x20000000
 800812c:	10624dd3 	.word	0x10624dd3

08008130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008130:	b084      	sub	sp, #16
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	f107 001c 	add.w	r0, r7, #28
 800813e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	2b01      	cmp	r3, #1
 8008146:	d122      	bne.n	800818e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800815c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008172:	2b01      	cmp	r3, #1
 8008174:	d105      	bne.n	8008182 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa56 	bl	8008634 <USB_CoreReset>
 8008188:	4603      	mov	r3, r0
 800818a:	73fb      	strb	r3, [r7, #15]
 800818c:	e01a      	b.n	80081c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa4a 	bl	8008634 <USB_CoreReset>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80081a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d106      	bne.n	80081b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	639a      	str	r2, [r3, #56]	; 0x38
 80081b6:	e005      	b.n	80081c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d10b      	bne.n	80081e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f043 0206 	orr.w	r2, r3, #6
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f043 0220 	orr.w	r2, r3, #32
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081ee:	b004      	add	sp, #16
 80081f0:	4770      	bx	lr

080081f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f023 0201 	bic.w	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d106      	bne.n	8008240 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	60da      	str	r2, [r3, #12]
 800823e:	e00b      	b.n	8008258 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60da      	str	r2, [r3, #12]
 8008252:	e001      	b.n	8008258 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e003      	b.n	8008260 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008258:	2032      	movs	r0, #50	; 0x32
 800825a:	f7fa fc2b 	bl	8002ab4 <HAL_Delay>

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008268:	b084      	sub	sp, #16
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	e009      	b.n	800829c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	3340      	adds	r3, #64	; 0x40
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4413      	add	r3, r2
 8008292:	2200      	movs	r2, #0
 8008294:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	3301      	adds	r3, #1
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	2b0e      	cmp	r3, #14
 80082a0:	d9f2      	bls.n	8008288 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d11c      	bne.n	80082e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082b6:	f043 0302 	orr.w	r3, r3, #2
 80082ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	639a      	str	r2, [r3, #56]	; 0x38
 80082e0:	e00b      	b.n	80082fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008300:	461a      	mov	r2, r3
 8008302:	2300      	movs	r3, #0
 8008304:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800830c:	4619      	mov	r1, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008314:	461a      	mov	r2, r3
 8008316:	680b      	ldr	r3, [r1, #0]
 8008318:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	2b01      	cmp	r3, #1
 800831e:	d10c      	bne.n	800833a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008322:	2b00      	cmp	r3, #0
 8008324:	d104      	bne.n	8008330 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008326:	2100      	movs	r1, #0
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f949 	bl	80085c0 <USB_SetDevSpeed>
 800832e:	e008      	b.n	8008342 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008330:	2101      	movs	r1, #1
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f944 	bl	80085c0 <USB_SetDevSpeed>
 8008338:	e003      	b.n	8008342 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800833a:	2103      	movs	r1, #3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f93f 	bl	80085c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008342:	2110      	movs	r1, #16
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f8f3 	bl	8008530 <USB_FlushTxFifo>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f911 	bl	800857c <USB_FlushRxFifo>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836a:	461a      	mov	r2, r3
 800836c:	2300      	movs	r3, #0
 800836e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008376:	461a      	mov	r2, r3
 8008378:	2300      	movs	r3, #0
 800837a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008382:	461a      	mov	r2, r3
 8008384:	2300      	movs	r3, #0
 8008386:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008388:	2300      	movs	r3, #0
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	e043      	b.n	8008416 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083a4:	d118      	bne.n	80083d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10a      	bne.n	80083c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	461a      	mov	r2, r3
 80083ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	e013      	b.n	80083ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ce:	461a      	mov	r2, r3
 80083d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083d4:	6013      	str	r3, [r2, #0]
 80083d6:	e008      	b.n	80083ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e4:	461a      	mov	r2, r3
 80083e6:	2300      	movs	r3, #0
 80083e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	461a      	mov	r2, r3
 80083f8:	2300      	movs	r3, #0
 80083fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008408:	461a      	mov	r2, r3
 800840a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800840e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	3301      	adds	r3, #1
 8008414:	613b      	str	r3, [r7, #16]
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	429a      	cmp	r2, r3
 800841c:	d3b7      	bcc.n	800838e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800841e:	2300      	movs	r3, #0
 8008420:	613b      	str	r3, [r7, #16]
 8008422:	e043      	b.n	80084ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008436:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800843a:	d118      	bne.n	800846e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10a      	bne.n	8008458 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844e:	461a      	mov	r2, r3
 8008450:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	e013      	b.n	8008480 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008464:	461a      	mov	r2, r3
 8008466:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	e008      	b.n	8008480 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847a:	461a      	mov	r2, r3
 800847c:	2300      	movs	r3, #0
 800847e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4413      	add	r3, r2
 8008488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848c:	461a      	mov	r2, r3
 800848e:	2300      	movs	r3, #0
 8008490:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849e:	461a      	mov	r2, r3
 80084a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	3301      	adds	r3, #1
 80084aa:	613b      	str	r3, [r7, #16]
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d3b7      	bcc.n	8008424 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	f043 0210 	orr.w	r2, r3, #16
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699a      	ldr	r2, [r3, #24]
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <USB_DevInit+0x2c4>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f043 0208 	orr.w	r2, r3, #8
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008508:	2b01      	cmp	r3, #1
 800850a:	d107      	bne.n	800851c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008514:	f043 0304 	orr.w	r3, r3, #4
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800851c:	7dfb      	ldrb	r3, [r7, #23]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008528:	b004      	add	sp, #16
 800852a:	4770      	bx	lr
 800852c:	803c3800 	.word	0x803c3800

08008530 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	019b      	lsls	r3, r3, #6
 8008542:	f043 0220 	orr.w	r2, r3, #32
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3301      	adds	r3, #1
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a09      	ldr	r2, [pc, #36]	; (8008578 <USB_FlushTxFifo+0x48>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d901      	bls.n	800855c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e006      	b.n	800856a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f003 0320 	and.w	r3, r3, #32
 8008564:	2b20      	cmp	r3, #32
 8008566:	d0f0      	beq.n	800854a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	00030d40 	.word	0x00030d40

0800857c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2210      	movs	r2, #16
 800858c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3301      	adds	r3, #1
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	4a09      	ldr	r2, [pc, #36]	; (80085bc <USB_FlushRxFifo+0x40>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d901      	bls.n	80085a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e006      	b.n	80085ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f003 0310 	and.w	r3, r3, #16
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d0f0      	beq.n	800858e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	00030d40 	.word	0x00030d40

080085c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	68f9      	ldr	r1, [r7, #12]
 80085dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085e0:	4313      	orrs	r3, r2
 80085e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b085      	sub	sp, #20
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800860c:	f023 0303 	bic.w	r3, r3, #3
 8008610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008620:	f043 0302 	orr.w	r3, r3, #2
 8008624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3301      	adds	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4a13      	ldr	r2, [pc, #76]	; (8008698 <USB_CoreReset+0x64>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d901      	bls.n	8008652 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e01b      	b.n	800868a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	daf2      	bge.n	8008640 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f043 0201 	orr.w	r2, r3, #1
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3301      	adds	r3, #1
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4a09      	ldr	r2, [pc, #36]	; (8008698 <USB_CoreReset+0x64>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d901      	bls.n	800867c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e006      	b.n	800868a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b01      	cmp	r3, #1
 8008686:	d0f0      	beq.n	800866a <USB_CoreReset+0x36>

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	00030d40 	.word	0x00030d40

0800869c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80086a0:	4904      	ldr	r1, [pc, #16]	; (80086b4 <MX_FATFS_Init+0x18>)
 80086a2:	4805      	ldr	r0, [pc, #20]	; (80086b8 <MX_FATFS_Init+0x1c>)
 80086a4:	f000 f9e4 	bl	8008a70 <FATFS_LinkDriver>
 80086a8:	4603      	mov	r3, r0
 80086aa:	461a      	mov	r2, r3
 80086ac:	4b03      	ldr	r3, [pc, #12]	; (80086bc <MX_FATFS_Init+0x20>)
 80086ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80086b0:	bf00      	nop
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	2000087c 	.word	0x2000087c
 80086b8:	0800994c 	.word	0x0800994c
 80086bc:	20000878 	.word	0x20000878

080086c0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80086ca:	f000 f879 	bl	80087c0 <BSP_SD_IsDetected>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d001      	beq.n	80086d8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e012      	b.n	80086fe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80086d8:	480b      	ldr	r0, [pc, #44]	; (8008708 <BSP_SD_Init+0x48>)
 80086da:	f7fd f98d 	bl	80059f8 <HAL_SD_Init>
 80086de:	4603      	mov	r3, r0
 80086e0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d109      	bne.n	80086fc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80086e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086ec:	4806      	ldr	r0, [pc, #24]	; (8008708 <BSP_SD_Init+0x48>)
 80086ee:	f7fd ff65 	bl	80065bc <HAL_SD_ConfigWideBusOperation>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80086fc:	79fb      	ldrb	r3, [r7, #7]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20000720 	.word	0x20000720

0800870c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b088      	sub	sp, #32
 8008710:	af02      	add	r7, sp, #8
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	68f9      	ldr	r1, [r7, #12]
 8008728:	4806      	ldr	r0, [pc, #24]	; (8008744 <BSP_SD_ReadBlocks+0x38>)
 800872a:	f7fd fa13 	bl	8005b54 <HAL_SD_ReadBlocks>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008738:	7dfb      	ldrb	r3, [r7, #23]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000720 	.word	0x20000720

08008748 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af02      	add	r7, sp, #8
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	4806      	ldr	r0, [pc, #24]	; (8008780 <BSP_SD_WriteBlocks+0x38>)
 8008766:	f7fd fbd3 	bl	8005f10 <HAL_SD_WriteBlocks>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000720 	.word	0x20000720

08008784 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008788:	4805      	ldr	r0, [pc, #20]	; (80087a0 <BSP_SD_GetCardState+0x1c>)
 800878a:	f7fd ffb1 	bl	80066f0 <HAL_SD_GetCardState>
 800878e:	4603      	mov	r3, r0
 8008790:	2b04      	cmp	r3, #4
 8008792:	bf14      	ite	ne
 8008794:	2301      	movne	r3, #1
 8008796:	2300      	moveq	r3, #0
 8008798:	b2db      	uxtb	r3, r3
}
 800879a:	4618      	mov	r0, r3
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000720 	.word	0x20000720

080087a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4803      	ldr	r0, [pc, #12]	; (80087bc <BSP_SD_GetCardInfo+0x18>)
 80087b0:	f7fd fed8 	bl	8006564 <HAL_SD_GetCardInfo>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20000720 	.word	0x20000720

080087c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80087c6:	2301      	movs	r3, #1
 80087c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80087ca:	f000 f80b 	bl	80087e4 <BSP_PlatformIsDetected>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80087d4:	2300      	movs	r3, #0
 80087d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	b2db      	uxtb	r3, r3
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80087ea:	2301      	movs	r3, #1
 80087ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80087ee:	2120      	movs	r1, #32
 80087f0:	4806      	ldr	r0, [pc, #24]	; (800880c <BSP_PlatformIsDetected+0x28>)
 80087f2:	f7fa fef7 	bl	80035e4 <HAL_GPIO_ReadPin>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80087fc:	2300      	movs	r3, #0
 80087fe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008800:	79fb      	ldrb	r3, [r7, #7]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	40020800 	.word	0x40020800

08008810 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800881a:	4b0b      	ldr	r3, [pc, #44]	; (8008848 <SD_CheckStatus+0x38>)
 800881c:	2201      	movs	r2, #1
 800881e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008820:	f7ff ffb0 	bl	8008784 <BSP_SD_GetCardState>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d107      	bne.n	800883a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <SD_CheckStatus+0x38>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f023 0301 	bic.w	r3, r3, #1
 8008834:	b2da      	uxtb	r2, r3
 8008836:	4b04      	ldr	r3, [pc, #16]	; (8008848 <SD_CheckStatus+0x38>)
 8008838:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800883a:	4b03      	ldr	r3, [pc, #12]	; (8008848 <SD_CheckStatus+0x38>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	b2db      	uxtb	r3, r3
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000009 	.word	0x20000009

0800884c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <SD_initialize+0x38>)
 8008858:	2201      	movs	r2, #1
 800885a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800885c:	f7ff ff30 	bl	80086c0 <BSP_SD_Init>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff ffd1 	bl	8008810 <SD_CheckStatus>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	4b04      	ldr	r3, [pc, #16]	; (8008884 <SD_initialize+0x38>)
 8008874:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008876:	4b03      	ldr	r3, [pc, #12]	; (8008884 <SD_initialize+0x38>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b2db      	uxtb	r3, r3
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000009 	.word	0x20000009

08008888 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff ffbb 	bl	8008810 <SD_CheckStatus>
 800889a:	4603      	mov	r3, r0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	68b8      	ldr	r0, [r7, #8]
 80088c2:	f7ff ff23 	bl	800870c <BSP_SD_ReadBlocks>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d107      	bne.n	80088dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80088cc:	bf00      	nop
 80088ce:	f7ff ff59 	bl	8008784 <BSP_SD_GetCardState>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1fa      	bne.n	80088ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	68b8      	ldr	r0, [r7, #8]
 8008904:	f7ff ff20 	bl	8008748 <BSP_SD_WriteBlocks>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d107      	bne.n	800891e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800890e:	bf00      	nop
 8008910:	f7ff ff38 	bl	8008784 <BSP_SD_GetCardState>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1fa      	bne.n	8008910 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08c      	sub	sp, #48	; 0x30
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	603a      	str	r2, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
 8008934:	460b      	mov	r3, r1
 8008936:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800893e:	4b25      	ldr	r3, [pc, #148]	; (80089d4 <SD_ioctl+0xac>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <SD_ioctl+0x28>
 800894c:	2303      	movs	r3, #3
 800894e:	e03c      	b.n	80089ca <SD_ioctl+0xa2>

  switch (cmd)
 8008950:	79bb      	ldrb	r3, [r7, #6]
 8008952:	2b03      	cmp	r3, #3
 8008954:	d834      	bhi.n	80089c0 <SD_ioctl+0x98>
 8008956:	a201      	add	r2, pc, #4	; (adr r2, 800895c <SD_ioctl+0x34>)
 8008958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895c:	0800896d 	.word	0x0800896d
 8008960:	08008975 	.word	0x08008975
 8008964:	0800898d 	.word	0x0800898d
 8008968:	080089a7 	.word	0x080089a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008972:	e028      	b.n	80089c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008974:	f107 030c 	add.w	r3, r7, #12
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff ff13 	bl	80087a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800897e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800898a:	e01c      	b.n	80089c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800898c:	f107 030c 	add.w	r3, r7, #12
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff ff07 	bl	80087a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008998:	b29a      	uxth	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80089a4:	e00f      	b.n	80089c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80089a6:	f107 030c 	add.w	r3, r7, #12
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff fefa 	bl	80087a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	0a5a      	lsrs	r2, r3, #9
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80089be:	e002      	b.n	80089c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80089c0:	2304      	movs	r3, #4
 80089c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80089c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3730      	adds	r7, #48	; 0x30
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000009 	.word	0x20000009

080089d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	4613      	mov	r3, r2
 80089e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80089e6:	2301      	movs	r3, #1
 80089e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80089ee:	4b1f      	ldr	r3, [pc, #124]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 80089f0:	7a5b      	ldrb	r3, [r3, #9]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d131      	bne.n	8008a5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 80089fa:	7a5b      	ldrb	r3, [r3, #9]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	461a      	mov	r2, r3
 8008a00:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 8008a02:	2100      	movs	r1, #0
 8008a04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a06:	4b19      	ldr	r3, [pc, #100]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 8008a08:	7a5b      	ldrb	r3, [r3, #9]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	4a17      	ldr	r2, [pc, #92]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a16:	4b15      	ldr	r3, [pc, #84]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 8008a18:	7a5b      	ldrb	r3, [r3, #9]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 8008a20:	4413      	add	r3, r2
 8008a22:	79fa      	ldrb	r2, [r7, #7]
 8008a24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a26:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 8008a28:	7a5b      	ldrb	r3, [r3, #9]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	b2d1      	uxtb	r1, r2
 8008a30:	4a0e      	ldr	r2, [pc, #56]	; (8008a6c <FATFS_LinkDriverEx+0x94>)
 8008a32:	7251      	strb	r1, [r2, #9]
 8008a34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a36:	7dbb      	ldrb	r3, [r7, #22]
 8008a38:	3330      	adds	r3, #48	; 0x30
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	3301      	adds	r3, #1
 8008a44:	223a      	movs	r2, #58	; 0x3a
 8008a46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	3302      	adds	r3, #2
 8008a4c:	222f      	movs	r2, #47	; 0x2f
 8008a4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	3303      	adds	r3, #3
 8008a54:	2200      	movs	r2, #0
 8008a56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	20000098 	.word	0x20000098

08008a70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7ff ffaa 	bl	80089d8 <FATFS_LinkDriverEx>
 8008a84:	4603      	mov	r3, r0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <__errno>:
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <__errno+0x8>)
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	2000000c 	.word	0x2000000c

08008a9c <__libc_init_array>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ad4 <__libc_init_array+0x38>)
 8008aa0:	4c0d      	ldr	r4, [pc, #52]	; (8008ad8 <__libc_init_array+0x3c>)
 8008aa2:	1b64      	subs	r4, r4, r5
 8008aa4:	10a4      	asrs	r4, r4, #2
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	42a6      	cmp	r6, r4
 8008aaa:	d109      	bne.n	8008ac0 <__libc_init_array+0x24>
 8008aac:	4d0b      	ldr	r5, [pc, #44]	; (8008adc <__libc_init_array+0x40>)
 8008aae:	4c0c      	ldr	r4, [pc, #48]	; (8008ae0 <__libc_init_array+0x44>)
 8008ab0:	f000 fc9c 	bl	80093ec <_init>
 8008ab4:	1b64      	subs	r4, r4, r5
 8008ab6:	10a4      	asrs	r4, r4, #2
 8008ab8:	2600      	movs	r6, #0
 8008aba:	42a6      	cmp	r6, r4
 8008abc:	d105      	bne.n	8008aca <__libc_init_array+0x2e>
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac4:	4798      	blx	r3
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7ee      	b.n	8008aa8 <__libc_init_array+0xc>
 8008aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ace:	4798      	blx	r3
 8008ad0:	3601      	adds	r6, #1
 8008ad2:	e7f2      	b.n	8008aba <__libc_init_array+0x1e>
 8008ad4:	0800999c 	.word	0x0800999c
 8008ad8:	0800999c 	.word	0x0800999c
 8008adc:	0800999c 	.word	0x0800999c
 8008ae0:	080099a0 	.word	0x080099a0

08008ae4 <memset>:
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d100      	bne.n	8008aee <memset+0xa>
 8008aec:	4770      	bx	lr
 8008aee:	f803 1b01 	strb.w	r1, [r3], #1
 8008af2:	e7f9      	b.n	8008ae8 <memset+0x4>

08008af4 <sniprintf>:
 8008af4:	b40c      	push	{r2, r3}
 8008af6:	b530      	push	{r4, r5, lr}
 8008af8:	4b17      	ldr	r3, [pc, #92]	; (8008b58 <sniprintf+0x64>)
 8008afa:	1e0c      	subs	r4, r1, #0
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	b09d      	sub	sp, #116	; 0x74
 8008b00:	da08      	bge.n	8008b14 <sniprintf+0x20>
 8008b02:	238b      	movs	r3, #139	; 0x8b
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	b01d      	add	sp, #116	; 0x74
 8008b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b10:	b002      	add	sp, #8
 8008b12:	4770      	bx	lr
 8008b14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b1c:	bf14      	ite	ne
 8008b1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b22:	4623      	moveq	r3, r4
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	9307      	str	r3, [sp, #28]
 8008b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b2c:	9002      	str	r0, [sp, #8]
 8008b2e:	9006      	str	r0, [sp, #24]
 8008b30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b36:	ab21      	add	r3, sp, #132	; 0x84
 8008b38:	a902      	add	r1, sp, #8
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	f000 f8a3 	bl	8008c88 <_svfiprintf_r>
 8008b42:	1c43      	adds	r3, r0, #1
 8008b44:	bfbc      	itt	lt
 8008b46:	238b      	movlt	r3, #139	; 0x8b
 8008b48:	602b      	strlt	r3, [r5, #0]
 8008b4a:	2c00      	cmp	r4, #0
 8008b4c:	d0dd      	beq.n	8008b0a <sniprintf+0x16>
 8008b4e:	9b02      	ldr	r3, [sp, #8]
 8008b50:	2200      	movs	r2, #0
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	e7d9      	b.n	8008b0a <sniprintf+0x16>
 8008b56:	bf00      	nop
 8008b58:	2000000c 	.word	0x2000000c

08008b5c <_vsniprintf_r>:
 8008b5c:	b530      	push	{r4, r5, lr}
 8008b5e:	1e14      	subs	r4, r2, #0
 8008b60:	4605      	mov	r5, r0
 8008b62:	b09b      	sub	sp, #108	; 0x6c
 8008b64:	4618      	mov	r0, r3
 8008b66:	da05      	bge.n	8008b74 <_vsniprintf_r+0x18>
 8008b68:	238b      	movs	r3, #139	; 0x8b
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	b01b      	add	sp, #108	; 0x6c
 8008b72:	bd30      	pop	{r4, r5, pc}
 8008b74:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b78:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008b7c:	bf14      	ite	ne
 8008b7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b82:	4623      	moveq	r3, r4
 8008b84:	9302      	str	r3, [sp, #8]
 8008b86:	9305      	str	r3, [sp, #20]
 8008b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b8c:	9100      	str	r1, [sp, #0]
 8008b8e:	9104      	str	r1, [sp, #16]
 8008b90:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008b94:	4602      	mov	r2, r0
 8008b96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b98:	4669      	mov	r1, sp
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	f000 f874 	bl	8008c88 <_svfiprintf_r>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	bfbc      	itt	lt
 8008ba4:	238b      	movlt	r3, #139	; 0x8b
 8008ba6:	602b      	strlt	r3, [r5, #0]
 8008ba8:	2c00      	cmp	r4, #0
 8008baa:	d0e1      	beq.n	8008b70 <_vsniprintf_r+0x14>
 8008bac:	9b00      	ldr	r3, [sp, #0]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e7dd      	b.n	8008b70 <_vsniprintf_r+0x14>

08008bb4 <vsniprintf>:
 8008bb4:	b507      	push	{r0, r1, r2, lr}
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	460a      	mov	r2, r1
 8008bbc:	4601      	mov	r1, r0
 8008bbe:	4803      	ldr	r0, [pc, #12]	; (8008bcc <vsniprintf+0x18>)
 8008bc0:	6800      	ldr	r0, [r0, #0]
 8008bc2:	f7ff ffcb 	bl	8008b5c <_vsniprintf_r>
 8008bc6:	b003      	add	sp, #12
 8008bc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bcc:	2000000c 	.word	0x2000000c

08008bd0 <__ssputs_r>:
 8008bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	688e      	ldr	r6, [r1, #8]
 8008bd6:	429e      	cmp	r6, r3
 8008bd8:	4682      	mov	sl, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	4690      	mov	r8, r2
 8008bde:	461f      	mov	r7, r3
 8008be0:	d838      	bhi.n	8008c54 <__ssputs_r+0x84>
 8008be2:	898a      	ldrh	r2, [r1, #12]
 8008be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008be8:	d032      	beq.n	8008c50 <__ssputs_r+0x80>
 8008bea:	6825      	ldr	r5, [r4, #0]
 8008bec:	6909      	ldr	r1, [r1, #16]
 8008bee:	eba5 0901 	sub.w	r9, r5, r1
 8008bf2:	6965      	ldr	r5, [r4, #20]
 8008bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	444b      	add	r3, r9
 8008c00:	106d      	asrs	r5, r5, #1
 8008c02:	429d      	cmp	r5, r3
 8008c04:	bf38      	it	cc
 8008c06:	461d      	movcc	r5, r3
 8008c08:	0553      	lsls	r3, r2, #21
 8008c0a:	d531      	bpl.n	8008c70 <__ssputs_r+0xa0>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f000 fb47 	bl	80092a0 <_malloc_r>
 8008c12:	4606      	mov	r6, r0
 8008c14:	b950      	cbnz	r0, 8008c2c <__ssputs_r+0x5c>
 8008c16:	230c      	movs	r3, #12
 8008c18:	f8ca 3000 	str.w	r3, [sl]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2c:	6921      	ldr	r1, [r4, #16]
 8008c2e:	464a      	mov	r2, r9
 8008c30:	f000 fabe 	bl	80091b0 <memcpy>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	6126      	str	r6, [r4, #16]
 8008c42:	6165      	str	r5, [r4, #20]
 8008c44:	444e      	add	r6, r9
 8008c46:	eba5 0509 	sub.w	r5, r5, r9
 8008c4a:	6026      	str	r6, [r4, #0]
 8008c4c:	60a5      	str	r5, [r4, #8]
 8008c4e:	463e      	mov	r6, r7
 8008c50:	42be      	cmp	r6, r7
 8008c52:	d900      	bls.n	8008c56 <__ssputs_r+0x86>
 8008c54:	463e      	mov	r6, r7
 8008c56:	4632      	mov	r2, r6
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	f000 fab6 	bl	80091cc <memmove>
 8008c60:	68a3      	ldr	r3, [r4, #8]
 8008c62:	6822      	ldr	r2, [r4, #0]
 8008c64:	1b9b      	subs	r3, r3, r6
 8008c66:	4432      	add	r2, r6
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	6022      	str	r2, [r4, #0]
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e7db      	b.n	8008c28 <__ssputs_r+0x58>
 8008c70:	462a      	mov	r2, r5
 8008c72:	f000 fb6f 	bl	8009354 <_realloc_r>
 8008c76:	4606      	mov	r6, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d1e1      	bne.n	8008c40 <__ssputs_r+0x70>
 8008c7c:	6921      	ldr	r1, [r4, #16]
 8008c7e:	4650      	mov	r0, sl
 8008c80:	f000 fabe 	bl	8009200 <_free_r>
 8008c84:	e7c7      	b.n	8008c16 <__ssputs_r+0x46>
	...

08008c88 <_svfiprintf_r>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	4698      	mov	r8, r3
 8008c8e:	898b      	ldrh	r3, [r1, #12]
 8008c90:	061b      	lsls	r3, r3, #24
 8008c92:	b09d      	sub	sp, #116	; 0x74
 8008c94:	4607      	mov	r7, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	4614      	mov	r4, r2
 8008c9a:	d50e      	bpl.n	8008cba <_svfiprintf_r+0x32>
 8008c9c:	690b      	ldr	r3, [r1, #16]
 8008c9e:	b963      	cbnz	r3, 8008cba <_svfiprintf_r+0x32>
 8008ca0:	2140      	movs	r1, #64	; 0x40
 8008ca2:	f000 fafd 	bl	80092a0 <_malloc_r>
 8008ca6:	6028      	str	r0, [r5, #0]
 8008ca8:	6128      	str	r0, [r5, #16]
 8008caa:	b920      	cbnz	r0, 8008cb6 <_svfiprintf_r+0x2e>
 8008cac:	230c      	movs	r3, #12
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e0d1      	b.n	8008e5a <_svfiprintf_r+0x1d2>
 8008cb6:	2340      	movs	r3, #64	; 0x40
 8008cb8:	616b      	str	r3, [r5, #20]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbe:	2320      	movs	r3, #32
 8008cc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cc8:	2330      	movs	r3, #48	; 0x30
 8008cca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e74 <_svfiprintf_r+0x1ec>
 8008cce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cd2:	f04f 0901 	mov.w	r9, #1
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	469a      	mov	sl, r3
 8008cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cde:	b10a      	cbz	r2, 8008ce4 <_svfiprintf_r+0x5c>
 8008ce0:	2a25      	cmp	r2, #37	; 0x25
 8008ce2:	d1f9      	bne.n	8008cd8 <_svfiprintf_r+0x50>
 8008ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ce8:	d00b      	beq.n	8008d02 <_svfiprintf_r+0x7a>
 8008cea:	465b      	mov	r3, fp
 8008cec:	4622      	mov	r2, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f7ff ff6d 	bl	8008bd0 <__ssputs_r>
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	f000 80aa 	beq.w	8008e50 <_svfiprintf_r+0x1c8>
 8008cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cfe:	445a      	add	r2, fp
 8008d00:	9209      	str	r2, [sp, #36]	; 0x24
 8008d02:	f89a 3000 	ldrb.w	r3, [sl]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 80a2 	beq.w	8008e50 <_svfiprintf_r+0x1c8>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d16:	f10a 0a01 	add.w	sl, sl, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	9307      	str	r3, [sp, #28]
 8008d1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d22:	931a      	str	r3, [sp, #104]	; 0x68
 8008d24:	4654      	mov	r4, sl
 8008d26:	2205      	movs	r2, #5
 8008d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2c:	4851      	ldr	r0, [pc, #324]	; (8008e74 <_svfiprintf_r+0x1ec>)
 8008d2e:	f7f7 fa77 	bl	8000220 <memchr>
 8008d32:	9a04      	ldr	r2, [sp, #16]
 8008d34:	b9d8      	cbnz	r0, 8008d6e <_svfiprintf_r+0xe6>
 8008d36:	06d0      	lsls	r0, r2, #27
 8008d38:	bf44      	itt	mi
 8008d3a:	2320      	movmi	r3, #32
 8008d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d40:	0711      	lsls	r1, r2, #28
 8008d42:	bf44      	itt	mi
 8008d44:	232b      	movmi	r3, #43	; 0x2b
 8008d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d50:	d015      	beq.n	8008d7e <_svfiprintf_r+0xf6>
 8008d52:	9a07      	ldr	r2, [sp, #28]
 8008d54:	4654      	mov	r4, sl
 8008d56:	2000      	movs	r0, #0
 8008d58:	f04f 0c0a 	mov.w	ip, #10
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d62:	3b30      	subs	r3, #48	; 0x30
 8008d64:	2b09      	cmp	r3, #9
 8008d66:	d94e      	bls.n	8008e06 <_svfiprintf_r+0x17e>
 8008d68:	b1b0      	cbz	r0, 8008d98 <_svfiprintf_r+0x110>
 8008d6a:	9207      	str	r2, [sp, #28]
 8008d6c:	e014      	b.n	8008d98 <_svfiprintf_r+0x110>
 8008d6e:	eba0 0308 	sub.w	r3, r0, r8
 8008d72:	fa09 f303 	lsl.w	r3, r9, r3
 8008d76:	4313      	orrs	r3, r2
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	46a2      	mov	sl, r4
 8008d7c:	e7d2      	b.n	8008d24 <_svfiprintf_r+0x9c>
 8008d7e:	9b03      	ldr	r3, [sp, #12]
 8008d80:	1d19      	adds	r1, r3, #4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	9103      	str	r1, [sp, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bfbb      	ittet	lt
 8008d8a:	425b      	neglt	r3, r3
 8008d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d90:	9307      	strge	r3, [sp, #28]
 8008d92:	9307      	strlt	r3, [sp, #28]
 8008d94:	bfb8      	it	lt
 8008d96:	9204      	strlt	r2, [sp, #16]
 8008d98:	7823      	ldrb	r3, [r4, #0]
 8008d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d9c:	d10c      	bne.n	8008db8 <_svfiprintf_r+0x130>
 8008d9e:	7863      	ldrb	r3, [r4, #1]
 8008da0:	2b2a      	cmp	r3, #42	; 0x2a
 8008da2:	d135      	bne.n	8008e10 <_svfiprintf_r+0x188>
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	1d1a      	adds	r2, r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	9203      	str	r2, [sp, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bfb8      	it	lt
 8008db0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008db4:	3402      	adds	r4, #2
 8008db6:	9305      	str	r3, [sp, #20]
 8008db8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e84 <_svfiprintf_r+0x1fc>
 8008dbc:	7821      	ldrb	r1, [r4, #0]
 8008dbe:	2203      	movs	r2, #3
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	f7f7 fa2d 	bl	8000220 <memchr>
 8008dc6:	b140      	cbz	r0, 8008dda <_svfiprintf_r+0x152>
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	eba0 000a 	sub.w	r0, r0, sl
 8008dce:	fa03 f000 	lsl.w	r0, r3, r0
 8008dd2:	9b04      	ldr	r3, [sp, #16]
 8008dd4:	4303      	orrs	r3, r0
 8008dd6:	3401      	adds	r4, #1
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dde:	4826      	ldr	r0, [pc, #152]	; (8008e78 <_svfiprintf_r+0x1f0>)
 8008de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008de4:	2206      	movs	r2, #6
 8008de6:	f7f7 fa1b 	bl	8000220 <memchr>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d038      	beq.n	8008e60 <_svfiprintf_r+0x1d8>
 8008dee:	4b23      	ldr	r3, [pc, #140]	; (8008e7c <_svfiprintf_r+0x1f4>)
 8008df0:	bb1b      	cbnz	r3, 8008e3a <_svfiprintf_r+0x1b2>
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	3307      	adds	r3, #7
 8008df6:	f023 0307 	bic.w	r3, r3, #7
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	9303      	str	r3, [sp, #12]
 8008dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e00:	4433      	add	r3, r6
 8008e02:	9309      	str	r3, [sp, #36]	; 0x24
 8008e04:	e767      	b.n	8008cd6 <_svfiprintf_r+0x4e>
 8008e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	e7a5      	b.n	8008d5c <_svfiprintf_r+0xd4>
 8008e10:	2300      	movs	r3, #0
 8008e12:	3401      	adds	r4, #1
 8008e14:	9305      	str	r3, [sp, #20]
 8008e16:	4619      	mov	r1, r3
 8008e18:	f04f 0c0a 	mov.w	ip, #10
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e22:	3a30      	subs	r2, #48	; 0x30
 8008e24:	2a09      	cmp	r2, #9
 8008e26:	d903      	bls.n	8008e30 <_svfiprintf_r+0x1a8>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0c5      	beq.n	8008db8 <_svfiprintf_r+0x130>
 8008e2c:	9105      	str	r1, [sp, #20]
 8008e2e:	e7c3      	b.n	8008db8 <_svfiprintf_r+0x130>
 8008e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e34:	4604      	mov	r4, r0
 8008e36:	2301      	movs	r3, #1
 8008e38:	e7f0      	b.n	8008e1c <_svfiprintf_r+0x194>
 8008e3a:	ab03      	add	r3, sp, #12
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	462a      	mov	r2, r5
 8008e40:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <_svfiprintf_r+0x1f8>)
 8008e42:	a904      	add	r1, sp, #16
 8008e44:	4638      	mov	r0, r7
 8008e46:	f3af 8000 	nop.w
 8008e4a:	1c42      	adds	r2, r0, #1
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	d1d6      	bne.n	8008dfe <_svfiprintf_r+0x176>
 8008e50:	89ab      	ldrh	r3, [r5, #12]
 8008e52:	065b      	lsls	r3, r3, #25
 8008e54:	f53f af2c 	bmi.w	8008cb0 <_svfiprintf_r+0x28>
 8008e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e5a:	b01d      	add	sp, #116	; 0x74
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <_svfiprintf_r+0x1f8>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	f000 f87a 	bl	8008f64 <_printf_i>
 8008e70:	e7eb      	b.n	8008e4a <_svfiprintf_r+0x1c2>
 8008e72:	bf00      	nop
 8008e74:	08009960 	.word	0x08009960
 8008e78:	0800996a 	.word	0x0800996a
 8008e7c:	00000000 	.word	0x00000000
 8008e80:	08008bd1 	.word	0x08008bd1
 8008e84:	08009966 	.word	0x08009966

08008e88 <_printf_common>:
 8008e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	4699      	mov	r9, r3
 8008e90:	688a      	ldr	r2, [r1, #8]
 8008e92:	690b      	ldr	r3, [r1, #16]
 8008e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	bfb8      	it	lt
 8008e9c:	4613      	movlt	r3, r2
 8008e9e:	6033      	str	r3, [r6, #0]
 8008ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	b10a      	cbz	r2, 8008eae <_printf_common+0x26>
 8008eaa:	3301      	adds	r3, #1
 8008eac:	6033      	str	r3, [r6, #0]
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	0699      	lsls	r1, r3, #26
 8008eb2:	bf42      	ittt	mi
 8008eb4:	6833      	ldrmi	r3, [r6, #0]
 8008eb6:	3302      	addmi	r3, #2
 8008eb8:	6033      	strmi	r3, [r6, #0]
 8008eba:	6825      	ldr	r5, [r4, #0]
 8008ebc:	f015 0506 	ands.w	r5, r5, #6
 8008ec0:	d106      	bne.n	8008ed0 <_printf_common+0x48>
 8008ec2:	f104 0a19 	add.w	sl, r4, #25
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	6832      	ldr	r2, [r6, #0]
 8008eca:	1a9b      	subs	r3, r3, r2
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dc26      	bgt.n	8008f1e <_printf_common+0x96>
 8008ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ed4:	1e13      	subs	r3, r2, #0
 8008ed6:	6822      	ldr	r2, [r4, #0]
 8008ed8:	bf18      	it	ne
 8008eda:	2301      	movne	r3, #1
 8008edc:	0692      	lsls	r2, r2, #26
 8008ede:	d42b      	bmi.n	8008f38 <_printf_common+0xb0>
 8008ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	47c0      	blx	r8
 8008eea:	3001      	adds	r0, #1
 8008eec:	d01e      	beq.n	8008f2c <_printf_common+0xa4>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	68e5      	ldr	r5, [r4, #12]
 8008ef2:	6832      	ldr	r2, [r6, #0]
 8008ef4:	f003 0306 	and.w	r3, r3, #6
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	bf08      	it	eq
 8008efc:	1aad      	subeq	r5, r5, r2
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	6922      	ldr	r2, [r4, #16]
 8008f02:	bf0c      	ite	eq
 8008f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f08:	2500      	movne	r5, #0
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	bfc4      	itt	gt
 8008f0e:	1a9b      	subgt	r3, r3, r2
 8008f10:	18ed      	addgt	r5, r5, r3
 8008f12:	2600      	movs	r6, #0
 8008f14:	341a      	adds	r4, #26
 8008f16:	42b5      	cmp	r5, r6
 8008f18:	d11a      	bne.n	8008f50 <_printf_common+0xc8>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e008      	b.n	8008f30 <_printf_common+0xa8>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4652      	mov	r2, sl
 8008f22:	4649      	mov	r1, r9
 8008f24:	4638      	mov	r0, r7
 8008f26:	47c0      	blx	r8
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d103      	bne.n	8008f34 <_printf_common+0xac>
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f34:	3501      	adds	r5, #1
 8008f36:	e7c6      	b.n	8008ec6 <_printf_common+0x3e>
 8008f38:	18e1      	adds	r1, r4, r3
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	2030      	movs	r0, #48	; 0x30
 8008f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f42:	4422      	add	r2, r4
 8008f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f4c:	3302      	adds	r3, #2
 8008f4e:	e7c7      	b.n	8008ee0 <_printf_common+0x58>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4622      	mov	r2, r4
 8008f54:	4649      	mov	r1, r9
 8008f56:	4638      	mov	r0, r7
 8008f58:	47c0      	blx	r8
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d0e6      	beq.n	8008f2c <_printf_common+0xa4>
 8008f5e:	3601      	adds	r6, #1
 8008f60:	e7d9      	b.n	8008f16 <_printf_common+0x8e>
	...

08008f64 <_printf_i>:
 8008f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	460c      	mov	r4, r1
 8008f6a:	4691      	mov	r9, r2
 8008f6c:	7e27      	ldrb	r7, [r4, #24]
 8008f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f70:	2f78      	cmp	r7, #120	; 0x78
 8008f72:	4680      	mov	r8, r0
 8008f74:	469a      	mov	sl, r3
 8008f76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f7a:	d807      	bhi.n	8008f8c <_printf_i+0x28>
 8008f7c:	2f62      	cmp	r7, #98	; 0x62
 8008f7e:	d80a      	bhi.n	8008f96 <_printf_i+0x32>
 8008f80:	2f00      	cmp	r7, #0
 8008f82:	f000 80d8 	beq.w	8009136 <_printf_i+0x1d2>
 8008f86:	2f58      	cmp	r7, #88	; 0x58
 8008f88:	f000 80a3 	beq.w	80090d2 <_printf_i+0x16e>
 8008f8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f94:	e03a      	b.n	800900c <_printf_i+0xa8>
 8008f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f9a:	2b15      	cmp	r3, #21
 8008f9c:	d8f6      	bhi.n	8008f8c <_printf_i+0x28>
 8008f9e:	a001      	add	r0, pc, #4	; (adr r0, 8008fa4 <_printf_i+0x40>)
 8008fa0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fa4:	08008ffd 	.word	0x08008ffd
 8008fa8:	08009011 	.word	0x08009011
 8008fac:	08008f8d 	.word	0x08008f8d
 8008fb0:	08008f8d 	.word	0x08008f8d
 8008fb4:	08008f8d 	.word	0x08008f8d
 8008fb8:	08008f8d 	.word	0x08008f8d
 8008fbc:	08009011 	.word	0x08009011
 8008fc0:	08008f8d 	.word	0x08008f8d
 8008fc4:	08008f8d 	.word	0x08008f8d
 8008fc8:	08008f8d 	.word	0x08008f8d
 8008fcc:	08008f8d 	.word	0x08008f8d
 8008fd0:	0800911d 	.word	0x0800911d
 8008fd4:	08009041 	.word	0x08009041
 8008fd8:	080090ff 	.word	0x080090ff
 8008fdc:	08008f8d 	.word	0x08008f8d
 8008fe0:	08008f8d 	.word	0x08008f8d
 8008fe4:	0800913f 	.word	0x0800913f
 8008fe8:	08008f8d 	.word	0x08008f8d
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08008f8d 	.word	0x08008f8d
 8008ff4:	08008f8d 	.word	0x08008f8d
 8008ff8:	08009107 	.word	0x08009107
 8008ffc:	680b      	ldr	r3, [r1, #0]
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	600a      	str	r2, [r1, #0]
 8009004:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800900c:	2301      	movs	r3, #1
 800900e:	e0a3      	b.n	8009158 <_printf_i+0x1f4>
 8009010:	6825      	ldr	r5, [r4, #0]
 8009012:	6808      	ldr	r0, [r1, #0]
 8009014:	062e      	lsls	r6, r5, #24
 8009016:	f100 0304 	add.w	r3, r0, #4
 800901a:	d50a      	bpl.n	8009032 <_printf_i+0xce>
 800901c:	6805      	ldr	r5, [r0, #0]
 800901e:	600b      	str	r3, [r1, #0]
 8009020:	2d00      	cmp	r5, #0
 8009022:	da03      	bge.n	800902c <_printf_i+0xc8>
 8009024:	232d      	movs	r3, #45	; 0x2d
 8009026:	426d      	negs	r5, r5
 8009028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800902c:	485e      	ldr	r0, [pc, #376]	; (80091a8 <_printf_i+0x244>)
 800902e:	230a      	movs	r3, #10
 8009030:	e019      	b.n	8009066 <_printf_i+0x102>
 8009032:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009036:	6805      	ldr	r5, [r0, #0]
 8009038:	600b      	str	r3, [r1, #0]
 800903a:	bf18      	it	ne
 800903c:	b22d      	sxthne	r5, r5
 800903e:	e7ef      	b.n	8009020 <_printf_i+0xbc>
 8009040:	680b      	ldr	r3, [r1, #0]
 8009042:	6825      	ldr	r5, [r4, #0]
 8009044:	1d18      	adds	r0, r3, #4
 8009046:	6008      	str	r0, [r1, #0]
 8009048:	0628      	lsls	r0, r5, #24
 800904a:	d501      	bpl.n	8009050 <_printf_i+0xec>
 800904c:	681d      	ldr	r5, [r3, #0]
 800904e:	e002      	b.n	8009056 <_printf_i+0xf2>
 8009050:	0669      	lsls	r1, r5, #25
 8009052:	d5fb      	bpl.n	800904c <_printf_i+0xe8>
 8009054:	881d      	ldrh	r5, [r3, #0]
 8009056:	4854      	ldr	r0, [pc, #336]	; (80091a8 <_printf_i+0x244>)
 8009058:	2f6f      	cmp	r7, #111	; 0x6f
 800905a:	bf0c      	ite	eq
 800905c:	2308      	moveq	r3, #8
 800905e:	230a      	movne	r3, #10
 8009060:	2100      	movs	r1, #0
 8009062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009066:	6866      	ldr	r6, [r4, #4]
 8009068:	60a6      	str	r6, [r4, #8]
 800906a:	2e00      	cmp	r6, #0
 800906c:	bfa2      	ittt	ge
 800906e:	6821      	ldrge	r1, [r4, #0]
 8009070:	f021 0104 	bicge.w	r1, r1, #4
 8009074:	6021      	strge	r1, [r4, #0]
 8009076:	b90d      	cbnz	r5, 800907c <_printf_i+0x118>
 8009078:	2e00      	cmp	r6, #0
 800907a:	d04d      	beq.n	8009118 <_printf_i+0x1b4>
 800907c:	4616      	mov	r6, r2
 800907e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009082:	fb03 5711 	mls	r7, r3, r1, r5
 8009086:	5dc7      	ldrb	r7, [r0, r7]
 8009088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800908c:	462f      	mov	r7, r5
 800908e:	42bb      	cmp	r3, r7
 8009090:	460d      	mov	r5, r1
 8009092:	d9f4      	bls.n	800907e <_printf_i+0x11a>
 8009094:	2b08      	cmp	r3, #8
 8009096:	d10b      	bne.n	80090b0 <_printf_i+0x14c>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	07df      	lsls	r7, r3, #31
 800909c:	d508      	bpl.n	80090b0 <_printf_i+0x14c>
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	6861      	ldr	r1, [r4, #4]
 80090a2:	4299      	cmp	r1, r3
 80090a4:	bfde      	ittt	le
 80090a6:	2330      	movle	r3, #48	; 0x30
 80090a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090b0:	1b92      	subs	r2, r2, r6
 80090b2:	6122      	str	r2, [r4, #16]
 80090b4:	f8cd a000 	str.w	sl, [sp]
 80090b8:	464b      	mov	r3, r9
 80090ba:	aa03      	add	r2, sp, #12
 80090bc:	4621      	mov	r1, r4
 80090be:	4640      	mov	r0, r8
 80090c0:	f7ff fee2 	bl	8008e88 <_printf_common>
 80090c4:	3001      	adds	r0, #1
 80090c6:	d14c      	bne.n	8009162 <_printf_i+0x1fe>
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	b004      	add	sp, #16
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	4835      	ldr	r0, [pc, #212]	; (80091a8 <_printf_i+0x244>)
 80090d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	680e      	ldr	r6, [r1, #0]
 80090dc:	061f      	lsls	r7, r3, #24
 80090de:	f856 5b04 	ldr.w	r5, [r6], #4
 80090e2:	600e      	str	r6, [r1, #0]
 80090e4:	d514      	bpl.n	8009110 <_printf_i+0x1ac>
 80090e6:	07d9      	lsls	r1, r3, #31
 80090e8:	bf44      	itt	mi
 80090ea:	f043 0320 	orrmi.w	r3, r3, #32
 80090ee:	6023      	strmi	r3, [r4, #0]
 80090f0:	b91d      	cbnz	r5, 80090fa <_printf_i+0x196>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	f023 0320 	bic.w	r3, r3, #32
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	2310      	movs	r3, #16
 80090fc:	e7b0      	b.n	8009060 <_printf_i+0xfc>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	f043 0320 	orr.w	r3, r3, #32
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	2378      	movs	r3, #120	; 0x78
 8009108:	4828      	ldr	r0, [pc, #160]	; (80091ac <_printf_i+0x248>)
 800910a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800910e:	e7e3      	b.n	80090d8 <_printf_i+0x174>
 8009110:	065e      	lsls	r6, r3, #25
 8009112:	bf48      	it	mi
 8009114:	b2ad      	uxthmi	r5, r5
 8009116:	e7e6      	b.n	80090e6 <_printf_i+0x182>
 8009118:	4616      	mov	r6, r2
 800911a:	e7bb      	b.n	8009094 <_printf_i+0x130>
 800911c:	680b      	ldr	r3, [r1, #0]
 800911e:	6826      	ldr	r6, [r4, #0]
 8009120:	6960      	ldr	r0, [r4, #20]
 8009122:	1d1d      	adds	r5, r3, #4
 8009124:	600d      	str	r5, [r1, #0]
 8009126:	0635      	lsls	r5, r6, #24
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	d501      	bpl.n	8009130 <_printf_i+0x1cc>
 800912c:	6018      	str	r0, [r3, #0]
 800912e:	e002      	b.n	8009136 <_printf_i+0x1d2>
 8009130:	0671      	lsls	r1, r6, #25
 8009132:	d5fb      	bpl.n	800912c <_printf_i+0x1c8>
 8009134:	8018      	strh	r0, [r3, #0]
 8009136:	2300      	movs	r3, #0
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	4616      	mov	r6, r2
 800913c:	e7ba      	b.n	80090b4 <_printf_i+0x150>
 800913e:	680b      	ldr	r3, [r1, #0]
 8009140:	1d1a      	adds	r2, r3, #4
 8009142:	600a      	str	r2, [r1, #0]
 8009144:	681e      	ldr	r6, [r3, #0]
 8009146:	6862      	ldr	r2, [r4, #4]
 8009148:	2100      	movs	r1, #0
 800914a:	4630      	mov	r0, r6
 800914c:	f7f7 f868 	bl	8000220 <memchr>
 8009150:	b108      	cbz	r0, 8009156 <_printf_i+0x1f2>
 8009152:	1b80      	subs	r0, r0, r6
 8009154:	6060      	str	r0, [r4, #4]
 8009156:	6863      	ldr	r3, [r4, #4]
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	2300      	movs	r3, #0
 800915c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009160:	e7a8      	b.n	80090b4 <_printf_i+0x150>
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	4632      	mov	r2, r6
 8009166:	4649      	mov	r1, r9
 8009168:	4640      	mov	r0, r8
 800916a:	47d0      	blx	sl
 800916c:	3001      	adds	r0, #1
 800916e:	d0ab      	beq.n	80090c8 <_printf_i+0x164>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	079b      	lsls	r3, r3, #30
 8009174:	d413      	bmi.n	800919e <_printf_i+0x23a>
 8009176:	68e0      	ldr	r0, [r4, #12]
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	4298      	cmp	r0, r3
 800917c:	bfb8      	it	lt
 800917e:	4618      	movlt	r0, r3
 8009180:	e7a4      	b.n	80090cc <_printf_i+0x168>
 8009182:	2301      	movs	r3, #1
 8009184:	4632      	mov	r2, r6
 8009186:	4649      	mov	r1, r9
 8009188:	4640      	mov	r0, r8
 800918a:	47d0      	blx	sl
 800918c:	3001      	adds	r0, #1
 800918e:	d09b      	beq.n	80090c8 <_printf_i+0x164>
 8009190:	3501      	adds	r5, #1
 8009192:	68e3      	ldr	r3, [r4, #12]
 8009194:	9903      	ldr	r1, [sp, #12]
 8009196:	1a5b      	subs	r3, r3, r1
 8009198:	42ab      	cmp	r3, r5
 800919a:	dcf2      	bgt.n	8009182 <_printf_i+0x21e>
 800919c:	e7eb      	b.n	8009176 <_printf_i+0x212>
 800919e:	2500      	movs	r5, #0
 80091a0:	f104 0619 	add.w	r6, r4, #25
 80091a4:	e7f5      	b.n	8009192 <_printf_i+0x22e>
 80091a6:	bf00      	nop
 80091a8:	08009971 	.word	0x08009971
 80091ac:	08009982 	.word	0x08009982

080091b0 <memcpy>:
 80091b0:	440a      	add	r2, r1
 80091b2:	4291      	cmp	r1, r2
 80091b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091b8:	d100      	bne.n	80091bc <memcpy+0xc>
 80091ba:	4770      	bx	lr
 80091bc:	b510      	push	{r4, lr}
 80091be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091c6:	4291      	cmp	r1, r2
 80091c8:	d1f9      	bne.n	80091be <memcpy+0xe>
 80091ca:	bd10      	pop	{r4, pc}

080091cc <memmove>:
 80091cc:	4288      	cmp	r0, r1
 80091ce:	b510      	push	{r4, lr}
 80091d0:	eb01 0402 	add.w	r4, r1, r2
 80091d4:	d902      	bls.n	80091dc <memmove+0x10>
 80091d6:	4284      	cmp	r4, r0
 80091d8:	4623      	mov	r3, r4
 80091da:	d807      	bhi.n	80091ec <memmove+0x20>
 80091dc:	1e43      	subs	r3, r0, #1
 80091de:	42a1      	cmp	r1, r4
 80091e0:	d008      	beq.n	80091f4 <memmove+0x28>
 80091e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ea:	e7f8      	b.n	80091de <memmove+0x12>
 80091ec:	4402      	add	r2, r0
 80091ee:	4601      	mov	r1, r0
 80091f0:	428a      	cmp	r2, r1
 80091f2:	d100      	bne.n	80091f6 <memmove+0x2a>
 80091f4:	bd10      	pop	{r4, pc}
 80091f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091fe:	e7f7      	b.n	80091f0 <memmove+0x24>

08009200 <_free_r>:
 8009200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009202:	2900      	cmp	r1, #0
 8009204:	d048      	beq.n	8009298 <_free_r+0x98>
 8009206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800920a:	9001      	str	r0, [sp, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f1a1 0404 	sub.w	r4, r1, #4
 8009212:	bfb8      	it	lt
 8009214:	18e4      	addlt	r4, r4, r3
 8009216:	f000 f8d3 	bl	80093c0 <__malloc_lock>
 800921a:	4a20      	ldr	r2, [pc, #128]	; (800929c <_free_r+0x9c>)
 800921c:	9801      	ldr	r0, [sp, #4]
 800921e:	6813      	ldr	r3, [r2, #0]
 8009220:	4615      	mov	r5, r2
 8009222:	b933      	cbnz	r3, 8009232 <_free_r+0x32>
 8009224:	6063      	str	r3, [r4, #4]
 8009226:	6014      	str	r4, [r2, #0]
 8009228:	b003      	add	sp, #12
 800922a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800922e:	f000 b8cd 	b.w	80093cc <__malloc_unlock>
 8009232:	42a3      	cmp	r3, r4
 8009234:	d90b      	bls.n	800924e <_free_r+0x4e>
 8009236:	6821      	ldr	r1, [r4, #0]
 8009238:	1862      	adds	r2, r4, r1
 800923a:	4293      	cmp	r3, r2
 800923c:	bf04      	itt	eq
 800923e:	681a      	ldreq	r2, [r3, #0]
 8009240:	685b      	ldreq	r3, [r3, #4]
 8009242:	6063      	str	r3, [r4, #4]
 8009244:	bf04      	itt	eq
 8009246:	1852      	addeq	r2, r2, r1
 8009248:	6022      	streq	r2, [r4, #0]
 800924a:	602c      	str	r4, [r5, #0]
 800924c:	e7ec      	b.n	8009228 <_free_r+0x28>
 800924e:	461a      	mov	r2, r3
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	b10b      	cbz	r3, 8009258 <_free_r+0x58>
 8009254:	42a3      	cmp	r3, r4
 8009256:	d9fa      	bls.n	800924e <_free_r+0x4e>
 8009258:	6811      	ldr	r1, [r2, #0]
 800925a:	1855      	adds	r5, r2, r1
 800925c:	42a5      	cmp	r5, r4
 800925e:	d10b      	bne.n	8009278 <_free_r+0x78>
 8009260:	6824      	ldr	r4, [r4, #0]
 8009262:	4421      	add	r1, r4
 8009264:	1854      	adds	r4, r2, r1
 8009266:	42a3      	cmp	r3, r4
 8009268:	6011      	str	r1, [r2, #0]
 800926a:	d1dd      	bne.n	8009228 <_free_r+0x28>
 800926c:	681c      	ldr	r4, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	6053      	str	r3, [r2, #4]
 8009272:	4421      	add	r1, r4
 8009274:	6011      	str	r1, [r2, #0]
 8009276:	e7d7      	b.n	8009228 <_free_r+0x28>
 8009278:	d902      	bls.n	8009280 <_free_r+0x80>
 800927a:	230c      	movs	r3, #12
 800927c:	6003      	str	r3, [r0, #0]
 800927e:	e7d3      	b.n	8009228 <_free_r+0x28>
 8009280:	6825      	ldr	r5, [r4, #0]
 8009282:	1961      	adds	r1, r4, r5
 8009284:	428b      	cmp	r3, r1
 8009286:	bf04      	itt	eq
 8009288:	6819      	ldreq	r1, [r3, #0]
 800928a:	685b      	ldreq	r3, [r3, #4]
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	bf04      	itt	eq
 8009290:	1949      	addeq	r1, r1, r5
 8009292:	6021      	streq	r1, [r4, #0]
 8009294:	6054      	str	r4, [r2, #4]
 8009296:	e7c7      	b.n	8009228 <_free_r+0x28>
 8009298:	b003      	add	sp, #12
 800929a:	bd30      	pop	{r4, r5, pc}
 800929c:	200000a4 	.word	0x200000a4

080092a0 <_malloc_r>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	1ccd      	adds	r5, r1, #3
 80092a4:	f025 0503 	bic.w	r5, r5, #3
 80092a8:	3508      	adds	r5, #8
 80092aa:	2d0c      	cmp	r5, #12
 80092ac:	bf38      	it	cc
 80092ae:	250c      	movcc	r5, #12
 80092b0:	2d00      	cmp	r5, #0
 80092b2:	4606      	mov	r6, r0
 80092b4:	db01      	blt.n	80092ba <_malloc_r+0x1a>
 80092b6:	42a9      	cmp	r1, r5
 80092b8:	d903      	bls.n	80092c2 <_malloc_r+0x22>
 80092ba:	230c      	movs	r3, #12
 80092bc:	6033      	str	r3, [r6, #0]
 80092be:	2000      	movs	r0, #0
 80092c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c2:	f000 f87d 	bl	80093c0 <__malloc_lock>
 80092c6:	4921      	ldr	r1, [pc, #132]	; (800934c <_malloc_r+0xac>)
 80092c8:	680a      	ldr	r2, [r1, #0]
 80092ca:	4614      	mov	r4, r2
 80092cc:	b99c      	cbnz	r4, 80092f6 <_malloc_r+0x56>
 80092ce:	4f20      	ldr	r7, [pc, #128]	; (8009350 <_malloc_r+0xb0>)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	b923      	cbnz	r3, 80092de <_malloc_r+0x3e>
 80092d4:	4621      	mov	r1, r4
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 f862 	bl	80093a0 <_sbrk_r>
 80092dc:	6038      	str	r0, [r7, #0]
 80092de:	4629      	mov	r1, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 f85d 	bl	80093a0 <_sbrk_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d123      	bne.n	8009332 <_malloc_r+0x92>
 80092ea:	230c      	movs	r3, #12
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	4630      	mov	r0, r6
 80092f0:	f000 f86c 	bl	80093cc <__malloc_unlock>
 80092f4:	e7e3      	b.n	80092be <_malloc_r+0x1e>
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	1b5b      	subs	r3, r3, r5
 80092fa:	d417      	bmi.n	800932c <_malloc_r+0x8c>
 80092fc:	2b0b      	cmp	r3, #11
 80092fe:	d903      	bls.n	8009308 <_malloc_r+0x68>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	441c      	add	r4, r3
 8009304:	6025      	str	r5, [r4, #0]
 8009306:	e004      	b.n	8009312 <_malloc_r+0x72>
 8009308:	6863      	ldr	r3, [r4, #4]
 800930a:	42a2      	cmp	r2, r4
 800930c:	bf0c      	ite	eq
 800930e:	600b      	streq	r3, [r1, #0]
 8009310:	6053      	strne	r3, [r2, #4]
 8009312:	4630      	mov	r0, r6
 8009314:	f000 f85a 	bl	80093cc <__malloc_unlock>
 8009318:	f104 000b 	add.w	r0, r4, #11
 800931c:	1d23      	adds	r3, r4, #4
 800931e:	f020 0007 	bic.w	r0, r0, #7
 8009322:	1ac2      	subs	r2, r0, r3
 8009324:	d0cc      	beq.n	80092c0 <_malloc_r+0x20>
 8009326:	1a1b      	subs	r3, r3, r0
 8009328:	50a3      	str	r3, [r4, r2]
 800932a:	e7c9      	b.n	80092c0 <_malloc_r+0x20>
 800932c:	4622      	mov	r2, r4
 800932e:	6864      	ldr	r4, [r4, #4]
 8009330:	e7cc      	b.n	80092cc <_malloc_r+0x2c>
 8009332:	1cc4      	adds	r4, r0, #3
 8009334:	f024 0403 	bic.w	r4, r4, #3
 8009338:	42a0      	cmp	r0, r4
 800933a:	d0e3      	beq.n	8009304 <_malloc_r+0x64>
 800933c:	1a21      	subs	r1, r4, r0
 800933e:	4630      	mov	r0, r6
 8009340:	f000 f82e 	bl	80093a0 <_sbrk_r>
 8009344:	3001      	adds	r0, #1
 8009346:	d1dd      	bne.n	8009304 <_malloc_r+0x64>
 8009348:	e7cf      	b.n	80092ea <_malloc_r+0x4a>
 800934a:	bf00      	nop
 800934c:	200000a4 	.word	0x200000a4
 8009350:	200000a8 	.word	0x200000a8

08009354 <_realloc_r>:
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009356:	4607      	mov	r7, r0
 8009358:	4614      	mov	r4, r2
 800935a:	460e      	mov	r6, r1
 800935c:	b921      	cbnz	r1, 8009368 <_realloc_r+0x14>
 800935e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009362:	4611      	mov	r1, r2
 8009364:	f7ff bf9c 	b.w	80092a0 <_malloc_r>
 8009368:	b922      	cbnz	r2, 8009374 <_realloc_r+0x20>
 800936a:	f7ff ff49 	bl	8009200 <_free_r>
 800936e:	4625      	mov	r5, r4
 8009370:	4628      	mov	r0, r5
 8009372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009374:	f000 f830 	bl	80093d8 <_malloc_usable_size_r>
 8009378:	42a0      	cmp	r0, r4
 800937a:	d20f      	bcs.n	800939c <_realloc_r+0x48>
 800937c:	4621      	mov	r1, r4
 800937e:	4638      	mov	r0, r7
 8009380:	f7ff ff8e 	bl	80092a0 <_malloc_r>
 8009384:	4605      	mov	r5, r0
 8009386:	2800      	cmp	r0, #0
 8009388:	d0f2      	beq.n	8009370 <_realloc_r+0x1c>
 800938a:	4631      	mov	r1, r6
 800938c:	4622      	mov	r2, r4
 800938e:	f7ff ff0f 	bl	80091b0 <memcpy>
 8009392:	4631      	mov	r1, r6
 8009394:	4638      	mov	r0, r7
 8009396:	f7ff ff33 	bl	8009200 <_free_r>
 800939a:	e7e9      	b.n	8009370 <_realloc_r+0x1c>
 800939c:	4635      	mov	r5, r6
 800939e:	e7e7      	b.n	8009370 <_realloc_r+0x1c>

080093a0 <_sbrk_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d06      	ldr	r5, [pc, #24]	; (80093bc <_sbrk_r+0x1c>)
 80093a4:	2300      	movs	r3, #0
 80093a6:	4604      	mov	r4, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	f7f9 fa9e 	bl	80028ec <_sbrk>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d102      	bne.n	80093ba <_sbrk_r+0x1a>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b103      	cbz	r3, 80093ba <_sbrk_r+0x1a>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	20000ce0 	.word	0x20000ce0

080093c0 <__malloc_lock>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__malloc_lock+0x8>)
 80093c2:	f000 b811 	b.w	80093e8 <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	20000ce8 	.word	0x20000ce8

080093cc <__malloc_unlock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__malloc_unlock+0x8>)
 80093ce:	f000 b80c 	b.w	80093ea <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	20000ce8 	.word	0x20000ce8

080093d8 <_malloc_usable_size_r>:
 80093d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093dc:	1f18      	subs	r0, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfbc      	itt	lt
 80093e2:	580b      	ldrlt	r3, [r1, r0]
 80093e4:	18c0      	addlt	r0, r0, r3
 80093e6:	4770      	bx	lr

080093e8 <__retarget_lock_acquire_recursive>:
 80093e8:	4770      	bx	lr

080093ea <__retarget_lock_release_recursive>:
 80093ea:	4770      	bx	lr

080093ec <_init>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	bf00      	nop
 80093f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f2:	bc08      	pop	{r3}
 80093f4:	469e      	mov	lr, r3
 80093f6:	4770      	bx	lr

080093f8 <_fini>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	bf00      	nop
 80093fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fe:	bc08      	pop	{r3}
 8009400:	469e      	mov	lr, r3
 8009402:	4770      	bx	lr
