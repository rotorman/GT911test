
TX16S_I2C_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800f290  0800f290  0001f290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8b8  0800f8b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8b8  0800f8b8  0001f8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8c0  0800f8c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8c0  0800f8c0  0001f8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8c4  0800f8c4  0001f8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800f8c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009aec  20000074  0800f93c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009b60  0800f93c  00029b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031d82  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d98  00000000  00000000  00051e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a0  00000000  00000000  00057bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002480  00000000  00000000  0005a260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008076  00000000  00000000  0005c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002dc3d  00000000  00000000  00064756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105cee  00000000  00000000  00092393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00198081  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa98  00000000  00000000  001980d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f278 	.word	0x0800f278

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800f278 	.word	0x0800f278

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <serialPrintf>:
#define CRLF "\r\n"

#define PRINTF_BUFFER_SIZE    128

void serialPrintf(const char * format, ...)
{
 8000930:	b40f      	push	{r0, r1, r2, r3}
 8000932:	b590      	push	{r4, r7, lr}
 8000934:	b0a5      	sub	sp, #148	; 0x94
 8000936:	af00      	add	r7, sp, #0
	va_list arglist;
	char tmp[PRINTF_BUFFER_SIZE + 1];

	snprintf(tmp, PRINTF_BUFFER_SIZE, "+%05lums: ", HAL_GetTick());
 8000938:	f002 fa26 	bl	8002d88 <HAL_GetTick>
 800093c:	4603      	mov	r3, r0
 800093e:	1d38      	adds	r0, r7, #4
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <serialPrintf+0x7c>)
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	f00e f82a 	bl	800e99c <sniprintf>
	va_start(arglist, format);
 8000948:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800094c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	vsnprintf(tmp + strlen(tmp), PRINTF_BUFFER_SIZE - strlen(tmp), format, arglist);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc56 	bl	8000204 <strlen>
 8000958:	4602      	mov	r2, r0
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	189c      	adds	r4, r3, r2
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fc4f 	bl	8000204 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 800096c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000970:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000974:	4620      	mov	r0, r4
 8000976:	f00e f871 	bl	800ea5c <vsniprintf>
	tmp[PRINTF_BUFFER_SIZE] = '\0';
 800097a:	2300      	movs	r3, #0
 800097c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	va_end(arglist);

	const char *t = tmp;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart3, (uint8_t *) t, strlen(t), 10);
 8000986:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800098a:	f7ff fc3b 	bl	8000204 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	230a      	movs	r3, #10
 8000994:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <serialPrintf+0x80>)
 800099a:	f008 fdb8 	bl	800950e <HAL_UART_Transmit>
}
 800099e:	bf00      	nop
 80009a0:	3794      	adds	r7, #148	; 0x94
 80009a2:	46bd      	mov	sp, r7
 80009a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009a8:	b004      	add	sp, #16
 80009aa:	4770      	bx	lr
 80009ac:	0800f2b4 	.word	0x0800f2b4
 80009b0:	20008e20 	.word	0x20008e20

080009b4 <TOUCH_AF_INT_Change>:

#define debugPrintf(...) do { serialPrintf(__VA_ARGS__); } while(0)
#define TRACE(f_, ...)        debugPrintf((TRACE_TIME_FORMAT f_ CRLF), TRACE_TIME_VALUE, ##__VA_ARGS__)

void TOUCH_AF_INT_Change(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <TOUCH_AF_INT_Change+0x28>)
 80009d0:	f003 f97c 	bl	8003ccc <HAL_GPIO_Init>
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021c00 	.word	0x40021c00

080009e0 <TOUCH_AF_GPIOConfig>:

static void TOUCH_AF_GPIOConfig(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = TOUCH_RST_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStructure);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <TOUCH_AF_GPIOConfig+0x5c>)
 80009fe:	f003 f965 	bl	8003ccc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <TOUCH_AF_GPIOConfig+0x5c>)
 8000a0a:	f003 fb23 	bl	8004054 <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <TOUCH_AF_GPIOConfig+0x60>)
 8000a24:	f003 f952 	bl	8003ccc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <TOUCH_AF_GPIOConfig+0x60>)
 8000a2e:	f003 fb11 	bl	8004054 <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021400 	.word	0x40021400
 8000a40:	40021c00 	.word	0x40021c00

08000a44 <I2C_GT911_ReadRegister>:

bool I2C_GT911_ReadRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	80fb      	strh	r3, [r7, #6]
 8000a50:	4613      	mov	r3, r2
 8000a52:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Mem_Read_DMA(&hi2c1, GT911_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_16BIT, buf, len) != HAL_OK)
 8000a54:	797b      	ldrb	r3, [r7, #5]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	88fa      	ldrh	r2, [r7, #6]
 8000a5a:	9301      	str	r3, [sp, #4]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2310      	movs	r3, #16
 8000a62:	2128      	movs	r1, #40	; 0x28
 8000a64:	481d      	ldr	r0, [pc, #116]	; (8000adc <I2C_GT911_ReadRegister+0x98>)
 8000a66:	f003 fda9 	bl	80045bc <HAL_I2C_Mem_Read_DMA>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d011      	beq.n	8000a94 <I2C_GT911_ReadRegister+0x50>
	{
		TRACE("I2C ERROR: GT911 ReadRegister failed");
 8000a70:	f002 f98a 	bl	8002d88 <HAL_GetTick>
 8000a74:	ee07 0a90 	vmov	s15, r0
 8000a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a7c:	ee17 0a90 	vmov	r0, s15
 8000a80:	f7ff fd82 	bl	8000588 <__aeabi_f2d>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <I2C_GT911_ReadRegister+0x9c>)
 8000a8a:	f7ff ff51 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000a8e:	beff      	bkpt	0x00ff
		return false;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e01e      	b.n	8000ad2 <I2C_GT911_ReadRegister+0x8e>
	}
	osDelay(1);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f00a fce2 	bl	800b45e <osDelay>
	if (xSemaphoreTake(BinSemI2CCBHandle, pdMS_TO_TICKS(20)) != pdPASS)
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <I2C_GT911_ReadRegister+0xa0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2114      	movs	r1, #20
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00b fc47 	bl	800c334 <xQueueSemaphoreTake>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d011      	beq.n	8000ad0 <I2C_GT911_ReadRegister+0x8c>
	{
		TRACE("I2C ERROR: GT911 WriteRegister did not succeed");
 8000aac:	f002 f96c 	bl	8002d88 <HAL_GetTick>
 8000ab0:	ee07 0a90 	vmov	s15, r0
 8000ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ab8:	ee17 0a90 	vmov	r0, s15
 8000abc:	f7ff fd64 	bl	8000588 <__aeabi_f2d>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <I2C_GT911_ReadRegister+0xa4>)
 8000ac6:	f7ff ff33 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000aca:	beff      	bkpt	0x00ff
		return false;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e000      	b.n	8000ad2 <I2C_GT911_ReadRegister+0x8e>
	}
	return true;
 8000ad0:	2301      	movs	r3, #1
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20008ec4 	.word	0x20008ec4
 8000ae0:	0800f2c0 	.word	0x0800f2c0
 8000ae4:	200094a0 	.word	0x200094a0
 8000ae8:	0800f2f0 	.word	0x0800f2f0

08000aec <I2C_GT911_WriteRegister>:

bool I2C_GT911_WriteRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	80fb      	strh	r3, [r7, #6]
 8000af8:	4613      	mov	r3, r2
 8000afa:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Mem_Write_DMA(&hi2c1, GT911_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_16BIT, buf, len) != HAL_OK)
 8000afc:	797b      	ldrb	r3, [r7, #5]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	88fa      	ldrh	r2, [r7, #6]
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2310      	movs	r3, #16
 8000b0a:	2128      	movs	r1, #40	; 0x28
 8000b0c:	481d      	ldr	r0, [pc, #116]	; (8000b84 <I2C_GT911_WriteRegister+0x98>)
 8000b0e:	f003 fbff 	bl	8004310 <HAL_I2C_Mem_Write_DMA>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d011      	beq.n	8000b3c <I2C_GT911_WriteRegister+0x50>
	{
		TRACE("I2C ERROR: GT911 WriteRegister failed");
 8000b18:	f002 f936 	bl	8002d88 <HAL_GetTick>
 8000b1c:	ee07 0a90 	vmov	s15, r0
 8000b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b24:	ee17 0a90 	vmov	r0, s15
 8000b28:	f7ff fd2e 	bl	8000588 <__aeabi_f2d>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	460b      	mov	r3, r1
 8000b30:	4815      	ldr	r0, [pc, #84]	; (8000b88 <I2C_GT911_WriteRegister+0x9c>)
 8000b32:	f7ff fefd 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000b36:	beff      	bkpt	0x00ff
		return false;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e01e      	b.n	8000b7a <I2C_GT911_WriteRegister+0x8e>
	}
	osDelay(1);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f00a fc8e 	bl	800b45e <osDelay>
	if (xSemaphoreTake(BinSemI2CCBHandle, pdMS_TO_TICKS(20)) != pdPASS)
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <I2C_GT911_WriteRegister+0xa0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2114      	movs	r1, #20
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00b fbf3 	bl	800c334 <xQueueSemaphoreTake>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d011      	beq.n	8000b78 <I2C_GT911_WriteRegister+0x8c>
	{
		TRACE("I2C ERROR: GT911 WriteRegister did not succeed");
 8000b54:	f002 f918 	bl	8002d88 <HAL_GetTick>
 8000b58:	ee07 0a90 	vmov	s15, r0
 8000b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b60:	ee17 0a90 	vmov	r0, s15
 8000b64:	f7ff fd10 	bl	8000588 <__aeabi_f2d>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <I2C_GT911_WriteRegister+0xa4>)
 8000b6e:	f7ff fedf 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000b72:	beff      	bkpt	0x00ff
		return false;
 8000b74:	2300      	movs	r3, #0
 8000b76:	e000      	b.n	8000b7a <I2C_GT911_WriteRegister+0x8e>
	}
	return true;
 8000b78:	2301      	movs	r3, #1
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20008ec4 	.word	0x20008ec4
 8000b88:	0800f328 	.word	0x0800f328
 8000b8c:	200094a0 	.word	0x200094a0
 8000b90:	0800f2f0 	.word	0x0800f2f0

08000b94 <I2C_GT911_SendConfig>:

bool I2C_GT911_SendConfig(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint8_t i = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	buf[0] = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	713b      	strb	r3, [r7, #4]
	buf[1] = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	717b      	strb	r3, [r7, #5]
	bool bResult = true;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	e009      	b.n	8000bc4 <I2C_GT911_SendConfig+0x30>
		buf[0] += TOUCH_GT911_Cfg[i];//check sum
 8000bb0:	793a      	ldrb	r2, [r7, #4]
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4927      	ldr	r1, [pc, #156]	; (8000c54 <I2C_GT911_SendConfig+0xc0>)
 8000bb6:	5ccb      	ldrb	r3, [r1, r3]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	713b      	strb	r3, [r7, #4]
	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2bb7      	cmp	r3, #183	; 0xb7
 8000bc8:	d9f2      	bls.n	8000bb0 <I2C_GT911_SendConfig+0x1c>

	buf[0] = (~buf[0]) + 1;
 8000bca:	793b      	ldrb	r3, [r7, #4]
 8000bcc:	425b      	negs	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	713b      	strb	r3, [r7, #4]
	if (!I2C_GT911_WriteRegister(GT_CFGS_REG, (uint8_t *) TOUCH_GT911_Cfg, sizeof(TOUCH_GT911_Cfg)))
 8000bd2:	22b8      	movs	r2, #184	; 0xb8
 8000bd4:	491f      	ldr	r1, [pc, #124]	; (8000c54 <I2C_GT911_SendConfig+0xc0>)
 8000bd6:	f248 0047 	movw	r0, #32839	; 0x8047
 8000bda:	f7ff ff87 	bl	8000aec <I2C_GT911_WriteRegister>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f083 0301 	eor.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d010      	beq.n	8000c0c <I2C_GT911_SendConfig+0x78>
	{
		TRACE("GT911 ERROR: write config failed");
 8000bea:	f002 f8cd 	bl	8002d88 <HAL_GetTick>
 8000bee:	ee07 0a90 	vmov	s15, r0
 8000bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf6:	ee17 0a90 	vmov	r0, s15
 8000bfa:	f7ff fcc5 	bl	8000588 <__aeabi_f2d>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	4815      	ldr	r0, [pc, #84]	; (8000c58 <I2C_GT911_SendConfig+0xc4>)
 8000c04:	f7ff fe94 	bl	8000930 <serialPrintf>
		bResult = false;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	71bb      	strb	r3, [r7, #6]
	}

	if (!I2C_GT911_WriteRegister(GT_CHECK_REG, buf, 2)) //write checksum
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4619      	mov	r1, r3
 8000c12:	f248 00ff 	movw	r0, #33023	; 0x80ff
 8000c16:	f7ff ff69 	bl	8000aec <I2C_GT911_WriteRegister>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d010      	beq.n	8000c48 <I2C_GT911_SendConfig+0xb4>
		{
			TRACE("GT911 ERROR: write config checksum failed");
 8000c26:	f002 f8af 	bl	8002d88 <HAL_GetTick>
 8000c2a:	ee07 0a90 	vmov	s15, r0
 8000c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c32:	ee17 0a90 	vmov	r0, s15
 8000c36:	f7ff fca7 	bl	8000588 <__aeabi_f2d>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <I2C_GT911_SendConfig+0xc8>)
 8000c40:	f7ff fe76 	bl	8000930 <serialPrintf>
			bResult = false;
 8000c44:	2300      	movs	r3, #0
 8000c46:	71bb      	strb	r3, [r7, #6]
		}
	return bResult;
 8000c48:	79bb      	ldrb	r3, [r7, #6]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	0800f740 	.word	0x0800f740
 8000c58:	0800f358 	.word	0x0800f358
 8000c5c:	0800f384 	.word	0x0800f384

08000c60 <touchPanelInit>:

bool touchPanelInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af02      	add	r7, sp, #8
	uint8_t tmp[4] = { 0 };
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]

	TRACE("Touchpanel init start ...");
 8000c6a:	f002 f88d 	bl	8002d88 <HAL_GetTick>
 8000c6e:	ee07 0a90 	vmov	s15, r0
 8000c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c76:	ee17 0a90 	vmov	r0, s15
 8000c7a:	f7ff fc85 	bl	8000588 <__aeabi_f2d>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	48a9      	ldr	r0, [pc, #676]	; (8000f28 <touchPanelInit+0x2c8>)
 8000c84:	f7ff fe54 	bl	8000930 <serialPrintf>

	TOUCH_AF_GPIOConfig(); //SET RST=OUT INT=OUT INT=LOW
 8000c88:	f7ff feaa 	bl	80009e0 <TOUCH_AF_GPIOConfig>
	//I2C_Init();

	TPRST_LOW();
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	48a6      	ldr	r0, [pc, #664]	; (8000f2c <touchPanelInit+0x2cc>)
 8000c94:	f003 f9de 	bl	8004054 <HAL_GPIO_WritePin>
	TPINT_HIGH();
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	48a4      	ldr	r0, [pc, #656]	; (8000f30 <touchPanelInit+0x2d0>)
 8000c9e:	f003 f9d9 	bl	8004054 <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(1));
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f00a fbdb 	bl	800b45e <osDelay>

	TPRST_HIGH();
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	489f      	ldr	r0, [pc, #636]	; (8000f2c <touchPanelInit+0x2cc>)
 8000cb0:	f003 f9d0 	bl	8004054 <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(6));
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f00a fbd2 	bl	800b45e <osDelay>

	TPINT_LOW();
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	489c      	ldr	r0, [pc, #624]	; (8000f30 <touchPanelInit+0x2d0>)
 8000cc0:	f003 f9c8 	bl	8004054 <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(55));
 8000cc4:	2037      	movs	r0, #55	; 0x37
 8000cc6:	f00a fbca 	bl	800b45e <osDelay>

	TOUCH_AF_INT_Change();  //Set INT INPUT INT=LOW
 8000cca:	f7ff fe73 	bl	80009b4 <TOUCH_AF_INT_Change>

	osDelay(pdMS_TO_TICKS(50));
 8000cce:	2032      	movs	r0, #50	; 0x32
 8000cd0:	f00a fbc5 	bl	800b45e <osDelay>

	TRACE("Reading Touch registry");
 8000cd4:	f002 f858 	bl	8002d88 <HAL_GetTick>
 8000cd8:	ee07 0a90 	vmov	s15, r0
 8000cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ce0:	ee17 0a90 	vmov	r0, s15
 8000ce4:	f7ff fc50 	bl	8000588 <__aeabi_f2d>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4891      	ldr	r0, [pc, #580]	; (8000f34 <touchPanelInit+0x2d4>)
 8000cee:	f7ff fe1f 	bl	8000930 <serialPrintf>
	if (!I2C_GT911_ReadRegister(GT_PID_REG, tmp, 4))
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f248 1040 	movw	r0, #33088	; 0x8140
 8000cfc:	f7ff fea2 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f083 0301 	eor.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00e      	beq.n	8000d2a <touchPanelInit+0xca>
	{
		TRACE("GT911 ERROR: Product ID read failed");
 8000d0c:	f002 f83c 	bl	8002d88 <HAL_GetTick>
 8000d10:	ee07 0a90 	vmov	s15, r0
 8000d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d18:	ee17 0a90 	vmov	r0, s15
 8000d1c:	f7ff fc34 	bl	8000588 <__aeabi_f2d>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4884      	ldr	r0, [pc, #528]	; (8000f38 <touchPanelInit+0x2d8>)
 8000d26:	f7ff fe03 	bl	8000930 <serialPrintf>
	}

	if (strcmp((char *) tmp, "911") == 0)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4983      	ldr	r1, [pc, #524]	; (8000f3c <touchPanelInit+0x2dc>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fa5e 	bl	80001f0 <strcmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f040 80e1 	bne.w	8000efe <touchPanelInit+0x29e>
	{
		TRACE("GT911 chip detected");
 8000d3c:	f002 f824 	bl	8002d88 <HAL_GetTick>
 8000d40:	ee07 0a90 	vmov	s15, r0
 8000d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d48:	ee17 0a90 	vmov	r0, s15
 8000d4c:	f7ff fc1c 	bl	8000588 <__aeabi_f2d>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	487a      	ldr	r0, [pc, #488]	; (8000f40 <touchPanelInit+0x2e0>)
 8000d56:	f7ff fdeb 	bl	8000930 <serialPrintf>
		tmp[0] = 0x02;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2201      	movs	r2, #1
 8000d62:	4619      	mov	r1, r3
 8000d64:	f248 0040 	movw	r0, #32832	; 0x8040
 8000d68:	f7ff fec0 	bl	8000aec <I2C_GT911_WriteRegister>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00e      	beq.n	8000d96 <touchPanelInit+0x136>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000d78:	f002 f806 	bl	8002d88 <HAL_GetTick>
 8000d7c:	ee07 0a90 	vmov	s15, r0
 8000d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d84:	ee17 0a90 	vmov	r0, s15
 8000d88:	f7ff fbfe 	bl	8000588 <__aeabi_f2d>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	486c      	ldr	r0, [pc, #432]	; (8000f44 <touchPanelInit+0x2e4>)
 8000d92:	f7ff fdcd 	bl	8000930 <serialPrintf>
		}
		if (!I2C_GT911_ReadRegister(GT_CFGS_REG, tmp, 1))
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f248 0047 	movw	r0, #32839	; 0x8047
 8000da0:	f7ff fe50 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f083 0301 	eor.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00e      	beq.n	8000dce <touchPanelInit+0x16e>
		{
			TRACE("GT911 ERROR: configuration register read failed");
 8000db0:	f001 ffea 	bl	8002d88 <HAL_GetTick>
 8000db4:	ee07 0a90 	vmov	s15, r0
 8000db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dbc:	ee17 0a90 	vmov	r0, s15
 8000dc0:	f7ff fbe2 	bl	8000588 <__aeabi_f2d>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	485f      	ldr	r0, [pc, #380]	; (8000f48 <touchPanelInit+0x2e8>)
 8000dca:	f7ff fdb1 	bl	8000930 <serialPrintf>
		}

		TRACE("Chip config Ver:%x", tmp[0]);
 8000dce:	f001 ffdb 	bl	8002d88 <HAL_GetTick>
 8000dd2:	ee07 0a90 	vmov	s15, r0
 8000dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dda:	ee17 0a90 	vmov	r0, s15
 8000dde:	f7ff fbd3 	bl	8000588 <__aeabi_f2d>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	7939      	ldrb	r1, [r7, #4]
 8000de8:	9100      	str	r1, [sp, #0]
 8000dea:	4858      	ldr	r0, [pc, #352]	; (8000f4c <touchPanelInit+0x2ec>)
 8000dec:	f7ff fda0 	bl	8000930 <serialPrintf>
		if (tmp[0] <= GT911_CFG_NUMER)  //Config ver
 8000df0:	793b      	ldrb	r3, [r7, #4]
 8000df2:	2b6d      	cmp	r3, #109	; 0x6d
 8000df4:	d827      	bhi.n	8000e46 <touchPanelInit+0x1e6>
		{
			TRACE("Sending new config %d", GT911_CFG_NUMER);
 8000df6:	f001 ffc7 	bl	8002d88 <HAL_GetTick>
 8000dfa:	ee07 0a90 	vmov	s15, r0
 8000dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e02:	ee17 0a90 	vmov	r0, s15
 8000e06:	f7ff fbbf 	bl	8000588 <__aeabi_f2d>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	216d      	movs	r1, #109	; 0x6d
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	484f      	ldr	r0, [pc, #316]	; (8000f50 <touchPanelInit+0x2f0>)
 8000e14:	f7ff fd8c 	bl	8000930 <serialPrintf>
			if (!I2C_GT911_SendConfig())
 8000e18:	f7ff febc 	bl	8000b94 <I2C_GT911_SendConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f083 0301 	eor.w	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00e      	beq.n	8000e46 <touchPanelInit+0x1e6>
			{
				TRACE("GT911 ERROR: sending configration failed");
 8000e28:	f001 ffae 	bl	8002d88 <HAL_GetTick>
 8000e2c:	ee07 0a90 	vmov	s15, r0
 8000e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e34:	ee17 0a90 	vmov	r0, s15
 8000e38:	f7ff fba6 	bl	8000588 <__aeabi_f2d>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4844      	ldr	r0, [pc, #272]	; (8000f54 <touchPanelInit+0x2f4>)
 8000e42:	f7ff fd75 	bl	8000930 <serialPrintf>
			}
		}

		if (!I2C_GT911_ReadRegister(GT911_FIRMWARE_VERSION_REG, tmp, 2))
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f248 1044 	movw	r0, #33092	; 0x8144
 8000e50:	f7ff fdf8 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f083 0301 	eor.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00f      	beq.n	8000e80 <touchPanelInit+0x220>
		{
			TRACE("GT911 ERROR: reading firmware version failed");
 8000e60:	f001 ff92 	bl	8002d88 <HAL_GetTick>
 8000e64:	ee07 0a90 	vmov	s15, r0
 8000e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6c:	ee17 0a90 	vmov	r0, s15
 8000e70:	f7ff fb8a 	bl	8000588 <__aeabi_f2d>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4837      	ldr	r0, [pc, #220]	; (8000f58 <touchPanelInit+0x2f8>)
 8000e7a:	f7ff fd59 	bl	8000930 <serialPrintf>
 8000e7e:	e01b      	b.n	8000eb8 <touchPanelInit+0x258>
		}
		else
		{
			touchGT911fwver = (tmp[1] << 8) + tmp[0];
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	021b      	lsls	r3, r3, #8
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	793b      	ldrb	r3, [r7, #4]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <touchPanelInit+0x2fc>)
 8000e92:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 FW version: %u", touchGT911fwver);
 8000e94:	f001 ff78 	bl	8002d88 <HAL_GetTick>
 8000e98:	ee07 0a90 	vmov	s15, r0
 8000e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea0:	ee17 0a90 	vmov	r0, s15
 8000ea4:	f7ff fb70 	bl	8000588 <__aeabi_f2d>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	492b      	ldr	r1, [pc, #172]	; (8000f5c <touchPanelInit+0x2fc>)
 8000eae:	8809      	ldrh	r1, [r1, #0]
 8000eb0:	9100      	str	r1, [sp, #0]
 8000eb2:	482b      	ldr	r0, [pc, #172]	; (8000f60 <touchPanelInit+0x300>)
 8000eb4:	f7ff fd3c 	bl	8000930 <serialPrintf>
		}

		osDelay(pdMS_TO_TICKS(10));
 8000eb8:	200a      	movs	r0, #10
 8000eba:	f00a fad0 	bl	800b45e <osDelay>

		tmp[0] = 0X00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))  //end reset
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f248 0040 	movw	r0, #32832	; 0x8040
 8000ecc:	f7ff fe0e 	bl	8000aec <I2C_GT911_WriteRegister>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f083 0301 	eor.w	r3, r3, #1
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00e      	beq.n	8000efa <touchPanelInit+0x29a>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000edc:	f001 ff54 	bl	8002d88 <HAL_GetTick>
 8000ee0:	ee07 0a90 	vmov	s15, r0
 8000ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee8:	ee17 0a90 	vmov	r0, s15
 8000eec:	f7ff fb4c 	bl	8000588 <__aeabi_f2d>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <touchPanelInit+0x2e4>)
 8000ef6:	f7ff fd1b 	bl	8000930 <serialPrintf>
		}
		// touchGT911Flag = true;

		//TOUCH_AF_ExtiConfig();

		return true;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <touchPanelInit+0x2be>
	}
	TRACE("GT911 chip NOT FOUND");
 8000efe:	f001 ff43 	bl	8002d88 <HAL_GetTick>
 8000f02:	ee07 0a90 	vmov	s15, r0
 8000f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0a:	ee17 0a90 	vmov	r0, s15
 8000f0e:	f7ff fb3b 	bl	8000588 <__aeabi_f2d>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4813      	ldr	r0, [pc, #76]	; (8000f64 <touchPanelInit+0x304>)
 8000f18:	f7ff fd0a 	bl	8000930 <serialPrintf>
	return false;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	0800f3b8 	.word	0x0800f3b8
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40021c00 	.word	0x40021c00
 8000f34:	0800f3dc 	.word	0x0800f3dc
 8000f38:	0800f3fc 	.word	0x0800f3fc
 8000f3c:	0800f428 	.word	0x0800f428
 8000f40:	0800f42c 	.word	0x0800f42c
 8000f44:	0800f448 	.word	0x0800f448
 8000f48:	0800f480 	.word	0x0800f480
 8000f4c:	0800f4b8 	.word	0x0800f4b8
 8000f50:	0800f4d4 	.word	0x0800f4d4
 8000f54:	0800f4f4 	.word	0x0800f4f4
 8000f58:	0800f528 	.word	0x0800f528
 8000f5c:	20000090 	.word	0x20000090
 8000f60:	0800f560 	.word	0x0800f560
 8000f64:	0800f580 	.word	0x0800f580

08000f68 <touchPanelDeInit>:

void touchPanelDeInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	//TOUCH_AF_ExtiStop();
	//touchGT911Flag = false;
	TRACE("touchPanelDeInit()");
 8000f6c:	f001 ff0c 	bl	8002d88 <HAL_GetTick>
 8000f70:	ee07 0a90 	vmov	s15, r0
 8000f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f78:	ee17 0a90 	vmov	r0, s15
 8000f7c:	f7ff fb04 	bl	8000588 <__aeabi_f2d>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <touchPanelDeInit+0x28>)
 8000f86:	f7ff fcd3 	bl	8000930 <serialPrintf>
	asm("bkpt 255");
 8000f8a:	beff      	bkpt	0x00ff
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800f5a0 	.word	0x0800f5a0

08000f94 <touchPanelRead>:

void touchPanelRead()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af02      	add	r7, sp, #8
	uint8_t state = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	70bb      	strb	r3, [r7, #2]
	// if (!touchEventOccured)
	//   return;

	// touchEventOccured = false;

	uint32_t startReadStatus = HAL_GetTick();
 8000f9e:	f001 fef3 	bl	8002d88 <HAL_GetTick>
 8000fa2:	6078      	str	r0, [r7, #4]
	do {
		if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG, &state, 1)) {
 8000fa4:	1cbb      	adds	r3, r7, #2
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f248 104e 	movw	r0, #33102	; 0x814e
 8000fae:	f7ff fd49 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f083 0301 	eor.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d028      	beq.n	8001010 <touchPanelRead+0x7c>
			HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	48b7      	ldr	r0, [pc, #732]	; (80012a0 <touchPanelRead+0x30c>)
 8000fc4:	f003 f846 	bl	8004054 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2110      	movs	r1, #16
 8000fcc:	48b4      	ldr	r0, [pc, #720]	; (80012a0 <touchPanelRead+0x30c>)
 8000fce:	f003 f841 	bl	8004054 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	48b2      	ldr	r0, [pc, #712]	; (80012a0 <touchPanelRead+0x30c>)
 8000fd8:	f003 f83c 	bl	8004054 <HAL_GPIO_WritePin>
			touchGT911hiccups++;
 8000fdc:	4bb1      	ldr	r3, [pc, #708]	; (80012a4 <touchPanelRead+0x310>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4baf      	ldr	r3, [pc, #700]	; (80012a4 <touchPanelRead+0x310>)
 8000fe6:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 I2C read XY error");
 8000fe8:	f001 fece 	bl	8002d88 <HAL_GetTick>
 8000fec:	ee07 0a90 	vmov	s15, r0
 8000ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ff4:	ee17 0a90 	vmov	r0, s15
 8000ff8:	f7ff fac6 	bl	8000588 <__aeabi_f2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	48a9      	ldr	r0, [pc, #676]	; (80012a8 <touchPanelRead+0x314>)
 8001002:	f7ff fc95 	bl	8000930 <serialPrintf>
			touchPanelDeInit();
 8001006:	f7ff ffaf 	bl	8000f68 <touchPanelDeInit>
			touchPanelInit();
 800100a:	f7ff fe29 	bl	8000c60 <touchPanelInit>
			return;
 800100e:	e18d      	b.n	800132c <touchPanelRead+0x398>
		}

		if (state & 0x80u) {
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <touchPanelRead+0x9a>
			// ready
			break;
		}
		HAL_Delay(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f001 fec1 	bl	8002da0 <HAL_Delay>
	} while (HAL_GetTick() - startReadStatus < GT911_TIMEOUT);
 800101e:	f001 feb3 	bl	8002d88 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d9bb      	bls.n	8000fa4 <touchPanelRead+0x10>
 800102c:	e000      	b.n	8001030 <touchPanelRead+0x9c>
			break;
 800102e:	bf00      	nop

	TRACE("touch state = 0x%x", state);
 8001030:	f001 feaa 	bl	8002d88 <HAL_GetTick>
 8001034:	ee07 0a90 	vmov	s15, r0
 8001038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103c:	ee17 0a90 	vmov	r0, s15
 8001040:	f7ff faa2 	bl	8000588 <__aeabi_f2d>
 8001044:	4602      	mov	r2, r0
 8001046:	460b      	mov	r3, r1
 8001048:	78b9      	ldrb	r1, [r7, #2]
 800104a:	9100      	str	r1, [sp, #0]
 800104c:	4897      	ldr	r0, [pc, #604]	; (80012ac <touchPanelRead+0x318>)
 800104e:	f7ff fc6f 	bl	8000930 <serialPrintf>
	if (state & 0x80u) {
 8001052:	78bb      	ldrb	r3, [r7, #2]
 8001054:	b25b      	sxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	f280 80c2 	bge.w	80011e0 <touchPanelRead+0x24c>
		uint8_t pointsCount = (state & 0x0Fu);
 800105c:	78bb      	ldrb	r3, [r7, #2]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	70fb      	strb	r3, [r7, #3]

		if (pointsCount > 0 && pointsCount <= GT911_MAX_TP) {
 8001064:	78fb      	ldrb	r3, [r7, #3]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80a1 	beq.w	80011ae <touchPanelRead+0x21a>
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	2b05      	cmp	r3, #5
 8001070:	f200 809d 	bhi.w	80011ae <touchPanelRead+0x21a>
			if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG + 1, touchData.data, pointsCount * sizeof(TouchPoint)))
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	461a      	mov	r2, r3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	498b      	ldr	r1, [pc, #556]	; (80012b0 <touchPanelRead+0x31c>)
 8001084:	f248 104f 	movw	r0, #33103	; 0x814f
 8001088:	f7ff fcdc 	bl	8000a44 <I2C_GT911_ReadRegister>
 800108c:	4603      	mov	r3, r0
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d028      	beq.n	80010ea <touchPanelRead+0x156>
			{
				HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2104      	movs	r1, #4
 800109c:	4880      	ldr	r0, [pc, #512]	; (80012a0 <touchPanelRead+0x30c>)
 800109e:	f002 ffd9 	bl	8004054 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2110      	movs	r1, #16
 80010a6:	487e      	ldr	r0, [pc, #504]	; (80012a0 <touchPanelRead+0x30c>)
 80010a8:	f002 ffd4 	bl	8004054 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2120      	movs	r1, #32
 80010b0:	487b      	ldr	r0, [pc, #492]	; (80012a0 <touchPanelRead+0x30c>)
 80010b2:	f002 ffcf 	bl	8004054 <HAL_GPIO_WritePin>
				touchGT911hiccups++;
 80010b6:	4b7b      	ldr	r3, [pc, #492]	; (80012a4 <touchPanelRead+0x310>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b79      	ldr	r3, [pc, #484]	; (80012a4 <touchPanelRead+0x310>)
 80010c0:	801a      	strh	r2, [r3, #0]
				TRACE("GT911 I2C data read error");
 80010c2:	f001 fe61 	bl	8002d88 <HAL_GetTick>
 80010c6:	ee07 0a90 	vmov	s15, r0
 80010ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ce:	ee17 0a90 	vmov	r0, s15
 80010d2:	f7ff fa59 	bl	8000588 <__aeabi_f2d>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4876      	ldr	r0, [pc, #472]	; (80012b4 <touchPanelRead+0x320>)
 80010dc:	f7ff fc28 	bl	8000930 <serialPrintf>
				touchPanelDeInit();
 80010e0:	f7ff ff42 	bl	8000f68 <touchPanelDeInit>
				touchPanelInit();
 80010e4:	f7ff fdbc 	bl	8000c60 <touchPanelInit>
				return;
 80010e8:	e120      	b.n	800132c <touchPanelRead+0x398>
			}
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80010ea:	4b73      	ldr	r3, [pc, #460]	; (80012b8 <touchPanelRead+0x324>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <touchPanelRead+0x16e>
 80010f2:	4b71      	ldr	r3, [pc, #452]	; (80012b8 <touchPanelRead+0x324>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d003      	beq.n	8001102 <touchPanelRead+0x16e>
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <touchPanelRead+0x324>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b04      	cmp	r3, #4
 8001100:	d117      	bne.n	8001132 <touchPanelRead+0x19e>
			{
				touchState.event = TE_DOWN;
 8001102:	4b6d      	ldr	r3, [pc, #436]	; (80012b8 <touchPanelRead+0x324>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
				touchState.startX = touchState.x = touchData.points[0].x;
 8001108:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <touchPanelRead+0x31c>)
 800110a:	885b      	ldrh	r3, [r3, #2]
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <touchPanelRead+0x324>)
 8001110:	805a      	strh	r2, [r3, #2]
 8001112:	4b69      	ldr	r3, [pc, #420]	; (80012b8 <touchPanelRead+0x324>)
 8001114:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001118:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <touchPanelRead+0x324>)
 800111a:	80da      	strh	r2, [r3, #6]
				touchState.startY = touchState.y = touchData.points[0].y;
 800111c:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <touchPanelRead+0x31c>)
 800111e:	889b      	ldrh	r3, [r3, #4]
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b65      	ldr	r3, [pc, #404]	; (80012b8 <touchPanelRead+0x324>)
 8001124:	809a      	strh	r2, [r3, #4]
 8001126:	4b64      	ldr	r3, [pc, #400]	; (80012b8 <touchPanelRead+0x324>)
 8001128:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800112c:	4b62      	ldr	r3, [pc, #392]	; (80012b8 <touchPanelRead+0x324>)
 800112e:	811a      	strh	r2, [r3, #8]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 8001130:	e055      	b.n	80011de <touchPanelRead+0x24a>
			}
			else
			{
				touchState.deltaX = touchData.points[0].x - touchState.x;
 8001132:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <touchPanelRead+0x31c>)
 8001134:	885a      	ldrh	r2, [r3, #2]
 8001136:	4b60      	ldr	r3, [pc, #384]	; (80012b8 <touchPanelRead+0x324>)
 8001138:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800113c:	b29b      	uxth	r3, r3
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	b29b      	uxth	r3, r3
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <touchPanelRead+0x324>)
 8001146:	815a      	strh	r2, [r3, #10]
				touchState.deltaY = touchData.points[0].y - touchState.y;
 8001148:	4b59      	ldr	r3, [pc, #356]	; (80012b0 <touchPanelRead+0x31c>)
 800114a:	889a      	ldrh	r2, [r3, #4]
 800114c:	4b5a      	ldr	r3, [pc, #360]	; (80012b8 <touchPanelRead+0x324>)
 800114e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001152:	b29b      	uxth	r3, r3
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29b      	uxth	r3, r3
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b57      	ldr	r3, [pc, #348]	; (80012b8 <touchPanelRead+0x324>)
 800115c:	819a      	strh	r2, [r3, #12]
				if (touchState.event == TE_SLIDE || abs(touchState.deltaX) >= SLIDE_RANGE || abs(touchState.deltaY) >= SLIDE_RANGE)
 800115e:	4b56      	ldr	r3, [pc, #344]	; (80012b8 <touchPanelRead+0x324>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d015      	beq.n	8001192 <touchPanelRead+0x1fe>
 8001166:	4b54      	ldr	r3, [pc, #336]	; (80012b8 <touchPanelRead+0x324>)
 8001168:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800116c:	2b00      	cmp	r3, #0
 800116e:	bfb8      	it	lt
 8001170:	425b      	neglt	r3, r3
 8001172:	b29a      	uxth	r2, r3
 8001174:	2306      	movs	r3, #6
 8001176:	b29b      	uxth	r3, r3
 8001178:	429a      	cmp	r2, r3
 800117a:	d20a      	bcs.n	8001192 <touchPanelRead+0x1fe>
 800117c:	4b4e      	ldr	r3, [pc, #312]	; (80012b8 <touchPanelRead+0x324>)
 800117e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	bfb8      	it	lt
 8001186:	425b      	neglt	r3, r3
 8001188:	b29a      	uxth	r2, r3
 800118a:	2306      	movs	r3, #6
 800118c:	b29b      	uxth	r3, r3
 800118e:	429a      	cmp	r2, r3
 8001190:	d325      	bcc.n	80011de <touchPanelRead+0x24a>
				{
					touchState.event = TE_SLIDE;
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <touchPanelRead+0x324>)
 8001194:	2203      	movs	r2, #3
 8001196:	701a      	strb	r2, [r3, #0]
					touchState.x = touchData.points[0].x;
 8001198:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <touchPanelRead+0x31c>)
 800119a:	885b      	ldrh	r3, [r3, #2]
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <touchPanelRead+0x324>)
 80011a0:	805a      	strh	r2, [r3, #2]
					touchState.y = touchData.points[0].y;
 80011a2:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <touchPanelRead+0x31c>)
 80011a4:	889b      	ldrh	r3, [r3, #4]
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b43      	ldr	r3, [pc, #268]	; (80012b8 <touchPanelRead+0x324>)
 80011aa:	809a      	strh	r2, [r3, #4]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80011ac:	e017      	b.n	80011de <touchPanelRead+0x24a>
				}
			}
		}
		else
		{
			if (touchState.event == TE_SLIDE)
 80011ae:	4b42      	ldr	r3, [pc, #264]	; (80012b8 <touchPanelRead+0x324>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d103      	bne.n	80011be <touchPanelRead+0x22a>
			{
				touchState.event = TE_SLIDE_END;
 80011b6:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <touchPanelRead+0x324>)
 80011b8:	2204      	movs	r2, #4
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e010      	b.n	80011e0 <touchPanelRead+0x24c>
			}
			else if (touchState.event == TE_DOWN)
 80011be:	4b3e      	ldr	r3, [pc, #248]	; (80012b8 <touchPanelRead+0x324>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d103      	bne.n	80011ce <touchPanelRead+0x23a>
			{
				touchState.event = TE_UP;
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <touchPanelRead+0x324>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e008      	b.n	80011e0 <touchPanelRead+0x24c>
			}
			else if (touchState.event != TE_SLIDE_END) {
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <touchPanelRead+0x324>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d004      	beq.n	80011e0 <touchPanelRead+0x24c>
				touchState.event = TE_NONE;
 80011d6:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <touchPanelRead+0x324>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e000      	b.n	80011e0 <touchPanelRead+0x24c>
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80011de:	bf00      	nop
			}
		}
	}

	uint8_t zero = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	707b      	strb	r3, [r7, #1]
	if (!I2C_GT911_WriteRegister(GT911_READ_XY_REG, &zero, 1))
 80011e4:	1c7b      	adds	r3, r7, #1
 80011e6:	2201      	movs	r2, #1
 80011e8:	4619      	mov	r1, r3
 80011ea:	f248 104e 	movw	r0, #33102	; 0x814e
 80011ee:	f7ff fc7d 	bl	8000aec <I2C_GT911_WriteRegister>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00e      	beq.n	800121c <touchPanelRead+0x288>
	{
		TRACE("GT911 ERROR: clearing XY register failed");
 80011fe:	f001 fdc3 	bl	8002d88 <HAL_GetTick>
 8001202:	ee07 0a90 	vmov	s15, r0
 8001206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120a:	ee17 0a90 	vmov	r0, s15
 800120e:	f7ff f9bb 	bl	8000588 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4829      	ldr	r0, [pc, #164]	; (80012bc <touchPanelRead+0x328>)
 8001218:	f7ff fb8a 	bl	8000930 <serialPrintf>
	}

	switch (touchState.event) {
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <touchPanelRead+0x324>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d873      	bhi.n	800130c <touchPanelRead+0x378>
 8001224:	a201      	add	r2, pc, #4	; (adr r2, 800122c <touchPanelRead+0x298>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	08001241 	.word	0x08001241
 8001230:	08001281 	.word	0x08001281
 8001234:	08001261 	.word	0x08001261
 8001238:	080012ed 	.word	0x080012ed
 800123c:	080012cd 	.word	0x080012cd
		case TE_NONE:
			TRACE("touch event = NONE"); break;
 8001240:	f001 fda2 	bl	8002d88 <HAL_GetTick>
 8001244:	ee07 0a90 	vmov	s15, r0
 8001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f99a 	bl	8000588 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4819      	ldr	r0, [pc, #100]	; (80012c0 <touchPanelRead+0x32c>)
 800125a:	f7ff fb69 	bl	8000930 <serialPrintf>
 800125e:	e065      	b.n	800132c <touchPanelRead+0x398>
		case TE_UP:
			TRACE("touch event = UP"); break;
 8001260:	f001 fd92 	bl	8002d88 <HAL_GetTick>
 8001264:	ee07 0a90 	vmov	s15, r0
 8001268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800126c:	ee17 0a90 	vmov	r0, s15
 8001270:	f7ff f98a 	bl	8000588 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4812      	ldr	r0, [pc, #72]	; (80012c4 <touchPanelRead+0x330>)
 800127a:	f7ff fb59 	bl	8000930 <serialPrintf>
 800127e:	e055      	b.n	800132c <touchPanelRead+0x398>
		case TE_DOWN:
			TRACE("touch event = DOWN"); break;
 8001280:	f001 fd82 	bl	8002d88 <HAL_GetTick>
 8001284:	ee07 0a90 	vmov	s15, r0
 8001288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128c:	ee17 0a90 	vmov	r0, s15
 8001290:	f7ff f97a 	bl	8000588 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <touchPanelRead+0x334>)
 800129a:	f7ff fb49 	bl	8000930 <serialPrintf>
 800129e:	e045      	b.n	800132c <touchPanelRead+0x398>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	20000092 	.word	0x20000092
 80012a8:	0800f5bc 	.word	0x0800f5bc
 80012ac:	0800f5dc 	.word	0x0800f5dc
 80012b0:	20009458 	.word	0x20009458
 80012b4:	0800f5f8 	.word	0x0800f5f8
 80012b8:	20009644 	.word	0x20009644
 80012bc:	0800f61c 	.word	0x0800f61c
 80012c0:	0800f650 	.word	0x0800f650
 80012c4:	0800f66c 	.word	0x0800f66c
 80012c8:	0800f688 	.word	0x0800f688
		case TE_SLIDE_END:
			TRACE("touch event = SLIDE_END"); break;
 80012cc:	f001 fd5c 	bl	8002d88 <HAL_GetTick>
 80012d0:	ee07 0a90 	vmov	s15, r0
 80012d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d8:	ee17 0a90 	vmov	r0, s15
 80012dc:	f7ff f954 	bl	8000588 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <touchPanelRead+0x3a0>)
 80012e6:	f7ff fb23 	bl	8000930 <serialPrintf>
 80012ea:	e01f      	b.n	800132c <touchPanelRead+0x398>
		case TE_SLIDE:
			TRACE("touch event = SLIDE"); break;
 80012ec:	f001 fd4c 	bl	8002d88 <HAL_GetTick>
 80012f0:	ee07 0a90 	vmov	s15, r0
 80012f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f8:	ee17 0a90 	vmov	r0, s15
 80012fc:	f7ff f944 	bl	8000588 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <touchPanelRead+0x3a4>)
 8001306:	f7ff fb13 	bl	8000930 <serialPrintf>
 800130a:	e00f      	b.n	800132c <touchPanelRead+0x398>
		default:
			TRACE("touch event = UNKNOWN"); break;
 800130c:	f001 fd3c 	bl	8002d88 <HAL_GetTick>
 8001310:	ee07 0a90 	vmov	s15, r0
 8001314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001318:	ee17 0a90 	vmov	r0, s15
 800131c:	f7ff f934 	bl	8000588 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <touchPanelRead+0x3a8>)
 8001326:	f7ff fb03 	bl	8000930 <serialPrintf>
 800132a:	bf00      	nop
	}
}
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	0800f6a4 	.word	0x0800f6a4
 8001338:	0800f6c4 	.word	0x0800f6c4
 800133c:	0800f6e0 	.word	0x0800f6e0

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001344:	f001 fcea 	bl	8002d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f86a 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 fc06 	bl	8001b5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001350:	f000 fb8e 	bl	8001a70 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001354:	f000 fb5e 	bl	8001a14 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 8001358:	f000 fbb2 	bl	8001ac0 <MX_FMC_Init>
  MX_USART3_UART_Init();
 800135c:	f000 fb06 	bl	800196c <MX_USART3_UART_Init>
  MX_LTDC_Init();
 8001360:	f000 f99e 	bl	80016a0 <MX_LTDC_Init>
  MX_I2C1_Init();
 8001364:	f000 f95a 	bl	800161c <MX_I2C1_Init>
  MX_ADC3_Init();
 8001368:	f000 f8dc 	bl	8001524 <MX_ADC3_Init>
  MX_DAC_Init();
 800136c:	f000 f92c 	bl	80015c8 <MX_DAC_Init>
  MX_SDIO_SD_Init();
 8001370:	f000 fa52 	bl	8001818 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8001374:	f000 fa70 	bl	8001858 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001378:	f000 faa4 	bl	80018c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800137c:	f000 facc 	bl	8001918 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001380:	f000 fb1e 	bl	80019c0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001384:	f009 fc74 	bl	800ac70 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET); // Turn on power
 8001388:	2201      	movs	r2, #1
 800138a:	2102      	movs	r1, #2
 800138c:	481a      	ldr	r0, [pc, #104]	; (80013f8 <main+0xb8>)
 800138e:	f002 fe61 	bl	8004054 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2104      	movs	r1, #4
 8001396:	4819      	ldr	r0, [pc, #100]	; (80013fc <main+0xbc>)
 8001398:	f002 fe5c 	bl	8004054 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	2110      	movs	r1, #16
 80013a0:	4816      	ldr	r0, [pc, #88]	; (80013fc <main+0xbc>)
 80013a2:	f002 fe57 	bl	8004054 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2120      	movs	r1, #32
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <main+0xbc>)
 80013ac:	f002 fe52 	bl	8004054 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80013b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b4:	f001 fcf4 	bl	8002da0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013b8:	f009 ff3e 	bl	800b238 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSemI2CCB */
  BinSemI2CCBHandle = osSemaphoreNew(1, 1, &BinSemI2CCB_attributes);
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <main+0xc0>)
 80013be:	2101      	movs	r1, #1
 80013c0:	2001      	movs	r0, #1
 80013c2:	f00a f867 	bl	800b494 <osSemaphoreNew>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <main+0xc4>)
 80013ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <main+0xc8>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	480e      	ldr	r0, [pc, #56]	; (800140c <main+0xcc>)
 80013d2:	f009 ffb2 	bl	800b33a <osThreadNew>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <main+0xd0>)
 80013da:	6013      	str	r3, [r2, #0]

  /* creation of TouchTask */
  TouchTaskHandle = osThreadNew(TouchTaskEntry, NULL, &TouchTask_attributes);
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <main+0xd4>)
 80013de:	2100      	movs	r1, #0
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <main+0xd8>)
 80013e2:	f009 ffaa 	bl	800b33a <osThreadNew>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <main+0xdc>)
 80013ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013ec:	f009 ff6a 	bl	800b2c4 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	osDelay(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f00a f834 	bl	800b45e <osDelay>
 80013f6:	e7fb      	b.n	80013f0 <main+0xb0>
 80013f8:	40022400 	.word	0x40022400
 80013fc:	40021000 	.word	0x40021000
 8001400:	0800f840 	.word	0x0800f840
 8001404:	200094a0 	.word	0x200094a0
 8001408:	0800f7f8 	.word	0x0800f7f8
 800140c:	08002091 	.word	0x08002091
 8001410:	20008dc4 	.word	0x20008dc4
 8001414:	0800f81c 	.word	0x0800f81c
 8001418:	080020a5 	.word	0x080020a5
 800141c:	200093c8 	.word	0x200093c8

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0a0      	sub	sp, #128	; 0x80
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800142a:	2230      	movs	r2, #48	; 0x30
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f00d faac 	bl	800e98c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	2230      	movs	r2, #48	; 0x30
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00d fa9d 	bl	800e98c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b31      	ldr	r3, [pc, #196]	; (800151c <SystemClock_Config+0xfc>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a30      	ldr	r2, [pc, #192]	; (800151c <SystemClock_Config+0xfc>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <SystemClock_Config+0xfc>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <SystemClock_Config+0x100>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <SystemClock_Config+0x100>)
 8001478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b28      	ldr	r3, [pc, #160]	; (8001520 <SystemClock_Config+0x100>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800148a:	2301      	movs	r3, #1
 800148c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800148e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001492:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001494:	2302      	movs	r3, #2
 8001496:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001498:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800149c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800149e:	2306      	movs	r3, #6
 80014a0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014a2:	23a8      	movs	r3, #168	; 0xa8
 80014a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014aa:	2307      	movs	r3, #7
 80014ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fda6 	bl	8007004 <HAL_RCC_OscConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014be:	f000 fe61 	bl	8002184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c2:	230f      	movs	r3, #15
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c6:	2302      	movs	r3, #2
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014de:	2105      	movs	r1, #5
 80014e0:	4618      	mov	r0, r3
 80014e2:	f006 f807 	bl	80074f4 <HAL_RCC_ClockConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014ec:	f000 fe4a 	bl	8002184 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014f0:	2308      	movs	r3, #8
 80014f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80014f4:	2332      	movs	r3, #50	; 0x32
 80014f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4618      	mov	r0, r3
 8001506:	f006 f9f7 	bl	80078f8 <HAL_RCCEx_PeriphCLKConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001510:	f000 fe38 	bl	8002184 <Error_Handler>
  }
}
 8001514:	bf00      	nop
 8001516:	3780      	adds	r7, #128	; 0x80
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800152a:	463b      	mov	r3, r7
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <MX_ADC3_Init+0x98>)
 8001538:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <MX_ADC3_Init+0x9c>)
 800153a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <MX_ADC3_Init+0x98>)
 800153e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001542:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_ADC3_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_ADC3_Init+0x98>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_ADC3_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_ADC3_Init+0x98>)
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_ADC3_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_ADC3_Init+0x98>)
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <MX_ADC3_Init+0xa0>)
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_ADC3_Init+0x98>)
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_ADC3_Init+0x98>)
 8001572:	2201      	movs	r2, #1
 8001574:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_ADC3_Init+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_ADC3_Init+0x98>)
 8001580:	2201      	movs	r2, #1
 8001582:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001584:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_ADC3_Init+0x98>)
 8001586:	f001 fc2f 	bl	8002de8 <HAL_ADC_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001590:	f000 fdf8 	bl	8002184 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001594:	2304      	movs	r3, #4
 8001596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_ADC3_Init+0x98>)
 80015a6:	f001 fc63 	bl	8002e70 <HAL_ADC_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80015b0:	f000 fde8 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200093cc 	.word	0x200093cc
 80015c0:	40012200 	.word	0x40012200
 80015c4:	0f000001 	.word	0x0f000001

080015c8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_DAC_Init+0x4c>)
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <MX_DAC_Init+0x50>)
 80015da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_DAC_Init+0x4c>)
 80015de:	f001 ff57 	bl	8003490 <HAL_DAC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015e8:	f000 fdcc 	bl	8002184 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <MX_DAC_Init+0x4c>)
 80015fc:	f001 ff6a 	bl	80034d4 <HAL_DAC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001606:	f000 fdbd 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000948c 	.word	0x2000948c
 8001618:	40007400 	.word	0x40007400

0800161c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_I2C1_Init+0x78>)
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <MX_I2C1_Init+0x7c>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_I2C1_Init+0x78>)
 8001628:	4a1c      	ldr	r2, [pc, #112]	; (800169c <MX_I2C1_Init+0x80>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_I2C1_Init+0x78>)
 800162e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001632:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_I2C1_Init+0x78>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_I2C1_Init+0x78>)
 800163c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_I2C1_Init+0x78>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_I2C1_Init+0x78>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_I2C1_Init+0x78>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_I2C1_Init+0x78>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <MX_I2C1_Init+0x78>)
 800165c:	f002 fd14 	bl	8004088 <HAL_I2C_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001666:	f000 fd8d 	bl	8002184 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <MX_I2C1_Init+0x78>)
 800166e:	f005 f88b 	bl	8006788 <HAL_I2CEx_ConfigAnalogFilter>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8001678:	f000 fd84 	bl	8002184 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_I2C1_Init+0x78>)
 8001680:	f005 f8be 	bl	8006800 <HAL_I2CEx_ConfigDigitalFilter>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800168a:	f000 fd7b 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20008ec4 	.word	0x20008ec4
 8001698:	40005400 	.word	0x40005400
 800169c:	00061a80 	.word	0x00061a80

080016a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b09a      	sub	sp, #104	; 0x68
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80016a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016aa:	2234      	movs	r2, #52	; 0x34
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00d f96c 	bl	800e98c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80016b4:	463b      	mov	r3, r7
 80016b6:	2234      	movs	r2, #52	; 0x34
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f00d f966 	bl	800e98c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <MX_LTDC_Init+0x170>)
 80016c2:	4a54      	ldr	r2, [pc, #336]	; (8001814 <MX_LTDC_Init+0x174>)
 80016c4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016c6:	4b52      	ldr	r3, [pc, #328]	; (8001810 <MX_LTDC_Init+0x170>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016cc:	4b50      	ldr	r3, [pc, #320]	; (8001810 <MX_LTDC_Init+0x170>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016d2:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <MX_LTDC_Init+0x170>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016d8:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <MX_LTDC_Init+0x170>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 2;
 80016de:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <MX_LTDC_Init+0x170>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 10;
 80016e4:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <MX_LTDC_Init+0x170>)
 80016e6:	220a      	movs	r2, #10
 80016e8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80016ea:	4b49      	ldr	r3, [pc, #292]	; (8001810 <MX_LTDC_Init+0x170>)
 80016ec:	222a      	movs	r2, #42	; 0x2a
 80016ee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 12;
 80016f0:	4b47      	ldr	r3, [pc, #284]	; (8001810 <MX_LTDC_Init+0x170>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80016f6:	4b46      	ldr	r3, [pc, #280]	; (8001810 <MX_LTDC_Init+0x170>)
 80016f8:	f240 220a 	movw	r2, #522	; 0x20a
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 284;
 80016fe:	4b44      	ldr	r3, [pc, #272]	; (8001810 <MX_LTDC_Init+0x170>)
 8001700:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 8001706:	4b42      	ldr	r3, [pc, #264]	; (8001810 <MX_LTDC_Init+0x170>)
 8001708:	f240 220d 	movw	r2, #525	; 0x20d
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 286;
 800170e:	4b40      	ldr	r3, [pc, #256]	; (8001810 <MX_LTDC_Init+0x170>)
 8001710:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001716:	4b3e      	ldr	r3, [pc, #248]	; (8001810 <MX_LTDC_Init+0x170>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <MX_LTDC_Init+0x170>)
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001726:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <MX_LTDC_Init+0x170>)
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800172e:	4838      	ldr	r0, [pc, #224]	; (8001810 <MX_LTDC_Init+0x170>)
 8001730:	f005 f8a6 	bl	8006880 <HAL_LTDC_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800173a:	f000 fd23 	bl	8002184 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 479;
 8001742:	f240 13df 	movw	r3, #479	; 0x1df
 8001746:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 271;
 800174c:	f240 130f 	movw	r3, #271	; 0x10f
 8001750:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001752:	2302      	movs	r3, #2
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001756:	23ff      	movs	r3, #255	; 0xff
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001762:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001764:	2305      	movs	r3, #5
 8001766:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 261120;
 8001768:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 800176c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 800176e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001772:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001774:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001778:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800178c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	481e      	ldr	r0, [pc, #120]	; (8001810 <MX_LTDC_Init+0x170>)
 8001796:	f005 f943 	bl	8006a20 <HAL_LTDC_ConfigLayer>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 80017a0:	f000 fcf0 	bl	8002184 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 479;
 80017a8:	f240 13df 	movw	r3, #479	; 0x1df
 80017ac:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 271;
 80017b2:	f240 130f 	movw	r3, #271	; 0x10f
 80017b6:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017b8:	2302      	movs	r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 80017bc:	23ff      	movs	r3, #255	; 0xff
 80017be:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80017c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c8:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80017ca:	2305      	movs	r3, #5
 80017cc:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 261120;
 80017ce:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 80017d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 80017da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	2201      	movs	r2, #1
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_LTDC_Init+0x170>)
 80017fa:	f005 f911 	bl	8006a20 <HAL_LTDC_ConfigLayer>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_LTDC_Init+0x168>
  {
    Error_Handler();
 8001804:	f000 fcbe 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3768      	adds	r7, #104	; 0x68
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20009320 	.word	0x20009320
 8001814:	40016800 	.word	0x40016800

08001818 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_SDIO_SD_Init+0x38>)
 800181e:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <MX_SDIO_SD_Init+0x3c>)
 8001820:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_SDIO_SD_Init+0x38>)
 8001824:	2200      	movs	r2, #0
 8001826:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_SDIO_SD_Init+0x38>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_SDIO_SD_Init+0x38>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_SDIO_SD_Init+0x38>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <MX_SDIO_SD_Init+0x38>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <MX_SDIO_SD_Init+0x38>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20009504 	.word	0x20009504
 8001854:	40012c00 	.word	0x40012c00

08001858 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_SPI2_Init+0x64>)
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <MX_SPI2_Init+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001862:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_SPI2_Init+0x64>)
 8001864:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001868:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_SPI2_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_SPI2_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_SPI2_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_SPI2_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_SPI2_Init+0x64>)
 8001884:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001888:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_SPI2_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <MX_SPI2_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_SPI2_Init+0x64>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MX_SPI2_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_SPI2_Init+0x64>)
 80018a4:	220a      	movs	r2, #10
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_SPI2_Init+0x64>)
 80018aa:	f007 faac 	bl	8008e06 <HAL_SPI_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018b4:	f000 fc66 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20008dc8 	.word	0x20008dc8
 80018c0:	40003800 	.word	0x40003800

080018c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_USART1_UART_Init+0x50>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018fc:	f007 fdba 	bl	8009474 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001906:	f000 fc3d 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20009414 	.word	0x20009414
 8001914:	40011000 	.word	0x40011000

08001918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <MX_USART2_UART_Init+0x50>)
 8001920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_USART2_UART_Init+0x4c>)
 8001950:	f007 fd90 	bl	8009474 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800195a:	f000 fc13 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200095cc 	.word	0x200095cc
 8001968:	40004400 	.word	0x40004400

0800196c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <MX_USART3_UART_Init+0x4c>)
 8001974:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 400000;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 8001978:	4a10      	ldr	r2, [pc, #64]	; (80019bc <MX_USART3_UART_Init+0x50>)
 800197a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 8001990:	220c      	movs	r2, #12
 8001992:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 800199c:	2200      	movs	r2, #0
 800199e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_USART3_UART_Init+0x48>)
 80019a2:	f007 fd67 	bl	8009474 <HAL_UART_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 80019ac:	f000 fbea 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20008e20 	.word	0x20008e20
 80019b8:	40004800 	.word	0x40004800
 80019bc:	00061a80 	.word	0x00061a80

080019c0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <MX_USART6_UART_Init+0x50>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_USART6_UART_Init+0x4c>)
 80019f8:	f007 fd3c 	bl	8009474 <HAL_UART_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a02:	f000 fbbf 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20009588 	.word	0x20009588
 8001a10:	40011400 	.word	0x40011400

08001a14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a22:	2204      	movs	r2, #4
 8001a24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a28:	2202      	movs	r2, #2
 8001a2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a34:	2202      	movs	r2, #2
 8001a36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a58:	f005 f9b7 	bl	8006dca <HAL_PCD_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a62:	f000 fb8f 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20008f18 	.word	0x20008f18

08001a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_DMA_Init+0x4c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <MX_DMA_Init+0x4c>)
 8001a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <MX_DMA_Init+0x4c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2105      	movs	r1, #5
 8001a96:	200b      	movs	r0, #11
 8001a98:	f001 fcd0 	bl	800343c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a9c:	200b      	movs	r0, #11
 8001a9e:	f001 fce9 	bl	8003474 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2105      	movs	r1, #5
 8001aa6:	2011      	movs	r0, #17
 8001aa8:	f001 fcc8 	bl	800343c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001aac:	2011      	movs	r0, #17
 8001aae:	f001 fce1 	bl	8003474 <HAL_NVIC_EnableIRQ>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <MX_FMC_Init+0x94>)
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <MX_FMC_Init+0x98>)
 8001adc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_FMC_Init+0x94>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_FMC_Init+0x94>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_FMC_Init+0x94>)
 8001aec:	2204      	movs	r2, #4
 8001aee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_FMC_Init+0x94>)
 8001af2:	2210      	movs	r2, #16
 8001af4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_FMC_Init+0x94>)
 8001af8:	2240      	movs	r2, #64	; 0x40
 8001afa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_FMC_Init+0x94>)
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_FMC_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_FMC_Init+0x94>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_FMC_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_FMC_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001b1e:	2310      	movs	r3, #16
 8001b20:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001b22:	2310      	movs	r3, #16
 8001b24:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001b26:	2310      	movs	r3, #16
 8001b28:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001b2e:	2310      	movs	r3, #16
 8001b30:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001b32:	2310      	movs	r3, #16
 8001b34:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <MX_FMC_Init+0x94>)
 8001b3c:	f007 f92f 	bl	8008d9e <HAL_SDRAM_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001b46:	f000 fb1d 	bl	8002184 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20009610 	.word	0x20009610
 8001b58:	a0000140 	.word	0xa0000140

08001b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b090      	sub	sp, #64	; 0x40
 8001b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b76:	4bb0      	ldr	r3, [pc, #704]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4aaf      	ldr	r2, [pc, #700]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4bad      	ldr	r3, [pc, #692]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	4ba9      	ldr	r3, [pc, #676]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4aa8      	ldr	r2, [pc, #672]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4ba6      	ldr	r3, [pc, #664]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	4ba2      	ldr	r3, [pc, #648]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4aa1      	ldr	r2, [pc, #644]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001bb4:	f043 0304 	orr.w	r3, r3, #4
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b9f      	ldr	r3, [pc, #636]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	4b9b      	ldr	r3, [pc, #620]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a9a      	ldr	r2, [pc, #616]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001bd0:	f043 0320 	orr.w	r3, r3, #32
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b98      	ldr	r3, [pc, #608]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	61fb      	str	r3, [r7, #28]
 8001be0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a93      	ldr	r2, [pc, #588]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b91      	ldr	r3, [pc, #580]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b8d      	ldr	r3, [pc, #564]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a8c      	ldr	r2, [pc, #560]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b8a      	ldr	r3, [pc, #552]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b86      	ldr	r3, [pc, #536]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a85      	ldr	r2, [pc, #532]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b83      	ldr	r3, [pc, #524]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b7f      	ldr	r3, [pc, #508]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a7e      	ldr	r2, [pc, #504]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b7c      	ldr	r3, [pc, #496]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b78      	ldr	r3, [pc, #480]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a77      	ldr	r2, [pc, #476]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b75      	ldr	r3, [pc, #468]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b71      	ldr	r3, [pc, #452]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a70      	ldr	r2, [pc, #448]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a69      	ldr	r2, [pc, #420]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <MX_GPIO_Init+0x2dc>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2174      	movs	r1, #116	; 0x74
 8001caa:	4864      	ldr	r0, [pc, #400]	; (8001e3c <MX_GPIO_Init+0x2e0>)
 8001cac:	f002 f9d2 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTMODboot_GPIO_Port, INTMODboot_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb6:	4862      	ldr	r0, [pc, #392]	; (8001e40 <MX_GPIO_Init+0x2e4>)
 8001cb8:	f002 f9cc 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDnRST_GPIO_Port, LCDnRST_Pin, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc2:	485f      	ldr	r0, [pc, #380]	; (8001e40 <MX_GPIO_Init+0x2e4>)
 8001cc4:	f002 f9c6 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cce:	485d      	ldr	r0, [pc, #372]	; (8001e44 <MX_GPIO_Init+0x2e8>)
 8001cd0:	f002 f9c0 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TESTPOINT_Pin|IntModPwr_Pin|UART3Pwr_Pin, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f248 1120 	movw	r1, #33056	; 0x8120
 8001cda:	485b      	ldr	r0, [pc, #364]	; (8001e48 <MX_GPIO_Init+0x2ec>)
 8001cdc:	f002 f9ba 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioMute_GPIO_Port, AudioMute_Pin, GPIO_PIN_SET);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	4858      	ldr	r0, [pc, #352]	; (8001e48 <MX_GPIO_Init+0x2ec>)
 8001ce6:	f002 f9b5 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	210b      	movs	r1, #11
 8001cee:	4857      	ldr	r0, [pc, #348]	; (8001e4c <MX_GPIO_Init+0x2f0>)
 8001cf0:	f002 f9b0 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4855      	ldr	r0, [pc, #340]	; (8001e50 <MX_GPIO_Init+0x2f4>)
 8001cfa:	f002 f9ab 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TrainerOut_GPIO_Port, TrainerOut_Pin, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	4854      	ldr	r0, [pc, #336]	; (8001e54 <MX_GPIO_Init+0x2f8>)
 8001d04:	f002 f9a6 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TelemDir_GPIO_Port, TelemDir_Pin, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2110      	movs	r1, #16
 8001d0c:	4852      	ldr	r0, [pc, #328]	; (8001e58 <MX_GPIO_Init+0x2fc>)
 8001d0e:	f002 f9a1 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothEn_GPIO_Port, BluetoothEn_Pin, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d18:	4850      	ldr	r0, [pc, #320]	; (8001e5c <MX_GPIO_Init+0x300>)
 8001d1a:	f002 f99b 	bl	8004054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDred_Pin LEDgreen_Pin LEDblue_Pin HAPTIC_Pin */
  GPIO_InitStruct.Pin = LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin;
 8001d1e:	2374      	movs	r3, #116	; 0x74
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	4841      	ldr	r0, [pc, #260]	; (8001e3c <MX_GPIO_Init+0x2e0>)
 8001d36:	f001 ffc9 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : SWEL_Pin */
  GPIO_InitStruct.Pin = SWEL_Pin;
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SWEL_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	483b      	ldr	r0, [pc, #236]	; (8001e3c <MX_GPIO_Init+0x2e0>)
 8001d4e:	f001 ffbd 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYenter_Pin KEYpageprevious_Pin SWAL_Pin KEYrtn_Pin
                           KEYtelem_Pin KEYmdl_Pin KEYsys_Pin */
  GPIO_InitStruct.Pin = KEYenter_Pin|KEYpageprevious_Pin|SWAL_Pin|KEYrtn_Pin
 8001d52:	f648 13f0 	movw	r3, #35312	; 0x89f0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |KEYtelem_Pin|KEYmdl_Pin|KEYsys_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d64:	4619      	mov	r1, r3
 8001d66:	4836      	ldr	r0, [pc, #216]	; (8001e40 <MX_GPIO_Init+0x2e4>)
 8001d68:	f001 ffb0 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYpagenext_Pin TrimLHR_Pin */
  GPIO_InitStruct.Pin = KEYpagenext_Pin|TrimLHR_Pin;
 8001d6c:	f242 0310 	movw	r3, #8208	; 0x2010
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d72:	2300      	movs	r3, #0
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4834      	ldr	r0, [pc, #208]	; (8001e54 <MX_GPIO_Init+0x2f8>)
 8001d82:	f001 ffa3 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTMODboot_Pin LCDnRST_Pin */
  GPIO_InitStruct.Pin = INTMODboot_Pin|LCDnRST_Pin;
 8001d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4828      	ldr	r0, [pc, #160]	; (8001e40 <MX_GPIO_Init+0x2e4>)
 8001da0:	f001 ff94 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4821      	ldr	r0, [pc, #132]	; (8001e44 <MX_GPIO_Init+0x2e8>)
 8001dbe:	f001 ff85 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_INT_Pin PCBREV1_Pin PCBREV2_Pin ROTENCB_Pin
                           ROTENCA_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin|PCBREV1_Pin|PCBREV2_Pin|ROTENCB_Pin
 8001dc2:	f640 5384 	movw	r3, #3460	; 0xd84
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ROTENCA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4822      	ldr	r0, [pc, #136]	; (8001e60 <MX_GPIO_Init+0x304>)
 8001dd8:	f001 ff78 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWF_Pin SWEH_Pin SWAH_Pin SWBH_Pin
                           SWI_Pin SWJ_Pin */
  GPIO_InitStruct.Pin = SWF_Pin|SWEH_Pin|SWAH_Pin|SWBH_Pin
 8001ddc:	f24d 2318 	movw	r3, #53784	; 0xd218
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SWI_Pin|SWJ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dee:	4619      	mov	r1, r3
 8001df0:	481b      	ldr	r0, [pc, #108]	; (8001e60 <MX_GPIO_Init+0x304>)
 8001df2:	f001 ff6b 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : TESTPOINT_Pin AudioMute_Pin IntModPwr_Pin UART3Pwr_Pin */
  GPIO_InitStruct.Pin = TESTPOINT_Pin|AudioMute_Pin|IntModPwr_Pin|UART3Pwr_Pin;
 8001df6:	f248 13a0 	movw	r3, #33184	; 0x81a0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480e      	ldr	r0, [pc, #56]	; (8001e48 <MX_GPIO_Init+0x2ec>)
 8001e10:	f001 ff5c 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : TrimLHL_Pin */
  GPIO_InitStruct.Pin = TrimLHL_Pin;
 8001e14:	2340      	movs	r3, #64	; 0x40
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TrimLHL_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e24:	4619      	mov	r1, r3
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <MX_GPIO_Init+0x2ec>)
 8001e28:	f001 ff50 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDpresent_Pin TrainerIn_Pin */
  GPIO_InitStruct.Pin = SDpresent_Pin|TrainerIn_Pin;
 8001e2c:	2360      	movs	r3, #96	; 0x60
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e015      	b.n	8001e64 <MX_GPIO_Init+0x308>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40021400 	.word	0x40021400
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	40022400 	.word	0x40022400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	40021c00 	.word	0x40021c00
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4860      	ldr	r0, [pc, #384]	; (8001ff0 <MX_GPIO_Init+0x494>)
 8001e6e:	f001 ff2d 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : UART6pwr_Pin LCDbacklight_Pin ExtModPwr_Pin */
  GPIO_InitStruct.Pin = UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin;
 8001e72:	230b      	movs	r3, #11
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e86:	4619      	mov	r1, r3
 8001e88:	485a      	ldr	r0, [pc, #360]	; (8001ff4 <MX_GPIO_Init+0x498>)
 8001e8a:	f001 ff1f 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRswitch_Pin */
  GPIO_InitStruct.Pin = PWRswitch_Pin;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PWRswitch_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4855      	ldr	r0, [pc, #340]	; (8001ff8 <MX_GPIO_Init+0x49c>)
 8001ea2:	f001 ff13 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRon_Pin */
  GPIO_InitStruct.Pin = PWRon_Pin;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(PWRon_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	484e      	ldr	r0, [pc, #312]	; (8001ff8 <MX_GPIO_Init+0x49c>)
 8001ebe:	f001 ff05 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWBL_Pin TrainerDetect_Pin */
  GPIO_InitStruct.Pin = SWBL_Pin|TrainerDetect_Pin;
 8001ec2:	f241 0310 	movw	r3, #4112	; 0x1010
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4847      	ldr	r0, [pc, #284]	; (8001ff4 <MX_GPIO_Init+0x498>)
 8001ed8:	f001 fef8 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : TrimRSD_Pin TrimRSU_Pin SWCL_Pin */
  GPIO_InitStruct.Pin = TrimRSD_Pin|TrimRSU_Pin|SWCL_Pin;
 8001edc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4840      	ldr	r0, [pc, #256]	; (8001ff4 <MX_GPIO_Init+0x498>)
 8001ef2:	f001 feeb 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWCH_Pin TrimLSU_Pin TrimR_Pin TrimRHR_Pin */
  GPIO_InitStruct.Pin = SWCH_Pin|TrimLSU_Pin|TrimR_Pin|TrimRHR_Pin;
 8001ef6:	f642 0388 	movw	r3, #10376	; 0x2888
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	483c      	ldr	r0, [pc, #240]	; (8001ffc <MX_GPIO_Init+0x4a0>)
 8001f0c:	f001 fede 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8001f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f16:	2300      	movs	r3, #0
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f22:	4619      	mov	r1, r3
 8001f24:	4835      	ldr	r0, [pc, #212]	; (8001ffc <MX_GPIO_Init+0x4a0>)
 8001f26:	f001 fed1 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDH_Pin TrimLSD_Pin TrimRV_Pin TrimRVD_Pin
                           TrimLVU_Pin */
  GPIO_InitStruct.Pin = SWDH_Pin|TrimLSD_Pin|TrimRV_Pin|TrimRVD_Pin
 8001f2a:	f44f 43e3 	mov.w	r3, #29056	; 0x7180
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	482e      	ldr	r0, [pc, #184]	; (8001ff8 <MX_GPIO_Init+0x49c>)
 8001f40:	f001 fec4 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDL_Pin SWGL_Pin SWGH_Pin SWH_Pin
                           TrimLVD_Pin */
  GPIO_InitStruct.Pin = SWDL_Pin|SWGL_Pin|SWGH_Pin|SWH_Pin
 8001f44:	f241 03cc 	movw	r3, #4300	; 0x10cc
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f56:	4619      	mov	r1, r3
 8001f58:	4829      	ldr	r0, [pc, #164]	; (8002000 <MX_GPIO_Init+0x4a4>)
 8001f5a:	f001 feb7 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : TrainerOut_Pin */
  GPIO_InitStruct.Pin = TrainerOut_Pin;
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f62:	2301      	movs	r3, #1
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TrainerOut_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f72:	4619      	mov	r1, r3
 8001f74:	481e      	ldr	r0, [pc, #120]	; (8001ff0 <MX_GPIO_Init+0x494>)
 8001f76:	f001 fea9 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : ExtModTX_Pin */
  GPIO_InitStruct.Pin = ExtModTX_Pin;
 8001f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f80:	2300      	movs	r3, #0
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ExtModTX_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	481d      	ldr	r0, [pc, #116]	; (8002004 <MX_GPIO_Init+0x4a8>)
 8001f90:	f001 fe9c 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : TelemDir_Pin */
  GPIO_InitStruct.Pin = TelemDir_Pin;
 8001f94:	2310      	movs	r3, #16
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TelemDir_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4814      	ldr	r0, [pc, #80]	; (8001ffc <MX_GPIO_Init+0x4a0>)
 8001fac:	f001 fe8e 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothEn_Pin */
  GPIO_InitStruct.Pin = BluetoothEn_Pin;
 8001fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(BluetoothEn_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <MX_GPIO_Init+0x4a4>)
 8001fca:	f001 fe7f 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : USBchaCtrl_Pin USBchgDetect_Pin */
  GPIO_InitStruct.Pin = USBchaCtrl_Pin|USBchgDetect_Pin;
 8001fce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <MX_GPIO_Init+0x4a4>)
 8001fe4:	f001 fe72 	bl	8003ccc <HAL_GPIO_Init>

}
 8001fe8:	bf00      	nop
 8001fea:	3740      	adds	r7, #64	; 0x40
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40020800 	.word	0x40020800
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40022400 	.word	0x40022400
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40021800 	.word	0x40021800
 8002004:	40020000 	.word	0x40020000

08002008 <HAL_I2C_MemTxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = false;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(BinSemI2CCBHandle, &xHigherPriorityTaskWoken);
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_I2C_MemTxCpltCallback+0x3c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f107 020c 	add.w	r2, r7, #12
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f00a f81b 	bl	800c05a <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_I2C_MemTxCpltCallback+0x32>
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <HAL_I2C_MemTxCpltCallback+0x40>)
 800202c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	f3bf 8f6f 	isb	sy
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200094a0 	.word	0x200094a0
 8002048:	e000ed04 	.word	0xe000ed04

0800204c <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = false;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(BinSemI2CCBHandle, &xHigherPriorityTaskWoken);
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_I2C_MemRxCpltCallback+0x3c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f107 020c 	add.w	r2, r7, #12
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f009 fff9 	bl	800c05a <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_I2C_MemRxCpltCallback+0x32>
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_I2C_MemRxCpltCallback+0x40>)
 8002070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f3bf 8f4f 	dsb	sy
 800207a:	f3bf 8f6f 	isb	sy
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200094a0 	.word	0x200094a0
 800208c:	e000ed04 	.word	0xe000ed04

08002090 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS (1000));
 8002098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800209c:	f009 f9df 	bl	800b45e <osDelay>
 80020a0:	e7fa      	b.n	8002098 <StartDefaultTask+0x8>
	...

080020a4 <TouchTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TouchTaskEntry */
void TouchTaskEntry(void *argument)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TouchTaskEntry */
  osDelay(pdMS_TO_TICKS (50));
 80020ac:	2032      	movs	r0, #50	; 0x32
 80020ae:	f009 f9d6 	bl	800b45e <osDelay>

  xSemaphoreTake(BinSemI2CCBHandle, pdMS_TO_TICKS(20));
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <TouchTaskEntry+0xa8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2114      	movs	r1, #20
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00a f93b 	bl	800c334 <xQueueSemaphoreTake>

  if (!touchPanelInit())
 80020be:	f7fe fdcf 	bl	8000c60 <touchPanelInit>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00f      	beq.n	80020ee <TouchTaskEntry+0x4a>
  {
    TRACE("ERROR: touchPanelInit() failed");
 80020ce:	f000 fe5b 	bl	8002d88 <HAL_GetTick>
 80020d2:	ee07 0a90 	vmov	s15, r0
 80020d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020da:	ee17 0a90 	vmov	r0, s15
 80020de:	f7fe fa53 	bl	8000588 <__aeabi_f2d>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	481a      	ldr	r0, [pc, #104]	; (8002150 <TouchTaskEntry+0xac>)
 80020e8:	f7fe fc22 	bl	8000930 <serialPrintf>
    asm("bkpt 255");
 80020ec:	beff      	bkpt	0x00ff
  }

  /* Infinite loop */
  for(;;)
  {
    if (HAL_GPIO_ReadPin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin) == GPIO_PIN_SET)
 80020ee:	2104      	movs	r1, #4
 80020f0:	4818      	ldr	r0, [pc, #96]	; (8002154 <TouchTaskEntry+0xb0>)
 80020f2:	f001 ff97 	bl	8004024 <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <TouchTaskEntry+0x5c>
   	{
    	touchPanelRead();
 80020fc:	f7fe ff4a 	bl	8000f94 <touchPanelRead>
   	}

   	// Check Power-Off
   	if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8002100:	2101      	movs	r1, #1
 8002102:	4815      	ldr	r0, [pc, #84]	; (8002158 <TouchTaskEntry+0xb4>)
 8002104:	f001 ff8e 	bl	8004024 <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d114      	bne.n	8002138 <TouchTaskEntry+0x94>
   	{
   		//HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
   		//HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
   		HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	2120      	movs	r1, #32
 8002112:	4812      	ldr	r0, [pc, #72]	; (800215c <TouchTaskEntry+0xb8>)
 8002114:	f001 ff9e 	bl	8004054 <HAL_GPIO_WritePin>

   		// Check again in 1 second
   		osDelay(pdMS_TO_TICKS (1000));
 8002118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800211c:	f009 f99f 	bl	800b45e <osDelay>
   		if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8002120:	2101      	movs	r1, #1
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <TouchTaskEntry+0xb4>)
 8002124:	f001 ff7e 	bl	8004024 <HAL_GPIO_ReadPin>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d104      	bne.n	8002138 <TouchTaskEntry+0x94>
   		{
   			HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_RESET); // Turn off power
 800212e:	2200      	movs	r2, #0
 8002130:	2102      	movs	r1, #2
 8002132:	4809      	ldr	r0, [pc, #36]	; (8002158 <TouchTaskEntry+0xb4>)
 8002134:	f001 ff8e 	bl	8004054 <HAL_GPIO_WritePin>
   		}
   	}
   	HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	2120      	movs	r1, #32
 800213c:	4807      	ldr	r0, [pc, #28]	; (800215c <TouchTaskEntry+0xb8>)
 800213e:	f001 ff89 	bl	8004054 <HAL_GPIO_WritePin>

   	osDelay(pdMS_TO_TICKS (50));
 8002142:	2032      	movs	r0, #50	; 0x32
 8002144:	f009 f98b 	bl	800b45e <osDelay>
    if (HAL_GPIO_ReadPin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin) == GPIO_PIN_SET)
 8002148:	e7d1      	b.n	80020ee <TouchTaskEntry+0x4a>
 800214a:	bf00      	nop
 800214c:	200094a0 	.word	0x200094a0
 8002150:	0800f700 	.word	0x0800f700
 8002154:	40021c00 	.word	0x40021c00
 8002158:	40022400 	.word	0x40022400
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002172:	f000 fdf5 	bl	8002d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40010000 	.word	0x40010000

08002184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002188:	b672      	cpsid	i
}
 800218a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800218c:	e7fe      	b.n	800218c <Error_Handler+0x8>
	...

08002190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_MspInit+0x54>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_MspInit+0x54>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_MspInit+0x54>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_MspInit+0x54>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_MspInit+0x54>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_MspInit+0x54>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	210f      	movs	r1, #15
 80021d2:	f06f 0001 	mvn.w	r0, #1
 80021d6:	f001 f931 	bl	800343c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a31      	ldr	r2, [pc, #196]	; (80022cc <HAL_ADC_MspInit+0xe4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d15c      	bne.n	80022c4 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a2f      	ldr	r2, [pc, #188]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002214:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002230:	f043 0320 	orr.w	r3, r3, #32
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_ADC_MspInit+0xe8>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = SLIDER1_Pin|VBattery_Pin|EX1_Pin|EX2_Pin;
 800227a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002280:	2303      	movs	r3, #3
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002288:	f107 031c 	add.w	r3, r7, #28
 800228c:	4619      	mov	r1, r3
 800228e:	4811      	ldr	r0, [pc, #68]	; (80022d4 <HAL_ADC_MspInit+0xec>)
 8002290:	f001 fd1c 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin|POS6_Pin|POT2_Pin|SLIDER2_Pin;
 8002294:	230f      	movs	r3, #15
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	480c      	ldr	r0, [pc, #48]	; (80022d8 <HAL_ADC_MspInit+0xf0>)
 80022a8:	f001 fd10 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = StickLH_Pin|StickLV_Pin|StickRH_Pin|StickRV_Pin;
 80022ac:	230f      	movs	r3, #15
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022b0:	2303      	movs	r3, #3
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 031c 	add.w	r3, r7, #28
 80022bc:	4619      	mov	r1, r3
 80022be:	4807      	ldr	r0, [pc, #28]	; (80022dc <HAL_ADC_MspInit+0xf4>)
 80022c0:	f001 fd04 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80022c4:	bf00      	nop
 80022c6:	3730      	adds	r7, #48	; 0x30
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40012200 	.word	0x40012200
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40021400 	.word	0x40021400
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020000 	.word	0x40020000

080022e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <HAL_DAC_MspInit+0x7c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d127      	bne.n	8002352 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_DAC_MspInit+0x80>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_DAC_MspInit+0x80>)
 800230c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_DAC_MspInit+0x80>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <HAL_DAC_MspInit+0x80>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <HAL_DAC_MspInit+0x80>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_DAC_MspInit+0x80>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Audio_Pin;
 800233a:	2310      	movs	r3, #16
 800233c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233e:	2303      	movs	r3, #3
 8002340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Audio_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_DAC_MspInit+0x84>)
 800234e:	f001 fcbd 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	; 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40007400 	.word	0x40007400
 8002360:	40023800 	.word	0x40023800
 8002364:	40020000 	.word	0x40020000

08002368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0314 	add.w	r3, r7, #20
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a4c      	ldr	r2, [pc, #304]	; (80024b8 <HAL_I2C_MspInit+0x150>)
 8002386:	4293      	cmp	r3, r2
 8002388:	f040 8091 	bne.w	80024ae <HAL_I2C_MspInit+0x146>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_I2C_MspInit+0x154>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a49      	ldr	r2, [pc, #292]	; (80024bc <HAL_I2C_MspInit+0x154>)
 8002396:	f043 0302 	orr.w	r3, r3, #2
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_I2C_MspInit+0x154>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ae:	2312      	movs	r3, #18
 80023b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b6:	2303      	movs	r3, #3
 80023b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023ba:	2304      	movs	r3, #4
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4619      	mov	r1, r3
 80023c4:	483e      	ldr	r0, [pc, #248]	; (80024c0 <HAL_I2C_MspInit+0x158>)
 80023c6:	f001 fc81 	bl	8003ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_I2C_MspInit+0x154>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a3a      	ldr	r2, [pc, #232]	; (80024bc <HAL_I2C_MspInit+0x154>)
 80023d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_I2C_MspInit+0x154>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80023e6:	4b37      	ldr	r3, [pc, #220]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 80023e8:	4a37      	ldr	r2, [pc, #220]	; (80024c8 <HAL_I2C_MspInit+0x160>)
 80023ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80023ec:	4b35      	ldr	r3, [pc, #212]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 80023ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023f4:	4b33      	ldr	r3, [pc, #204]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fa:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002400:	4b30      	ldr	r3, [pc, #192]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 8002402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002406:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002408:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 800240a:	2200      	movs	r2, #0
 800240c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800241a:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 800241c:	2200      	movs	r2, #0
 800241e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002420:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 8002422:	2200      	movs	r2, #0
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002426:	4827      	ldr	r0, [pc, #156]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 8002428:	f001 f8a4 	bl	8003574 <HAL_DMA_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002432:	f7ff fea7 	bl	8002184 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
 800243c:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <HAL_I2C_MspInit+0x15c>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <HAL_I2C_MspInit+0x164>)
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_I2C_MspInit+0x168>)
 8002446:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002448:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_I2C_MspInit+0x164>)
 800244a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800244e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002450:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <HAL_I2C_MspInit+0x164>)
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002456:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_I2C_MspInit+0x164>)
 8002458:	2200      	movs	r2, #0
 800245a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800245c:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_I2C_MspInit+0x164>)
 800245e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002462:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_I2C_MspInit+0x164>)
 8002466:	2200      	movs	r2, #0
 8002468:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <HAL_I2C_MspInit+0x164>)
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_I2C_MspInit+0x164>)
 8002472:	2200      	movs	r2, #0
 8002474:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_I2C_MspInit+0x164>)
 8002478:	2200      	movs	r2, #0
 800247a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800247c:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_I2C_MspInit+0x164>)
 800247e:	2200      	movs	r2, #0
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002482:	4812      	ldr	r0, [pc, #72]	; (80024cc <HAL_I2C_MspInit+0x164>)
 8002484:	f001 f876 	bl	8003574 <HAL_DMA_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800248e:	f7ff fe79 	bl	8002184 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_I2C_MspInit+0x164>)
 8002496:	635a      	str	r2, [r3, #52]	; 0x34
 8002498:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <HAL_I2C_MspInit+0x164>)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	201f      	movs	r0, #31
 80024a4:	f000 ffca 	bl	800343c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80024a8:	201f      	movs	r0, #31
 80024aa:	f000 ffe3 	bl	8003474 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40005400 	.word	0x40005400
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020400 	.word	0x40020400
 80024c4:	200094a4 	.word	0x200094a4
 80024c8:	40026010 	.word	0x40026010
 80024cc:	20008e64 	.word	0x20008e64
 80024d0:	400260a0 	.word	0x400260a0

080024d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a38      	ldr	r2, [pc, #224]	; (80025d4 <HAL_LTDC_MspInit+0x100>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d169      	bne.n	80025ca <HAL_LTDC_MspInit+0xf6>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	4b37      	ldr	r3, [pc, #220]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a36      	ldr	r2, [pc, #216]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b29      	ldr	r3, [pc, #164]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 8002554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <HAL_LTDC_MspInit+0x104>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002566:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002578:	230e      	movs	r3, #14
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800257c:	f107 031c 	add.w	r3, r7, #28
 8002580:	4619      	mov	r1, r3
 8002582:	4816      	ldr	r0, [pc, #88]	; (80025dc <HAL_LTDC_MspInit+0x108>)
 8002584:	f001 fba2 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002588:	f648 637c 	movw	r3, #36476	; 0x8e7c
 800258c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800259a:	230e      	movs	r3, #14
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800259e:	f107 031c 	add.w	r3, r7, #28
 80025a2:	4619      	mov	r1, r3
 80025a4:	480e      	ldr	r0, [pc, #56]	; (80025e0 <HAL_LTDC_MspInit+0x10c>)
 80025a6:	f001 fb91 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025aa:	23ff      	movs	r3, #255	; 0xff
 80025ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b6:	2300      	movs	r3, #0
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025ba:	230e      	movs	r3, #14
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	4619      	mov	r1, r3
 80025c4:	4807      	ldr	r0, [pc, #28]	; (80025e4 <HAL_LTDC_MspInit+0x110>)
 80025c6:	f001 fb81 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3730      	adds	r7, #48	; 0x30
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40016800 	.word	0x40016800
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40022000 	.word	0x40022000
 80025e0:	40022400 	.word	0x40022400
 80025e4:	40022800 	.word	0x40022800

080025e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <HAL_SD_MspInit+0xc0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d14a      	bne.n	80026a0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_SD_MspInit+0xc4>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_SD_MspInit+0xc4>)
 8002614:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_SD_MspInit+0xc4>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_SD_MspInit+0xc4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <HAL_SD_MspInit+0xc4>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <HAL_SD_MspInit+0xc4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_SD_MspInit+0xc4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a18      	ldr	r2, [pc, #96]	; (80026ac <HAL_SD_MspInit+0xc4>)
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_SD_MspInit+0xc4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800265e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002662:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002670:	230c      	movs	r3, #12
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <HAL_SD_MspInit+0xc8>)
 800267c:	f001 fb26 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002680:	2304      	movs	r3, #4
 8002682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002690:	230c      	movs	r3, #12
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4806      	ldr	r0, [pc, #24]	; (80026b4 <HAL_SD_MspInit+0xcc>)
 800269c:	f001 fb16 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00

080026b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_SPI_MspInit+0x84>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d12b      	bne.n	8002732 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_SPI_MspInit+0x88>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_SPI_MspInit+0x88>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_SPI_MspInit+0x88>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_SPI_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a10      	ldr	r2, [pc, #64]	; (8002740 <HAL_SPI_MspInit+0x88>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_SPI_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    PI0     ------> SPI2_NSS
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002712:	230f      	movs	r3, #15
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002722:	2305      	movs	r3, #5
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <HAL_SPI_MspInit+0x8c>)
 800272e:	f001 facd 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40003800 	.word	0x40003800
 8002740:	40023800 	.word	0x40023800
 8002744:	40022000 	.word	0x40022000

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b090      	sub	sp, #64	; 0x40
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a65      	ldr	r2, [pc, #404]	; (80028fc <HAL_UART_MspInit+0x1b4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d12c      	bne.n	80027c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
 800276e:	4b64      	ldr	r3, [pc, #400]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a63      	ldr	r2, [pc, #396]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002774:	f043 0310 	orr.w	r3, r3, #16
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b61      	ldr	r3, [pc, #388]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	4b5d      	ldr	r3, [pc, #372]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a5c      	ldr	r2, [pc, #368]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b5a      	ldr	r3, [pc, #360]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a2:	23c0      	movs	r3, #192	; 0xc0
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b2:	2307      	movs	r3, #7
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ba:	4619      	mov	r1, r3
 80027bc:	4851      	ldr	r0, [pc, #324]	; (8002904 <HAL_UART_MspInit+0x1bc>)
 80027be:	f001 fa85 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027c2:	e096      	b.n	80028f2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <HAL_UART_MspInit+0x1c0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d12c      	bne.n	8002828 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	4b4b      	ldr	r3, [pc, #300]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a4a      	ldr	r2, [pc, #296]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b48      	ldr	r3, [pc, #288]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a43      	ldr	r2, [pc, #268]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002806:	2360      	movs	r3, #96	; 0x60
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002816:	2307      	movs	r3, #7
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800281a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281e:	4619      	mov	r1, r3
 8002820:	483a      	ldr	r0, [pc, #232]	; (800290c <HAL_UART_MspInit+0x1c4>)
 8002822:	f001 fa53 	bl	8003ccc <HAL_GPIO_Init>
}
 8002826:	e064      	b.n	80028f2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a38      	ldr	r2, [pc, #224]	; (8002910 <HAL_UART_MspInit+0x1c8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d12d      	bne.n	800288e <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b28      	ldr	r3, [pc, #160]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800286a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800287c:	2307      	movs	r3, #7
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002884:	4619      	mov	r1, r3
 8002886:	481f      	ldr	r0, [pc, #124]	; (8002904 <HAL_UART_MspInit+0x1bc>)
 8002888:	f001 fa20 	bl	8003ccc <HAL_GPIO_Init>
}
 800288c:	e031      	b.n	80028f2 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_UART_MspInit+0x1cc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d12c      	bne.n	80028f2 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	4a17      	ldr	r2, [pc, #92]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80028a2:	f043 0320 	orr.w	r3, r3, #32
 80028a6:	6453      	str	r3, [r2, #68]	; 0x44
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80028aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80028be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c2:	6313      	str	r3, [r2, #48]	; 0x30
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_UART_MspInit+0x1b8>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80028d0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028de:	2303      	movs	r3, #3
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028e2:	2308      	movs	r3, #8
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ea:	4619      	mov	r1, r3
 80028ec:	480a      	ldr	r0, [pc, #40]	; (8002918 <HAL_UART_MspInit+0x1d0>)
 80028ee:	f001 f9ed 	bl	8003ccc <HAL_GPIO_Init>
}
 80028f2:	bf00      	nop
 80028f4:	3740      	adds	r7, #64	; 0x40
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40011000 	.word	0x40011000
 8002900:	40023800 	.word	0x40023800
 8002904:	40020400 	.word	0x40020400
 8002908:	40004400 	.word	0x40004400
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40004800 	.word	0x40004800
 8002914:	40011400 	.word	0x40011400
 8002918:	40021800 	.word	0x40021800

0800291c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800293c:	d13f      	bne.n	80029be <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <HAL_PCD_MspInit+0xac>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a20      	ldr	r2, [pc, #128]	; (80029c8 <HAL_PCD_MspInit+0xac>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <HAL_PCD_MspInit+0xac>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800295a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	4817      	ldr	r0, [pc, #92]	; (80029cc <HAL_PCD_MspInit+0xb0>)
 8002970:	f001 f9ac 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002974:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002986:	230a      	movs	r3, #10
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	480e      	ldr	r0, [pc, #56]	; (80029cc <HAL_PCD_MspInit+0xb0>)
 8002992:	f001 f99b 	bl	8003ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_PCD_MspInit+0xac>)
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <HAL_PCD_MspInit+0xac>)
 800299c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a0:	6353      	str	r3, [r2, #52]	; 0x34
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_PCD_MspInit+0xac>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <HAL_PCD_MspInit+0xac>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_PCD_MspInit+0xac>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020000 	.word	0x40020000

080029d0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80029e4:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_FMC_MspInit+0x104>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d16f      	bne.n	8002acc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80029ec:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_FMC_MspInit+0x104>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_FMC_MspInit+0x108>)
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	4a37      	ldr	r2, [pc, #220]	; (8002ad8 <HAL_FMC_MspInit+0x108>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6393      	str	r3, [r2, #56]	; 0x38
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_FMC_MspInit+0x108>)
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a12:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a20:	230c      	movs	r3, #12
 8002a22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	4619      	mov	r1, r3
 8002a28:	482c      	ldr	r0, [pc, #176]	; (8002adc <HAL_FMC_MspInit+0x10c>)
 8002a2a:	f001 f94f 	bl	8003ccc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a2e:	2360      	movs	r3, #96	; 0x60
 8002a30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a3e:	230c      	movs	r3, #12
 8002a40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4826      	ldr	r0, [pc, #152]	; (8002ae0 <HAL_FMC_MspInit+0x110>)
 8002a48:	f001 f940 	bl	8003ccc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002a4c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002a50:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a5e:	230c      	movs	r3, #12
 8002a60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	481f      	ldr	r0, [pc, #124]	; (8002ae4 <HAL_FMC_MspInit+0x114>)
 8002a68:	f001 f930 	bl	8003ccc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002a6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002a70:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a7e:	230c      	movs	r3, #12
 8002a80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4818      	ldr	r0, [pc, #96]	; (8002ae8 <HAL_FMC_MspInit+0x118>)
 8002a88:	f001 f920 	bl	8003ccc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002a8c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a90:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4811      	ldr	r0, [pc, #68]	; (8002aec <HAL_FMC_MspInit+0x11c>)
 8002aa8:	f001 f910 	bl	8003ccc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002aac:	2320      	movs	r3, #32
 8002aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002abc:	230c      	movs	r3, #12
 8002abe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	480a      	ldr	r0, [pc, #40]	; (8002af0 <HAL_FMC_MspInit+0x120>)
 8002ac6:	f001 f901 	bl	8003ccc <HAL_GPIO_Init>
 8002aca:	e000      	b.n	8002ace <HAL_FMC_MspInit+0xfe>
    return;
 8002acc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000094 	.word	0x20000094
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40021400 	.word	0x40021400
 8002ae0:	40021c00 	.word	0x40021c00
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40020c00 	.word	0x40020c00
 8002af0:	40020400 	.word	0x40020400

08002af4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002afc:	f7ff ff68 	bl	80029d0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	; 0x30
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	2019      	movs	r0, #25
 8002b1e:	f000 fc8d 	bl	800343c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b22:	2019      	movs	r0, #25
 8002b24:	f000 fca6 	bl	8003474 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <HAL_InitTick+0xa4>)
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_InitTick+0xa4>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6453      	str	r3, [r2, #68]	; 0x44
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_InitTick+0xa4>)
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b44:	f107 0210 	add.w	r2, r7, #16
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fea0 	bl	8007894 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002b54:	f004 fe8a 	bl	800786c <HAL_RCC_GetPCLK2Freq>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <HAL_InitTick+0xa8>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0c9b      	lsrs	r3, r3, #18
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <HAL_InitTick+0xac>)
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <HAL_InitTick+0xb0>)
 8002b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_InitTick+0xac>)
 8002b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_InitTick+0xac>)
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_InitTick+0xac>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_InitTick+0xac>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002b8c:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <HAL_InitTick+0xac>)
 8002b8e:	f006 f9c3 	bl	8008f18 <HAL_TIM_Base_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002b98:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <HAL_InitTick+0xac>)
 8002b9a:	f006 fa17 	bl	8008fcc <HAL_TIM_Base_Start_IT>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	e000      	b.n	8002ba4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3730      	adds	r7, #48	; 0x30
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	431bde83 	.word	0x431bde83
 8002bb4:	20009658 	.word	0x20009658
 8002bb8:	40010000 	.word	0x40010000

08002bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bc0:	e7fe      	b.n	8002bc0 <NMI_Handler+0x4>

08002bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc6:	e7fe      	b.n	8002bc6 <HardFault_Handler+0x4>

08002bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bcc:	e7fe      	b.n	8002bcc <MemManage_Handler+0x4>

08002bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd2:	e7fe      	b.n	8002bd2 <BusFault_Handler+0x4>

08002bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <UsageFault_Handler+0x4>

08002bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <DMA1_Stream0_IRQHandler+0x10>)
 8002bee:	f000 fde9 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200094a4 	.word	0x200094a4

08002bfc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <DMA1_Stream6_IRQHandler+0x10>)
 8002c02:	f000 fddf 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20008e64 	.word	0x20008e64

08002c10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c16:	f006 fa49 	bl	80090ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20009658 	.word	0x20009658

08002c24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <I2C1_EV_IRQHandler+0x10>)
 8002c2a:	f001 fe4d 	bl	80048c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20008ec4 	.word	0x20008ec4

08002c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <_sbrk+0x5c>)
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <_sbrk+0x60>)
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <_sbrk+0x64>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <_sbrk+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c68:	f00b fe58 	bl	800e91c <__errno>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	220c      	movs	r2, #12
 8002c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e009      	b.n	8002c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <_sbrk+0x64>)
 8002c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20030000 	.word	0x20030000
 8002c98:	00000400 	.word	0x00000400
 8002c9c:	20000098 	.word	0x20000098
 8002ca0:	20009b60 	.word	0x20009b60

08002ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <SystemInit+0x20>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <SystemInit+0x20>)
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d00 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cce:	490e      	ldr	r1, [pc, #56]	; (8002d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd4:	e002      	b.n	8002cdc <LoopCopyDataInit>

08002cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cda:	3304      	adds	r3, #4

08002cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce0:	d3f9      	bcc.n	8002cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ce4:	4c0b      	ldr	r4, [pc, #44]	; (8002d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce8:	e001      	b.n	8002cee <LoopFillZerobss>

08002cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cec:	3204      	adds	r2, #4

08002cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf0:	d3fb      	bcc.n	8002cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cf2:	f7ff ffd7 	bl	8002ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cf6:	f00b fe17 	bl	800e928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfa:	f7fe fb21 	bl	8001340 <main>
  bx  lr    
 8002cfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d08:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002d0c:	0800f8c8 	.word	0x0800f8c8
  ldr r2, =_sbss
 8002d10:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002d14:	20009b60 	.word	0x20009b60

08002d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d18:	e7fe      	b.n	8002d18 <ADC_IRQHandler>
	...

08002d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_Init+0x40>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <HAL_Init+0x40>)
 8002d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_Init+0x40>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <HAL_Init+0x40>)
 8002d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_Init+0x40>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <HAL_Init+0x40>)
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f000 fb6e 	bl	8003426 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff fedc 	bl	8002b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d50:	f7ff fa1e 	bl	8002190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008
 8002d84:	200096a0 	.word	0x200096a0

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	200096a0 	.word	0x200096a0

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff ffee 	bl	8002d88 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d005      	beq.n	8002dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_Delay+0x44>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f7      	bhi.n	8002dc8 <HAL_Delay+0x28>
  {
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008

08002de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e033      	b.n	8002e66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff f9ee 	bl	80021e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d118      	bne.n	8002e58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e2e:	f023 0302 	bic.w	r3, r3, #2
 8002e32:	f043 0202 	orr.w	r2, r3, #2
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f94a 	bl	80030d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
 8002e56:	e001      	b.n	8002e5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e113      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x244>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d925      	bls.n	8002ee8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68d9      	ldr	r1, [r3, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b1e      	subs	r3, #30
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68d9      	ldr	r1, [r3, #12]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4403      	add	r3, r0
 8002eda:	3b1e      	subs	r3, #30
 8002edc:	409a      	lsls	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	e022      	b.n	8002f2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6919      	ldr	r1, [r3, #16]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	2207      	movs	r2, #7
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	400a      	ands	r2, r1
 8002f0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6919      	ldr	r1, [r3, #16]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4403      	add	r3, r0
 8002f24:	409a      	lsls	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d824      	bhi.n	8002f80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	3b05      	subs	r3, #5
 8002f48:	221f      	movs	r2, #31
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	400a      	ands	r2, r1
 8002f56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b05      	subs	r3, #5
 8002f72:	fa00 f203 	lsl.w	r2, r0, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f7e:	e04c      	b.n	800301a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d824      	bhi.n	8002fd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	3b23      	subs	r3, #35	; 0x23
 8002f9a:	221f      	movs	r2, #31
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3b23      	subs	r3, #35	; 0x23
 8002fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd0:	e023      	b.n	800301a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3b41      	subs	r3, #65	; 0x41
 8002fe4:	221f      	movs	r2, #31
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4618      	mov	r0, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	3b41      	subs	r3, #65	; 0x41
 800300e:	fa00 f203 	lsl.w	r2, r0, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_ADC_ConfigChannel+0x250>)
 800301c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <HAL_ADC_ConfigChannel+0x254>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10f      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1d8>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b12      	cmp	r3, #18
 800302e:	d10b      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_ADC_ConfigChannel+0x254>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d12b      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x23a>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_ADC_ConfigChannel+0x258>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d003      	beq.n	8003064 <HAL_ADC_ConfigChannel+0x1f4>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b11      	cmp	r3, #17
 8003062:	d122      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <HAL_ADC_ConfigChannel+0x258>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d111      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_ADC_ConfigChannel+0x25c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <HAL_ADC_ConfigChannel+0x260>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	0c9a      	lsrs	r2, r3, #18
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800309c:	e002      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f9      	bne.n	800309e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40012300 	.word	0x40012300
 80030c4:	40012000 	.word	0x40012000
 80030c8:	10000012 	.word	0x10000012
 80030cc:	20000000 	.word	0x20000000
 80030d0:	431bde83 	.word	0x431bde83

080030d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030dc:	4b79      	ldr	r3, [pc, #484]	; (80032c4 <ADC_Init+0x1f0>)
 80030de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	021a      	lsls	r2, r3, #8
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800312c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6899      	ldr	r1, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	4a58      	ldr	r2, [pc, #352]	; (80032c8 <ADC_Init+0x1f4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d022      	beq.n	80031b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800317a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800319c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	e00f      	b.n	80031d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0202 	bic.w	r2, r2, #2
 80031e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6899      	ldr	r1, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7e1b      	ldrb	r3, [r3, #24]
 80031ec:	005a      	lsls	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01b      	beq.n	8003238 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800321e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	3b01      	subs	r3, #1
 800322c:	035a      	lsls	r2, r3, #13
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	e007      	b.n	8003248 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003246:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	3b01      	subs	r3, #1
 8003264:	051a      	lsls	r2, r3, #20
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800327c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800328a:	025a      	lsls	r2, r3, #9
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6899      	ldr	r1, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	029a      	lsls	r2, r3, #10
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40012300 	.word	0x40012300
 80032c8:	0f000001 	.word	0x0f000001

080032cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e8:	4013      	ands	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fe:	4a04      	ldr	r2, [pc, #16]	; (8003310 <__NVIC_SetPriorityGrouping+0x44>)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	60d3      	str	r3, [r2, #12]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003318:	4b04      	ldr	r3, [pc, #16]	; (800332c <__NVIC_GetPriorityGrouping+0x18>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	0a1b      	lsrs	r3, r3, #8
 800331e:	f003 0307 	and.w	r3, r3, #7
}
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	2b00      	cmp	r3, #0
 8003340:	db0b      	blt.n	800335a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4907      	ldr	r1, [pc, #28]	; (8003368 <__NVIC_EnableIRQ+0x38>)
 800334a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2001      	movs	r0, #1
 8003352:	fa00 f202 	lsl.w	r2, r0, r2
 8003356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100

0800336c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	6039      	str	r1, [r7, #0]
 8003376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337c:	2b00      	cmp	r3, #0
 800337e:	db0a      	blt.n	8003396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	b2da      	uxtb	r2, r3
 8003384:	490c      	ldr	r1, [pc, #48]	; (80033b8 <__NVIC_SetPriority+0x4c>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	0112      	lsls	r2, r2, #4
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	440b      	add	r3, r1
 8003390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003394:	e00a      	b.n	80033ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <__NVIC_SetPriority+0x50>)
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	3b04      	subs	r3, #4
 80033a4:	0112      	lsls	r2, r2, #4
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	440b      	add	r3, r1
 80033aa:	761a      	strb	r2, [r3, #24]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100
 80033bc:	e000ed00 	.word	0xe000ed00

080033c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f1c3 0307 	rsb	r3, r3, #7
 80033da:	2b04      	cmp	r3, #4
 80033dc:	bf28      	it	cs
 80033de:	2304      	movcs	r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d902      	bls.n	80033f0 <NVIC_EncodePriority+0x30>
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3b03      	subs	r3, #3
 80033ee:	e000      	b.n	80033f2 <NVIC_EncodePriority+0x32>
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	401a      	ands	r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003408:	f04f 31ff 	mov.w	r1, #4294967295
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43d9      	mvns	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003418:	4313      	orrs	r3, r2
         );
}
 800341a:	4618      	mov	r0, r3
 800341c:	3724      	adds	r7, #36	; 0x24
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ff4c 	bl	80032cc <__NVIC_SetPriorityGrouping>
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800344e:	f7ff ff61 	bl	8003314 <__NVIC_GetPriorityGrouping>
 8003452:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	6978      	ldr	r0, [r7, #20]
 800345a:	f7ff ffb1 	bl	80033c0 <NVIC_EncodePriority>
 800345e:	4602      	mov	r2, r0
 8003460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003464:	4611      	mov	r1, r2
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ff80 	bl	800336c <__NVIC_SetPriority>
}
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff ff54 	bl	8003330 <__NVIC_EnableIRQ>
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e014      	b.n	80034cc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	791b      	ldrb	r3, [r3, #4]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe ff14 	bl	80022e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	795b      	ldrb	r3, [r3, #5]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_DAC_ConfigChannel+0x18>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e03c      	b.n	8003566 <HAL_DAC_ConfigChannel+0x92>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2202      	movs	r2, #2
 80034f6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	f640 72fe 	movw	r2, #4094	; 0xffe
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4013      	ands	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6819      	ldr	r1, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	22c0      	movs	r2, #192	; 0xc0
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003580:	f7ff fc02 	bl	8002d88 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e099      	b.n	80036c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b0:	e00f      	b.n	80035d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035b2:	f7ff fbe9 	bl	8002d88 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d908      	bls.n	80035d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2203      	movs	r2, #3
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e078      	b.n	80036c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e8      	bne.n	80035b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4b38      	ldr	r3, [pc, #224]	; (80036cc <HAL_DMA_Init+0x158>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2b04      	cmp	r3, #4
 800362a:	d107      	bne.n	800363c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	4313      	orrs	r3, r2
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 0307 	bic.w	r3, r3, #7
 8003652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b04      	cmp	r3, #4
 8003664:	d117      	bne.n	8003696 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 faab 	bl	8003bd4 <DMA_CheckFifoParam>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003692:	2301      	movs	r3, #1
 8003694:	e016      	b.n	80036c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa62 	bl	8003b68 <DMA_CalcBaseAndBitshift>
 80036a4:	4603      	mov	r3, r0
 80036a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	223f      	movs	r2, #63	; 0x3f
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	f010803f 	.word	0xf010803f

080036d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_DMA_Start_IT+0x26>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e040      	b.n	8003778 <HAL_DMA_Start_IT+0xa8>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d12f      	bne.n	800376a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2202      	movs	r2, #2
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f9f4 	bl	8003b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	223f      	movs	r2, #63	; 0x3f
 800372a:	409a      	lsls	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0216 	orr.w	r2, r2, #22
 800373e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0208 	orr.w	r2, r2, #8
 8003756:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e005      	b.n	8003776 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d004      	beq.n	800379e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e00c      	b.n	80037b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2205      	movs	r2, #5
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037d0:	4b92      	ldr	r3, [pc, #584]	; (8003a1c <HAL_DMA_IRQHandler+0x258>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a92      	ldr	r2, [pc, #584]	; (8003a20 <HAL_DMA_IRQHandler+0x25c>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a9b      	lsrs	r3, r3, #10
 80037dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	2208      	movs	r2, #8
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01a      	beq.n	8003830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0204 	bic.w	r2, r2, #4
 8003816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	2208      	movs	r2, #8
 800381e:	409a      	lsls	r2, r3
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	2201      	movs	r2, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	f043 0202 	orr.w	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	2204      	movs	r2, #4
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2204      	movs	r2, #4
 800388a:	409a      	lsls	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2210      	movs	r2, #16
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d043      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d03c      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	2210      	movs	r2, #16
 80038c0:	409a      	lsls	r2, r3
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d024      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
 80038f2:	e01f      	b.n	8003934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01b      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
 8003904:	e016      	b.n	8003934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0208 	bic.w	r2, r2, #8
 8003922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	2220      	movs	r2, #32
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 808e 	beq.w	8003a62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8086 	beq.w	8003a62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	2220      	movs	r2, #32
 800395c:	409a      	lsls	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b05      	cmp	r3, #5
 800396c:	d136      	bne.n	80039dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0216 	bic.w	r2, r2, #22
 800397c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <HAL_DMA_IRQHandler+0x1da>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0208 	bic.w	r2, r2, #8
 80039ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	223f      	movs	r2, #63	; 0x3f
 80039b4:	409a      	lsls	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d07d      	beq.n	8003ace <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
        }
        return;
 80039da:	e078      	b.n	8003ace <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01c      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d108      	bne.n	8003a0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d030      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e02b      	b.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
 8003a1a:	e022      	b.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0210 	bic.w	r2, r2, #16
 8003a40:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d032      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d022      	beq.n	8003abc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2205      	movs	r2, #5
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3301      	adds	r3, #1
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d307      	bcc.n	8003aaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f2      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x2ca>
 8003aa8:	e000      	b.n	8003aac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003aaa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
 8003acc:	e000      	b.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ace:	bf00      	nop
    }
  }
}
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop

08003ad8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae6:	b2db      	uxtb	r3, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b40      	cmp	r3, #64	; 0x40
 8003b38:	d108      	bne.n	8003b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b4a:	e007      	b.n	8003b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	60da      	str	r2, [r3, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	3b10      	subs	r3, #16
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <DMA_CalcBaseAndBitshift+0x64>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	091b      	lsrs	r3, r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b82:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d909      	bls.n	8003baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	1d1a      	adds	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8003ba8:	e007      	b.n	8003bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	aaaaaaab 	.word	0xaaaaaaab
 8003bd0:	0800f868 	.word	0x0800f868

08003bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d11f      	bne.n	8003c2e <DMA_CheckFifoParam+0x5a>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d856      	bhi.n	8003ca2 <DMA_CheckFifoParam+0xce>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <DMA_CheckFifoParam+0x28>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c1f 	.word	0x08003c1f
 8003c04:	08003c0d 	.word	0x08003c0d
 8003c08:	08003ca3 	.word	0x08003ca3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d046      	beq.n	8003ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c1c:	e043      	b.n	8003ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c26:	d140      	bne.n	8003caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2c:	e03d      	b.n	8003caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c36:	d121      	bne.n	8003c7c <DMA_CheckFifoParam+0xa8>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d837      	bhi.n	8003cae <DMA_CheckFifoParam+0xda>
 8003c3e:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <DMA_CheckFifoParam+0x70>)
 8003c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c5b 	.word	0x08003c5b
 8003c4c:	08003c55 	.word	0x08003c55
 8003c50:	08003c6d 	.word	0x08003c6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e030      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d025      	beq.n	8003cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6a:	e022      	b.n	8003cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c74:	d11f      	bne.n	8003cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c7a:	e01c      	b.n	8003cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d903      	bls.n	8003c8a <DMA_CheckFifoParam+0xb6>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d003      	beq.n	8003c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c88:	e018      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8e:	e015      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca0:	e00b      	b.n	8003cba <DMA_CheckFifoParam+0xe6>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e00a      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e008      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003caa:	bf00      	nop
 8003cac:	e006      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
    }
  } 
  
  return status; 
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop

08003ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b089      	sub	sp, #36	; 0x24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	e177      	b.n	8003fd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ce8:	2201      	movs	r2, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	f040 8166 	bne.w	8003fd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d005      	beq.n	8003d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d130      	bne.n	8003d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d017      	beq.n	8003dbc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2203      	movs	r2, #3
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d123      	bne.n	8003e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	220f      	movs	r2, #15
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0203 	and.w	r2, r3, #3
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80c0 	beq.w	8003fd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	4a65      	ldr	r2, [pc, #404]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e60:	6453      	str	r3, [r2, #68]	; 0x44
 8003e62:	4b63      	ldr	r3, [pc, #396]	; (8003ff0 <HAL_GPIO_Init+0x324>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e6e:	4a61      	ldr	r2, [pc, #388]	; (8003ff4 <HAL_GPIO_Init+0x328>)
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	3302      	adds	r3, #2
 8003e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	220f      	movs	r2, #15
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a58      	ldr	r2, [pc, #352]	; (8003ff8 <HAL_GPIO_Init+0x32c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d037      	beq.n	8003f0a <HAL_GPIO_Init+0x23e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a57      	ldr	r2, [pc, #348]	; (8003ffc <HAL_GPIO_Init+0x330>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d031      	beq.n	8003f06 <HAL_GPIO_Init+0x23a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a56      	ldr	r2, [pc, #344]	; (8004000 <HAL_GPIO_Init+0x334>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d02b      	beq.n	8003f02 <HAL_GPIO_Init+0x236>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a55      	ldr	r2, [pc, #340]	; (8004004 <HAL_GPIO_Init+0x338>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d025      	beq.n	8003efe <HAL_GPIO_Init+0x232>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a54      	ldr	r2, [pc, #336]	; (8004008 <HAL_GPIO_Init+0x33c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01f      	beq.n	8003efa <HAL_GPIO_Init+0x22e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a53      	ldr	r2, [pc, #332]	; (800400c <HAL_GPIO_Init+0x340>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d019      	beq.n	8003ef6 <HAL_GPIO_Init+0x22a>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a52      	ldr	r2, [pc, #328]	; (8004010 <HAL_GPIO_Init+0x344>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_GPIO_Init+0x226>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a51      	ldr	r2, [pc, #324]	; (8004014 <HAL_GPIO_Init+0x348>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00d      	beq.n	8003eee <HAL_GPIO_Init+0x222>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a50      	ldr	r2, [pc, #320]	; (8004018 <HAL_GPIO_Init+0x34c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d007      	beq.n	8003eea <HAL_GPIO_Init+0x21e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a4f      	ldr	r2, [pc, #316]	; (800401c <HAL_GPIO_Init+0x350>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_GPIO_Init+0x21a>
 8003ee2:	2309      	movs	r3, #9
 8003ee4:	e012      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003ee6:	230a      	movs	r3, #10
 8003ee8:	e010      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003eea:	2308      	movs	r3, #8
 8003eec:	e00e      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003eee:	2307      	movs	r3, #7
 8003ef0:	e00c      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003ef2:	2306      	movs	r3, #6
 8003ef4:	e00a      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003ef6:	2305      	movs	r3, #5
 8003ef8:	e008      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003efa:	2304      	movs	r3, #4
 8003efc:	e006      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003efe:	2303      	movs	r3, #3
 8003f00:	e004      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e002      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <HAL_GPIO_Init+0x240>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f002 0203 	and.w	r2, r2, #3
 8003f12:	0092      	lsls	r2, r2, #2
 8003f14:	4093      	lsls	r3, r2
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f1c:	4935      	ldr	r1, [pc, #212]	; (8003ff4 <HAL_GPIO_Init+0x328>)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	3302      	adds	r3, #2
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <HAL_GPIO_Init+0x354>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	43db      	mvns	r3, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4013      	ands	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f4e:	4a34      	ldr	r2, [pc, #208]	; (8004020 <HAL_GPIO_Init+0x354>)
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f54:	4b32      	ldr	r3, [pc, #200]	; (8004020 <HAL_GPIO_Init+0x354>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f78:	4a29      	ldr	r2, [pc, #164]	; (8004020 <HAL_GPIO_Init+0x354>)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <HAL_GPIO_Init+0x354>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <HAL_GPIO_Init+0x354>)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fa8:	4b1d      	ldr	r3, [pc, #116]	; (8004020 <HAL_GPIO_Init+0x354>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <HAL_GPIO_Init+0x354>)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	f67f ae84 	bls.w	8003ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	3724      	adds	r7, #36	; 0x24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	40020000 	.word	0x40020000
 8003ffc:	40020400 	.word	0x40020400
 8004000:	40020800 	.word	0x40020800
 8004004:	40020c00 	.word	0x40020c00
 8004008:	40021000 	.word	0x40021000
 800400c:	40021400 	.word	0x40021400
 8004010:	40021800 	.word	0x40021800
 8004014:	40021c00 	.word	0x40021c00
 8004018:	40022000 	.word	0x40022000
 800401c:	40022400 	.word	0x40022400
 8004020:	40013c00 	.word	0x40013c00

08004024 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e001      	b.n	8004046 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
 8004060:	4613      	mov	r3, r2
 8004062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004064:	787b      	ldrb	r3, [r7, #1]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800406a:	887a      	ldrh	r2, [r7, #2]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004070:	e003      	b.n	800407a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004072:	887b      	ldrh	r3, [r7, #2]
 8004074:	041a      	lsls	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	619a      	str	r2, [r3, #24]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e12b      	b.n	80042f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fe f95a 	bl	8002368 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	; 0x24
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040ec:	f003 fbaa 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 80040f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4a81      	ldr	r2, [pc, #516]	; (80042fc <HAL_I2C_Init+0x274>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d807      	bhi.n	800410c <HAL_I2C_Init+0x84>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a80      	ldr	r2, [pc, #512]	; (8004300 <HAL_I2C_Init+0x278>)
 8004100:	4293      	cmp	r3, r2
 8004102:	bf94      	ite	ls
 8004104:	2301      	movls	r3, #1
 8004106:	2300      	movhi	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e006      	b.n	800411a <HAL_I2C_Init+0x92>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a7d      	ldr	r2, [pc, #500]	; (8004304 <HAL_I2C_Init+0x27c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	bf94      	ite	ls
 8004114:	2301      	movls	r3, #1
 8004116:	2300      	movhi	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e0e7      	b.n	80042f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a78      	ldr	r2, [pc, #480]	; (8004308 <HAL_I2C_Init+0x280>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0c9b      	lsrs	r3, r3, #18
 800412c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a6a      	ldr	r2, [pc, #424]	; (80042fc <HAL_I2C_Init+0x274>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d802      	bhi.n	800415c <HAL_I2C_Init+0xd4>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	3301      	adds	r3, #1
 800415a:	e009      	b.n	8004170 <HAL_I2C_Init+0xe8>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	4a69      	ldr	r2, [pc, #420]	; (800430c <HAL_I2C_Init+0x284>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	3301      	adds	r3, #1
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	430b      	orrs	r3, r1
 8004176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004182:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	495c      	ldr	r1, [pc, #368]	; (80042fc <HAL_I2C_Init+0x274>)
 800418c:	428b      	cmp	r3, r1
 800418e:	d819      	bhi.n	80041c4 <HAL_I2C_Init+0x13c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1e59      	subs	r1, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	fbb1 f3f3 	udiv	r3, r1, r3
 800419e:	1c59      	adds	r1, r3, #1
 80041a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041a4:	400b      	ands	r3, r1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_I2C_Init+0x138>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1e59      	subs	r1, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	e051      	b.n	8004264 <HAL_I2C_Init+0x1dc>
 80041c0:	2304      	movs	r3, #4
 80041c2:	e04f      	b.n	8004264 <HAL_I2C_Init+0x1dc>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d111      	bne.n	80041f0 <HAL_I2C_Init+0x168>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1e58      	subs	r0, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	440b      	add	r3, r1
 80041da:	fbb0 f3f3 	udiv	r3, r0, r3
 80041de:	3301      	adds	r3, #1
 80041e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e012      	b.n	8004216 <HAL_I2C_Init+0x18e>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e58      	subs	r0, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	0099      	lsls	r1, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	fbb0 f3f3 	udiv	r3, r0, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Init+0x196>
 800421a:	2301      	movs	r3, #1
 800421c:	e022      	b.n	8004264 <HAL_I2C_Init+0x1dc>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10e      	bne.n	8004244 <HAL_I2C_Init+0x1bc>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1e58      	subs	r0, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	440b      	add	r3, r1
 8004234:	fbb0 f3f3 	udiv	r3, r0, r3
 8004238:	3301      	adds	r3, #1
 800423a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	e00f      	b.n	8004264 <HAL_I2C_Init+0x1dc>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e58      	subs	r0, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	0099      	lsls	r1, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	fbb0 f3f3 	udiv	r3, r0, r3
 800425a:	3301      	adds	r3, #1
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	6809      	ldr	r1, [r1, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6911      	ldr	r1, [r2, #16]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	000186a0 	.word	0x000186a0
 8004300:	001e847f 	.word	0x001e847f
 8004304:	003d08ff 	.word	0x003d08ff
 8004308:	431bde83 	.word	0x431bde83
 800430c:	10624dd3 	.word	0x10624dd3

08004310 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800432e:	f7fe fd2b 	bl	8002d88 <HAL_GetTick>
 8004332:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b20      	cmp	r3, #32
 800433e:	f040 812e 	bne.w	800459e <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004342:	4b99      	ldr	r3, [pc, #612]	; (80045a8 <HAL_I2C_Mem_Write_DMA+0x298>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	08db      	lsrs	r3, r3, #3
 8004348:	4a98      	ldr	r2, [pc, #608]	; (80045ac <HAL_I2C_Mem_Write_DMA+0x29c>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0a1a      	lsrs	r2, r3, #8
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	3b01      	subs	r3, #1
 8004360:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d116      	bne.n	8004396 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0220 	orr.w	r2, r3, #32
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e104      	b.n	80045a0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d0db      	beq.n	800435c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_I2C_Mem_Write_DMA+0xa2>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e0f6      	b.n	80045a0 <HAL_I2C_Mem_Write_DMA+0x290>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d007      	beq.n	80043d8 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2221      	movs	r2, #33	; 0x21
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2240      	movs	r2, #64	; 0x40
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a66      	ldr	r2, [pc, #408]	; (80045b0 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80a9 	beq.w	8004576 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d02a      	beq.n	8004482 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004430:	4a60      	ldr	r2, [pc, #384]	; (80045b4 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8004432:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004438:	4a5f      	ldr	r2, [pc, #380]	; (80045b8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800443a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	2200      	movs	r2, #0
 8004442:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004448:	2200      	movs	r2, #0
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	2200      	movs	r2, #0
 8004452:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004458:	2200      	movs	r2, #0
 800445a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	4619      	mov	r1, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3310      	adds	r3, #16
 800446c:	461a      	mov	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	f7ff f92d 	bl	80036d0 <HAL_DMA_Start_IT>
 8004476:	4603      	mov	r3, r0
 8004478:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800447a:	7efb      	ldrb	r3, [r7, #27]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d166      	bne.n	800454e <HAL_I2C_Mem_Write_DMA+0x23e>
 8004480:	e013      	b.n	80044aa <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e07a      	b.n	80045a0 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80044aa:	88f8      	ldrh	r0, [r7, #6]
 80044ac:	893a      	ldrh	r2, [r7, #8]
 80044ae:	8979      	ldrh	r1, [r7, #10]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	2323      	movs	r3, #35	; 0x23
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	4603      	mov	r3, r0
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f001 fc98 	bl	8005df0 <I2C_RequestMemoryWrite>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d022      	beq.n	800450c <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff f958 	bl	8003780 <HAL_DMA_Abort_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d8:	2200      	movs	r2, #0
 80044da:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e049      	b.n	80045a0 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004538:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004548:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e028      	b.n	80045a0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f043 0210 	orr.w	r2, r3, #16
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e014      	b.n	80045a0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000000 	.word	0x20000000
 80045ac:	14f8b589 	.word	0x14f8b589
 80045b0:	ffff0000 	.word	0xffff0000
 80045b4:	080060ed 	.word	0x080060ed
 80045b8:	08006297 	.word	0x08006297

080045bc <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08c      	sub	sp, #48	; 0x30
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	817b      	strh	r3, [r7, #10]
 80045ce:	460b      	mov	r3, r1
 80045d0:	813b      	strh	r3, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045d6:	f7fe fbd7 	bl	8002d88 <HAL_GetTick>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	f040 8168 	bne.w	80048be <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80045ee:	4b98      	ldr	r3, [pc, #608]	; (8004850 <HAL_I2C_Mem_Read_DMA+0x294>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	08db      	lsrs	r3, r3, #3
 80045f4:	4a97      	ldr	r2, [pc, #604]	; (8004854 <HAL_I2C_Mem_Read_DMA+0x298>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	0a1a      	lsrs	r2, r3, #8
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009a      	lsls	r2, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3b01      	subs	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d116      	bne.n	8004642 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e13e      	b.n	80048c0 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d0db      	beq.n	8004608 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_I2C_Mem_Read_DMA+0xa2>
 800465a:	2302      	movs	r3, #2
 800465c:	e130      	b.n	80048c0 <HAL_I2C_Mem_Read_DMA+0x304>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d007      	beq.n	8004684 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2222      	movs	r2, #34	; 0x22
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a65      	ldr	r2, [pc, #404]	; (8004858 <HAL_I2C_Mem_Read_DMA+0x29c>)
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80ca 	beq.w	8004864 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02c      	beq.n	8004732 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	4a5f      	ldr	r2, [pc, #380]	; (800485c <HAL_I2C_Mem_Read_DMA+0x2a0>)
 80046de:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	4a5e      	ldr	r2, [pc, #376]	; (8004860 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80046e6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	2200      	movs	r2, #0
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	2200      	movs	r2, #0
 80046f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	2200      	movs	r2, #0
 80046fe:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	2200      	movs	r2, #0
 8004706:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3310      	adds	r3, #16
 8004712:	4619      	mov	r1, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	461a      	mov	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471e:	f7fe ffd7 	bl	80036d0 <HAL_DMA_Start_IT>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800472c:	2b00      	cmp	r3, #0
 800472e:	d17b      	bne.n	8004828 <HAL_I2C_Mem_Read_DMA+0x26c>
 8004730:	e013      	b.n	800475a <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0b2      	b.n	80048c0 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800475a:	88f8      	ldrh	r0, [r7, #6]
 800475c:	893a      	ldrh	r2, [r7, #8]
 800475e:	8979      	ldrh	r1, [r7, #10]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	2323      	movs	r3, #35	; 0x23
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	4603      	mov	r3, r0
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f001 fbd6 	bl	8005f1c <I2C_RequestMemoryRead>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d023      	beq.n	80047be <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff f800 	bl	8003780 <HAL_DMA_Abort_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	2200      	movs	r2, #0
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479c:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e080      	b.n	80048c0 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d108      	bne.n	80047d8 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e007      	b.n	80047e8 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004814:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	e048      	b.n	80048ba <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f043 0210 	orr.w	r2, r3, #16
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e037      	b.n	80048c0 <HAL_I2C_Mem_Read_DMA+0x304>
 8004850:	20000000 	.word	0x20000000
 8004854:	14f8b589 	.word	0x14f8b589
 8004858:	ffff0000 	.word	0xffff0000
 800485c:	080060ed 	.word	0x080060ed
 8004860:	08006297 	.word	0x08006297
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004864:	88f8      	ldrh	r0, [r7, #6]
 8004866:	893a      	ldrh	r2, [r7, #8]
 8004868:	8979      	ldrh	r1, [r7, #10]
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	2323      	movs	r3, #35	; 0x23
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	4603      	mov	r3, r0
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f001 fb51 	bl	8005f1c <I2C_RequestMemoryRead>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e01d      	b.n	80048c0 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e000      	b.n	80048c0 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3728      	adds	r7, #40	; 0x28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d003      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x38>
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b40      	cmp	r3, #64	; 0x40
 80048fc:	f040 80bd 	bne.w	8004a7a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10d      	bne.n	8004936 <HAL_I2C_EV_IRQHandler+0x6e>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004920:	d003      	beq.n	800492a <HAL_I2C_EV_IRQHandler+0x62>
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004928:	d101      	bne.n	800492e <HAL_I2C_EV_IRQHandler+0x66>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_I2C_EV_IRQHandler+0x68>
 800492e:	2300      	movs	r3, #0
 8004930:	2b01      	cmp	r3, #1
 8004932:	f000 812e 	beq.w	8004b92 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00c      	beq.n	800495a <HAL_I2C_EV_IRQHandler+0x92>
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	0a5b      	lsrs	r3, r3, #9
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d006      	beq.n	800495a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f001 ff00 	bl	8006752 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fca7 	bl	80052a6 <I2C_Master_SB>
 8004958:	e08e      	b.n	8004a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	08db      	lsrs	r3, r3, #3
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0xb2>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	0a5b      	lsrs	r3, r3, #9
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fd1d 	bl	80053b2 <I2C_Master_ADD10>
 8004978:	e07e      	b.n	8004a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	085b      	lsrs	r3, r3, #1
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_I2C_EV_IRQHandler+0xd2>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	0a5b      	lsrs	r3, r3, #9
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fd37 	bl	8005406 <I2C_Master_ADDR>
 8004998:	e06e      	b.n	8004a78 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d037      	beq.n	8004a16 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b4:	f000 80ef 	beq.w	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	09db      	lsrs	r3, r3, #7
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00f      	beq.n	80049e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	0a9b      	lsrs	r3, r3, #10
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d103      	bne.n	80049e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f934 	bl	8004c4a <I2C_MasterTransmit_TXE>
 80049e2:	e049      	b.n	8004a78 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80d2 	beq.w	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	0a5b      	lsrs	r3, r3, #9
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80cb 	beq.w	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	2b10      	cmp	r3, #16
 8004a04:	d103      	bne.n	8004a0e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9bb 	bl	8004d82 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0c:	e0c3      	b.n	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa1f 	bl	8004e52 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a14:	e0bf      	b.n	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a24:	f000 80b7 	beq.w	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00f      	beq.n	8004a54 <HAL_I2C_EV_IRQHandler+0x18c>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	0a9b      	lsrs	r3, r3, #10
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <HAL_I2C_EV_IRQHandler+0x18c>
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fa8f 	bl	8004f70 <I2C_MasterReceive_RXNE>
 8004a52:	e011      	b.n	8004a78 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 809a 	beq.w	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	0a5b      	lsrs	r3, r3, #9
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8093 	beq.w	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fb2e 	bl	80050d2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a76:	e08e      	b.n	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004a78:	e08d      	b.n	8004b96 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e007      	b.n	8004a9c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d012      	beq.n	8004ace <HAL_I2C_EV_IRQHandler+0x206>
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	0a5b      	lsrs	r3, r3, #9
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00c      	beq.n	8004ace <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ac4:	69b9      	ldr	r1, [r7, #24]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 feec 	bl	80058a4 <I2C_Slave_ADDR>
 8004acc:	e066      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d009      	beq.n	8004aee <HAL_I2C_EV_IRQHandler+0x226>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 ff20 	bl	800592c <I2C_Slave_STOPF>
 8004aec:	e056      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004aee:	7bbb      	ldrb	r3, [r7, #14]
 8004af0:	2b21      	cmp	r3, #33	; 0x21
 8004af2:	d002      	beq.n	8004afa <HAL_I2C_EV_IRQHandler+0x232>
 8004af4:	7bbb      	ldrb	r3, [r7, #14]
 8004af6:	2b29      	cmp	r3, #41	; 0x29
 8004af8:	d125      	bne.n	8004b46 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	09db      	lsrs	r3, r3, #7
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00f      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x25e>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	0a9b      	lsrs	r3, r3, #10
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x25e>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fe02 	bl	8005728 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b24:	e039      	b.n	8004b9a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d033      	beq.n	8004b9a <HAL_I2C_EV_IRQHandler+0x2d2>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	0a5b      	lsrs	r3, r3, #9
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d02d      	beq.n	8004b9a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fe2f 	bl	80057a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b44:	e029      	b.n	8004b9a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00f      	beq.n	8004b72 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	0a9b      	lsrs	r3, r3, #10
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fe3a 	bl	80057e4 <I2C_SlaveReceive_RXNE>
 8004b70:	e014      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00e      	beq.n	8004b9c <HAL_I2C_EV_IRQHandler+0x2d4>
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	0a5b      	lsrs	r3, r3, #9
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fe68 	bl	8005860 <I2C_SlaveReceive_BTF>
 8004b90:	e004      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b9a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004baa:	bf00      	nop
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	70fb      	strb	r3, [r7, #3]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c60:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d150      	bne.n	8004d12 <I2C_MasterTransmit_TXE+0xc8>
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b21      	cmp	r3, #33	; 0x21
 8004c74:	d14d      	bne.n	8004d12 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d01d      	beq.n	8004cb8 <I2C_MasterTransmit_TXE+0x6e>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d01a      	beq.n	8004cb8 <I2C_MasterTransmit_TXE+0x6e>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c88:	d016      	beq.n	8004cb8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c98:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2211      	movs	r2, #17
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff ff76 	bl	8004ba2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cb6:	e060      	b.n	8004d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cc6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d107      	bne.n	8004d02 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fd f984 	bl	8002008 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d00:	e03b      	b.n	8004d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7ff ff49 	bl	8004ba2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d10:	e033      	b.n	8004d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b21      	cmp	r3, #33	; 0x21
 8004d16:	d005      	beq.n	8004d24 <I2C_MasterTransmit_TXE+0xda>
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d12d      	bne.n	8004d7a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b22      	cmp	r3, #34	; 0x22
 8004d22:	d12a      	bne.n	8004d7a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d108      	bne.n	8004d40 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d3e:	e01c      	b.n	8004d7a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d103      	bne.n	8004d54 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f880 	bl	8004e52 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d52:	e012      	b.n	8004d7a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	781a      	ldrb	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d78:	e7ff      	b.n	8004d7a <I2C_MasterTransmit_TXE+0x130>
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b21      	cmp	r3, #33	; 0x21
 8004d9a:	d156      	bne.n	8004e4a <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d012      	beq.n	8004dcc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004dca:	e03e      	b.n	8004e4a <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d01d      	beq.n	8004e0e <I2C_MasterTransmit_BTF+0x8c>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d01a      	beq.n	8004e0e <I2C_MasterTransmit_BTF+0x8c>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dde:	d016      	beq.n	8004e0e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2211      	movs	r2, #17
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff fecb 	bl	8004ba2 <HAL_I2C_MasterTxCpltCallback>
}
 8004e0c:	e01d      	b.n	8004e4a <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e1c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff feac 	bl	8004ba2 <HAL_I2C_MasterTxCpltCallback>
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11d      	bne.n	8004ea6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10b      	bne.n	8004e8a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e76:	b2da      	uxtb	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e88:	e06e      	b.n	8004f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	121b      	asrs	r3, r3, #8
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ea4:	e060      	b.n	8004f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d10b      	bne.n	8004ec6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ec4:	e050      	b.n	8004f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d14c      	bne.n	8004f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b22      	cmp	r3, #34	; 0x22
 8004ed2:	d108      	bne.n	8004ee6 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee2:	601a      	str	r2, [r3, #0]
}
 8004ee4:	e040      	b.n	8004f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b21      	cmp	r3, #33	; 0x21
 8004ef4:	d112      	bne.n	8004f1c <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f1a:	e025      	b.n	8004f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d120      	bne.n	8004f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b21      	cmp	r3, #33	; 0x21
 8004f2a:	d11d      	bne.n	8004f68 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f3a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fd f850 	bl	8002008 <HAL_I2C_MemTxCpltCallback>
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b22      	cmp	r3, #34	; 0x22
 8004f82:	f040 80a2 	bne.w	80050ca <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d921      	bls.n	8004fd8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	f040 8082 	bne.w	80050ca <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004fd6:	e078      	b.n	80050ca <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d074      	beq.n	80050ca <I2C_MasterReceive_RXNE+0x15a>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d002      	beq.n	8004fec <I2C_MasterReceive_RXNE+0x7c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d16e      	bne.n	80050ca <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f001 fb4f 	bl	8006690 <I2C_WaitOnSTOPRequestThroughIT>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d142      	bne.n	800507e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005006:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005016:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b40      	cmp	r3, #64	; 0x40
 8005050:	d10a      	bne.n	8005068 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fc fff3 	bl	800204c <HAL_I2C_MemRxCpltCallback>
}
 8005066:	e030      	b.n	80050ca <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2212      	movs	r2, #18
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff fd9d 	bl	8004bb6 <HAL_I2C_MasterRxCpltCallback>
}
 800507c:	e025      	b.n	80050ca <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800508c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff fdac 	bl	8004c22 <HAL_I2C_ErrorCallback>
}
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d11b      	bne.n	8005122 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005120:	e0bd      	b.n	800529e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b03      	cmp	r3, #3
 800512a:	d129      	bne.n	8005180 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800513a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b04      	cmp	r3, #4
 8005140:	d00a      	beq.n	8005158 <I2C_MasterReceive_BTF+0x86>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d007      	beq.n	8005158 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005156:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800517e:	e08e      	b.n	800529e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d176      	bne.n	8005278 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d002      	beq.n	8005196 <I2C_MasterReceive_BTF+0xc4>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b10      	cmp	r3, #16
 8005194:	d108      	bne.n	80051a8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e019      	b.n	80051dc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d002      	beq.n	80051b4 <I2C_MasterReceive_BTF+0xe2>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d108      	bne.n	80051c6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e00a      	b.n	80051dc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d007      	beq.n	80051dc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005236:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d10a      	bne.n	8005262 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fc fef6 	bl	800204c <HAL_I2C_MemRxCpltCallback>
}
 8005260:	e01d      	b.n	800529e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2212      	movs	r2, #18
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff fca0 	bl	8004bb6 <HAL_I2C_MasterRxCpltCallback>
}
 8005276:	e012      	b.n	800529e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800529e:	bf00      	nop
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d117      	bne.n	80052ea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052d2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052d4:	e067      	b.n	80053a6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]
}
 80052e8:	e05d      	b.n	80053a6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052f2:	d133      	bne.n	800535c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b21      	cmp	r3, #33	; 0x21
 80052fe:	d109      	bne.n	8005314 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005310:	611a      	str	r2, [r3, #16]
 8005312:	e008      	b.n	8005326 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	b2da      	uxtb	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <I2C_Master_SB+0x92>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d108      	bne.n	800534a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d032      	beq.n	80053a6 <I2C_Master_SB+0x100>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	2b00      	cmp	r3, #0
 8005348:	d02d      	beq.n	80053a6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005358:	605a      	str	r2, [r3, #4]
}
 800535a:	e024      	b.n	80053a6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10e      	bne.n	8005382 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	b29b      	uxth	r3, r3
 800536a:	11db      	asrs	r3, r3, #7
 800536c:	b2db      	uxtb	r3, r3
 800536e:	f003 0306 	and.w	r3, r3, #6
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f063 030f 	orn	r3, r3, #15
 8005378:	b2da      	uxtb	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	611a      	str	r2, [r3, #16]
}
 8005380:	e011      	b.n	80053a6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005386:	2b01      	cmp	r3, #1
 8005388:	d10d      	bne.n	80053a6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	b29b      	uxth	r3, r3
 8005390:	11db      	asrs	r3, r3, #7
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f003 0306 	and.w	r3, r3, #6
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f063 030e 	orn	r3, r3, #14
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	611a      	str	r2, [r3, #16]
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <I2C_Master_ADD10+0x26>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00c      	beq.n	80053fa <I2C_Master_ADD10+0x48>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f8:	605a      	str	r2, [r3, #4]
  }
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005406:	b480      	push	{r7}
 8005408:	b091      	sub	sp, #68	; 0x44
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005414:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b22      	cmp	r3, #34	; 0x22
 800542e:	f040 8169 	bne.w	8005704 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10f      	bne.n	800545a <I2C_Master_ADDR+0x54>
 800543a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800543e:	2b40      	cmp	r3, #64	; 0x40
 8005440:	d10b      	bne.n	800545a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005442:	2300      	movs	r3, #0
 8005444:	633b      	str	r3, [r7, #48]	; 0x30
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	633b      	str	r3, [r7, #48]	; 0x30
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	e160      	b.n	800571c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545e:	2b00      	cmp	r3, #0
 8005460:	d11d      	bne.n	800549e <I2C_Master_ADDR+0x98>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800546a:	d118      	bne.n	800549e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546c:	2300      	movs	r3, #0
 800546e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005490:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	651a      	str	r2, [r3, #80]	; 0x50
 800549c:	e13e      	b.n	800571c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d113      	bne.n	80054d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a8:	2300      	movs	r3, #0
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	e115      	b.n	80056fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	f040 808a 	bne.w	80055f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054e2:	d137      	bne.n	8005554 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005502:	d113      	bne.n	800552c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005514:	2300      	movs	r3, #0
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	627b      	str	r3, [r7, #36]	; 0x24
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	e0e7      	b.n	80056fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800552c:	2300      	movs	r3, #0
 800552e:	623b      	str	r3, [r7, #32]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	623b      	str	r3, [r7, #32]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	623b      	str	r3, [r7, #32]
 8005540:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e0d3      	b.n	80056fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	2b08      	cmp	r3, #8
 8005558:	d02e      	beq.n	80055b8 <I2C_Master_ADDR+0x1b2>
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	2b20      	cmp	r3, #32
 800555e:	d02b      	beq.n	80055b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005562:	2b12      	cmp	r3, #18
 8005564:	d102      	bne.n	800556c <I2C_Master_ADDR+0x166>
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	2b01      	cmp	r3, #1
 800556a:	d125      	bne.n	80055b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2b04      	cmp	r3, #4
 8005570:	d00e      	beq.n	8005590 <I2C_Master_ADDR+0x18a>
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b02      	cmp	r3, #2
 8005576:	d00b      	beq.n	8005590 <I2C_Master_ADDR+0x18a>
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	2b10      	cmp	r3, #16
 800557c:	d008      	beq.n	8005590 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e007      	b.n	80055a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800559e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a0:	2300      	movs	r3, #0
 80055a2:	61fb      	str	r3, [r7, #28]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	e0a1      	b.n	80056fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e085      	b.n	80056fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d14d      	bne.n	8005696 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d016      	beq.n	800562e <I2C_Master_ADDR+0x228>
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	2b02      	cmp	r3, #2
 8005604:	d013      	beq.n	800562e <I2C_Master_ADDR+0x228>
 8005606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005608:	2b10      	cmp	r3, #16
 800560a:	d010      	beq.n	800562e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e007      	b.n	800563e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800563c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d117      	bne.n	800567e <I2C_Master_ADDR+0x278>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005654:	d00b      	beq.n	800566e <I2C_Master_ADDR+0x268>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b01      	cmp	r3, #1
 800565a:	d008      	beq.n	800566e <I2C_Master_ADDR+0x268>
 800565c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565e:	2b08      	cmp	r3, #8
 8005660:	d005      	beq.n	800566e <I2C_Master_ADDR+0x268>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	2b10      	cmp	r3, #16
 8005666:	d002      	beq.n	800566e <I2C_Master_ADDR+0x268>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b20      	cmp	r3, #32
 800566c:	d107      	bne.n	800567e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800567c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	e032      	b.n	80056fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d117      	bne.n	80056e6 <I2C_Master_ADDR+0x2e0>
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056bc:	d00b      	beq.n	80056d6 <I2C_Master_ADDR+0x2d0>
 80056be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d008      	beq.n	80056d6 <I2C_Master_ADDR+0x2d0>
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d005      	beq.n	80056d6 <I2C_Master_ADDR+0x2d0>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b10      	cmp	r3, #16
 80056ce:	d002      	beq.n	80056d6 <I2C_Master_ADDR+0x2d0>
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d107      	bne.n	80056e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005702:	e00b      	b.n	800571c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
}
 800571a:	e7ff      	b.n	800571c <I2C_Master_ADDR+0x316>
 800571c:	bf00      	nop
 800571e:	3744      	adds	r7, #68	; 0x44
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005736:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d02b      	beq.n	800579a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	781a      	ldrb	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	d114      	bne.n	800579a <I2C_SlaveTransmit_TXE+0x72>
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b29      	cmp	r3, #41	; 0x29
 8005774:	d111      	bne.n	800579a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005784:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2221      	movs	r2, #33	; 0x21
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2228      	movs	r2, #40	; 0x28
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fa18 	bl	8004bca <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d011      	beq.n	80057d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d02c      	beq.n	8005858 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691a      	ldr	r2, [r3, #16]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d114      	bne.n	8005858 <I2C_SlaveReceive_RXNE+0x74>
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b2a      	cmp	r3, #42	; 0x2a
 8005832:	d111      	bne.n	8005858 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005842:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2222      	movs	r2, #34	; 0x22
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2228      	movs	r2, #40	; 0x28
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff f9c3 	bl	8004bde <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005858:	bf00      	nop
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d012      	beq.n	8005898 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691a      	ldr	r2, [r3, #16]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058be:	2b28      	cmp	r3, #40	; 0x28
 80058c0:	d127      	bne.n	8005912 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	089b      	lsrs	r3, r3, #2
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	09db      	lsrs	r3, r3, #7
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	81bb      	strh	r3, [r7, #12]
 80058f4:	e002      	b.n	80058fc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005904:	89ba      	ldrh	r2, [r7, #12]
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff f971 	bl	8004bf2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005910:	e008      	b.n	8005924 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f06f 0202 	mvn.w	r2, #2
 800591a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800594a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800594c:	2300      	movs	r3, #0
 800594e:	60bb      	str	r3, [r7, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005978:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005988:	d172      	bne.n	8005a70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b22      	cmp	r3, #34	; 0x22
 800598e:	d002      	beq.n	8005996 <I2C_Slave_STOPF+0x6a>
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b2a      	cmp	r3, #42	; 0x2a
 8005994:	d135      	bne.n	8005a02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f043 0204 	orr.w	r2, r3, #4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe f882 	bl	8003ad8 <HAL_DMA_GetState>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d049      	beq.n	8005a6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	4a69      	ldr	r2, [pc, #420]	; (8005b84 <I2C_Slave_STOPF+0x258>)
 80059e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fd feca 	bl	8003780 <HAL_DMA_Abort_IT>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d03d      	beq.n	8005a6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059fc:	4610      	mov	r0, r2
 80059fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a00:	e035      	b.n	8005a6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f043 0204 	orr.w	r2, r3, #4
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe f84c 	bl	8003ad8 <HAL_DMA_GetState>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d014      	beq.n	8005a70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4a:	4a4e      	ldr	r2, [pc, #312]	; (8005b84 <I2C_Slave_STOPF+0x258>)
 8005a4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd fe94 	bl	8003780 <HAL_DMA_Abort_IT>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
 8005a6c:	e000      	b.n	8005a70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d03e      	beq.n	8005af8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d112      	bne.n	8005aae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d112      	bne.n	8005ae2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	f043 0204 	orr.w	r2, r3, #4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f843 	bl	8005b8c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b06:	e039      	b.n	8005b7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d109      	bne.n	8005b22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2228      	movs	r2, #40	; 0x28
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff f85e 	bl	8004bde <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b28      	cmp	r3, #40	; 0x28
 8005b2c:	d111      	bne.n	8005b52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <I2C_Slave_STOPF+0x25c>)
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff f85f 	bl	8004c0e <HAL_I2C_ListenCpltCallback>
}
 8005b50:	e014      	b.n	8005b7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	2b22      	cmp	r3, #34	; 0x22
 8005b58:	d002      	beq.n	8005b60 <I2C_Slave_STOPF+0x234>
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
 8005b5c:	2b22      	cmp	r3, #34	; 0x22
 8005b5e:	d10d      	bne.n	8005b7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff f831 	bl	8004bde <HAL_I2C_SlaveRxCpltCallback>
}
 8005b7c:	bf00      	nop
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	08006311 	.word	0x08006311
 8005b88:	ffff0000 	.word	0xffff0000

08005b8c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	2b10      	cmp	r3, #16
 8005ba8:	d002      	beq.n	8005bb0 <I2C_ITError+0x24>
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d10a      	bne.n	8005bc6 <I2C_ITError+0x3a>
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b22      	cmp	r3, #34	; 0x22
 8005bb4:	d107      	bne.n	8005bc6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bc4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bcc:	2b28      	cmp	r3, #40	; 0x28
 8005bce:	d107      	bne.n	8005be0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2228      	movs	r2, #40	; 0x28
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bde:	e015      	b.n	8005c0c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bee:	d00a      	beq.n	8005c06 <I2C_ITError+0x7a>
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b60      	cmp	r3, #96	; 0x60
 8005bf4:	d007      	beq.n	8005c06 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1a:	d162      	bne.n	8005ce2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d020      	beq.n	8005c7c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	4a6a      	ldr	r2, [pc, #424]	; (8005de8 <I2C_ITError+0x25c>)
 8005c40:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fd fd9a 	bl	8003780 <HAL_DMA_Abort_IT>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8089 	beq.w	8005d66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0201 	bic.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c76:	4610      	mov	r0, r2
 8005c78:	4798      	blx	r3
 8005c7a:	e074      	b.n	8005d66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	4a59      	ldr	r2, [pc, #356]	; (8005de8 <I2C_ITError+0x25c>)
 8005c82:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fd fd79 	bl	8003780 <HAL_DMA_Abort_IT>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d068      	beq.n	8005d66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d10b      	bne.n	8005cba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0201 	bic.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
 8005ce0:	e041      	b.n	8005d66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b60      	cmp	r3, #96	; 0x60
 8005cec:	d125      	bne.n	8005d3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b40      	cmp	r3, #64	; 0x40
 8005d08:	d10b      	bne.n	8005d22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0201 	bic.w	r2, r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fe ff7f 	bl	8004c36 <HAL_I2C_AbortCpltCallback>
 8005d38:	e015      	b.n	8005d66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d10b      	bne.n	8005d60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7fe ff5e 	bl	8004c22 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10e      	bne.n	8005d94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d109      	bne.n	8005d94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005da2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d113      	bne.n	8005de0 <I2C_ITError+0x254>
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b28      	cmp	r3, #40	; 0x28
 8005dbc:	d110      	bne.n	8005de0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <I2C_ITError+0x260>)
 8005dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fe ff17 	bl	8004c0e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005de0:	bf00      	nop
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	08006311 	.word	0x08006311
 8005dec:	ffff0000 	.word	0xffff0000

08005df0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	817b      	strh	r3, [r7, #10]
 8005e02:	460b      	mov	r3, r1
 8005e04:	813b      	strh	r3, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 fb1a 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00d      	beq.n	8005e4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e40:	d103      	bne.n	8005e4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e05f      	b.n	8005f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e4e:	897b      	ldrh	r3, [r7, #10]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	6a3a      	ldr	r2, [r7, #32]
 8005e62:	492d      	ldr	r1, [pc, #180]	; (8005f18 <I2C_RequestMemoryWrite+0x128>)
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fb52 	bl	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e04c      	b.n	8005f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e74:	2300      	movs	r3, #0
 8005e76:	617b      	str	r3, [r7, #20]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8c:	6a39      	ldr	r1, [r7, #32]
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fbbc 	bl	800660c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d107      	bne.n	8005eb2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e02b      	b.n	8005f0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d105      	bne.n	8005ec8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ebc:	893b      	ldrh	r3, [r7, #8]
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	611a      	str	r2, [r3, #16]
 8005ec6:	e021      	b.n	8005f0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ec8:	893b      	ldrh	r3, [r7, #8]
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed8:	6a39      	ldr	r1, [r7, #32]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fb96 	bl	800660c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00d      	beq.n	8005f02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d107      	bne.n	8005efe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e005      	b.n	8005f0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f02:	893b      	ldrh	r3, [r7, #8]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	00010002 	.word	0x00010002

08005f1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af02      	add	r7, sp, #8
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	817b      	strh	r3, [r7, #10]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	813b      	strh	r3, [r7, #8]
 8005f32:	4613      	mov	r3, r2
 8005f34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fa7c 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00d      	beq.n	8005f8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7c:	d103      	bne.n	8005f86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0aa      	b.n	80060e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	4952      	ldr	r1, [pc, #328]	; (80060e8 <I2C_RequestMemoryRead+0x1cc>)
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 fab4 	bl	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e097      	b.n	80060e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc8:	6a39      	ldr	r1, [r7, #32]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fb1e 	bl	800660c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00d      	beq.n	8005ff2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d107      	bne.n	8005fee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e076      	b.n	80060e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d105      	bne.n	8006004 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff8:	893b      	ldrh	r3, [r7, #8]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	611a      	str	r2, [r3, #16]
 8006002:	e021      	b.n	8006048 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006004:	893b      	ldrh	r3, [r7, #8]
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	b29b      	uxth	r3, r3
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006014:	6a39      	ldr	r1, [r7, #32]
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 faf8 	bl	800660c <I2C_WaitOnTXEFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00d      	beq.n	800603e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	2b04      	cmp	r3, #4
 8006028:	d107      	bne.n	800603a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006038:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e050      	b.n	80060e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800603e:	893b      	ldrh	r3, [r7, #8]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	6a39      	ldr	r1, [r7, #32]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fadd 	bl	800660c <I2C_WaitOnTXEFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00d      	beq.n	8006074 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	2b04      	cmp	r3, #4
 800605e:	d107      	bne.n	8006070 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e035      	b.n	80060e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006082:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	2200      	movs	r2, #0
 800608c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f9e5 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00d      	beq.n	80060b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060aa:	d103      	bne.n	80060b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e013      	b.n	80060e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060b8:	897b      	ldrh	r3, [r7, #10]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	6a3a      	ldr	r2, [r7, #32]
 80060cc:	4906      	ldr	r1, [pc, #24]	; (80060e8 <I2C_RequestMemoryRead+0x1cc>)
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 fa1d 	bl	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	00010002 	.word	0x00010002

080060ec <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006100:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006108:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800611e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612c:	2200      	movs	r2, #0
 800612e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	2200      	movs	r2, #0
 800613e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006140:	7cfb      	ldrb	r3, [r7, #19]
 8006142:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006146:	2b21      	cmp	r3, #33	; 0x21
 8006148:	d007      	beq.n	800615a <I2C_DMAXferCplt+0x6e>
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006150:	2b22      	cmp	r3, #34	; 0x22
 8006152:	d131      	bne.n	80061b8 <I2C_DMAXferCplt+0xcc>
 8006154:	7cbb      	ldrb	r3, [r7, #18]
 8006156:	2b20      	cmp	r3, #32
 8006158:	d12e      	bne.n	80061b8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006168:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	2200      	movs	r2, #0
 800616e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006170:	7cfb      	ldrb	r3, [r7, #19]
 8006172:	2b29      	cmp	r3, #41	; 0x29
 8006174:	d10a      	bne.n	800618c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2221      	movs	r2, #33	; 0x21
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2228      	movs	r2, #40	; 0x28
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006184:	6978      	ldr	r0, [r7, #20]
 8006186:	f7fe fd20 	bl	8004bca <HAL_I2C_SlaveTxCpltCallback>
 800618a:	e00c      	b.n	80061a6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800618c:	7cfb      	ldrb	r3, [r7, #19]
 800618e:	2b2a      	cmp	r3, #42	; 0x2a
 8006190:	d109      	bne.n	80061a6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2222      	movs	r2, #34	; 0x22
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2228      	movs	r2, #40	; 0x28
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061a0:	6978      	ldr	r0, [r7, #20]
 80061a2:	f7fe fd1c 	bl	8004bde <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80061b4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80061b6:	e06a      	b.n	800628e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d064      	beq.n	800628e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d107      	bne.n	80061de <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061dc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061f4:	d009      	beq.n	800620a <I2C_DMAXferCplt+0x11e>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d006      	beq.n	800620a <I2C_DMAXferCplt+0x11e>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006202:	d002      	beq.n	800620a <I2C_DMAXferCplt+0x11e>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b20      	cmp	r3, #32
 8006208:	d107      	bne.n	800621a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006218:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006228:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006238:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2200      	movs	r2, #0
 800623e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006248:	6978      	ldr	r0, [r7, #20]
 800624a:	f7fe fcea 	bl	8004c22 <HAL_I2C_ErrorCallback>
}
 800624e:	e01e      	b.n	800628e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	d10a      	bne.n	800627a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2200      	movs	r2, #0
 8006270:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006272:	6978      	ldr	r0, [r7, #20]
 8006274:	f7fb feea 	bl	800204c <HAL_I2C_MemRxCpltCallback>
}
 8006278:	e009      	b.n	800628e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2212      	movs	r2, #18
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006288:	6978      	ldr	r0, [r7, #20]
 800628a:	f7fe fc94 	bl	8004bb6 <HAL_I2C_MasterRxCpltCallback>
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	2200      	movs	r2, #0
 80062b2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	2200      	movs	r2, #0
 80062c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fd fc15 	bl	8003af4 <HAL_DMA_GetError>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d01b      	beq.n	8006308 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062de:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f043 0210 	orr.w	r2, r3, #16
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7fe fc8d 	bl	8004c22 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006328:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800632a:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <I2C_DMAAbort+0x148>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	08db      	lsrs	r3, r3, #3
 8006330:	4a4a      	ldr	r2, [pc, #296]	; (800645c <I2C_DMAAbort+0x14c>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	0a1a      	lsrs	r2, r3, #8
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	00da      	lsls	r2, r3, #3
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	f043 0220 	orr.w	r2, r3, #32
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006356:	e00a      	b.n	800636e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3b01      	subs	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636c:	d0ea      	beq.n	8006344 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	2200      	movs	r2, #0
 800637c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	2200      	movs	r2, #0
 800638c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b0:	2200      	movs	r2, #0
 80063b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	2200      	movs	r2, #0
 80063c2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b60      	cmp	r3, #96	; 0x60
 80063de:	d10e      	bne.n	80063fe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2200      	movs	r2, #0
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063f6:	6978      	ldr	r0, [r7, #20]
 80063f8:	f7fe fc1d 	bl	8004c36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063fc:	e027      	b.n	800644e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063fe:	7cfb      	ldrb	r3, [r7, #19]
 8006400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006404:	2b28      	cmp	r3, #40	; 0x28
 8006406:	d117      	bne.n	8006438 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006426:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2200      	movs	r2, #0
 800642c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2228      	movs	r2, #40	; 0x28
 8006432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006436:	e007      	b.n	8006448 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2220      	movs	r2, #32
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006448:	6978      	ldr	r0, [r7, #20]
 800644a:	f7fe fbea 	bl	8004c22 <HAL_I2C_ErrorCallback>
}
 800644e:	bf00      	nop
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000000 	.word	0x20000000
 800645c:	14f8b589 	.word	0x14f8b589

08006460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006470:	e025      	b.n	80064be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d021      	beq.n	80064be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fc fc85 	bl	8002d88 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d116      	bne.n	80064be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2220      	movs	r2, #32
 800649a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	f043 0220 	orr.w	r2, r3, #32
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e023      	b.n	8006506 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	0c1b      	lsrs	r3, r3, #16
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10d      	bne.n	80064e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	43da      	mvns	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4013      	ands	r3, r2
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bf0c      	ite	eq
 80064da:	2301      	moveq	r3, #1
 80064dc:	2300      	movne	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	e00c      	b.n	80064fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	43da      	mvns	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d0b6      	beq.n	8006472 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800651c:	e051      	b.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652c:	d123      	bne.n	8006576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800653c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006546:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0204 	orr.w	r2, r3, #4
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e046      	b.n	8006604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d021      	beq.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657e:	f7fc fc03 	bl	8002d88 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d302      	bcc.n	8006594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d116      	bne.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f043 0220 	orr.w	r2, r3, #32
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e020      	b.n	8006604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10c      	bne.n	80065e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	43da      	mvns	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	e00b      	b.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	43da      	mvns	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	4013      	ands	r3, r2
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bf14      	ite	ne
 80065f8:	2301      	movne	r3, #1
 80065fa:	2300      	moveq	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d18d      	bne.n	800651e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006618:	e02d      	b.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f86a 	bl	80066f4 <I2C_IsAcknowledgeFailed>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e02d      	b.n	8006686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d021      	beq.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fc fba9 	bl	8002d88 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d116      	bne.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e007      	b.n	8006686 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d1ca      	bne.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800669c:	4b13      	ldr	r3, [pc, #76]	; (80066ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	08db      	lsrs	r3, r3, #3
 80066a2:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80066a4:	fba2 2303 	umull	r2, r3, r2, r3
 80066a8:	0a1a      	lsrs	r2, r3, #8
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d107      	bne.n	80066ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	f043 0220 	orr.w	r2, r3, #32
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e008      	b.n	80066e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066dc:	d0e9      	beq.n	80066b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	20000000 	.word	0x20000000
 80066f0:	14f8b589 	.word	0x14f8b589

080066f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	d11b      	bne.n	8006744 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006714:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	f043 0204 	orr.w	r2, r3, #4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006762:	d103      	bne.n	800676c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800676a:	e007      	b.n	800677c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006774:	d102      	bne.n	800677c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2208      	movs	r2, #8
 800677a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b20      	cmp	r3, #32
 800679c:	d129      	bne.n	80067f2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2224      	movs	r2, #36	; 0x24
 80067a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0210 	bic.w	r2, r2, #16
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0201 	orr.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e000      	b.n	80067f4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
  }
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b20      	cmp	r3, #32
 8006818:	d12a      	bne.n	8006870 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2224      	movs	r2, #36	; 0x24
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0201 	bic.w	r2, r2, #1
 8006830:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	f023 030f 	bic.w	r3, r3, #15
 8006840:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	b29a      	uxth	r2, r3
 8006846:	89fb      	ldrh	r3, [r7, #14]
 8006848:	4313      	orrs	r3, r2
 800684a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	89fa      	ldrh	r2, [r7, #14]
 8006852:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0201 	orr.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	e000      	b.n	8006872 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006870:	2302      	movs	r3, #2
  }
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e0bf      	b.n	8006a12 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fb fe14 	bl	80024d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80068c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6999      	ldr	r1, [r3, #24]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6899      	ldr	r1, [r3, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4b4a      	ldr	r3, [pc, #296]	; (8006a1c <HAL_LTDC_Init+0x19c>)
 80068f4:	400b      	ands	r3, r1
 80068f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6899      	ldr	r1, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68d9      	ldr	r1, [r3, #12]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b3e      	ldr	r3, [pc, #248]	; (8006a1c <HAL_LTDC_Init+0x19c>)
 8006922:	400b      	ands	r3, r1
 8006924:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68d9      	ldr	r1, [r3, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1a      	ldr	r2, [r3, #32]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6919      	ldr	r1, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b33      	ldr	r3, [pc, #204]	; (8006a1c <HAL_LTDC_Init+0x19c>)
 8006950:	400b      	ands	r3, r1
 8006952:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	041b      	lsls	r3, r3, #16
 800695a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6919      	ldr	r1, [r3, #16]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6959      	ldr	r1, [r3, #20]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4b27      	ldr	r3, [pc, #156]	; (8006a1c <HAL_LTDC_Init+0x19c>)
 800697e:	400b      	ands	r3, r1
 8006980:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	041b      	lsls	r3, r3, #16
 8006988:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6959      	ldr	r1, [r3, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80069b0:	041b      	lsls	r3, r3, #16
 80069b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0206 	orr.w	r2, r2, #6
 80069ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699a      	ldr	r2, [r3, #24]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	f000f800 	.word	0xf000f800

08006a20 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a20:	b5b0      	push	{r4, r5, r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_LTDC_ConfigLayer+0x1a>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e02c      	b.n	8006a94 <HAL_LTDC_ConfigLayer+0x74>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2134      	movs	r1, #52	; 0x34
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	4413      	add	r3, r2
 8006a56:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	4614      	mov	r4, r2
 8006a5e:	461d      	mov	r5, r3
 8006a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f811 	bl	8006a9c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bdb0      	pop	{r4, r5, r7, pc}

08006a9c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b089      	sub	sp, #36	; 0x24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	0c1b      	lsrs	r3, r3, #16
 8006ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ab8:	4413      	add	r3, r2
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	01db      	lsls	r3, r3, #7
 8006ac8:	4413      	add	r3, r2
 8006aca:	3384      	adds	r3, #132	; 0x84
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	01d2      	lsls	r2, r2, #7
 8006ad8:	440a      	add	r2, r1
 8006ada:	3284      	adds	r2, #132	; 0x84
 8006adc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006ae0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006af2:	4413      	add	r3, r2
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4619      	mov	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	01db      	lsls	r3, r3, #7
 8006b00:	440b      	add	r3, r1
 8006b02:	3384      	adds	r3, #132	; 0x84
 8006b04:	4619      	mov	r1, r3
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b1a:	4413      	add	r3, r2
 8006b1c:	041b      	lsls	r3, r3, #16
 8006b1e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	01db      	lsls	r3, r3, #7
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3384      	adds	r3, #132	; 0x84
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	4611      	mov	r1, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	01d2      	lsls	r2, r2, #7
 8006b3a:	440a      	add	r2, r1
 8006b3c:	3284      	adds	r2, #132	; 0x84
 8006b3e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b42:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b52:	4413      	add	r3, r2
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	01db      	lsls	r3, r3, #7
 8006b60:	440b      	add	r3, r1
 8006b62:	3384      	adds	r3, #132	; 0x84
 8006b64:	4619      	mov	r1, r3
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	01db      	lsls	r3, r3, #7
 8006b76:	4413      	add	r3, r2
 8006b78:	3384      	adds	r3, #132	; 0x84
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	4611      	mov	r1, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	01d2      	lsls	r2, r2, #7
 8006b86:	440a      	add	r2, r1
 8006b88:	3284      	adds	r2, #132	; 0x84
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	01db      	lsls	r3, r3, #7
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3384      	adds	r3, #132	; 0x84
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	01db      	lsls	r3, r3, #7
 8006bcc:	4413      	add	r3, r2
 8006bce:	3384      	adds	r3, #132	; 0x84
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	01db      	lsls	r3, r3, #7
 8006bdc:	4413      	add	r3, r2
 8006bde:	3384      	adds	r3, #132	; 0x84
 8006be0:	461a      	mov	r2, r3
 8006be2:	2300      	movs	r3, #0
 8006be4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bec:	461a      	mov	r2, r3
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	01db      	lsls	r3, r3, #7
 8006c00:	440b      	add	r3, r1
 8006c02:	3384      	adds	r3, #132	; 0x84
 8006c04:	4619      	mov	r1, r3
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	01db      	lsls	r3, r3, #7
 8006c16:	4413      	add	r3, r2
 8006c18:	3384      	adds	r3, #132	; 0x84
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	4611      	mov	r1, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	01d2      	lsls	r2, r2, #7
 8006c26:	440a      	add	r2, r1
 8006c28:	3284      	adds	r2, #132	; 0x84
 8006c2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c2e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	01db      	lsls	r3, r3, #7
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3384      	adds	r3, #132	; 0x84
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	01db      	lsls	r3, r3, #7
 8006c50:	4413      	add	r3, r2
 8006c52:	3384      	adds	r3, #132	; 0x84
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	6812      	ldr	r2, [r2, #0]
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	01d2      	lsls	r2, r2, #7
 8006c60:	440a      	add	r2, r1
 8006c62:	3284      	adds	r2, #132	; 0x84
 8006c64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006c68:	f023 0307 	bic.w	r3, r3, #7
 8006c6c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	6809      	ldr	r1, [r1, #0]
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	6879      	ldr	r1, [r7, #4]
 8006c7e:	01c9      	lsls	r1, r1, #7
 8006c80:	4401      	add	r1, r0
 8006c82:	3184      	adds	r1, #132	; 0x84
 8006c84:	4313      	orrs	r3, r2
 8006c86:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	01db      	lsls	r3, r3, #7
 8006c92:	4413      	add	r3, r2
 8006c94:	3384      	adds	r3, #132	; 0x84
 8006c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	01db      	lsls	r3, r3, #7
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3384      	adds	r3, #132	; 0x84
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	01db      	lsls	r3, r3, #7
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3384      	adds	r3, #132	; 0x84
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006cca:	2304      	movs	r3, #4
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	e01b      	b.n	8006d08 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d102      	bne.n	8006cde <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	e014      	b.n	8006d08 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d00b      	beq.n	8006cfe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d007      	beq.n	8006cfe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d003      	beq.n	8006cfe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006cfa:	2b07      	cmp	r3, #7
 8006cfc:	d102      	bne.n	8006d04 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	61fb      	str	r3, [r7, #28]
 8006d02:	e001      	b.n	8006d08 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006d04:	2301      	movs	r3, #1
 8006d06:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	01db      	lsls	r3, r3, #7
 8006d12:	4413      	add	r3, r2
 8006d14:	3384      	adds	r3, #132	; 0x84
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	01d2      	lsls	r2, r2, #7
 8006d22:	440a      	add	r2, r1
 8006d24:	3284      	adds	r2, #132	; 0x84
 8006d26:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
 8006d36:	041a      	lsls	r2, r3, #16
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	6859      	ldr	r1, [r3, #4]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	1acb      	subs	r3, r1, r3
 8006d42:	69f9      	ldr	r1, [r7, #28]
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	3303      	adds	r3, #3
 8006d4a:	68f9      	ldr	r1, [r7, #12]
 8006d4c:	6809      	ldr	r1, [r1, #0]
 8006d4e:	4608      	mov	r0, r1
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	01c9      	lsls	r1, r1, #7
 8006d54:	4401      	add	r1, r0
 8006d56:	3184      	adds	r1, #132	; 0x84
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	01db      	lsls	r3, r3, #7
 8006d66:	4413      	add	r3, r2
 8006d68:	3384      	adds	r3, #132	; 0x84
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	6812      	ldr	r2, [r2, #0]
 8006d70:	4611      	mov	r1, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	01d2      	lsls	r2, r2, #7
 8006d76:	440a      	add	r2, r1
 8006d78:	3284      	adds	r2, #132	; 0x84
 8006d7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	01db      	lsls	r3, r3, #7
 8006d8e:	4413      	add	r3, r2
 8006d90:	3384      	adds	r3, #132	; 0x84
 8006d92:	461a      	mov	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d98:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	01db      	lsls	r3, r3, #7
 8006da4:	4413      	add	r3, r2
 8006da6:	3384      	adds	r3, #132	; 0x84
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	4611      	mov	r1, r2
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	01d2      	lsls	r2, r2, #7
 8006db4:	440a      	add	r2, r1
 8006db6:	3284      	adds	r2, #132	; 0x84
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	6013      	str	r3, [r2, #0]
}
 8006dbe:	bf00      	nop
 8006dc0:	3724      	adds	r7, #36	; 0x24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006dca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dcc:	b08f      	sub	sp, #60	; 0x3c
 8006dce:	af0a      	add	r7, sp, #40	; 0x28
 8006dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e10f      	b.n	8006ffc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fb fd90 	bl	800291c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2203      	movs	r2, #3
 8006e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d102      	bne.n	8006e16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f003 fcd3 	bl	800a7c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	687e      	ldr	r6, [r7, #4]
 8006e28:	466d      	mov	r5, sp
 8006e2a:	f106 0410 	add.w	r4, r6, #16
 8006e2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e3e:	1d33      	adds	r3, r6, #4
 8006e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e42:	6838      	ldr	r0, [r7, #0]
 8006e44:	f003 fc5e 	bl	800a704 <USB_CoreInit>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e0d0      	b.n	8006ffc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f003 fcc1 	bl	800a7e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
 8006e6a:	e04a      	b.n	8006f02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e6c:	7bfa      	ldrb	r2, [r7, #15]
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	333d      	adds	r3, #61	; 0x3d
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e80:	7bfa      	ldrb	r2, [r7, #15]
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	4613      	mov	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	333c      	adds	r3, #60	; 0x3c
 8006e90:	7bfa      	ldrb	r2, [r7, #15]
 8006e92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e94:	7bfa      	ldrb	r2, [r7, #15]
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	b298      	uxth	r0, r3
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	1a9b      	subs	r3, r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	3342      	adds	r3, #66	; 0x42
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006eac:	7bfa      	ldrb	r2, [r7, #15]
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	1a9b      	subs	r3, r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	333f      	adds	r3, #63	; 0x3f
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006ec0:	7bfa      	ldrb	r2, [r7, #15]
 8006ec2:	6879      	ldr	r1, [r7, #4]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	1a9b      	subs	r3, r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	3344      	adds	r3, #68	; 0x44
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ed4:	7bfa      	ldrb	r2, [r7, #15]
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	3348      	adds	r3, #72	; 0x48
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ee8:	7bfa      	ldrb	r2, [r7, #15]
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	4613      	mov	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	1a9b      	subs	r3, r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	3350      	adds	r3, #80	; 0x50
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	3301      	adds	r3, #1
 8006f00:	73fb      	strb	r3, [r7, #15]
 8006f02:	7bfa      	ldrb	r2, [r7, #15]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d3af      	bcc.n	8006e6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e044      	b.n	8006f9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f12:	7bfa      	ldrb	r2, [r7, #15]
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f28:	7bfa      	ldrb	r2, [r7, #15]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006f3a:	7bfa      	ldrb	r2, [r7, #15]
 8006f3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f3e:	7bfa      	ldrb	r2, [r7, #15]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f54:	7bfa      	ldrb	r2, [r7, #15]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f6a:	7bfa      	ldrb	r2, [r7, #15]
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	1a9b      	subs	r3, r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f80:	7bfa      	ldrb	r2, [r7, #15]
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	4613      	mov	r3, r2
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	1a9b      	subs	r3, r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	73fb      	strb	r3, [r7, #15]
 8006f9c:	7bfa      	ldrb	r2, [r7, #15]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3b5      	bcc.n	8006f12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	687e      	ldr	r6, [r7, #4]
 8006fae:	466d      	mov	r5, sp
 8006fb0:	f106 0410 	add.w	r4, r6, #16
 8006fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006fbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8006fc4:	1d33      	adds	r3, r6, #4
 8006fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fc8:	6838      	ldr	r0, [r7, #0]
 8006fca:	f003 fc37 	bl	800a83c <USB_DevInit>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e00d      	b.n	8006ffc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f003 fde6 	bl	800abc6 <USB_DevDisconnect>

  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007004 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e264      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d075      	beq.n	800710e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007022:	4ba3      	ldr	r3, [pc, #652]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 030c 	and.w	r3, r3, #12
 800702a:	2b04      	cmp	r3, #4
 800702c:	d00c      	beq.n	8007048 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800702e:	4ba0      	ldr	r3, [pc, #640]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007036:	2b08      	cmp	r3, #8
 8007038:	d112      	bne.n	8007060 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800703a:	4b9d      	ldr	r3, [pc, #628]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007046:	d10b      	bne.n	8007060 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007048:	4b99      	ldr	r3, [pc, #612]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d05b      	beq.n	800710c <HAL_RCC_OscConfig+0x108>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d157      	bne.n	800710c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e23f      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007068:	d106      	bne.n	8007078 <HAL_RCC_OscConfig+0x74>
 800706a:	4b91      	ldr	r3, [pc, #580]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a90      	ldr	r2, [pc, #576]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e01d      	b.n	80070b4 <HAL_RCC_OscConfig+0xb0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007080:	d10c      	bne.n	800709c <HAL_RCC_OscConfig+0x98>
 8007082:	4b8b      	ldr	r3, [pc, #556]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a8a      	ldr	r2, [pc, #552]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	4b88      	ldr	r3, [pc, #544]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a87      	ldr	r2, [pc, #540]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007098:	6013      	str	r3, [r2, #0]
 800709a:	e00b      	b.n	80070b4 <HAL_RCC_OscConfig+0xb0>
 800709c:	4b84      	ldr	r3, [pc, #528]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a83      	ldr	r2, [pc, #524]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 80070a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	4b81      	ldr	r3, [pc, #516]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a80      	ldr	r2, [pc, #512]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 80070ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d013      	beq.n	80070e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070bc:	f7fb fe64 	bl	8002d88 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c2:	e008      	b.n	80070d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070c4:	f7fb fe60 	bl	8002d88 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b64      	cmp	r3, #100	; 0x64
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e204      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070d6:	4b76      	ldr	r3, [pc, #472]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0f0      	beq.n	80070c4 <HAL_RCC_OscConfig+0xc0>
 80070e2:	e014      	b.n	800710e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e4:	f7fb fe50 	bl	8002d88 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070ec:	f7fb fe4c 	bl	8002d88 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b64      	cmp	r3, #100	; 0x64
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e1f0      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070fe:	4b6c      	ldr	r3, [pc, #432]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f0      	bne.n	80070ec <HAL_RCC_OscConfig+0xe8>
 800710a:	e000      	b.n	800710e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800710c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d063      	beq.n	80071e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800711a:	4b65      	ldr	r3, [pc, #404]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007126:	4b62      	ldr	r3, [pc, #392]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800712e:	2b08      	cmp	r3, #8
 8007130:	d11c      	bne.n	800716c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007132:	4b5f      	ldr	r3, [pc, #380]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d116      	bne.n	800716c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713e:	4b5c      	ldr	r3, [pc, #368]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_RCC_OscConfig+0x152>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d001      	beq.n	8007156 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e1c4      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007156:	4b56      	ldr	r3, [pc, #344]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4952      	ldr	r1, [pc, #328]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007166:	4313      	orrs	r3, r2
 8007168:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800716a:	e03a      	b.n	80071e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d020      	beq.n	80071b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007174:	4b4f      	ldr	r3, [pc, #316]	; (80072b4 <HAL_RCC_OscConfig+0x2b0>)
 8007176:	2201      	movs	r2, #1
 8007178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717a:	f7fb fe05 	bl	8002d88 <HAL_GetTick>
 800717e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007180:	e008      	b.n	8007194 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007182:	f7fb fe01 	bl	8002d88 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d901      	bls.n	8007194 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e1a5      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007194:	4b46      	ldr	r3, [pc, #280]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0f0      	beq.n	8007182 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a0:	4b43      	ldr	r3, [pc, #268]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	4940      	ldr	r1, [pc, #256]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	600b      	str	r3, [r1, #0]
 80071b4:	e015      	b.n	80071e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071b6:	4b3f      	ldr	r3, [pc, #252]	; (80072b4 <HAL_RCC_OscConfig+0x2b0>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071bc:	f7fb fde4 	bl	8002d88 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071c4:	f7fb fde0 	bl	8002d88 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e184      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071d6:	4b36      	ldr	r3, [pc, #216]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f0      	bne.n	80071c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d030      	beq.n	8007250 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d016      	beq.n	8007224 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071f6:	4b30      	ldr	r3, [pc, #192]	; (80072b8 <HAL_RCC_OscConfig+0x2b4>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fc:	f7fb fdc4 	bl	8002d88 <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007204:	f7fb fdc0 	bl	8002d88 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e164      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007216:	4b26      	ldr	r3, [pc, #152]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0f0      	beq.n	8007204 <HAL_RCC_OscConfig+0x200>
 8007222:	e015      	b.n	8007250 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007224:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <HAL_RCC_OscConfig+0x2b4>)
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800722a:	f7fb fdad 	bl	8002d88 <HAL_GetTick>
 800722e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007232:	f7fb fda9 	bl	8002d88 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e14d      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007244:	4b1a      	ldr	r3, [pc, #104]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80a0 	beq.w	800739e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007262:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10f      	bne.n	800728e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800726e:	2300      	movs	r3, #0
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	4a0e      	ldr	r2, [pc, #56]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727c:	6413      	str	r3, [r2, #64]	; 0x40
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <HAL_RCC_OscConfig+0x2ac>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007286:	60bb      	str	r3, [r7, #8]
 8007288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728e:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <HAL_RCC_OscConfig+0x2b8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007296:	2b00      	cmp	r3, #0
 8007298:	d121      	bne.n	80072de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <HAL_RCC_OscConfig+0x2b8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a07      	ldr	r2, [pc, #28]	; (80072bc <HAL_RCC_OscConfig+0x2b8>)
 80072a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072a6:	f7fb fd6f 	bl	8002d88 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ac:	e011      	b.n	80072d2 <HAL_RCC_OscConfig+0x2ce>
 80072ae:	bf00      	nop
 80072b0:	40023800 	.word	0x40023800
 80072b4:	42470000 	.word	0x42470000
 80072b8:	42470e80 	.word	0x42470e80
 80072bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c0:	f7fb fd62 	bl	8002d88 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e106      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d2:	4b85      	ldr	r3, [pc, #532]	; (80074e8 <HAL_RCC_OscConfig+0x4e4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0f0      	beq.n	80072c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d106      	bne.n	80072f4 <HAL_RCC_OscConfig+0x2f0>
 80072e6:	4b81      	ldr	r3, [pc, #516]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	4a80      	ldr	r2, [pc, #512]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	6713      	str	r3, [r2, #112]	; 0x70
 80072f2:	e01c      	b.n	800732e <HAL_RCC_OscConfig+0x32a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b05      	cmp	r3, #5
 80072fa:	d10c      	bne.n	8007316 <HAL_RCC_OscConfig+0x312>
 80072fc:	4b7b      	ldr	r3, [pc, #492]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 80072fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007300:	4a7a      	ldr	r2, [pc, #488]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007302:	f043 0304 	orr.w	r3, r3, #4
 8007306:	6713      	str	r3, [r2, #112]	; 0x70
 8007308:	4b78      	ldr	r3, [pc, #480]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 800730a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730c:	4a77      	ldr	r2, [pc, #476]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 800730e:	f043 0301 	orr.w	r3, r3, #1
 8007312:	6713      	str	r3, [r2, #112]	; 0x70
 8007314:	e00b      	b.n	800732e <HAL_RCC_OscConfig+0x32a>
 8007316:	4b75      	ldr	r3, [pc, #468]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731a:	4a74      	ldr	r2, [pc, #464]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 800731c:	f023 0301 	bic.w	r3, r3, #1
 8007320:	6713      	str	r3, [r2, #112]	; 0x70
 8007322:	4b72      	ldr	r3, [pc, #456]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	4a71      	ldr	r2, [pc, #452]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007328:	f023 0304 	bic.w	r3, r3, #4
 800732c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d015      	beq.n	8007362 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007336:	f7fb fd27 	bl	8002d88 <HAL_GetTick>
 800733a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800733c:	e00a      	b.n	8007354 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800733e:	f7fb fd23 	bl	8002d88 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	f241 3288 	movw	r2, #5000	; 0x1388
 800734c:	4293      	cmp	r3, r2
 800734e:	d901      	bls.n	8007354 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e0c5      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007354:	4b65      	ldr	r3, [pc, #404]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0ee      	beq.n	800733e <HAL_RCC_OscConfig+0x33a>
 8007360:	e014      	b.n	800738c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007362:	f7fb fd11 	bl	8002d88 <HAL_GetTick>
 8007366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007368:	e00a      	b.n	8007380 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800736a:	f7fb fd0d 	bl	8002d88 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	f241 3288 	movw	r2, #5000	; 0x1388
 8007378:	4293      	cmp	r3, r2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e0af      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007380:	4b5a      	ldr	r3, [pc, #360]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1ee      	bne.n	800736a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d105      	bne.n	800739e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007392:	4b56      	ldr	r3, [pc, #344]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	4a55      	ldr	r2, [pc, #340]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800739c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 809b 	beq.w	80074de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80073a8:	4b50      	ldr	r3, [pc, #320]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 030c 	and.w	r3, r3, #12
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	d05c      	beq.n	800746e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d141      	bne.n	8007440 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073bc:	4b4c      	ldr	r3, [pc, #304]	; (80074f0 <HAL_RCC_OscConfig+0x4ec>)
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c2:	f7fb fce1 	bl	8002d88 <HAL_GetTick>
 80073c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ca:	f7fb fcdd 	bl	8002d88 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e081      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073dc:	4b43      	ldr	r3, [pc, #268]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1f0      	bne.n	80073ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	019b      	lsls	r3, r3, #6
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	3b01      	subs	r3, #1
 8007402:	041b      	lsls	r3, r3, #16
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740a:	061b      	lsls	r3, r3, #24
 800740c:	4937      	ldr	r1, [pc, #220]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 800740e:	4313      	orrs	r3, r2
 8007410:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007412:	4b37      	ldr	r3, [pc, #220]	; (80074f0 <HAL_RCC_OscConfig+0x4ec>)
 8007414:	2201      	movs	r2, #1
 8007416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007418:	f7fb fcb6 	bl	8002d88 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007420:	f7fb fcb2 	bl	8002d88 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e056      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007432:	4b2e      	ldr	r3, [pc, #184]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f0      	beq.n	8007420 <HAL_RCC_OscConfig+0x41c>
 800743e:	e04e      	b.n	80074de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007440:	4b2b      	ldr	r3, [pc, #172]	; (80074f0 <HAL_RCC_OscConfig+0x4ec>)
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007446:	f7fb fc9f 	bl	8002d88 <HAL_GetTick>
 800744a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800744e:	f7fb fc9b 	bl	8002d88 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e03f      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007460:	4b22      	ldr	r3, [pc, #136]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1f0      	bne.n	800744e <HAL_RCC_OscConfig+0x44a>
 800746c:	e037      	b.n	80074de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e032      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800747a:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <HAL_RCC_OscConfig+0x4e8>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d028      	beq.n	80074da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007492:	429a      	cmp	r2, r3
 8007494:	d121      	bne.n	80074da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d11a      	bne.n	80074da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074aa:	4013      	ands	r3, r2
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d111      	bne.n	80074da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	3b01      	subs	r3, #1
 80074c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d107      	bne.n	80074da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d001      	beq.n	80074de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	40007000 	.word	0x40007000
 80074ec:	40023800 	.word	0x40023800
 80074f0:	42470060 	.word	0x42470060

080074f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0cc      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007508:	4b68      	ldr	r3, [pc, #416]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	429a      	cmp	r2, r3
 8007514:	d90c      	bls.n	8007530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007516:	4b65      	ldr	r3, [pc, #404]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800751e:	4b63      	ldr	r3, [pc, #396]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d001      	beq.n	8007530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0b8      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d020      	beq.n	800757e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007548:	4b59      	ldr	r3, [pc, #356]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	4a58      	ldr	r2, [pc, #352]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800754e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007560:	4b53      	ldr	r3, [pc, #332]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	4a52      	ldr	r2, [pc, #328]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800756a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800756c:	4b50      	ldr	r3, [pc, #320]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	494d      	ldr	r1, [pc, #308]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800757a:	4313      	orrs	r3, r2
 800757c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d044      	beq.n	8007614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d107      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007592:	4b47      	ldr	r3, [pc, #284]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d119      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e07f      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d003      	beq.n	80075b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d107      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075b2:	4b3f      	ldr	r3, [pc, #252]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d109      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e06f      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075c2:	4b3b      	ldr	r3, [pc, #236]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e067      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075d2:	4b37      	ldr	r3, [pc, #220]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f023 0203 	bic.w	r2, r3, #3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4934      	ldr	r1, [pc, #208]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075e4:	f7fb fbd0 	bl	8002d88 <HAL_GetTick>
 80075e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ea:	e00a      	b.n	8007602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075ec:	f7fb fbcc 	bl	8002d88 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e04f      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007602:	4b2b      	ldr	r3, [pc, #172]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 020c 	and.w	r2, r3, #12
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	429a      	cmp	r2, r3
 8007612:	d1eb      	bne.n	80075ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007614:	4b25      	ldr	r3, [pc, #148]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d20c      	bcs.n	800763c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007622:	4b22      	ldr	r3, [pc, #136]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <HAL_RCC_ClockConfig+0x1b8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e032      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007648:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4916      	ldr	r1, [pc, #88]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	4313      	orrs	r3, r2
 8007658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007666:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	490e      	ldr	r1, [pc, #56]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007676:	4313      	orrs	r3, r2
 8007678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800767a:	f000 f821 	bl	80076c0 <HAL_RCC_GetSysClockFreq>
 800767e:	4602      	mov	r2, r0
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	091b      	lsrs	r3, r3, #4
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	490a      	ldr	r1, [pc, #40]	; (80076b4 <HAL_RCC_ClockConfig+0x1c0>)
 800768c:	5ccb      	ldrb	r3, [r1, r3]
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	4a09      	ldr	r2, [pc, #36]	; (80076b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007696:	4b09      	ldr	r3, [pc, #36]	; (80076bc <HAL_RCC_ClockConfig+0x1c8>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fb fa34 	bl	8002b08 <HAL_InitTick>

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40023c00 	.word	0x40023c00
 80076b0:	40023800 	.word	0x40023800
 80076b4:	0800f850 	.word	0x0800f850
 80076b8:	20000000 	.word	0x20000000
 80076bc:	20000004 	.word	0x20000004

080076c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c0:	b5b0      	push	{r4, r5, r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076c6:	2100      	movs	r1, #0
 80076c8:	6079      	str	r1, [r7, #4]
 80076ca:	2100      	movs	r1, #0
 80076cc:	60f9      	str	r1, [r7, #12]
 80076ce:	2100      	movs	r1, #0
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80076d2:	2100      	movs	r1, #0
 80076d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076d6:	4952      	ldr	r1, [pc, #328]	; (8007820 <HAL_RCC_GetSysClockFreq+0x160>)
 80076d8:	6889      	ldr	r1, [r1, #8]
 80076da:	f001 010c 	and.w	r1, r1, #12
 80076de:	2908      	cmp	r1, #8
 80076e0:	d00d      	beq.n	80076fe <HAL_RCC_GetSysClockFreq+0x3e>
 80076e2:	2908      	cmp	r1, #8
 80076e4:	f200 8094 	bhi.w	8007810 <HAL_RCC_GetSysClockFreq+0x150>
 80076e8:	2900      	cmp	r1, #0
 80076ea:	d002      	beq.n	80076f2 <HAL_RCC_GetSysClockFreq+0x32>
 80076ec:	2904      	cmp	r1, #4
 80076ee:	d003      	beq.n	80076f8 <HAL_RCC_GetSysClockFreq+0x38>
 80076f0:	e08e      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076f2:	4b4c      	ldr	r3, [pc, #304]	; (8007824 <HAL_RCC_GetSysClockFreq+0x164>)
 80076f4:	60bb      	str	r3, [r7, #8]
       break;
 80076f6:	e08e      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076f8:	4b4b      	ldr	r3, [pc, #300]	; (8007828 <HAL_RCC_GetSysClockFreq+0x168>)
 80076fa:	60bb      	str	r3, [r7, #8]
      break;
 80076fc:	e08b      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076fe:	4948      	ldr	r1, [pc, #288]	; (8007820 <HAL_RCC_GetSysClockFreq+0x160>)
 8007700:	6849      	ldr	r1, [r1, #4]
 8007702:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007706:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007708:	4945      	ldr	r1, [pc, #276]	; (8007820 <HAL_RCC_GetSysClockFreq+0x160>)
 800770a:	6849      	ldr	r1, [r1, #4]
 800770c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007710:	2900      	cmp	r1, #0
 8007712:	d024      	beq.n	800775e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007714:	4942      	ldr	r1, [pc, #264]	; (8007820 <HAL_RCC_GetSysClockFreq+0x160>)
 8007716:	6849      	ldr	r1, [r1, #4]
 8007718:	0989      	lsrs	r1, r1, #6
 800771a:	4608      	mov	r0, r1
 800771c:	f04f 0100 	mov.w	r1, #0
 8007720:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007724:	f04f 0500 	mov.w	r5, #0
 8007728:	ea00 0204 	and.w	r2, r0, r4
 800772c:	ea01 0305 	and.w	r3, r1, r5
 8007730:	493d      	ldr	r1, [pc, #244]	; (8007828 <HAL_RCC_GetSysClockFreq+0x168>)
 8007732:	fb01 f003 	mul.w	r0, r1, r3
 8007736:	2100      	movs	r1, #0
 8007738:	fb01 f102 	mul.w	r1, r1, r2
 800773c:	1844      	adds	r4, r0, r1
 800773e:	493a      	ldr	r1, [pc, #232]	; (8007828 <HAL_RCC_GetSysClockFreq+0x168>)
 8007740:	fba2 0101 	umull	r0, r1, r2, r1
 8007744:	1863      	adds	r3, r4, r1
 8007746:	4619      	mov	r1, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	461a      	mov	r2, r3
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	f7f8 ff72 	bl	8000638 <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4613      	mov	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e04a      	b.n	80077f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800775e:	4b30      	ldr	r3, [pc, #192]	; (8007820 <HAL_RCC_GetSysClockFreq+0x160>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	099b      	lsrs	r3, r3, #6
 8007764:	461a      	mov	r2, r3
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800776e:	f04f 0100 	mov.w	r1, #0
 8007772:	ea02 0400 	and.w	r4, r2, r0
 8007776:	ea03 0501 	and.w	r5, r3, r1
 800777a:	4620      	mov	r0, r4
 800777c:	4629      	mov	r1, r5
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	014b      	lsls	r3, r1, #5
 8007788:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800778c:	0142      	lsls	r2, r0, #5
 800778e:	4610      	mov	r0, r2
 8007790:	4619      	mov	r1, r3
 8007792:	1b00      	subs	r0, r0, r4
 8007794:	eb61 0105 	sbc.w	r1, r1, r5
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	018b      	lsls	r3, r1, #6
 80077a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80077a6:	0182      	lsls	r2, r0, #6
 80077a8:	1a12      	subs	r2, r2, r0
 80077aa:	eb63 0301 	sbc.w	r3, r3, r1
 80077ae:	f04f 0000 	mov.w	r0, #0
 80077b2:	f04f 0100 	mov.w	r1, #0
 80077b6:	00d9      	lsls	r1, r3, #3
 80077b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077bc:	00d0      	lsls	r0, r2, #3
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	1912      	adds	r2, r2, r4
 80077c4:	eb45 0303 	adc.w	r3, r5, r3
 80077c8:	f04f 0000 	mov.w	r0, #0
 80077cc:	f04f 0100 	mov.w	r1, #0
 80077d0:	0299      	lsls	r1, r3, #10
 80077d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80077d6:	0290      	lsls	r0, r2, #10
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4610      	mov	r0, r2
 80077de:	4619      	mov	r1, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f04f 0300 	mov.w	r3, #0
 80077e8:	f7f8 ff26 	bl	8000638 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4613      	mov	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <HAL_RCC_GetSysClockFreq+0x160>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	3301      	adds	r3, #1
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	60bb      	str	r3, [r7, #8]
      break;
 800780e:	e002      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007810:	4b04      	ldr	r3, [pc, #16]	; (8007824 <HAL_RCC_GetSysClockFreq+0x164>)
 8007812:	60bb      	str	r3, [r7, #8]
      break;
 8007814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007816:	68bb      	ldr	r3, [r7, #8]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bdb0      	pop	{r4, r5, r7, pc}
 8007820:	40023800 	.word	0x40023800
 8007824:	00f42400 	.word	0x00f42400
 8007828:	00b71b00 	.word	0x00b71b00

0800782c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <HAL_RCC_GetHCLKFreq+0x14>)
 8007832:	681b      	ldr	r3, [r3, #0]
}
 8007834:	4618      	mov	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000000 	.word	0x20000000

08007844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007848:	f7ff fff0 	bl	800782c <HAL_RCC_GetHCLKFreq>
 800784c:	4602      	mov	r2, r0
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	0a9b      	lsrs	r3, r3, #10
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4903      	ldr	r1, [pc, #12]	; (8007868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800785a:	5ccb      	ldrb	r3, [r1, r3]
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007860:	4618      	mov	r0, r3
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40023800 	.word	0x40023800
 8007868:	0800f860 	.word	0x0800f860

0800786c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007870:	f7ff ffdc 	bl	800782c <HAL_RCC_GetHCLKFreq>
 8007874:	4602      	mov	r2, r0
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	0b5b      	lsrs	r3, r3, #13
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	4903      	ldr	r1, [pc, #12]	; (8007890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007882:	5ccb      	ldrb	r3, [r1, r3]
 8007884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007888:	4618      	mov	r0, r3
 800788a:	bd80      	pop	{r7, pc}
 800788c:	40023800 	.word	0x40023800
 8007890:	0800f860 	.word	0x0800f860

08007894 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	220f      	movs	r2, #15
 80078a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078a4:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <HAL_RCC_GetClockConfig+0x5c>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0203 	and.w	r2, r3, #3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078b0:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <HAL_RCC_GetClockConfig+0x5c>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078bc:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <HAL_RCC_GetClockConfig+0x5c>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80078c8:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <HAL_RCC_GetClockConfig+0x5c>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	08db      	lsrs	r3, r3, #3
 80078ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <HAL_RCC_GetClockConfig+0x60>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 020f 	and.w	r2, r3, #15
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	601a      	str	r2, [r3, #0]
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40023800 	.word	0x40023800
 80078f4:	40023c00 	.word	0x40023c00

080078f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007904:	2300      	movs	r3, #0
 8007906:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10b      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800791c:	2b00      	cmp	r3, #0
 800791e:	d105      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007928:	2b00      	cmp	r3, #0
 800792a:	d075      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800792c:	4bad      	ldr	r3, [pc, #692]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007932:	f7fb fa29 	bl	8002d88 <HAL_GetTick>
 8007936:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007938:	e008      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800793a:	f7fb fa25 	bl	8002d88 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	2b02      	cmp	r3, #2
 8007946:	d901      	bls.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007948:	2303      	movs	r3, #3
 800794a:	e18b      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800794c:	4ba6      	ldr	r3, [pc, #664]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f0      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d009      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	019a      	lsls	r2, r3, #6
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	071b      	lsls	r3, r3, #28
 8007970:	499d      	ldr	r1, [pc, #628]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007972:	4313      	orrs	r3, r2
 8007974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01f      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007984:	4b98      	ldr	r3, [pc, #608]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800798a:	0f1b      	lsrs	r3, r3, #28
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	019a      	lsls	r2, r3, #6
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	431a      	orrs	r2, r3
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	071b      	lsls	r3, r3, #28
 80079a4:	4990      	ldr	r1, [pc, #576]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80079ac:	4b8e      	ldr	r3, [pc, #568]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b2:	f023 021f 	bic.w	r2, r3, #31
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	498a      	ldr	r1, [pc, #552]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00d      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	019a      	lsls	r2, r3, #6
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	061b      	lsls	r3, r3, #24
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	071b      	lsls	r3, r3, #28
 80079e4:	4980      	ldr	r1, [pc, #512]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079ec:	4b7d      	ldr	r3, [pc, #500]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079f2:	f7fb f9c9 	bl	8002d88 <HAL_GetTick>
 80079f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079f8:	e008      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079fa:	f7fb f9c5 	bl	8002d88 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e12b      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a0c:	4b76      	ldr	r3, [pc, #472]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d105      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d079      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a30:	4b6e      	ldr	r3, [pc, #440]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a36:	f7fb f9a7 	bl	8002d88 <HAL_GetTick>
 8007a3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a3c:	e008      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007a3e:	f7fb f9a3 	bl	8002d88 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e109      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a50:	4b65      	ldr	r3, [pc, #404]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a5c:	d0ef      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d020      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a6a:	4b5f      	ldr	r3, [pc, #380]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a70:	0f1b      	lsrs	r3, r3, #28
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	019a      	lsls	r2, r3, #6
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	061b      	lsls	r3, r3, #24
 8007a84:	431a      	orrs	r2, r3
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	071b      	lsls	r3, r3, #28
 8007a8a:	4957      	ldr	r1, [pc, #348]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a92:	4b55      	ldr	r3, [pc, #340]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	4950      	ldr	r1, [pc, #320]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01e      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ab8:	4b4b      	ldr	r3, [pc, #300]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007abe:	0e1b      	lsrs	r3, r3, #24
 8007ac0:	f003 030f 	and.w	r3, r3, #15
 8007ac4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	019a      	lsls	r2, r3, #6
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	061b      	lsls	r3, r3, #24
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	071b      	lsls	r3, r3, #28
 8007ad8:	4943      	ldr	r1, [pc, #268]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007ae0:	4b41      	ldr	r3, [pc, #260]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	493e      	ldr	r1, [pc, #248]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007af6:	4b3d      	ldr	r3, [pc, #244]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007afc:	f7fb f944 	bl	8002d88 <HAL_GetTick>
 8007b00:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007b04:	f7fb f940 	bl	8002d88 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e0a6      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b16:	4b34      	ldr	r3, [pc, #208]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b22:	d1ef      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0320 	and.w	r3, r3, #32
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 808d 	beq.w	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	4b2c      	ldr	r3, [pc, #176]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	4a2b      	ldr	r2, [pc, #172]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b40:	6413      	str	r3, [r2, #64]	; 0x40
 8007b42:	4b29      	ldr	r3, [pc, #164]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b4e:	4b28      	ldr	r3, [pc, #160]	; (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a27      	ldr	r2, [pc, #156]	; (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b5a:	f7fb f915 	bl	8002d88 <HAL_GetTick>
 8007b5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b60:	e008      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b62:	f7fb f911 	bl	8002d88 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e077      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b74:	4b1e      	ldr	r3, [pc, #120]	; (8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0f0      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b80:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d039      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d032      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b9e:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ba8:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007bae:	4b11      	ldr	r3, [pc, #68]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007bb4:	4a0c      	ldr	r2, [pc, #48]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007bba:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d11e      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007bc6:	f7fb f8df 	bl	8002d88 <HAL_GetTick>
 8007bca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bcc:	e014      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bce:	f7fb f8db 	bl	8002d88 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d90b      	bls.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e03f      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007be4:	42470068 	.word	0x42470068
 8007be8:	40023800 	.word	0x40023800
 8007bec:	42470070 	.word	0x42470070
 8007bf0:	40007000 	.word	0x40007000
 8007bf4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bf8:	4b1c      	ldr	r3, [pc, #112]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0e4      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c10:	d10d      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007c12:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c26:	4911      	ldr	r1, [pc, #68]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	608b      	str	r3, [r1, #8]
 8007c2c:	e005      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	4a0e      	ldr	r2, [pc, #56]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c34:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c38:	6093      	str	r3, [r2, #8]
 8007c3a:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c46:	4909      	ldr	r1, [pc, #36]	; (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0310 	and.w	r3, r3, #16
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007c5e:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007c60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	424711e0 	.word	0x424711e0

08007c74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e022      	b.n	8007ccc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d105      	bne.n	8007c9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7fa fca5 	bl	80025e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2203      	movs	r2, #3
 8007ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f814 	bl	8007cd4 <HAL_SD_InitCard>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e00a      	b.n	8007ccc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007cd4:	b5b0      	push	{r4, r5, r7, lr}
 8007cd6:	b08e      	sub	sp, #56	; 0x38
 8007cd8:	af04      	add	r7, sp, #16
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007cf0:	2376      	movs	r3, #118	; 0x76
 8007cf2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681d      	ldr	r5, [r3, #0]
 8007cf8:	466c      	mov	r4, sp
 8007cfa:	f107 0314 	add.w	r3, r7, #20
 8007cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d06:	f107 0308 	add.w	r3, r7, #8
 8007d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f001 ff95 	bl	8009c3c <SDIO_Init>
 8007d12:	4603      	mov	r3, r0
 8007d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e04c      	b.n	8007dbe <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007d24:	4b28      	ldr	r3, [pc, #160]	; (8007dc8 <HAL_SD_InitCard+0xf4>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f001 ffbc 	bl	8009cac <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007d34:	4b24      	ldr	r3, [pc, #144]	; (8007dc8 <HAL_SD_InitCard+0xf4>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fe10 	bl	8008960 <SD_PowerON>
 8007d40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e02e      	b.n	8007dbe <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fd31 	bl	80087c8 <SD_InitCard>
 8007d66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e01b      	b.n	8007dbe <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f002 f81f 	bl	8009dd2 <SDMMC_CmdBlockLength>
 8007d94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00f      	beq.n	8007dbc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <HAL_SD_InitCard+0xf8>)
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3728      	adds	r7, #40	; 0x28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	422580a0 	.word	0x422580a0
 8007dcc:	004005ff 	.word	0x004005ff

08007dd0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08c      	sub	sp, #48	; 0x30
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d107      	bne.n	8007df8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e0c0      	b.n	8007f7a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	f040 80b9 	bne.w	8007f78 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	441a      	add	r2, r3
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d907      	bls.n	8007e2a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e0a7      	b.n	8007f7a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2203      	movs	r2, #3
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	6812      	ldr	r2, [r2, #0]
 8007e44:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007e48:	f043 0302 	orr.w	r3, r3, #2
 8007e4c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	4a4c      	ldr	r2, [pc, #304]	; (8007f84 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007e54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	4a4b      	ldr	r2, [pc, #300]	; (8007f88 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007e5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	2200      	movs	r2, #0
 8007e64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	689a      	ldr	r2, [r3, #8]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3380      	adds	r3, #128	; 0x80
 8007e94:	4619      	mov	r1, r3
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	025b      	lsls	r3, r3, #9
 8007e9c:	089b      	lsrs	r3, r3, #2
 8007e9e:	f7fb fc17 	bl	80036d0 <HAL_DMA_Start_IT>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d017      	beq.n	8007ed8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007eb6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a33      	ldr	r2, [pc, #204]	; (8007f8c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007ebe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e050      	b.n	8007f7a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007ed8:	4b2d      	ldr	r3, [pc, #180]	; (8007f90 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d002      	beq.n	8007eec <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	025b      	lsls	r3, r3, #9
 8007eea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007eec:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	025b      	lsls	r3, r3, #9
 8007ef6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007ef8:	2390      	movs	r3, #144	; 0x90
 8007efa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007efc:	2302      	movs	r3, #2
 8007efe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f107 0210 	add.w	r2, r7, #16
 8007f10:	4611      	mov	r1, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 ff31 	bl	8009d7a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d90a      	bls.n	8007f34 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2282      	movs	r2, #130	; 0x82
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 ff95 	bl	8009e5a <SDMMC_CmdReadMultiBlock>
 8007f30:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f32:	e009      	b.n	8007f48 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2281      	movs	r2, #129	; 0x81
 8007f38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 ff68 	bl	8009e16 <SDMMC_CmdReadSingleBlock>
 8007f46:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d012      	beq.n	8007f74 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a0e      	ldr	r2, [pc, #56]	; (8007f8c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007f54:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e002      	b.n	8007f7a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e000      	b.n	8007f7a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007f78:	2302      	movs	r3, #2
  }
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3730      	adds	r7, #48	; 0x30
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	080086b3 	.word	0x080086b3
 8007f88:	08008725 	.word	0x08008725
 8007f8c:	004005ff 	.word	0x004005ff
 8007f90:	4225858c 	.word	0x4225858c

08007f94 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b08c      	sub	sp, #48	; 0x30
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d107      	bne.n	8007fbc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e0c5      	b.n	8008148 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	f040 80be 	bne.w	8008146 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	441a      	add	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d907      	bls.n	8007fee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e0ac      	b.n	8008148 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2203      	movs	r2, #3
 8007ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	6812      	ldr	r2, [r2, #0]
 8008008:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800800c:	f043 0302 	orr.w	r3, r3, #2
 8008010:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	4a4e      	ldr	r2, [pc, #312]	; (8008150 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8008018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	4a4d      	ldr	r2, [pc, #308]	; (8008154 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008020:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008026:	2200      	movs	r2, #0
 8008028:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802e:	2b01      	cmp	r3, #1
 8008030:	d002      	beq.n	8008038 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	025b      	lsls	r3, r3, #9
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d90a      	bls.n	8008054 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	22a0      	movs	r2, #160	; 0xa0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800804a:	4618      	mov	r0, r3
 800804c:	f001 ff49 	bl	8009ee2 <SDMMC_CmdWriteMultiBlock>
 8008050:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008052:	e009      	b.n	8008068 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2290      	movs	r2, #144	; 0x90
 8008058:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008060:	4618      	mov	r0, r3
 8008062:	f001 ff1c 	bl	8009e9e <SDMMC_CmdWriteSingleBlock>
 8008066:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d012      	beq.n	8008094 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a39      	ldr	r2, [pc, #228]	; (8008158 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008074:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800807a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807c:	431a      	orrs	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e059      	b.n	8008148 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008094:	4b31      	ldr	r3, [pc, #196]	; (800815c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008096:	2201      	movs	r2, #1
 8008098:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809e:	2240      	movs	r2, #64	; 0x40
 80080a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3380      	adds	r3, #128	; 0x80
 80080ca:	461a      	mov	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	025b      	lsls	r3, r3, #9
 80080d0:	089b      	lsrs	r3, r3, #2
 80080d2:	f7fb fafd 	bl	80036d0 <HAL_DMA_Start_IT>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01c      	beq.n	8008116 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80080ea:	f023 0302 	bic.w	r3, r3, #2
 80080ee:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a18      	ldr	r2, [pc, #96]	; (8008158 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e018      	b.n	8008148 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008116:	f04f 33ff 	mov.w	r3, #4294967295
 800811a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	025b      	lsls	r3, r3, #9
 8008120:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008122:	2390      	movs	r3, #144	; 0x90
 8008124:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800812a:	2300      	movs	r3, #0
 800812c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800812e:	2301      	movs	r3, #1
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f107 0210 	add.w	r2, r7, #16
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f001 fe1c 	bl	8009d7a <SDIO_ConfigData>

      return HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	e000      	b.n	8008148 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8008146:	2302      	movs	r3, #2
  }
}
 8008148:	4618      	mov	r0, r3
 800814a:	3730      	adds	r7, #48	; 0x30
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	08008689 	.word	0x08008689
 8008154:	08008725 	.word	0x08008725
 8008158:	004005ff 	.word	0x004005ff
 800815c:	4225858c 	.word	0x4225858c

08008160 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008182:	0f9b      	lsrs	r3, r3, #30
 8008184:	b2da      	uxtb	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800818e:	0e9b      	lsrs	r3, r3, #26
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081a0:	0e1b      	lsrs	r3, r3, #24
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0303 	and.w	r3, r3, #3
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b2:	0c1b      	lsrs	r3, r3, #16
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d4:	0d1b      	lsrs	r3, r3, #20
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e0:	0c1b      	lsrs	r3, r3, #16
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081f2:	0bdb      	lsrs	r3, r3, #15
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008204:	0b9b      	lsrs	r3, r3, #14
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008216:	0b5b      	lsrs	r3, r3, #13
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008228:	0b1b      	lsrs	r3, r3, #12
 800822a:	b2db      	uxtb	r3, r3
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	b2da      	uxtb	r2, r3
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2200      	movs	r2, #0
 800823a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008240:	2b00      	cmp	r3, #0
 8008242:	d163      	bne.n	800830c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008248:	009a      	lsls	r2, r3, #2
 800824a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800824e:	4013      	ands	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008254:	0f92      	lsrs	r2, r2, #30
 8008256:	431a      	orrs	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008260:	0edb      	lsrs	r3, r3, #27
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008272:	0e1b      	lsrs	r3, r3, #24
 8008274:	b2db      	uxtb	r3, r3
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	b2da      	uxtb	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008284:	0d5b      	lsrs	r3, r3, #21
 8008286:	b2db      	uxtb	r3, r3
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	b2da      	uxtb	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008296:	0c9b      	lsrs	r3, r3, #18
 8008298:	b2db      	uxtb	r3, r3
 800829a:	f003 0307 	and.w	r3, r3, #7
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a8:	0bdb      	lsrs	r3, r3, #15
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	7e1b      	ldrb	r3, [r3, #24]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	3302      	adds	r3, #2
 80082cc:	2201      	movs	r2, #1
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80082d6:	fb02 f203 	mul.w	r2, r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	7a1b      	ldrb	r3, [r3, #8]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 030f 	and.w	r3, r3, #15
 80082e8:	2201      	movs	r2, #1
 80082ea:	409a      	lsls	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80082f8:	0a52      	lsrs	r2, r2, #9
 80082fa:	fb02 f203 	mul.w	r2, r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008308:	661a      	str	r2, [r3, #96]	; 0x60
 800830a:	e031      	b.n	8008370 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008310:	2b01      	cmp	r3, #1
 8008312:	d11d      	bne.n	8008350 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008322:	0c1b      	lsrs	r3, r3, #16
 8008324:	431a      	orrs	r2, r3
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	3301      	adds	r3, #1
 8008330:	029a      	lsls	r2, r3, #10
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008344:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	661a      	str	r2, [r3, #96]	; 0x60
 800834e:	e00f      	b.n	8008370 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a58      	ldr	r2, [pc, #352]	; (80084b8 <HAL_SD_GetCardCSD+0x344>)
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e09d      	b.n	80084ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008374:	0b9b      	lsrs	r3, r3, #14
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	b2da      	uxtb	r2, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008386:	09db      	lsrs	r3, r3, #7
 8008388:	b2db      	uxtb	r3, r3
 800838a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838e:	b2da      	uxtb	r2, r3
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a8:	0fdb      	lsrs	r3, r3, #31
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b4:	0f5b      	lsrs	r3, r3, #29
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c6:	0e9b      	lsrs	r3, r3, #26
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d8:	0d9b      	lsrs	r3, r3, #22
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 030f 	and.w	r3, r3, #15
 80083e0:	b2da      	uxtb	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ea:	0d5b      	lsrs	r3, r3, #21
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	0c1b      	lsrs	r3, r3, #16
 8008408:	b2db      	uxtb	r3, r3
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	b2da      	uxtb	r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	0bdb      	lsrs	r3, r3, #15
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	b2da      	uxtb	r2, r3
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842e:	0b9b      	lsrs	r3, r3, #14
 8008430:	b2db      	uxtb	r3, r3
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	b2da      	uxtb	r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	0b5b      	lsrs	r3, r3, #13
 8008444:	b2db      	uxtb	r3, r3
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	b2da      	uxtb	r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008456:	0b1b      	lsrs	r3, r3, #12
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846a:	0a9b      	lsrs	r3, r3, #10
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 0303 	and.w	r3, r3, #3
 8008472:	b2da      	uxtb	r2, r3
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	b2da      	uxtb	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008492:	085b      	lsrs	r3, r3, #1
 8008494:	b2db      	uxtb	r3, r3
 8008496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849a:	b2da      	uxtb	r2, r3
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	004005ff 	.word	0x004005ff

080084bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008514:	b5b0      	push	{r4, r5, r7, lr}
 8008516:	b08e      	sub	sp, #56	; 0x38
 8008518:	af04      	add	r7, sp, #16
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2203      	movs	r2, #3
 8008528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008530:	2b03      	cmp	r3, #3
 8008532:	d02e      	beq.n	8008592 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853a:	d106      	bne.n	800854a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	639a      	str	r2, [r3, #56]	; 0x38
 8008548:	e029      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008550:	d10a      	bne.n	8008568 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 faba 	bl	8008acc <SD_WideBus_Enable>
 8008558:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	639a      	str	r2, [r3, #56]	; 0x38
 8008566:	e01a      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10a      	bne.n	8008584 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 faf7 	bl	8008b62 <SD_WideBus_Disable>
 8008574:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
 8008582:	e00c      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	639a      	str	r2, [r3, #56]	; 0x38
 8008590:	e005      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a26      	ldr	r2, [pc, #152]	; (8008644 <HAL_SD_ConfigWideBusOperation+0x130>)
 80085ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085bc:	e01f      	b.n	80085fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681d      	ldr	r5, [r3, #0]
 80085e4:	466c      	mov	r4, sp
 80085e6:	f107 0314 	add.w	r3, r7, #20
 80085ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085f2:	f107 0308 	add.w	r3, r7, #8
 80085f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085f8:	4628      	mov	r0, r5
 80085fa:	f001 fb1f 	bl	8009c3c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008606:	4618      	mov	r0, r3
 8008608:	f001 fbe3 	bl	8009dd2 <SDMMC_CmdBlockLength>
 800860c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00c      	beq.n	800862e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a0a      	ldr	r2, [pc, #40]	; (8008644 <HAL_SD_ConfigWideBusOperation+0x130>)
 800861a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800863a:	4618      	mov	r0, r3
 800863c:	3728      	adds	r7, #40	; 0x28
 800863e:	46bd      	mov	sp, r7
 8008640:	bdb0      	pop	{r4, r5, r7, pc}
 8008642:	bf00      	nop
 8008644:	004005ff 	.word	0x004005ff

08008648 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008654:	f107 030c 	add.w	r3, r7, #12
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fa0e 	bl	8008a7c <SD_SendStatus>
 8008660:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	431a      	orrs	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	0a5b      	lsrs	r3, r3, #9
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800867e:	693b      	ldr	r3, [r7, #16]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80086a6:	bf00      	nop
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c4:	2b82      	cmp	r3, #130	; 0x82
 80086c6:	d111      	bne.n	80086ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 fc2b 	bl	8009f28 <SDMMC_CmdStopTransfer>
 80086d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	431a      	orrs	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f7ff fd3a 	bl	8008160 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0208 	bic.w	r2, r2, #8
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f240 523a 	movw	r2, #1338	; 0x53a
 8008704:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f002 fb35 	bl	800ad84 <HAL_SD_RxCpltCallback>
#endif
}
 800871a:	bf00      	nop
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7fb f9de 	bl	8003af4 <HAL_DMA_GetError>
 8008738:	4603      	mov	r3, r0
 800873a:	2b02      	cmp	r3, #2
 800873c:	d03e      	beq.n	80087bc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008744:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d002      	beq.n	800875a <SD_DMAError+0x36>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d12d      	bne.n	80087b6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a19      	ldr	r2, [pc, #100]	; (80087c4 <SD_DMAError+0xa0>)
 8008760:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008770:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008776:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800877e:	6978      	ldr	r0, [r7, #20]
 8008780:	f7ff ff62 	bl	8008648 <HAL_SD_GetCardState>
 8008784:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b06      	cmp	r3, #6
 800878a:	d002      	beq.n	8008792 <SD_DMAError+0x6e>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2b05      	cmp	r3, #5
 8008790:	d10a      	bne.n	80087a8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4618      	mov	r0, r3
 8008798:	f001 fbc6 	bl	8009f28 <SDMMC_CmdStopTransfer>
 800879c:	4602      	mov	r2, r0
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	431a      	orrs	r2, r3
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80087b6:	6978      	ldr	r0, [r7, #20]
 80087b8:	f7ff fcd2 	bl	8008160 <HAL_SD_ErrorCallback>
#endif
  }
}
 80087bc:	bf00      	nop
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	004005ff 	.word	0x004005ff

080087c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80087c8:	b5b0      	push	{r4, r5, r7, lr}
 80087ca:	b094      	sub	sp, #80	; 0x50
 80087cc:	af04      	add	r7, sp, #16
 80087ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80087d0:	2301      	movs	r3, #1
 80087d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4618      	mov	r0, r3
 80087da:	f001 fa76 	bl	8009cca <SDIO_GetPowerState>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087e8:	e0b6      	b.n	8008958 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d02f      	beq.n	8008852 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 fca0 	bl	800a13c <SDMMC_CmdSendCID>
 80087fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <SD_InitCard+0x40>
    {
      return errorstate;
 8008804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008806:	e0a7      	b.n	8008958 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f001 faa0 	bl	8009d54 <SDIO_GetResponse>
 8008814:	4602      	mov	r2, r0
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2104      	movs	r1, #4
 8008820:	4618      	mov	r0, r3
 8008822:	f001 fa97 	bl	8009d54 <SDIO_GetResponse>
 8008826:	4602      	mov	r2, r0
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2108      	movs	r1, #8
 8008832:	4618      	mov	r0, r3
 8008834:	f001 fa8e 	bl	8009d54 <SDIO_GetResponse>
 8008838:	4602      	mov	r2, r0
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	210c      	movs	r1, #12
 8008844:	4618      	mov	r0, r3
 8008846:	f001 fa85 	bl	8009d54 <SDIO_GetResponse>
 800884a:	4602      	mov	r2, r0
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008856:	2b03      	cmp	r3, #3
 8008858:	d00d      	beq.n	8008876 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f107 020e 	add.w	r2, r7, #14
 8008862:	4611      	mov	r1, r2
 8008864:	4618      	mov	r0, r3
 8008866:	f001 fca6 	bl	800a1b6 <SDMMC_CmdSetRelAdd>
 800886a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800886c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <SD_InitCard+0xae>
    {
      return errorstate;
 8008872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008874:	e070      	b.n	8008958 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887a:	2b03      	cmp	r3, #3
 800887c:	d036      	beq.n	80088ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800887e:	89fb      	ldrh	r3, [r7, #14]
 8008880:	461a      	mov	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800888e:	041b      	lsls	r3, r3, #16
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	f001 fc70 	bl	800a178 <SDMMC_CmdSendCSD>
 8008898:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800889a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80088a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a2:	e059      	b.n	8008958 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 fa52 	bl	8009d54 <SDIO_GetResponse>
 80088b0:	4602      	mov	r2, r0
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2104      	movs	r1, #4
 80088bc:	4618      	mov	r0, r3
 80088be:	f001 fa49 	bl	8009d54 <SDIO_GetResponse>
 80088c2:	4602      	mov	r2, r0
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2108      	movs	r1, #8
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 fa40 	bl	8009d54 <SDIO_GetResponse>
 80088d4:	4602      	mov	r2, r0
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	210c      	movs	r1, #12
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 fa37 	bl	8009d54 <SDIO_GetResponse>
 80088e6:	4602      	mov	r2, r0
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2104      	movs	r1, #4
 80088f2:	4618      	mov	r0, r3
 80088f4:	f001 fa2e 	bl	8009d54 <SDIO_GetResponse>
 80088f8:	4603      	mov	r3, r0
 80088fa:	0d1a      	lsrs	r2, r3, #20
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008900:	f107 0310 	add.w	r3, r7, #16
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fc34 	bl	8008174 <HAL_SD_GetCardCSD>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d002      	beq.n	8008918 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008912:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008916:	e01f      	b.n	8008958 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6819      	ldr	r1, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008920:	041b      	lsls	r3, r3, #16
 8008922:	461a      	mov	r2, r3
 8008924:	f04f 0300 	mov.w	r3, #0
 8008928:	4608      	mov	r0, r1
 800892a:	f001 fb1f 	bl	8009f6c <SDMMC_CmdSelDesel>
 800892e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <SD_InitCard+0x172>
  {
    return errorstate;
 8008936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008938:	e00e      	b.n	8008958 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681d      	ldr	r5, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	466c      	mov	r4, sp
 8008942:	f103 0210 	add.w	r2, r3, #16
 8008946:	ca07      	ldmia	r2, {r0, r1, r2}
 8008948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800894c:	3304      	adds	r3, #4
 800894e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008950:	4628      	mov	r0, r5
 8008952:	f001 f973 	bl	8009c3c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3740      	adds	r7, #64	; 0x40
 800895c:	46bd      	mov	sp, r7
 800895e:	bdb0      	pop	{r4, r5, r7, pc}

08008960 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800896c:	2300      	movs	r3, #0
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	2300      	movs	r3, #0
 8008972:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f001 fb1a 	bl	8009fb2 <SDMMC_CmdGoIdleState>
 800897e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	e072      	b.n	8008a70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f001 fb2d 	bl	8009fee <SDMMC_CmdOperCond>
 8008994:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00d      	beq.n	80089b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 fb03 	bl	8009fb2 <SDMMC_CmdGoIdleState>
 80089ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <SD_PowerON+0x5e>
    {
      return errorstate;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	e05b      	b.n	8008a70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d137      	bne.n	8008a36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 fb2d 	bl	800a02c <SDMMC_CmdAppCommand>
 80089d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d02d      	beq.n	8008a36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089de:	e047      	b.n	8008a70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2100      	movs	r1, #0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f001 fb20 	bl	800a02c <SDMMC_CmdAppCommand>
 80089ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	e03b      	b.n	8008a70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	491e      	ldr	r1, [pc, #120]	; (8008a78 <SD_PowerON+0x118>)
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 fb36 	bl	800a070 <SDMMC_CmdAppOperCommand>
 8008a04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a10:	e02e      	b.n	8008a70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2100      	movs	r1, #0
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 f99b 	bl	8009d54 <SDIO_GetResponse>
 8008a1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	0fdb      	lsrs	r3, r3, #31
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <SD_PowerON+0xcc>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e000      	b.n	8008a2e <SD_PowerON+0xce>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]

    count++;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d802      	bhi.n	8008a46 <SD_PowerON+0xe6>
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0cc      	beq.n	80089e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d902      	bls.n	8008a56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a54:	e00c      	b.n	8008a70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	645a      	str	r2, [r3, #68]	; 0x44
 8008a66:	e002      	b.n	8008a6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	c1100000 	.word	0xc1100000

08008a7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a90:	e018      	b.n	8008ac4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9a:	041b      	lsls	r3, r3, #16
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	f001 fbaa 	bl	800a1f8 <SDMMC_CmdSendStatus>
 8008aa4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	e009      	b.n	8008ac4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f001 f94c 	bl	8009d54 <SDIO_GetResponse>
 8008abc:	4602      	mov	r2, r0
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	2300      	movs	r3, #0
 8008ada:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f001 f936 	bl	8009d54 <SDIO_GetResponse>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008af2:	d102      	bne.n	8008afa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008af4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008af8:	e02f      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008afa:	f107 030c 	add.w	r3, r7, #12
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f879 	bl	8008bf8 <SD_FindSCR>
 8008b06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	e023      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d01c      	beq.n	8008b56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b24:	041b      	lsls	r3, r3, #16
 8008b26:	4619      	mov	r1, r3
 8008b28:	4610      	mov	r0, r2
 8008b2a:	f001 fa7f 	bl	800a02c <SDMMC_CmdAppCommand>
 8008b2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	e00f      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2102      	movs	r1, #2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 fab8 	bl	800a0b6 <SDMMC_CmdBusWidth>
 8008b46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	e003      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	e001      	b.n	8008b5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b086      	sub	sp, #24
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2100      	movs	r1, #0
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 f8eb 	bl	8009d54 <SDIO_GetResponse>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b88:	d102      	bne.n	8008b90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b8e:	e02f      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b90:	f107 030c 	add.w	r3, r7, #12
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f82e 	bl	8008bf8 <SD_FindSCR>
 8008b9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	e023      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d01c      	beq.n	8008bec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bba:	041b      	lsls	r3, r3, #16
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f001 fa34 	bl	800a02c <SDMMC_CmdAppCommand>
 8008bc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	e00f      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 fa6d 	bl	800a0b6 <SDMMC_CmdBusWidth>
 8008bdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	e003      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	e001      	b.n	8008bf0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b08f      	sub	sp, #60	; 0x3c
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c02:	f7fa f8c1 	bl	8002d88 <HAL_GetTick>
 8008c06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60bb      	str	r3, [r7, #8]
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2108      	movs	r1, #8
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 f8d7 	bl	8009dd2 <SDMMC_CmdBlockLength>
 8008c24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	e0b2      	b.n	8008d96 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c38:	041b      	lsls	r3, r3, #16
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	f001 f9f5 	bl	800a02c <SDMMC_CmdAppCommand>
 8008c42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	e0a3      	b.n	8008d96 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c54:	2308      	movs	r3, #8
 8008c56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008c58:	2330      	movs	r3, #48	; 0x30
 8008c5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008c64:	2301      	movs	r3, #1
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f107 0210 	add.w	r2, r7, #16
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 f881 	bl	8009d7a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 fa3c 	bl	800a0fa <SDMMC_CmdSendSCR>
 8008c82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d02a      	beq.n	8008ce0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	e083      	b.n	8008d96 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00f      	beq.n	8008cbc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6819      	ldr	r1, [r3, #0]
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	f107 0208 	add.w	r2, r7, #8
 8008ca8:	18d4      	adds	r4, r2, r3
 8008caa:	4608      	mov	r0, r1
 8008cac:	f000 fff1 	bl	8009c92 <SDIO_ReadFIFO>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	6023      	str	r3, [r4, #0]
      index++;
 8008cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8008cba:	e006      	b.n	8008cca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d012      	beq.n	8008cf0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cca:	f7fa f85d 	bl	8002d88 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d102      	bne.n	8008ce0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cde:	e05a      	b.n	8008d96 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0cf      	beq.n	8008c8e <SD_FindSCR+0x96>
 8008cee:	e000      	b.n	8008cf2 <SD_FindSCR+0xfa>
      break;
 8008cf0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf8:	f003 0308 	and.w	r3, r3, #8
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2208      	movs	r2, #8
 8008d06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d08:	2308      	movs	r3, #8
 8008d0a:	e044      	b.n	8008d96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d005      	beq.n	8008d26 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d22:	2302      	movs	r3, #2
 8008d24:	e037      	b.n	8008d96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d005      	beq.n	8008d40 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d3c:	2320      	movs	r3, #32
 8008d3e:	e02a      	b.n	8008d96 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d48:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	061a      	lsls	r2, r3, #24
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	0a1b      	lsrs	r3, r3, #8
 8008d5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	0e1b      	lsrs	r3, r3, #24
 8008d66:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	601a      	str	r2, [r3, #0]
    scr++;
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	3304      	adds	r3, #4
 8008d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	061a      	lsls	r2, r3, #24
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	021b      	lsls	r3, r3, #8
 8008d7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	0a1b      	lsrs	r3, r3, #8
 8008d84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	0e1b      	lsrs	r3, r3, #24
 8008d8e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	373c      	adds	r7, #60	; 0x3c
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd90      	pop	{r4, r7, pc}

08008d9e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e025      	b.n	8008dfe <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d106      	bne.n	8008dcc <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7f9 fe94 	bl	8002af4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4610      	mov	r0, r2
 8008de0:	f000 fe3a 	bl	8009a58 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	461a      	mov	r2, r3
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	f000 fea5 	bl	8009b3e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e07b      	b.n	8008f10 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d108      	bne.n	8008e32 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e28:	d009      	beq.n	8008e3e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	61da      	str	r2, [r3, #28]
 8008e30:	e005      	b.n	8008e3e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7f9 fc2d 	bl	80026b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2202      	movs	r2, #2
 8008e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008e86:	431a      	orrs	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e90:	431a      	orrs	r2, r3
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec2:	ea42 0103 	orr.w	r1, r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	0c1b      	lsrs	r3, r3, #16
 8008edc:	f003 0104 	and.w	r1, r3, #4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	f003 0210 	and.w	r2, r3, #16
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	69da      	ldr	r2, [r3, #28]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008efe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d101      	bne.n	8008f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e041      	b.n	8008fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d106      	bne.n	8008f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f839 	bl	8008fb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3304      	adds	r3, #4
 8008f54:	4619      	mov	r1, r3
 8008f56:	4610      	mov	r0, r2
 8008f58:	f000 f9d8 	bl	800930c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
	...

08008fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d001      	beq.n	8008fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e04e      	b.n	8009082 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0201 	orr.w	r2, r2, #1
 8008ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a23      	ldr	r2, [pc, #140]	; (8009090 <HAL_TIM_Base_Start_IT+0xc4>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d022      	beq.n	800904c <HAL_TIM_Base_Start_IT+0x80>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800900e:	d01d      	beq.n	800904c <HAL_TIM_Base_Start_IT+0x80>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a1f      	ldr	r2, [pc, #124]	; (8009094 <HAL_TIM_Base_Start_IT+0xc8>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d018      	beq.n	800904c <HAL_TIM_Base_Start_IT+0x80>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a1e      	ldr	r2, [pc, #120]	; (8009098 <HAL_TIM_Base_Start_IT+0xcc>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d013      	beq.n	800904c <HAL_TIM_Base_Start_IT+0x80>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a1c      	ldr	r2, [pc, #112]	; (800909c <HAL_TIM_Base_Start_IT+0xd0>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00e      	beq.n	800904c <HAL_TIM_Base_Start_IT+0x80>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1b      	ldr	r2, [pc, #108]	; (80090a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d009      	beq.n	800904c <HAL_TIM_Base_Start_IT+0x80>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a19      	ldr	r2, [pc, #100]	; (80090a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_TIM_Base_Start_IT+0x80>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a18      	ldr	r2, [pc, #96]	; (80090a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d111      	bne.n	8009070 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b06      	cmp	r3, #6
 800905c:	d010      	beq.n	8009080 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0201 	orr.w	r2, r2, #1
 800906c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906e:	e007      	b.n	8009080 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3714      	adds	r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	40010000 	.word	0x40010000
 8009094:	40000400 	.word	0x40000400
 8009098:	40000800 	.word	0x40000800
 800909c:	40000c00 	.word	0x40000c00
 80090a0:	40010400 	.word	0x40010400
 80090a4:	40014000 	.word	0x40014000
 80090a8:	40001800 	.word	0x40001800

080090ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f003 0302 	and.w	r3, r3, #2
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d122      	bne.n	8009108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d11b      	bne.n	8009108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0202 	mvn.w	r2, #2
 80090d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	f003 0303 	and.w	r3, r3, #3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f8ee 	bl	80092d0 <HAL_TIM_IC_CaptureCallback>
 80090f4:	e005      	b.n	8009102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f8e0 	bl	80092bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f8f1 	bl	80092e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b04      	cmp	r3, #4
 8009114:	d122      	bne.n	800915c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0304 	and.w	r3, r3, #4
 8009120:	2b04      	cmp	r3, #4
 8009122:	d11b      	bne.n	800915c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0204 	mvn.w	r2, #4
 800912c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2202      	movs	r2, #2
 8009132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f8c4 	bl	80092d0 <HAL_TIM_IC_CaptureCallback>
 8009148:	e005      	b.n	8009156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f8b6 	bl	80092bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f8c7 	bl	80092e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f003 0308 	and.w	r3, r3, #8
 8009166:	2b08      	cmp	r3, #8
 8009168:	d122      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b08      	cmp	r3, #8
 8009176:	d11b      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0208 	mvn.w	r2, #8
 8009180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2204      	movs	r2, #4
 8009186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f89a 	bl	80092d0 <HAL_TIM_IC_CaptureCallback>
 800919c:	e005      	b.n	80091aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f88c 	bl	80092bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f89d 	bl	80092e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0310 	and.w	r3, r3, #16
 80091ba:	2b10      	cmp	r3, #16
 80091bc:	d122      	bne.n	8009204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0310 	and.w	r3, r3, #16
 80091c8:	2b10      	cmp	r3, #16
 80091ca:	d11b      	bne.n	8009204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0210 	mvn.w	r2, #16
 80091d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2208      	movs	r2, #8
 80091da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f870 	bl	80092d0 <HAL_TIM_IC_CaptureCallback>
 80091f0:	e005      	b.n	80091fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f862 	bl	80092bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f873 	bl	80092e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b01      	cmp	r3, #1
 8009210:	d10e      	bne.n	8009230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b01      	cmp	r3, #1
 800921e:	d107      	bne.n	8009230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f06f 0201 	mvn.w	r2, #1
 8009228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7f8 ff98 	bl	8002160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923a:	2b80      	cmp	r3, #128	; 0x80
 800923c:	d10e      	bne.n	800925c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009248:	2b80      	cmp	r3, #128	; 0x80
 800924a:	d107      	bne.n	800925c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f902 	bl	8009460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009266:	2b40      	cmp	r3, #64	; 0x40
 8009268:	d10e      	bne.n	8009288 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	d107      	bne.n	8009288 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f838 	bl	80092f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0320 	and.w	r3, r3, #32
 8009292:	2b20      	cmp	r3, #32
 8009294:	d10e      	bne.n	80092b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d107      	bne.n	80092b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f06f 0220 	mvn.w	r2, #32
 80092ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f8cc 	bl	800944c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092d8:	bf00      	nop
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a40      	ldr	r2, [pc, #256]	; (8009420 <TIM_Base_SetConfig+0x114>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d013      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800932a:	d00f      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a3d      	ldr	r2, [pc, #244]	; (8009424 <TIM_Base_SetConfig+0x118>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00b      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a3c      	ldr	r2, [pc, #240]	; (8009428 <TIM_Base_SetConfig+0x11c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a3b      	ldr	r2, [pc, #236]	; (800942c <TIM_Base_SetConfig+0x120>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_Base_SetConfig+0x40>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a3a      	ldr	r2, [pc, #232]	; (8009430 <TIM_Base_SetConfig+0x124>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d108      	bne.n	800935e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a2f      	ldr	r2, [pc, #188]	; (8009420 <TIM_Base_SetConfig+0x114>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d02b      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936c:	d027      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a2c      	ldr	r2, [pc, #176]	; (8009424 <TIM_Base_SetConfig+0x118>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d023      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a2b      	ldr	r2, [pc, #172]	; (8009428 <TIM_Base_SetConfig+0x11c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d01f      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a2a      	ldr	r2, [pc, #168]	; (800942c <TIM_Base_SetConfig+0x120>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01b      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a29      	ldr	r2, [pc, #164]	; (8009430 <TIM_Base_SetConfig+0x124>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d017      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a28      	ldr	r2, [pc, #160]	; (8009434 <TIM_Base_SetConfig+0x128>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d013      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a27      	ldr	r2, [pc, #156]	; (8009438 <TIM_Base_SetConfig+0x12c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d00f      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a26      	ldr	r2, [pc, #152]	; (800943c <TIM_Base_SetConfig+0x130>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00b      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a25      	ldr	r2, [pc, #148]	; (8009440 <TIM_Base_SetConfig+0x134>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d007      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a24      	ldr	r2, [pc, #144]	; (8009444 <TIM_Base_SetConfig+0x138>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d003      	beq.n	80093be <TIM_Base_SetConfig+0xb2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a23      	ldr	r2, [pc, #140]	; (8009448 <TIM_Base_SetConfig+0x13c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d108      	bne.n	80093d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a0a      	ldr	r2, [pc, #40]	; (8009420 <TIM_Base_SetConfig+0x114>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d003      	beq.n	8009404 <TIM_Base_SetConfig+0xf8>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a0c      	ldr	r2, [pc, #48]	; (8009430 <TIM_Base_SetConfig+0x124>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d103      	bne.n	800940c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	691a      	ldr	r2, [r3, #16]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	615a      	str	r2, [r3, #20]
}
 8009412:	bf00      	nop
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40010000 	.word	0x40010000
 8009424:	40000400 	.word	0x40000400
 8009428:	40000800 	.word	0x40000800
 800942c:	40000c00 	.word	0x40000c00
 8009430:	40010400 	.word	0x40010400
 8009434:	40014000 	.word	0x40014000
 8009438:	40014400 	.word	0x40014400
 800943c:	40014800 	.word	0x40014800
 8009440:	40001800 	.word	0x40001800
 8009444:	40001c00 	.word	0x40001c00
 8009448:	40002000 	.word	0x40002000

0800944c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d101      	bne.n	8009486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e03f      	b.n	8009506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d106      	bne.n	80094a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7f9 f954 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2224      	movs	r2, #36	; 0x24
 80094a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f905 	bl	80096c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691a      	ldr	r2, [r3, #16]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	695a      	ldr	r2, [r3, #20]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68da      	ldr	r2, [r3, #12]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2220      	movs	r2, #32
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b08a      	sub	sp, #40	; 0x28
 8009512:	af02      	add	r7, sp, #8
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	603b      	str	r3, [r7, #0]
 800951a:	4613      	mov	r3, r2
 800951c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b20      	cmp	r3, #32
 800952c:	d17c      	bne.n	8009628 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <HAL_UART_Transmit+0x2c>
 8009534:	88fb      	ldrh	r3, [r7, #6]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e075      	b.n	800962a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009544:	2b01      	cmp	r3, #1
 8009546:	d101      	bne.n	800954c <HAL_UART_Transmit+0x3e>
 8009548:	2302      	movs	r3, #2
 800954a:	e06e      	b.n	800962a <HAL_UART_Transmit+0x11c>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2221      	movs	r2, #33	; 0x21
 800955e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009562:	f7f9 fc11 	bl	8002d88 <HAL_GetTick>
 8009566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	88fa      	ldrh	r2, [r7, #6]
 800956c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	88fa      	ldrh	r2, [r7, #6]
 8009572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957c:	d108      	bne.n	8009590 <HAL_UART_Transmit+0x82>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d104      	bne.n	8009590 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	e003      	b.n	8009598 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009594:	2300      	movs	r3, #0
 8009596:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80095a0:	e02a      	b.n	80095f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2200      	movs	r2, #0
 80095aa:	2180      	movs	r1, #128	; 0x80
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f840 	bl	8009632 <UART_WaitOnFlagUntilTimeout>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e036      	b.n	800962a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10b      	bne.n	80095da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	3302      	adds	r3, #2
 80095d6:	61bb      	str	r3, [r7, #24]
 80095d8:	e007      	b.n	80095ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	3301      	adds	r3, #1
 80095e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	3b01      	subs	r3, #1
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1cf      	bne.n	80095a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2200      	movs	r2, #0
 800960a:	2140      	movs	r1, #64	; 0x40
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f810 	bl	8009632 <UART_WaitOnFlagUntilTimeout>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e006      	b.n	800962a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2220      	movs	r2, #32
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e000      	b.n	800962a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009628:	2302      	movs	r3, #2
  }
}
 800962a:	4618      	mov	r0, r3
 800962c:	3720      	adds	r7, #32
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	603b      	str	r3, [r7, #0]
 800963e:	4613      	mov	r3, r2
 8009640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009642:	e02c      	b.n	800969e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964a:	d028      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d007      	beq.n	8009662 <UART_WaitOnFlagUntilTimeout+0x30>
 8009652:	f7f9 fb99 	bl	8002d88 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	429a      	cmp	r2, r3
 8009660:	d21d      	bcs.n	800969e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68da      	ldr	r2, [r3, #12]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009670:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	695a      	ldr	r2, [r3, #20]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0201 	bic.w	r2, r2, #1
 8009680:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2220      	movs	r2, #32
 8009686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e00f      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4013      	ands	r3, r2
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	bf0c      	ite	eq
 80096ae:	2301      	moveq	r3, #1
 80096b0:	2300      	movne	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	461a      	mov	r2, r3
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d0c3      	beq.n	8009644 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	b09f      	sub	sp, #124	; 0x7c
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80096dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096de:	68d9      	ldr	r1, [r3, #12]
 80096e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	ea40 0301 	orr.w	r3, r0, r1
 80096e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ec:	689a      	ldr	r2, [r3, #8]
 80096ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	431a      	orrs	r2, r3
 80096fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	4313      	orrs	r3, r2
 8009700:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800970c:	f021 010c 	bic.w	r1, r1, #12
 8009710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009716:	430b      	orrs	r3, r1
 8009718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800971a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009726:	6999      	ldr	r1, [r3, #24]
 8009728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	ea40 0301 	orr.w	r3, r0, r1
 8009730:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	4bc5      	ldr	r3, [pc, #788]	; (8009a4c <UART_SetConfig+0x384>)
 8009738:	429a      	cmp	r2, r3
 800973a:	d004      	beq.n	8009746 <UART_SetConfig+0x7e>
 800973c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	4bc3      	ldr	r3, [pc, #780]	; (8009a50 <UART_SetConfig+0x388>)
 8009742:	429a      	cmp	r2, r3
 8009744:	d103      	bne.n	800974e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009746:	f7fe f891 	bl	800786c <HAL_RCC_GetPCLK2Freq>
 800974a:	6778      	str	r0, [r7, #116]	; 0x74
 800974c:	e002      	b.n	8009754 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800974e:	f7fe f879 	bl	8007844 <HAL_RCC_GetPCLK1Freq>
 8009752:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800975c:	f040 80b6 	bne.w	80098cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009762:	461c      	mov	r4, r3
 8009764:	f04f 0500 	mov.w	r5, #0
 8009768:	4622      	mov	r2, r4
 800976a:	462b      	mov	r3, r5
 800976c:	1891      	adds	r1, r2, r2
 800976e:	6439      	str	r1, [r7, #64]	; 0x40
 8009770:	415b      	adcs	r3, r3
 8009772:	647b      	str	r3, [r7, #68]	; 0x44
 8009774:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009778:	1912      	adds	r2, r2, r4
 800977a:	eb45 0303 	adc.w	r3, r5, r3
 800977e:	f04f 0000 	mov.w	r0, #0
 8009782:	f04f 0100 	mov.w	r1, #0
 8009786:	00d9      	lsls	r1, r3, #3
 8009788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800978c:	00d0      	lsls	r0, r2, #3
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	1911      	adds	r1, r2, r4
 8009794:	6639      	str	r1, [r7, #96]	; 0x60
 8009796:	416b      	adcs	r3, r5
 8009798:	667b      	str	r3, [r7, #100]	; 0x64
 800979a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	461a      	mov	r2, r3
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	1891      	adds	r1, r2, r2
 80097a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80097a8:	415b      	adcs	r3, r3
 80097aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80097b4:	f7f6 ff40 	bl	8000638 <__aeabi_uldivmod>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4ba5      	ldr	r3, [pc, #660]	; (8009a54 <UART_SetConfig+0x38c>)
 80097be:	fba3 2302 	umull	r2, r3, r3, r2
 80097c2:	095b      	lsrs	r3, r3, #5
 80097c4:	011e      	lsls	r6, r3, #4
 80097c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097c8:	461c      	mov	r4, r3
 80097ca:	f04f 0500 	mov.w	r5, #0
 80097ce:	4622      	mov	r2, r4
 80097d0:	462b      	mov	r3, r5
 80097d2:	1891      	adds	r1, r2, r2
 80097d4:	6339      	str	r1, [r7, #48]	; 0x30
 80097d6:	415b      	adcs	r3, r3
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
 80097da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80097de:	1912      	adds	r2, r2, r4
 80097e0:	eb45 0303 	adc.w	r3, r5, r3
 80097e4:	f04f 0000 	mov.w	r0, #0
 80097e8:	f04f 0100 	mov.w	r1, #0
 80097ec:	00d9      	lsls	r1, r3, #3
 80097ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80097f2:	00d0      	lsls	r0, r2, #3
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	1911      	adds	r1, r2, r4
 80097fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80097fc:	416b      	adcs	r3, r5
 80097fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	461a      	mov	r2, r3
 8009806:	f04f 0300 	mov.w	r3, #0
 800980a:	1891      	adds	r1, r2, r2
 800980c:	62b9      	str	r1, [r7, #40]	; 0x28
 800980e:	415b      	adcs	r3, r3
 8009810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009816:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800981a:	f7f6 ff0d 	bl	8000638 <__aeabi_uldivmod>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4b8c      	ldr	r3, [pc, #560]	; (8009a54 <UART_SetConfig+0x38c>)
 8009824:	fba3 1302 	umull	r1, r3, r3, r2
 8009828:	095b      	lsrs	r3, r3, #5
 800982a:	2164      	movs	r1, #100	; 0x64
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	3332      	adds	r3, #50	; 0x32
 8009836:	4a87      	ldr	r2, [pc, #540]	; (8009a54 <UART_SetConfig+0x38c>)
 8009838:	fba2 2303 	umull	r2, r3, r2, r3
 800983c:	095b      	lsrs	r3, r3, #5
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009844:	441e      	add	r6, r3
 8009846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009848:	4618      	mov	r0, r3
 800984a:	f04f 0100 	mov.w	r1, #0
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	1894      	adds	r4, r2, r2
 8009854:	623c      	str	r4, [r7, #32]
 8009856:	415b      	adcs	r3, r3
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
 800985a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800985e:	1812      	adds	r2, r2, r0
 8009860:	eb41 0303 	adc.w	r3, r1, r3
 8009864:	f04f 0400 	mov.w	r4, #0
 8009868:	f04f 0500 	mov.w	r5, #0
 800986c:	00dd      	lsls	r5, r3, #3
 800986e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009872:	00d4      	lsls	r4, r2, #3
 8009874:	4622      	mov	r2, r4
 8009876:	462b      	mov	r3, r5
 8009878:	1814      	adds	r4, r2, r0
 800987a:	653c      	str	r4, [r7, #80]	; 0x50
 800987c:	414b      	adcs	r3, r1
 800987e:	657b      	str	r3, [r7, #84]	; 0x54
 8009880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	461a      	mov	r2, r3
 8009886:	f04f 0300 	mov.w	r3, #0
 800988a:	1891      	adds	r1, r2, r2
 800988c:	61b9      	str	r1, [r7, #24]
 800988e:	415b      	adcs	r3, r3
 8009890:	61fb      	str	r3, [r7, #28]
 8009892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009896:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800989a:	f7f6 fecd 	bl	8000638 <__aeabi_uldivmod>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4b6c      	ldr	r3, [pc, #432]	; (8009a54 <UART_SetConfig+0x38c>)
 80098a4:	fba3 1302 	umull	r1, r3, r3, r2
 80098a8:	095b      	lsrs	r3, r3, #5
 80098aa:	2164      	movs	r1, #100	; 0x64
 80098ac:	fb01 f303 	mul.w	r3, r1, r3
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	00db      	lsls	r3, r3, #3
 80098b4:	3332      	adds	r3, #50	; 0x32
 80098b6:	4a67      	ldr	r2, [pc, #412]	; (8009a54 <UART_SetConfig+0x38c>)
 80098b8:	fba2 2303 	umull	r2, r3, r2, r3
 80098bc:	095b      	lsrs	r3, r3, #5
 80098be:	f003 0207 	and.w	r2, r3, #7
 80098c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4432      	add	r2, r6
 80098c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098ca:	e0b9      	b.n	8009a40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ce:	461c      	mov	r4, r3
 80098d0:	f04f 0500 	mov.w	r5, #0
 80098d4:	4622      	mov	r2, r4
 80098d6:	462b      	mov	r3, r5
 80098d8:	1891      	adds	r1, r2, r2
 80098da:	6139      	str	r1, [r7, #16]
 80098dc:	415b      	adcs	r3, r3
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80098e4:	1912      	adds	r2, r2, r4
 80098e6:	eb45 0303 	adc.w	r3, r5, r3
 80098ea:	f04f 0000 	mov.w	r0, #0
 80098ee:	f04f 0100 	mov.w	r1, #0
 80098f2:	00d9      	lsls	r1, r3, #3
 80098f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098f8:	00d0      	lsls	r0, r2, #3
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	eb12 0804 	adds.w	r8, r2, r4
 8009902:	eb43 0905 	adc.w	r9, r3, r5
 8009906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4618      	mov	r0, r3
 800990c:	f04f 0100 	mov.w	r1, #0
 8009910:	f04f 0200 	mov.w	r2, #0
 8009914:	f04f 0300 	mov.w	r3, #0
 8009918:	008b      	lsls	r3, r1, #2
 800991a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800991e:	0082      	lsls	r2, r0, #2
 8009920:	4640      	mov	r0, r8
 8009922:	4649      	mov	r1, r9
 8009924:	f7f6 fe88 	bl	8000638 <__aeabi_uldivmod>
 8009928:	4602      	mov	r2, r0
 800992a:	460b      	mov	r3, r1
 800992c:	4b49      	ldr	r3, [pc, #292]	; (8009a54 <UART_SetConfig+0x38c>)
 800992e:	fba3 2302 	umull	r2, r3, r3, r2
 8009932:	095b      	lsrs	r3, r3, #5
 8009934:	011e      	lsls	r6, r3, #4
 8009936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009938:	4618      	mov	r0, r3
 800993a:	f04f 0100 	mov.w	r1, #0
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	1894      	adds	r4, r2, r2
 8009944:	60bc      	str	r4, [r7, #8]
 8009946:	415b      	adcs	r3, r3
 8009948:	60fb      	str	r3, [r7, #12]
 800994a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800994e:	1812      	adds	r2, r2, r0
 8009950:	eb41 0303 	adc.w	r3, r1, r3
 8009954:	f04f 0400 	mov.w	r4, #0
 8009958:	f04f 0500 	mov.w	r5, #0
 800995c:	00dd      	lsls	r5, r3, #3
 800995e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009962:	00d4      	lsls	r4, r2, #3
 8009964:	4622      	mov	r2, r4
 8009966:	462b      	mov	r3, r5
 8009968:	1814      	adds	r4, r2, r0
 800996a:	64bc      	str	r4, [r7, #72]	; 0x48
 800996c:	414b      	adcs	r3, r1
 800996e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4618      	mov	r0, r3
 8009976:	f04f 0100 	mov.w	r1, #0
 800997a:	f04f 0200 	mov.w	r2, #0
 800997e:	f04f 0300 	mov.w	r3, #0
 8009982:	008b      	lsls	r3, r1, #2
 8009984:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009988:	0082      	lsls	r2, r0, #2
 800998a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800998e:	f7f6 fe53 	bl	8000638 <__aeabi_uldivmod>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4b2f      	ldr	r3, [pc, #188]	; (8009a54 <UART_SetConfig+0x38c>)
 8009998:	fba3 1302 	umull	r1, r3, r3, r2
 800999c:	095b      	lsrs	r3, r3, #5
 800999e:	2164      	movs	r1, #100	; 0x64
 80099a0:	fb01 f303 	mul.w	r3, r1, r3
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	011b      	lsls	r3, r3, #4
 80099a8:	3332      	adds	r3, #50	; 0x32
 80099aa:	4a2a      	ldr	r2, [pc, #168]	; (8009a54 <UART_SetConfig+0x38c>)
 80099ac:	fba2 2303 	umull	r2, r3, r2, r3
 80099b0:	095b      	lsrs	r3, r3, #5
 80099b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099b6:	441e      	add	r6, r3
 80099b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099ba:	4618      	mov	r0, r3
 80099bc:	f04f 0100 	mov.w	r1, #0
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	1894      	adds	r4, r2, r2
 80099c6:	603c      	str	r4, [r7, #0]
 80099c8:	415b      	adcs	r3, r3
 80099ca:	607b      	str	r3, [r7, #4]
 80099cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099d0:	1812      	adds	r2, r2, r0
 80099d2:	eb41 0303 	adc.w	r3, r1, r3
 80099d6:	f04f 0400 	mov.w	r4, #0
 80099da:	f04f 0500 	mov.w	r5, #0
 80099de:	00dd      	lsls	r5, r3, #3
 80099e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099e4:	00d4      	lsls	r4, r2, #3
 80099e6:	4622      	mov	r2, r4
 80099e8:	462b      	mov	r3, r5
 80099ea:	eb12 0a00 	adds.w	sl, r2, r0
 80099ee:	eb43 0b01 	adc.w	fp, r3, r1
 80099f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f04f 0100 	mov.w	r1, #0
 80099fc:	f04f 0200 	mov.w	r2, #0
 8009a00:	f04f 0300 	mov.w	r3, #0
 8009a04:	008b      	lsls	r3, r1, #2
 8009a06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a0a:	0082      	lsls	r2, r0, #2
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	4659      	mov	r1, fp
 8009a10:	f7f6 fe12 	bl	8000638 <__aeabi_uldivmod>
 8009a14:	4602      	mov	r2, r0
 8009a16:	460b      	mov	r3, r1
 8009a18:	4b0e      	ldr	r3, [pc, #56]	; (8009a54 <UART_SetConfig+0x38c>)
 8009a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8009a1e:	095b      	lsrs	r3, r3, #5
 8009a20:	2164      	movs	r1, #100	; 0x64
 8009a22:	fb01 f303 	mul.w	r3, r1, r3
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	011b      	lsls	r3, r3, #4
 8009a2a:	3332      	adds	r3, #50	; 0x32
 8009a2c:	4a09      	ldr	r2, [pc, #36]	; (8009a54 <UART_SetConfig+0x38c>)
 8009a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	f003 020f 	and.w	r2, r3, #15
 8009a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4432      	add	r2, r6
 8009a3e:	609a      	str	r2, [r3, #8]
}
 8009a40:	bf00      	nop
 8009a42:	377c      	adds	r7, #124	; 0x7c
 8009a44:	46bd      	mov	sp, r7
 8009a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40011000 	.word	0x40011000
 8009a50:	40011400 	.word	0x40011400
 8009a54:	51eb851f 	.word	0x51eb851f

08009a58 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d029      	beq.n	8009ac6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a82:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009a8c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009a92:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009a98:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009a9e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009aa4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8009aaa:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009ab0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8009ab6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	e034      	b.n	8009b30 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ad2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009adc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009ae2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009af6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009afa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009b04:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8009b0a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009b10:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8009b16:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009b1c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b087      	sub	sp, #28
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	60f8      	str	r0, [r7, #12]
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d02e      	beq.n	8009bb6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b64:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009b74:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009b7e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009b88:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009b92:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009b9c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	609a      	str	r2, [r3, #8]
 8009bb4:	e03b      	b.n	8009c2e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bc6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009bec:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009bfc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009c06:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009c10:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	3b01      	subs	r3, #1
 8009c18:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	371c      	adds	r7, #28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	b480      	push	{r7}
 8009c40:	b085      	sub	sp, #20
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	f107 001c 	add.w	r0, r7, #28
 8009c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009c52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009c54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009c56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009c5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009c5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009c62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009c66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009c76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	431a      	orrs	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	b004      	add	sp, #16
 8009c90:	4770      	bx	lr

08009c92 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009cba:	2002      	movs	r0, #2
 8009cbc:	f7f9 f870 	bl	8002da0 <HAL_Delay>
  
  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b083      	sub	sp, #12
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0303 	and.w	r3, r3, #3
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d04:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009d0a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009d10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009d20:	f023 030f 	bic.w	r3, r3, #15
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	431a      	orrs	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	b2db      	uxtb	r3, r3
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3314      	adds	r3, #20
 8009d62:	461a      	mov	r2, r3
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	4413      	add	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
}  
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685a      	ldr	r2, [r3, #4]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009da0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009da6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009dac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0

}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b088      	sub	sp, #32
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009de0:	2310      	movs	r3, #16
 8009de2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009df0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009df2:	f107 0308 	add.w	r3, r7, #8
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff ff74 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e02:	2110      	movs	r1, #16
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fa45 	bl	800a294 <SDMMC_GetCmdResp1>
 8009e0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3720      	adds	r7, #32
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b088      	sub	sp, #32
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009e24:	2311      	movs	r3, #17
 8009e26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e28:	2340      	movs	r3, #64	; 0x40
 8009e2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e36:	f107 0308 	add.w	r3, r7, #8
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f7ff ff52 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e46:	2111      	movs	r1, #17
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fa23 	bl	800a294 <SDMMC_GetCmdResp1>
 8009e4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e50:	69fb      	ldr	r3, [r7, #28]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3720      	adds	r7, #32
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b088      	sub	sp, #32
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009e68:	2312      	movs	r3, #18
 8009e6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e6c:	2340      	movs	r3, #64	; 0x40
 8009e6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e7a:	f107 0308 	add.w	r3, r7, #8
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff ff30 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8a:	2112      	movs	r1, #18
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fa01 	bl	800a294 <SDMMC_GetCmdResp1>
 8009e92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e94:	69fb      	ldr	r3, [r7, #28]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3720      	adds	r7, #32
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b088      	sub	sp, #32
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009eac:	2318      	movs	r3, #24
 8009eae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ebc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ebe:	f107 0308 	add.w	r3, r7, #8
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff ff0e 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ece:	2118      	movs	r1, #24
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f9df 	bl	800a294 <SDMMC_GetCmdResp1>
 8009ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed8:	69fb      	ldr	r3, [r7, #28]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3720      	adds	r7, #32
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b088      	sub	sp, #32
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009ef0:	2319      	movs	r3, #25
 8009ef2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ef4:	2340      	movs	r3, #64	; 0x40
 8009ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff feec 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f12:	2119      	movs	r1, #25
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f9bd 	bl	800a294 <SDMMC_GetCmdResp1>
 8009f1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f1c:	69fb      	ldr	r3, [r7, #28]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3720      	adds	r7, #32
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b088      	sub	sp, #32
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009f30:	2300      	movs	r3, #0
 8009f32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009f34:	230c      	movs	r3, #12
 8009f36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f38:	2340      	movs	r3, #64	; 0x40
 8009f3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f46:	f107 0308 	add.w	r3, r7, #8
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff feca 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009f52:	4a05      	ldr	r2, [pc, #20]	; (8009f68 <SDMMC_CmdStopTransfer+0x40>)
 8009f54:	210c      	movs	r1, #12
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f99c 	bl	800a294 <SDMMC_GetCmdResp1>
 8009f5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f5e:	69fb      	ldr	r3, [r7, #28]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3720      	adds	r7, #32
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	05f5e100 	.word	0x05f5e100

08009f6c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b08a      	sub	sp, #40	; 0x28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f7c:	2307      	movs	r3, #7
 8009f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f80:	2340      	movs	r3, #64	; 0x40
 8009f82:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f8c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f8e:	f107 0310 	add.w	r3, r7, #16
 8009f92:	4619      	mov	r1, r3
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff fea6 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f9e:	2107      	movs	r1, #7
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f000 f977 	bl	800a294 <SDMMC_GetCmdResp1>
 8009fa6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3728      	adds	r7, #40	; 0x28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b088      	sub	sp, #32
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fd0:	f107 0308 	add.w	r3, r7, #8
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7ff fe85 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f92d 	bl	800a23c <SDMMC_GetCmdError>
 8009fe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fe4:	69fb      	ldr	r3, [r7, #28]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3720      	adds	r7, #32
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b088      	sub	sp, #32
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009ff6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009ffa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ffc:	2308      	movs	r3, #8
 8009ffe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a000:	2340      	movs	r3, #64	; 0x40
 800a002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a00c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a00e:	f107 0308 	add.w	r3, r7, #8
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff fe66 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fb24 	bl	800a668 <SDMMC_GetCmdResp7>
 800a020:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a022:	69fb      	ldr	r3, [r7, #28]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3720      	adds	r7, #32
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a03a:	2337      	movs	r3, #55	; 0x37
 800a03c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a03e:	2340      	movs	r3, #64	; 0x40
 800a040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a04a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a04c:	f107 0308 	add.w	r3, r7, #8
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff fe47 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a058:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05c:	2137      	movs	r1, #55	; 0x37
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f918 	bl	800a294 <SDMMC_GetCmdResp1>
 800a064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a066:	69fb      	ldr	r3, [r7, #28]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3720      	adds	r7, #32
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a086:	2329      	movs	r3, #41	; 0x29
 800a088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a08a:	2340      	movs	r3, #64	; 0x40
 800a08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a096:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a098:	f107 0308 	add.w	r3, r7, #8
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7ff fe21 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fa2b 	bl	800a500 <SDMMC_GetCmdResp3>
 800a0aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3720      	adds	r7, #32
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b088      	sub	sp, #32
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a0c4:	2306      	movs	r3, #6
 800a0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff fe02 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a0e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e6:	2106      	movs	r1, #6
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f8d3 	bl	800a294 <SDMMC_GetCmdResp1>
 800a0ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b088      	sub	sp, #32
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a106:	2333      	movs	r3, #51	; 0x33
 800a108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a10a:	2340      	movs	r3, #64	; 0x40
 800a10c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a116:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a118:	f107 0308 	add.w	r3, r7, #8
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f7ff fde1 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a124:	f241 3288 	movw	r2, #5000	; 0x1388
 800a128:	2133      	movs	r1, #51	; 0x33
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f8b2 	bl	800a294 <SDMMC_GetCmdResp1>
 800a130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a132:	69fb      	ldr	r3, [r7, #28]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3720      	adds	r7, #32
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a148:	2302      	movs	r3, #2
 800a14a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a14c:	23c0      	movs	r3, #192	; 0xc0
 800a14e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a150:	2300      	movs	r3, #0
 800a152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a158:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff fdc0 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f982 	bl	800a470 <SDMMC_GetCmdResp2>
 800a16c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a16e:	69fb      	ldr	r3, [r7, #28]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3720      	adds	r7, #32
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a186:	2309      	movs	r3, #9
 800a188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a18a:	23c0      	movs	r3, #192	; 0xc0
 800a18c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a196:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a198:	f107 0308 	add.w	r3, r7, #8
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7ff fda1 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f963 	bl	800a470 <SDMMC_GetCmdResp2>
 800a1aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1ac:	69fb      	ldr	r3, [r7, #28]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b088      	sub	sp, #32
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1c8:	2340      	movs	r3, #64	; 0x40
 800a1ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1d6:	f107 0308 	add.w	r3, r7, #8
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7ff fd82 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	2103      	movs	r1, #3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f9c8 	bl	800a57c <SDMMC_GetCmdResp6>
 800a1ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1ee:	69fb      	ldr	r3, [r7, #28]
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3720      	adds	r7, #32
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a206:	230d      	movs	r3, #13
 800a208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a20a:	2340      	movs	r3, #64	; 0x40
 800a20c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a218:	f107 0308 	add.w	r3, r7, #8
 800a21c:	4619      	mov	r1, r3
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff fd61 	bl	8009ce6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a224:	f241 3288 	movw	r2, #5000	; 0x1388
 800a228:	210d      	movs	r1, #13
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f832 	bl	800a294 <SDMMC_GetCmdResp1>
 800a230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a232:	69fb      	ldr	r3, [r7, #28]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a244:	4b11      	ldr	r3, [pc, #68]	; (800a28c <SDMMC_GetCmdError+0x50>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a11      	ldr	r2, [pc, #68]	; (800a290 <SDMMC_GetCmdError+0x54>)
 800a24a:	fba2 2303 	umull	r2, r3, r2, r3
 800a24e:	0a5b      	lsrs	r3, r3, #9
 800a250:	f241 3288 	movw	r2, #5000	; 0x1388
 800a254:	fb02 f303 	mul.w	r3, r2, r3
 800a258:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	1e5a      	subs	r2, r3, #1
 800a25e:	60fa      	str	r2, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d102      	bne.n	800a26a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a264:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a268:	e009      	b.n	800a27e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0f1      	beq.n	800a25a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	22c5      	movs	r2, #197	; 0xc5
 800a27a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	20000000 	.word	0x20000000
 800a290:	10624dd3 	.word	0x10624dd3

0800a294 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	460b      	mov	r3, r1
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a2a2:	4b70      	ldr	r3, [pc, #448]	; (800a464 <SDMMC_GetCmdResp1+0x1d0>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a70      	ldr	r2, [pc, #448]	; (800a468 <SDMMC_GetCmdResp1+0x1d4>)
 800a2a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ac:	0a5a      	lsrs	r2, r3, #9
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	fb02 f303 	mul.w	r3, r2, r3
 800a2b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	1e5a      	subs	r2, r3, #1
 800a2ba:	61fa      	str	r2, [r7, #28]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d102      	bne.n	800a2c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2c4:	e0c9      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d0ef      	beq.n	800a2b6 <SDMMC_GetCmdResp1+0x22>
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1ea      	bne.n	800a2b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d004      	beq.n	800a2f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2204      	movs	r2, #4
 800a2f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2f2:	2304      	movs	r3, #4
 800a2f4:	e0b1      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d004      	beq.n	800a30c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2201      	movs	r2, #1
 800a306:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a308:	2301      	movs	r3, #1
 800a30a:	e0a6      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	22c5      	movs	r2, #197	; 0xc5
 800a310:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f7ff fd11 	bl	8009d3a <SDIO_GetCommandResponse>
 800a318:	4603      	mov	r3, r0
 800a31a:	461a      	mov	r2, r3
 800a31c:	7afb      	ldrb	r3, [r7, #11]
 800a31e:	4293      	cmp	r3, r2
 800a320:	d001      	beq.n	800a326 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a322:	2301      	movs	r3, #1
 800a324:	e099      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a326:	2100      	movs	r1, #0
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f7ff fd13 	bl	8009d54 <SDIO_GetResponse>
 800a32e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a330:	697a      	ldr	r2, [r7, #20]
 800a332:	4b4e      	ldr	r3, [pc, #312]	; (800a46c <SDMMC_GetCmdResp1+0x1d8>)
 800a334:	4013      	ands	r3, r2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a33a:	2300      	movs	r3, #0
 800a33c:	e08d      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	da02      	bge.n	800a34a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a348:	e087      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	e080      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d001      	beq.n	800a366 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a362:	2380      	movs	r3, #128	; 0x80
 800a364:	e079      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a370:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a374:	e071      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a380:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a384:	e069      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a394:	e061      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a3a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a3a4:	e059      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3b4:	e051      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3c4:	e049      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a3d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a3d4:	e041      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a3e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3e4:	e039      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a3f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3f4:	e031      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a400:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a404:	e029      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a410:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a414:	e021      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a420:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a424:	e019      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a430:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a434:	e011      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a440:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a444:	e009      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f003 0308 	and.w	r3, r3, #8
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a450:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a454:	e001      	b.n	800a45a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3720      	adds	r7, #32
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	20000000 	.word	0x20000000
 800a468:	10624dd3 	.word	0x10624dd3
 800a46c:	fdffe008 	.word	0xfdffe008

0800a470 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a478:	4b1f      	ldr	r3, [pc, #124]	; (800a4f8 <SDMMC_GetCmdResp2+0x88>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a1f      	ldr	r2, [pc, #124]	; (800a4fc <SDMMC_GetCmdResp2+0x8c>)
 800a47e:	fba2 2303 	umull	r2, r3, r2, r3
 800a482:	0a5b      	lsrs	r3, r3, #9
 800a484:	f241 3288 	movw	r2, #5000	; 0x1388
 800a488:	fb02 f303 	mul.w	r3, r2, r3
 800a48c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1e5a      	subs	r2, r3, #1
 800a492:	60fa      	str	r2, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d102      	bne.n	800a49e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a498:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a49c:	e026      	b.n	800a4ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d0ef      	beq.n	800a48e <SDMMC_GetCmdResp2+0x1e>
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1ea      	bne.n	800a48e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4bc:	f003 0304 	and.w	r3, r3, #4
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d004      	beq.n	800a4ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4ca:	2304      	movs	r3, #4
 800a4cc:	e00e      	b.n	800a4ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d004      	beq.n	800a4e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e003      	b.n	800a4ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	22c5      	movs	r2, #197	; 0xc5
 800a4e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	20000000 	.word	0x20000000
 800a4fc:	10624dd3 	.word	0x10624dd3

0800a500 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a508:	4b1a      	ldr	r3, [pc, #104]	; (800a574 <SDMMC_GetCmdResp3+0x74>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a1a      	ldr	r2, [pc, #104]	; (800a578 <SDMMC_GetCmdResp3+0x78>)
 800a50e:	fba2 2303 	umull	r2, r3, r2, r3
 800a512:	0a5b      	lsrs	r3, r3, #9
 800a514:	f241 3288 	movw	r2, #5000	; 0x1388
 800a518:	fb02 f303 	mul.w	r3, r2, r3
 800a51c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	1e5a      	subs	r2, r3, #1
 800a522:	60fa      	str	r2, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d102      	bne.n	800a52e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a528:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a52c:	e01b      	b.n	800a566 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a532:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0ef      	beq.n	800a51e <SDMMC_GetCmdResp3+0x1e>
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1ea      	bne.n	800a51e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d004      	beq.n	800a55e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2204      	movs	r2, #4
 800a558:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a55a:	2304      	movs	r3, #4
 800a55c:	e003      	b.n	800a566 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	22c5      	movs	r2, #197	; 0xc5
 800a562:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20000000 	.word	0x20000000
 800a578:	10624dd3 	.word	0x10624dd3

0800a57c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	460b      	mov	r3, r1
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a58a:	4b35      	ldr	r3, [pc, #212]	; (800a660 <SDMMC_GetCmdResp6+0xe4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a35      	ldr	r2, [pc, #212]	; (800a664 <SDMMC_GetCmdResp6+0xe8>)
 800a590:	fba2 2303 	umull	r2, r3, r2, r3
 800a594:	0a5b      	lsrs	r3, r3, #9
 800a596:	f241 3288 	movw	r2, #5000	; 0x1388
 800a59a:	fb02 f303 	mul.w	r3, r2, r3
 800a59e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	1e5a      	subs	r2, r3, #1
 800a5a4:	61fa      	str	r2, [r7, #28]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d102      	bne.n	800a5b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5ae:	e052      	b.n	800a656 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d0ef      	beq.n	800a5a0 <SDMMC_GetCmdResp6+0x24>
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1ea      	bne.n	800a5a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ce:	f003 0304 	and.w	r3, r3, #4
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d004      	beq.n	800a5e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2204      	movs	r2, #4
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5dc:	2304      	movs	r3, #4
 800a5de:	e03a      	b.n	800a656 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d004      	beq.n	800a5f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e02f      	b.n	800a656 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f7ff fb9f 	bl	8009d3a <SDIO_GetCommandResponse>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	461a      	mov	r2, r3
 800a600:	7afb      	ldrb	r3, [r7, #11]
 800a602:	4293      	cmp	r3, r2
 800a604:	d001      	beq.n	800a60a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a606:	2301      	movs	r3, #1
 800a608:	e025      	b.n	800a656 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	22c5      	movs	r2, #197	; 0xc5
 800a60e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a610:	2100      	movs	r1, #0
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff fb9e 	bl	8009d54 <SDIO_GetResponse>
 800a618:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d106      	bne.n	800a632 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	0c1b      	lsrs	r3, r3, #16
 800a628:	b29a      	uxth	r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a62e:	2300      	movs	r3, #0
 800a630:	e011      	b.n	800a656 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a640:	e009      	b.n	800a656 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a64c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a650:	e001      	b.n	800a656 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a656:	4618      	mov	r0, r3
 800a658:	3720      	adds	r7, #32
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20000000 	.word	0x20000000
 800a664:	10624dd3 	.word	0x10624dd3

0800a668 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a670:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <SDMMC_GetCmdResp7+0x94>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a22      	ldr	r2, [pc, #136]	; (800a700 <SDMMC_GetCmdResp7+0x98>)
 800a676:	fba2 2303 	umull	r2, r3, r2, r3
 800a67a:	0a5b      	lsrs	r3, r3, #9
 800a67c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a680:	fb02 f303 	mul.w	r3, r2, r3
 800a684:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	1e5a      	subs	r2, r3, #1
 800a68a:	60fa      	str	r2, [r7, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d102      	bne.n	800a696 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a694:	e02c      	b.n	800a6f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d0ef      	beq.n	800a686 <SDMMC_GetCmdResp7+0x1e>
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1ea      	bne.n	800a686 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d004      	beq.n	800a6c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2204      	movs	r2, #4
 800a6c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6c2:	2304      	movs	r3, #4
 800a6c4:	e014      	b.n	800a6f0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d004      	beq.n	800a6dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e009      	b.n	800a6f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2240      	movs	r2, #64	; 0x40
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6ee:	2300      	movs	r3, #0
  
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	20000000 	.word	0x20000000
 800a700:	10624dd3 	.word	0x10624dd3

0800a704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a704:	b084      	sub	sp, #16
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	f107 001c 	add.w	r0, r7, #28
 800a712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d122      	bne.n	800a762 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a746:	2b01      	cmp	r3, #1
 800a748:	d105      	bne.n	800a756 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fa56 	bl	800ac08 <USB_CoreReset>
 800a75c:	4603      	mov	r3, r0
 800a75e:	73fb      	strb	r3, [r7, #15]
 800a760:	e01a      	b.n	800a798 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa4a 	bl	800ac08 <USB_CoreReset>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d106      	bne.n	800a78c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	639a      	str	r2, [r3, #56]	; 0x38
 800a78a:	e005      	b.n	800a798 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d10b      	bne.n	800a7b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	f043 0206 	orr.w	r2, r3, #6
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f043 0220 	orr.w	r2, r3, #32
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7c2:	b004      	add	sp, #16
 800a7c4:	4770      	bx	lr

0800a7c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f023 0201 	bic.w	r2, r3, #1
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a800:	78fb      	ldrb	r3, [r7, #3]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d106      	bne.n	800a814 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60da      	str	r2, [r3, #12]
 800a812:	e00b      	b.n	800a82c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	60da      	str	r2, [r3, #12]
 800a826:	e001      	b.n	800a82c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e003      	b.n	800a834 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a82c:	2032      	movs	r0, #50	; 0x32
 800a82e:	f7f8 fab7 	bl	8002da0 <HAL_Delay>

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a83c:	b084      	sub	sp, #16
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a84a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a856:	2300      	movs	r3, #0
 800a858:	613b      	str	r3, [r7, #16]
 800a85a:	e009      	b.n	800a870 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	3340      	adds	r3, #64	; 0x40
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	4413      	add	r3, r2
 800a866:	2200      	movs	r2, #0
 800a868:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	3301      	adds	r3, #1
 800a86e:	613b      	str	r3, [r7, #16]
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	2b0e      	cmp	r3, #14
 800a874:	d9f2      	bls.n	800a85c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d11c      	bne.n	800a8b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a88a:	f043 0302 	orr.w	r3, r3, #2
 800a88e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a894:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38
 800a8b4:	e00b      	b.n	800a8ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	680b      	ldr	r3, [r1, #0]
 800a8ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d10c      	bne.n	800a90e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d104      	bne.n	800a904 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f949 	bl	800ab94 <USB_SetDevSpeed>
 800a902:	e008      	b.n	800a916 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a904:	2101      	movs	r1, #1
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f944 	bl	800ab94 <USB_SetDevSpeed>
 800a90c:	e003      	b.n	800a916 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a90e:	2103      	movs	r1, #3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f93f 	bl	800ab94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a916:	2110      	movs	r1, #16
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f8f3 	bl	800ab04 <USB_FlushTxFifo>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f911 	bl	800ab50 <USB_FlushRxFifo>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93e:	461a      	mov	r2, r3
 800a940:	2300      	movs	r3, #0
 800a942:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94a:	461a      	mov	r2, r3
 800a94c:	2300      	movs	r3, #0
 800a94e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a956:	461a      	mov	r2, r3
 800a958:	2300      	movs	r3, #0
 800a95a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a95c:	2300      	movs	r3, #0
 800a95e:	613b      	str	r3, [r7, #16]
 800a960:	e043      	b.n	800a9ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a978:	d118      	bne.n	800a9ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10a      	bne.n	800a996 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	015a      	lsls	r2, r3, #5
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a98c:	461a      	mov	r2, r3
 800a98e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a992:	6013      	str	r3, [r2, #0]
 800a994:	e013      	b.n	800a9be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	e008      	b.n	800a9be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9dc:	461a      	mov	r2, r3
 800a9de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	613b      	str	r3, [r7, #16]
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d3b7      	bcc.n	800a962 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	613b      	str	r3, [r7, #16]
 800a9f6:	e043      	b.n	800aa80 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa0e:	d118      	bne.n	800aa42 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa22:	461a      	mov	r2, r3
 800aa24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	e013      	b.n	800aa54 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	015a      	lsls	r2, r3, #5
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa38:	461a      	mov	r2, r3
 800aa3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa3e:	6013      	str	r3, [r2, #0]
 800aa40:	e008      	b.n	800aa54 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4e:	461a      	mov	r2, r3
 800aa50:	2300      	movs	r3, #0
 800aa52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa60:	461a      	mov	r2, r3
 800aa62:	2300      	movs	r3, #0
 800aa64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa72:	461a      	mov	r2, r3
 800aa74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d3b7      	bcc.n	800a9f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aaa8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d105      	bne.n	800aabc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	f043 0210 	orr.w	r2, r3, #16
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	699a      	ldr	r2, [r3, #24]
 800aac0:	4b0f      	ldr	r3, [pc, #60]	; (800ab00 <USB_DevInit+0x2c4>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d005      	beq.n	800aada <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	f043 0208 	orr.w	r2, r3, #8
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d107      	bne.n	800aaf0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aae8:	f043 0304 	orr.w	r3, r3, #4
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3718      	adds	r7, #24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aafc:	b004      	add	sp, #16
 800aafe:	4770      	bx	lr
 800ab00:	803c3800 	.word	0x803c3800

0800ab04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	019b      	lsls	r3, r3, #6
 800ab16:	f043 0220 	orr.w	r2, r3, #32
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	3301      	adds	r3, #1
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4a09      	ldr	r2, [pc, #36]	; (800ab4c <USB_FlushTxFifo+0x48>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d901      	bls.n	800ab30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e006      	b.n	800ab3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	f003 0320 	and.w	r3, r3, #32
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d0f0      	beq.n	800ab1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	00030d40 	.word	0x00030d40

0800ab50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2210      	movs	r2, #16
 800ab60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3301      	adds	r3, #1
 800ab66:	60fb      	str	r3, [r7, #12]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4a09      	ldr	r2, [pc, #36]	; (800ab90 <USB_FlushRxFifo+0x40>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d901      	bls.n	800ab74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e006      	b.n	800ab82 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	f003 0310 	and.w	r3, r3, #16
 800ab7c:	2b10      	cmp	r3, #16
 800ab7e:	d0f0      	beq.n	800ab62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	00030d40 	.word	0x00030d40

0800ab94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abb4:	4313      	orrs	r3, r2
 800abb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3714      	adds	r7, #20
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr

0800abc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abc6:	b480      	push	{r7}
 800abc8:	b085      	sub	sp, #20
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abf4:	f043 0302 	orr.w	r3, r3, #2
 800abf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	3301      	adds	r3, #1
 800ac18:	60fb      	str	r3, [r7, #12]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	4a13      	ldr	r2, [pc, #76]	; (800ac6c <USB_CoreReset+0x64>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d901      	bls.n	800ac26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e01b      	b.n	800ac5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	daf2      	bge.n	800ac14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f043 0201 	orr.w	r2, r3, #1
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3301      	adds	r3, #1
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <USB_CoreReset+0x64>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d901      	bls.n	800ac50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e006      	b.n	800ac5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	f003 0301 	and.w	r3, r3, #1
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d0f0      	beq.n	800ac3e <USB_CoreReset+0x36>

  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	00030d40 	.word	0x00030d40

0800ac70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac74:	4904      	ldr	r1, [pc, #16]	; (800ac88 <MX_FATFS_Init+0x18>)
 800ac76:	4805      	ldr	r0, [pc, #20]	; (800ac8c <MX_FATFS_Init+0x1c>)
 800ac78:	f000 fa8a 	bl	800b190 <FATFS_LinkDriver>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	461a      	mov	r2, r3
 800ac80:	4b03      	ldr	r3, [pc, #12]	; (800ac90 <MX_FATFS_Init+0x20>)
 800ac82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ac84:	bf00      	nop
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	200096a8 	.word	0x200096a8
 800ac8c:	0800f870 	.word	0x0800f870
 800ac90:	200096a4 	.word	0x200096a4

0800ac94 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ac9e:	f000 f87b 	bl	800ad98 <BSP_SD_IsDetected>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d001      	beq.n	800acac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e012      	b.n	800acd2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800acac:	480b      	ldr	r0, [pc, #44]	; (800acdc <BSP_SD_Init+0x48>)
 800acae:	f7fc ffe1 	bl	8007c74 <HAL_SD_Init>
 800acb2:	4603      	mov	r3, r0
 800acb4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d109      	bne.n	800acd0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800acbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800acc0:	4806      	ldr	r0, [pc, #24]	; (800acdc <BSP_SD_Init+0x48>)
 800acc2:	f7fd fc27 	bl	8008514 <HAL_SD_ConfigWideBusOperation>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800acd0:	79fb      	ldrb	r3, [r7, #7]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20009504 	.word	0x20009504

0800ace0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	68f9      	ldr	r1, [r7, #12]
 800acf6:	4806      	ldr	r0, [pc, #24]	; (800ad10 <BSP_SD_ReadBlocks_DMA+0x30>)
 800acf8:	f7fd f86a 	bl	8007dd0 <HAL_SD_ReadBlocks_DMA>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	20009504 	.word	0x20009504

0800ad14 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	68f9      	ldr	r1, [r7, #12]
 800ad2a:	4806      	ldr	r0, [pc, #24]	; (800ad44 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ad2c:	f7fd f932 	bl	8007f94 <HAL_SD_WriteBlocks_DMA>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20009504 	.word	0x20009504

0800ad48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad4c:	4805      	ldr	r0, [pc, #20]	; (800ad64 <BSP_SD_GetCardState+0x1c>)
 800ad4e:	f7fd fc7b 	bl	8008648 <HAL_SD_GetCardState>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b04      	cmp	r3, #4
 800ad56:	bf14      	ite	ne
 800ad58:	2301      	movne	r3, #1
 800ad5a:	2300      	moveq	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20009504 	.word	0x20009504

0800ad68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ad70:	6879      	ldr	r1, [r7, #4]
 800ad72:	4803      	ldr	r0, [pc, #12]	; (800ad80 <BSP_SD_GetCardInfo+0x18>)
 800ad74:	f7fd fba2 	bl	80084bc <HAL_SD_GetCardInfo>
}
 800ad78:	bf00      	nop
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	20009504 	.word	0x20009504

0800ad84 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ad8c:	f000 f9a2 	bl	800b0d4 <BSP_SD_ReadCpltCallback>
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ada2:	f000 f80b 	bl	800adbc <BSP_PlatformIsDetected>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800adac:	2300      	movs	r3, #0
 800adae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800adb0:	79fb      	ldrb	r3, [r7, #7]
 800adb2:	b2db      	uxtb	r3, r3
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800adc2:	2301      	movs	r3, #1
 800adc4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800adc6:	2120      	movs	r1, #32
 800adc8:	4806      	ldr	r0, [pc, #24]	; (800ade4 <BSP_PlatformIsDetected+0x28>)
 800adca:	f7f9 f92b 	bl	8004024 <HAL_GPIO_ReadPin>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800add4:	2300      	movs	r3, #0
 800add6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800add8:	79fb      	ldrb	r3, [r7, #7]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	40020800 	.word	0x40020800

0800ade8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800adf0:	f000 fa8e 	bl	800b310 <osKernelGetTickCount>
 800adf4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800adf6:	e006      	b.n	800ae06 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800adf8:	f7ff ffa6 	bl	800ad48 <BSP_SD_GetCardState>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d101      	bne.n	800ae06 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	e009      	b.n	800ae1a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800ae06:	f000 fa83 	bl	800b310 <osKernelGetTickCount>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d8f0      	bhi.n	800adf8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ae16:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae2e:	4b0b      	ldr	r3, [pc, #44]	; (800ae5c <SD_CheckStatus+0x38>)
 800ae30:	2201      	movs	r2, #1
 800ae32:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ae34:	f7ff ff88 	bl	800ad48 <BSP_SD_GetCardState>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d107      	bne.n	800ae4e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae3e:	4b07      	ldr	r3, [pc, #28]	; (800ae5c <SD_CheckStatus+0x38>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f023 0301 	bic.w	r3, r3, #1
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <SD_CheckStatus+0x38>)
 800ae4c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae4e:	4b03      	ldr	r3, [pc, #12]	; (800ae5c <SD_CheckStatus+0x38>)
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	b2db      	uxtb	r3, r3
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	20000009 	.word	0x20000009

0800ae60 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	4603      	mov	r3, r0
 800ae68:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ae6a:	4b1c      	ldr	r3, [pc, #112]	; (800aedc <SD_initialize+0x7c>)
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800ae70:	f000 fa06 	bl	800b280 <osKernelGetState>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d129      	bne.n	800aece <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ae7a:	f7ff ff0b 	bl	800ac94 <BSP_SD_Init>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d107      	bne.n	800ae94 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ae84:	79fb      	ldrb	r3, [r7, #7]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7ff ffcc 	bl	800ae24 <SD_CheckStatus>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	461a      	mov	r2, r3
 800ae90:	4b12      	ldr	r3, [pc, #72]	; (800aedc <SD_initialize+0x7c>)
 800ae92:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ae94:	4b11      	ldr	r3, [pc, #68]	; (800aedc <SD_initialize+0x7c>)
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d017      	beq.n	800aece <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800ae9e:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <SD_initialize+0x80>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d107      	bne.n	800aeb6 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800aea6:	2200      	movs	r2, #0
 800aea8:	2102      	movs	r1, #2
 800aeaa:	200a      	movs	r0, #10
 800aeac:	f000 fb7b 	bl	800b5a6 <osMessageQueueNew>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	4a0b      	ldr	r2, [pc, #44]	; (800aee0 <SD_initialize+0x80>)
 800aeb4:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800aeb6:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <SD_initialize+0x80>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d107      	bne.n	800aece <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800aebe:	4b07      	ldr	r3, [pc, #28]	; (800aedc <SD_initialize+0x7c>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	f043 0301 	orr.w	r3, r3, #1
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b04      	ldr	r3, [pc, #16]	; (800aedc <SD_initialize+0x7c>)
 800aecc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800aece:	4b03      	ldr	r3, [pc, #12]	; (800aedc <SD_initialize+0x7c>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	b2db      	uxtb	r3, r3
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	20000009 	.word	0x20000009
 800aee0:	2000009c 	.word	0x2000009c

0800aee4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	4603      	mov	r3, r0
 800aeec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7ff ff97 	bl	800ae24 <SD_CheckStatus>
 800aef6:	4603      	mov	r3, r0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b088      	sub	sp, #32
 800af04:	af00      	add	r7, sp, #0
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	607a      	str	r2, [r7, #4]
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	4603      	mov	r3, r0
 800af0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800af14:	f247 5030 	movw	r0, #30000	; 0x7530
 800af18:	f7ff ff66 	bl	800ade8 <SD_CheckStatusWithTimeout>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	da01      	bge.n	800af26 <SD_read+0x26>
  {
    return res;
 800af22:	7ffb      	ldrb	r3, [r7, #31]
 800af24:	e02f      	b.n	800af86 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	68b8      	ldr	r0, [r7, #8]
 800af2c:	f7ff fed8 	bl	800ace0 <BSP_SD_ReadBlocks_DMA>
 800af30:	4603      	mov	r3, r0
 800af32:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800af34:	7fbb      	ldrb	r3, [r7, #30]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d124      	bne.n	800af84 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <SD_read+0x90>)
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	f107 0112 	add.w	r1, r7, #18
 800af42:	f247 5330 	movw	r3, #30000	; 0x7530
 800af46:	2200      	movs	r2, #0
 800af48:	f000 fc00 	bl	800b74c <osMessageQueueGet>
 800af4c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d117      	bne.n	800af84 <SD_read+0x84>
 800af54:	8a7b      	ldrh	r3, [r7, #18]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d114      	bne.n	800af84 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800af5a:	f000 f9d9 	bl	800b310 <osKernelGetTickCount>
 800af5e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800af60:	e007      	b.n	800af72 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af62:	f7ff fef1 	bl	800ad48 <BSP_SD_GetCardState>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d102      	bne.n	800af72 <SD_read+0x72>
              {
                res = RES_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800af70:	e008      	b.n	800af84 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800af72:	f000 f9cd 	bl	800b310 <osKernelGetTickCount>
 800af76:	4602      	mov	r2, r0
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	f247 522f 	movw	r2, #29999	; 0x752f
 800af80:	4293      	cmp	r3, r2
 800af82:	d9ee      	bls.n	800af62 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800af84:	7ffb      	ldrb	r3, [r7, #31]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3720      	adds	r7, #32
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	2000009c 	.word	0x2000009c

0800af94 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	603b      	str	r3, [r7, #0]
 800afa0:	4603      	mov	r3, r0
 800afa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800afa8:	f247 5030 	movw	r0, #30000	; 0x7530
 800afac:	f7ff ff1c 	bl	800ade8 <SD_CheckStatusWithTimeout>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	da01      	bge.n	800afba <SD_write+0x26>
  {
    return res;
 800afb6:	7ffb      	ldrb	r3, [r7, #31]
 800afb8:	e02d      	b.n	800b016 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	68b8      	ldr	r0, [r7, #8]
 800afc0:	f7ff fea8 	bl	800ad14 <BSP_SD_WriteBlocks_DMA>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d124      	bne.n	800b014 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800afca:	4b15      	ldr	r3, [pc, #84]	; (800b020 <SD_write+0x8c>)
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f107 0112 	add.w	r1, r7, #18
 800afd2:	f247 5330 	movw	r3, #30000	; 0x7530
 800afd6:	2200      	movs	r2, #0
 800afd8:	f000 fbb8 	bl	800b74c <osMessageQueueGet>
 800afdc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d117      	bne.n	800b014 <SD_write+0x80>
 800afe4:	8a7b      	ldrh	r3, [r7, #18]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d114      	bne.n	800b014 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800afea:	f000 f991 	bl	800b310 <osKernelGetTickCount>
 800afee:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800aff0:	e007      	b.n	800b002 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800aff2:	f7ff fea9 	bl	800ad48 <BSP_SD_GetCardState>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d102      	bne.n	800b002 <SD_write+0x6e>
          {
            res = RES_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	77fb      	strb	r3, [r7, #31]
            break;
 800b000:	e008      	b.n	800b014 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800b002:	f000 f985 	bl	800b310 <osKernelGetTickCount>
 800b006:	4602      	mov	r2, r0
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b010:	4293      	cmp	r3, r2
 800b012:	d9ee      	bls.n	800aff2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800b014:	7ffb      	ldrb	r3, [r7, #31]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3720      	adds	r7, #32
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	2000009c 	.word	0x2000009c

0800b024 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08c      	sub	sp, #48	; 0x30
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	603a      	str	r2, [r7, #0]
 800b02e:	71fb      	strb	r3, [r7, #7]
 800b030:	460b      	mov	r3, r1
 800b032:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b03a:	4b25      	ldr	r3, [pc, #148]	; (800b0d0 <SD_ioctl+0xac>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <SD_ioctl+0x28>
 800b048:	2303      	movs	r3, #3
 800b04a:	e03c      	b.n	800b0c6 <SD_ioctl+0xa2>

  switch (cmd)
 800b04c:	79bb      	ldrb	r3, [r7, #6]
 800b04e:	2b03      	cmp	r3, #3
 800b050:	d834      	bhi.n	800b0bc <SD_ioctl+0x98>
 800b052:	a201      	add	r2, pc, #4	; (adr r2, 800b058 <SD_ioctl+0x34>)
 800b054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b058:	0800b069 	.word	0x0800b069
 800b05c:	0800b071 	.word	0x0800b071
 800b060:	0800b089 	.word	0x0800b089
 800b064:	0800b0a3 	.word	0x0800b0a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b06e:	e028      	b.n	800b0c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b070:	f107 030c 	add.w	r3, r7, #12
 800b074:	4618      	mov	r0, r3
 800b076:	f7ff fe77 	bl	800ad68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b07a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b086:	e01c      	b.n	800b0c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b088:	f107 030c 	add.w	r3, r7, #12
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7ff fe6b 	bl	800ad68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b094:	b29a      	uxth	r2, r3
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0a0:	e00f      	b.n	800b0c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b0a2:	f107 030c 	add.w	r3, r7, #12
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff fe5e 	bl	800ad68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	0a5a      	lsrs	r2, r3, #9
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b0ba:	e002      	b.n	800b0c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b0bc:	2304      	movs	r3, #4
 800b0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b0c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3730      	adds	r7, #48	; 0x30
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	20000009 	.word	0x20000009

0800b0d4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800b0de:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <BSP_SD_ReadCpltCallback+0x20>)
 800b0e0:	6818      	ldr	r0, [r3, #0]
 800b0e2:	1db9      	adds	r1, r7, #6
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f000 fad0 	bl	800b68c <osMessageQueuePut>
#endif
}
 800b0ec:	bf00      	nop
 800b0ee:	3708      	adds	r7, #8
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	2000009c 	.word	0x2000009c

0800b0f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	4613      	mov	r3, r2
 800b104:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b106:	2301      	movs	r3, #1
 800b108:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b10e:	4b1f      	ldr	r3, [pc, #124]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b110:	7a5b      	ldrb	r3, [r3, #9]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b00      	cmp	r3, #0
 800b116:	d131      	bne.n	800b17c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b118:	4b1c      	ldr	r3, [pc, #112]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b11a:	7a5b      	ldrb	r3, [r3, #9]
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	461a      	mov	r2, r3
 800b120:	4b1a      	ldr	r3, [pc, #104]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b122:	2100      	movs	r1, #0
 800b124:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b126:	4b19      	ldr	r3, [pc, #100]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b128:	7a5b      	ldrb	r3, [r3, #9]
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	4a17      	ldr	r2, [pc, #92]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b136:	4b15      	ldr	r3, [pc, #84]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b138:	7a5b      	ldrb	r3, [r3, #9]
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	4b13      	ldr	r3, [pc, #76]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b140:	4413      	add	r3, r2
 800b142:	79fa      	ldrb	r2, [r7, #7]
 800b144:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b146:	4b11      	ldr	r3, [pc, #68]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b148:	7a5b      	ldrb	r3, [r3, #9]
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	1c5a      	adds	r2, r3, #1
 800b14e:	b2d1      	uxtb	r1, r2
 800b150:	4a0e      	ldr	r2, [pc, #56]	; (800b18c <FATFS_LinkDriverEx+0x94>)
 800b152:	7251      	strb	r1, [r2, #9]
 800b154:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b156:	7dbb      	ldrb	r3, [r7, #22]
 800b158:	3330      	adds	r3, #48	; 0x30
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	3301      	adds	r3, #1
 800b164:	223a      	movs	r2, #58	; 0x3a
 800b166:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	3302      	adds	r3, #2
 800b16c:	222f      	movs	r2, #47	; 0x2f
 800b16e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	3303      	adds	r3, #3
 800b174:	2200      	movs	r2, #0
 800b176:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b178:	2300      	movs	r3, #0
 800b17a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	371c      	adds	r7, #28
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	200000a0 	.word	0x200000a0

0800b190 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b19a:	2200      	movs	r2, #0
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff ffaa 	bl	800b0f8 <FATFS_LinkDriverEx>
 800b1a4:	4603      	mov	r3, r0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <__NVIC_SetPriority>:
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	6039      	str	r1, [r7, #0]
 800b1ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	db0a      	blt.n	800b1da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	490c      	ldr	r1, [pc, #48]	; (800b1fc <__NVIC_SetPriority+0x4c>)
 800b1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1ce:	0112      	lsls	r2, r2, #4
 800b1d0:	b2d2      	uxtb	r2, r2
 800b1d2:	440b      	add	r3, r1
 800b1d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b1d8:	e00a      	b.n	800b1f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	4908      	ldr	r1, [pc, #32]	; (800b200 <__NVIC_SetPriority+0x50>)
 800b1e0:	79fb      	ldrb	r3, [r7, #7]
 800b1e2:	f003 030f 	and.w	r3, r3, #15
 800b1e6:	3b04      	subs	r3, #4
 800b1e8:	0112      	lsls	r2, r2, #4
 800b1ea:	b2d2      	uxtb	r2, r2
 800b1ec:	440b      	add	r3, r1
 800b1ee:	761a      	strb	r2, [r3, #24]
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	e000e100 	.word	0xe000e100
 800b200:	e000ed00 	.word	0xe000ed00

0800b204 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b204:	b580      	push	{r7, lr}
 800b206:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b208:	4b05      	ldr	r3, [pc, #20]	; (800b220 <SysTick_Handler+0x1c>)
 800b20a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b20c:	f002 fa22 	bl	800d654 <xTaskGetSchedulerState>
 800b210:	4603      	mov	r3, r0
 800b212:	2b01      	cmp	r3, #1
 800b214:	d001      	beq.n	800b21a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b216:	f003 f907 	bl	800e428 <xPortSysTickHandler>
  }
}
 800b21a:	bf00      	nop
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	e000e010 	.word	0xe000e010

0800b224 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b224:	b580      	push	{r7, lr}
 800b226:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b228:	2100      	movs	r1, #0
 800b22a:	f06f 0004 	mvn.w	r0, #4
 800b22e:	f7ff ffbf 	bl	800b1b0 <__NVIC_SetPriority>
#endif
}
 800b232:	bf00      	nop
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b23e:	f3ef 8305 	mrs	r3, IPSR
 800b242:	603b      	str	r3, [r7, #0]
  return(result);
 800b244:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b24a:	f06f 0305 	mvn.w	r3, #5
 800b24e:	607b      	str	r3, [r7, #4]
 800b250:	e00c      	b.n	800b26c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b252:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <osKernelInitialize+0x44>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d105      	bne.n	800b266 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b25a:	4b08      	ldr	r3, [pc, #32]	; (800b27c <osKernelInitialize+0x44>)
 800b25c:	2201      	movs	r2, #1
 800b25e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b260:	2300      	movs	r3, #0
 800b262:	607b      	str	r3, [r7, #4]
 800b264:	e002      	b.n	800b26c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b266:	f04f 33ff 	mov.w	r3, #4294967295
 800b26a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b26c:	687b      	ldr	r3, [r7, #4]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr
 800b27a:	bf00      	nop
 800b27c:	200000ac 	.word	0x200000ac

0800b280 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800b286:	f002 f9e5 	bl	800d654 <xTaskGetSchedulerState>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <osKernelGetState+0x1a>
 800b290:	2b02      	cmp	r3, #2
 800b292:	d105      	bne.n	800b2a0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800b294:	2302      	movs	r3, #2
 800b296:	607b      	str	r3, [r7, #4]
      break;
 800b298:	e00c      	b.n	800b2b4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800b29a:	2303      	movs	r3, #3
 800b29c:	607b      	str	r3, [r7, #4]
      break;
 800b29e:	e009      	b.n	800b2b4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800b2a0:	4b07      	ldr	r3, [pc, #28]	; (800b2c0 <osKernelGetState+0x40>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d102      	bne.n	800b2ae <osKernelGetState+0x2e>
        state = osKernelReady;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800b2ac:	e001      	b.n	800b2b2 <osKernelGetState+0x32>
        state = osKernelInactive;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	607b      	str	r3, [r7, #4]
      break;
 800b2b2:	bf00      	nop
  }

  return (state);
 800b2b4:	687b      	ldr	r3, [r7, #4]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200000ac 	.word	0x200000ac

0800b2c4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2ca:	f3ef 8305 	mrs	r3, IPSR
 800b2ce:	603b      	str	r3, [r7, #0]
  return(result);
 800b2d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <osKernelStart+0x1a>
    stat = osErrorISR;
 800b2d6:	f06f 0305 	mvn.w	r3, #5
 800b2da:	607b      	str	r3, [r7, #4]
 800b2dc:	e010      	b.n	800b300 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b2de:	4b0b      	ldr	r3, [pc, #44]	; (800b30c <osKernelStart+0x48>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d109      	bne.n	800b2fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b2e6:	f7ff ff9d 	bl	800b224 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b2ea:	4b08      	ldr	r3, [pc, #32]	; (800b30c <osKernelStart+0x48>)
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b2f0:	f001 fd56 	bl	800cda0 <vTaskStartScheduler>
      stat = osOK;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	607b      	str	r3, [r7, #4]
 800b2f8:	e002      	b.n	800b300 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b300:	687b      	ldr	r3, [r7, #4]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200000ac 	.word	0x200000ac

0800b310 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b316:	f3ef 8305 	mrs	r3, IPSR
 800b31a:	603b      	str	r3, [r7, #0]
  return(result);
 800b31c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b322:	f001 fe5f 	bl	800cfe4 <xTaskGetTickCountFromISR>
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	e002      	b.n	800b330 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b32a:	f001 fe4b 	bl	800cfc4 <xTaskGetTickCount>
 800b32e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b330:	687b      	ldr	r3, [r7, #4]
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b08e      	sub	sp, #56	; 0x38
 800b33e:	af04      	add	r7, sp, #16
 800b340:	60f8      	str	r0, [r7, #12]
 800b342:	60b9      	str	r1, [r7, #8]
 800b344:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b346:	2300      	movs	r3, #0
 800b348:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b34a:	f3ef 8305 	mrs	r3, IPSR
 800b34e:	617b      	str	r3, [r7, #20]
  return(result);
 800b350:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b352:	2b00      	cmp	r3, #0
 800b354:	d17e      	bne.n	800b454 <osThreadNew+0x11a>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d07b      	beq.n	800b454 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b35c:	2380      	movs	r3, #128	; 0x80
 800b35e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b360:	2318      	movs	r3, #24
 800b362:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b364:	2300      	movs	r3, #0
 800b366:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b368:	f04f 33ff 	mov.w	r3, #4294967295
 800b36c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d045      	beq.n	800b400 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <osThreadNew+0x48>
        name = attr->name;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d002      	beq.n	800b390 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d008      	beq.n	800b3a8 <osThreadNew+0x6e>
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	2b38      	cmp	r3, #56	; 0x38
 800b39a:	d805      	bhi.n	800b3a8 <osThreadNew+0x6e>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <osThreadNew+0x72>
        return (NULL);
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	e054      	b.n	800b456 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	695b      	ldr	r3, [r3, #20]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d003      	beq.n	800b3bc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	089b      	lsrs	r3, r3, #2
 800b3ba:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00e      	beq.n	800b3e2 <osThreadNew+0xa8>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	2b5b      	cmp	r3, #91	; 0x5b
 800b3ca:	d90a      	bls.n	800b3e2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d006      	beq.n	800b3e2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <osThreadNew+0xa8>
        mem = 1;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	61bb      	str	r3, [r7, #24]
 800b3e0:	e010      	b.n	800b404 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10c      	bne.n	800b404 <osThreadNew+0xca>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d108      	bne.n	800b404 <osThreadNew+0xca>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d104      	bne.n	800b404 <osThreadNew+0xca>
          mem = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61bb      	str	r3, [r7, #24]
 800b3fe:	e001      	b.n	800b404 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d110      	bne.n	800b42c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b412:	9202      	str	r2, [sp, #8]
 800b414:	9301      	str	r3, [sp, #4]
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	6a3a      	ldr	r2, [r7, #32]
 800b41e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f001 fae7 	bl	800c9f4 <xTaskCreateStatic>
 800b426:	4603      	mov	r3, r0
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	e013      	b.n	800b454 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d110      	bne.n	800b454 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	b29a      	uxth	r2, r3
 800b436:	f107 0310 	add.w	r3, r7, #16
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f001 fb32 	bl	800caae <xTaskCreate>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d001      	beq.n	800b454 <osThreadNew+0x11a>
            hTask = NULL;
 800b450:	2300      	movs	r3, #0
 800b452:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b454:	693b      	ldr	r3, [r7, #16]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3728      	adds	r7, #40	; 0x28
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b466:	f3ef 8305 	mrs	r3, IPSR
 800b46a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b46c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d003      	beq.n	800b47a <osDelay+0x1c>
    stat = osErrorISR;
 800b472:	f06f 0305 	mvn.w	r3, #5
 800b476:	60fb      	str	r3, [r7, #12]
 800b478:	e007      	b.n	800b48a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <osDelay+0x2c>
      vTaskDelay(ticks);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f001 fc57 	bl	800cd38 <vTaskDelay>
    }
  }

  return (stat);
 800b48a:	68fb      	ldr	r3, [r7, #12]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b494:	b580      	push	{r7, lr}
 800b496:	b08a      	sub	sp, #40	; 0x28
 800b498:	af02      	add	r7, sp, #8
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4a4:	f3ef 8305 	mrs	r3, IPSR
 800b4a8:	613b      	str	r3, [r7, #16]
  return(result);
 800b4aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d175      	bne.n	800b59c <osSemaphoreNew+0x108>
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d072      	beq.n	800b59c <osSemaphoreNew+0x108>
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d86e      	bhi.n	800b59c <osSemaphoreNew+0x108>
    mem = -1;
 800b4be:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d015      	beq.n	800b4f6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d006      	beq.n	800b4e0 <osSemaphoreNew+0x4c>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	2b4f      	cmp	r3, #79	; 0x4f
 800b4d8:	d902      	bls.n	800b4e0 <osSemaphoreNew+0x4c>
        mem = 1;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	61bb      	str	r3, [r7, #24]
 800b4de:	e00c      	b.n	800b4fa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d108      	bne.n	800b4fa <osSemaphoreNew+0x66>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d104      	bne.n	800b4fa <osSemaphoreNew+0x66>
          mem = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	61bb      	str	r3, [r7, #24]
 800b4f4:	e001      	b.n	800b4fa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b500:	d04c      	beq.n	800b59c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d128      	bne.n	800b55a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d10a      	bne.n	800b524 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	2203      	movs	r2, #3
 800b514:	9200      	str	r2, [sp, #0]
 800b516:	2200      	movs	r2, #0
 800b518:	2100      	movs	r1, #0
 800b51a:	2001      	movs	r0, #1
 800b51c:	f000 fac4 	bl	800baa8 <xQueueGenericCreateStatic>
 800b520:	61f8      	str	r0, [r7, #28]
 800b522:	e005      	b.n	800b530 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b524:	2203      	movs	r2, #3
 800b526:	2100      	movs	r1, #0
 800b528:	2001      	movs	r0, #1
 800b52a:	f000 fb35 	bl	800bb98 <xQueueGenericCreate>
 800b52e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d022      	beq.n	800b57c <osSemaphoreNew+0xe8>
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d01f      	beq.n	800b57c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b53c:	2300      	movs	r3, #0
 800b53e:	2200      	movs	r2, #0
 800b540:	2100      	movs	r1, #0
 800b542:	69f8      	ldr	r0, [r7, #28]
 800b544:	f000 fbf0 	bl	800bd28 <xQueueGenericSend>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d016      	beq.n	800b57c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b54e:	69f8      	ldr	r0, [r7, #28]
 800b550:	f001 f87c 	bl	800c64c <vQueueDelete>
            hSemaphore = NULL;
 800b554:	2300      	movs	r3, #0
 800b556:	61fb      	str	r3, [r7, #28]
 800b558:	e010      	b.n	800b57c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d108      	bne.n	800b572 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	461a      	mov	r2, r3
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 fb72 	bl	800bc52 <xQueueCreateCountingSemaphoreStatic>
 800b56e:	61f8      	str	r0, [r7, #28]
 800b570:	e004      	b.n	800b57c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b572:	68b9      	ldr	r1, [r7, #8]
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 fba3 	bl	800bcc0 <xQueueCreateCountingSemaphore>
 800b57a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00c      	beq.n	800b59c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	617b      	str	r3, [r7, #20]
 800b58e:	e001      	b.n	800b594 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b594:	6979      	ldr	r1, [r7, #20]
 800b596:	69f8      	ldr	r0, [r7, #28]
 800b598:	f001 f9a4 	bl	800c8e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b59c:	69fb      	ldr	r3, [r7, #28]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3720      	adds	r7, #32
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b08a      	sub	sp, #40	; 0x28
 800b5aa:	af02      	add	r7, sp, #8
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	60b9      	str	r1, [r7, #8]
 800b5b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5b6:	f3ef 8305 	mrs	r3, IPSR
 800b5ba:	613b      	str	r3, [r7, #16]
  return(result);
 800b5bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d15f      	bne.n	800b682 <osMessageQueueNew+0xdc>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d05c      	beq.n	800b682 <osMessageQueueNew+0xdc>
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d059      	beq.n	800b682 <osMessageQueueNew+0xdc>
    mem = -1;
 800b5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d029      	beq.n	800b62e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d012      	beq.n	800b608 <osMessageQueueNew+0x62>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	2b4f      	cmp	r3, #79	; 0x4f
 800b5e8:	d90e      	bls.n	800b608 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00a      	beq.n	800b608 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	695a      	ldr	r2, [r3, #20]
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	fb01 f303 	mul.w	r3, r1, r3
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d302      	bcc.n	800b608 <osMessageQueueNew+0x62>
        mem = 1;
 800b602:	2301      	movs	r3, #1
 800b604:	61bb      	str	r3, [r7, #24]
 800b606:	e014      	b.n	800b632 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d110      	bne.n	800b632 <osMessageQueueNew+0x8c>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10c      	bne.n	800b632 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d108      	bne.n	800b632 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d104      	bne.n	800b632 <osMessageQueueNew+0x8c>
          mem = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	61bb      	str	r3, [r7, #24]
 800b62c:	e001      	b.n	800b632 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d10b      	bne.n	800b650 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	691a      	ldr	r2, [r3, #16]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	2100      	movs	r1, #0
 800b642:	9100      	str	r1, [sp, #0]
 800b644:	68b9      	ldr	r1, [r7, #8]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 fa2e 	bl	800baa8 <xQueueGenericCreateStatic>
 800b64c:	61f8      	str	r0, [r7, #28]
 800b64e:	e008      	b.n	800b662 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d105      	bne.n	800b662 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b656:	2200      	movs	r2, #0
 800b658:	68b9      	ldr	r1, [r7, #8]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 fa9c 	bl	800bb98 <xQueueGenericCreate>
 800b660:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00c      	beq.n	800b682 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	617b      	str	r3, [r7, #20]
 800b674:	e001      	b.n	800b67a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b676:	2300      	movs	r3, #0
 800b678:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b67a:	6979      	ldr	r1, [r7, #20]
 800b67c:	69f8      	ldr	r0, [r7, #28]
 800b67e:	f001 f931 	bl	800c8e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b682:	69fb      	ldr	r3, [r7, #28]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3720      	adds	r7, #32
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b088      	sub	sp, #32
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	4613      	mov	r3, r2
 800b69a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6a4:	f3ef 8305 	mrs	r3, IPSR
 800b6a8:	617b      	str	r3, [r7, #20]
  return(result);
 800b6aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d028      	beq.n	800b702 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d005      	beq.n	800b6c2 <osMessageQueuePut+0x36>
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <osMessageQueuePut+0x36>
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d003      	beq.n	800b6ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b6c2:	f06f 0303 	mvn.w	r3, #3
 800b6c6:	61fb      	str	r3, [r7, #28]
 800b6c8:	e038      	b.n	800b73c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b6ce:	f107 0210 	add.w	r2, r7, #16
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	69b8      	ldr	r0, [r7, #24]
 800b6d8:	f000 fc24 	bl	800bf24 <xQueueGenericSendFromISR>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d003      	beq.n	800b6ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b6e2:	f06f 0302 	mvn.w	r3, #2
 800b6e6:	61fb      	str	r3, [r7, #28]
 800b6e8:	e028      	b.n	800b73c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d025      	beq.n	800b73c <osMessageQueuePut+0xb0>
 800b6f0:	4b15      	ldr	r3, [pc, #84]	; (800b748 <osMessageQueuePut+0xbc>)
 800b6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	e01c      	b.n	800b73c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d002      	beq.n	800b70e <osMessageQueuePut+0x82>
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d103      	bne.n	800b716 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b70e:	f06f 0303 	mvn.w	r3, #3
 800b712:	61fb      	str	r3, [r7, #28]
 800b714:	e012      	b.n	800b73c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b716:	2300      	movs	r3, #0
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	68b9      	ldr	r1, [r7, #8]
 800b71c:	69b8      	ldr	r0, [r7, #24]
 800b71e:	f000 fb03 	bl	800bd28 <xQueueGenericSend>
 800b722:	4603      	mov	r3, r0
 800b724:	2b01      	cmp	r3, #1
 800b726:	d009      	beq.n	800b73c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d003      	beq.n	800b736 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b72e:	f06f 0301 	mvn.w	r3, #1
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	e002      	b.n	800b73c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b736:	f06f 0302 	mvn.w	r3, #2
 800b73a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b73c:	69fb      	ldr	r3, [r7, #28]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3720      	adds	r7, #32
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	e000ed04 	.word	0xe000ed04

0800b74c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
 800b758:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b75e:	2300      	movs	r3, #0
 800b760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b762:	f3ef 8305 	mrs	r3, IPSR
 800b766:	617b      	str	r3, [r7, #20]
  return(result);
 800b768:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d028      	beq.n	800b7c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <osMessageQueueGet+0x34>
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <osMessageQueueGet+0x34>
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d003      	beq.n	800b788 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b780:	f06f 0303 	mvn.w	r3, #3
 800b784:	61fb      	str	r3, [r7, #28]
 800b786:	e037      	b.n	800b7f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b788:	2300      	movs	r3, #0
 800b78a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b78c:	f107 0310 	add.w	r3, r7, #16
 800b790:	461a      	mov	r2, r3
 800b792:	68b9      	ldr	r1, [r7, #8]
 800b794:	69b8      	ldr	r0, [r7, #24]
 800b796:	f000 fed9 	bl	800c54c <xQueueReceiveFromISR>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d003      	beq.n	800b7a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b7a0:	f06f 0302 	mvn.w	r3, #2
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	e027      	b.n	800b7f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d024      	beq.n	800b7f8 <osMessageQueueGet+0xac>
 800b7ae:	4b15      	ldr	r3, [pc, #84]	; (800b804 <osMessageQueueGet+0xb8>)
 800b7b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	e01b      	b.n	800b7f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <osMessageQueueGet+0x80>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d103      	bne.n	800b7d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b7cc:	f06f 0303 	mvn.w	r3, #3
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	e011      	b.n	800b7f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b7d4:	683a      	ldr	r2, [r7, #0]
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	69b8      	ldr	r0, [r7, #24]
 800b7da:	f000 fccb 	bl	800c174 <xQueueReceive>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d009      	beq.n	800b7f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b7ea:	f06f 0301 	mvn.w	r3, #1
 800b7ee:	61fb      	str	r3, [r7, #28]
 800b7f0:	e002      	b.n	800b7f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b7f2:	f06f 0302 	mvn.w	r3, #2
 800b7f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b7f8:	69fb      	ldr	r3, [r7, #28]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3720      	adds	r7, #32
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	e000ed04 	.word	0xe000ed04

0800b808 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	4a07      	ldr	r2, [pc, #28]	; (800b834 <vApplicationGetIdleTaskMemory+0x2c>)
 800b818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	4a06      	ldr	r2, [pc, #24]	; (800b838 <vApplicationGetIdleTaskMemory+0x30>)
 800b81e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2280      	movs	r2, #128	; 0x80
 800b824:	601a      	str	r2, [r3, #0]
}
 800b826:	bf00      	nop
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	200000b0 	.word	0x200000b0
 800b838:	2000010c 	.word	0x2000010c

0800b83c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	4a07      	ldr	r2, [pc, #28]	; (800b868 <vApplicationGetTimerTaskMemory+0x2c>)
 800b84c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	4a06      	ldr	r2, [pc, #24]	; (800b86c <vApplicationGetTimerTaskMemory+0x30>)
 800b852:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b85a:	601a      	str	r2, [r3, #0]
}
 800b85c:	bf00      	nop
 800b85e:	3714      	adds	r7, #20
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	2000030c 	.word	0x2000030c
 800b86c:	20000368 	.word	0x20000368

0800b870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f103 0208 	add.w	r2, r3, #8
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f103 0208 	add.w	r2, r3, #8
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f103 0208 	add.w	r2, r3, #8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8be:	bf00      	nop
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b085      	sub	sp, #20
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	683a      	ldr	r2, [r7, #0]
 800b8ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	601a      	str	r2, [r3, #0]
}
 800b906:	bf00      	nop
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b912:	b480      	push	{r7}
 800b914:	b085      	sub	sp, #20
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b928:	d103      	bne.n	800b932 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	e00c      	b.n	800b94c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	3308      	adds	r3, #8
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	e002      	b.n	800b940 <vListInsert+0x2e>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d2f6      	bcs.n	800b93a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	683a      	ldr	r2, [r7, #0]
 800b95a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	601a      	str	r2, [r3, #0]
}
 800b978:	bf00      	nop
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	6892      	ldr	r2, [r2, #8]
 800b99a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6852      	ldr	r2, [r2, #4]
 800b9a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d103      	bne.n	800b9b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689a      	ldr	r2, [r3, #8]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	1e5a      	subs	r2, r3, #1
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10a      	bne.n	800ba02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba02:	f002 fc7f 	bl	800e304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0e:	68f9      	ldr	r1, [r7, #12]
 800ba10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba12:	fb01 f303 	mul.w	r3, r1, r3
 800ba16:	441a      	add	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba32:	3b01      	subs	r3, #1
 800ba34:	68f9      	ldr	r1, [r7, #12]
 800ba36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba38:	fb01 f303 	mul.w	r3, r1, r3
 800ba3c:	441a      	add	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	22ff      	movs	r2, #255	; 0xff
 800ba46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	22ff      	movs	r2, #255	; 0xff
 800ba4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d114      	bne.n	800ba82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d01a      	beq.n	800ba96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	3310      	adds	r3, #16
 800ba64:	4618      	mov	r0, r3
 800ba66:	f001 fc37 	bl	800d2d8 <xTaskRemoveFromEventList>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d012      	beq.n	800ba96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba70:	4b0c      	ldr	r3, [pc, #48]	; (800baa4 <xQueueGenericReset+0xcc>)
 800ba72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	e009      	b.n	800ba96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3310      	adds	r3, #16
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7ff fef2 	bl	800b870 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3324      	adds	r3, #36	; 0x24
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff feed 	bl	800b870 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba96:	f002 fc65 	bl	800e364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba9a:	2301      	movs	r3, #1
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	e000ed04 	.word	0xe000ed04

0800baa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08e      	sub	sp, #56	; 0x38
 800baac:	af02      	add	r7, sp, #8
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	607a      	str	r2, [r7, #4]
 800bab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bace:	bf00      	nop
 800bad0:	e7fe      	b.n	800bad0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10a      	bne.n	800baee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d002      	beq.n	800bafa <xQueueGenericCreateStatic+0x52>
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d001      	beq.n	800bafe <xQueueGenericCreateStatic+0x56>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e000      	b.n	800bb00 <xQueueGenericCreateStatic+0x58>
 800bafe:	2300      	movs	r3, #0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10a      	bne.n	800bb1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	623b      	str	r3, [r7, #32]
}
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d102      	bne.n	800bb26 <xQueueGenericCreateStatic+0x7e>
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <xQueueGenericCreateStatic+0x82>
 800bb26:	2301      	movs	r3, #1
 800bb28:	e000      	b.n	800bb2c <xQueueGenericCreateStatic+0x84>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	61fb      	str	r3, [r7, #28]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb46:	2350      	movs	r3, #80	; 0x50
 800bb48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b50      	cmp	r3, #80	; 0x50
 800bb4e:	d00a      	beq.n	800bb66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb54:	f383 8811 	msr	BASEPRI, r3
 800bb58:	f3bf 8f6f 	isb	sy
 800bb5c:	f3bf 8f4f 	dsb	sy
 800bb60:	61bb      	str	r3, [r7, #24]
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00d      	beq.n	800bb8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	4613      	mov	r3, r2
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 f83f 	bl	800bc0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3730      	adds	r7, #48	; 0x30
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b08a      	sub	sp, #40	; 0x28
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4613      	mov	r3, r2
 800bba4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10a      	bne.n	800bbc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	f383 8811 	msr	BASEPRI, r3
 800bbb4:	f3bf 8f6f 	isb	sy
 800bbb8:	f3bf 8f4f 	dsb	sy
 800bbbc:	613b      	str	r3, [r7, #16]
}
 800bbbe:	bf00      	nop
 800bbc0:	e7fe      	b.n	800bbc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	fb02 f303 	mul.w	r3, r2, r3
 800bbca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	3350      	adds	r3, #80	; 0x50
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f002 fcb9 	bl	800e548 <pvPortMalloc>
 800bbd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d011      	beq.n	800bc02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	3350      	adds	r3, #80	; 0x50
 800bbe6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbf0:	79fa      	ldrb	r2, [r7, #7]
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	697a      	ldr	r2, [r7, #20]
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 f805 	bl	800bc0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc02:	69bb      	ldr	r3, [r7, #24]
	}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3720      	adds	r7, #32
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d103      	bne.n	800bc28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	69ba      	ldr	r2, [r7, #24]
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	e002      	b.n	800bc2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	68ba      	ldr	r2, [r7, #8]
 800bc38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	69b8      	ldr	r0, [r7, #24]
 800bc3e:	f7ff fecb 	bl	800b9d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc4a:	bf00      	nop
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b08a      	sub	sp, #40	; 0x28
 800bc56:	af02      	add	r7, sp, #8
 800bc58:	60f8      	str	r0, [r7, #12]
 800bc5a:	60b9      	str	r1, [r7, #8]
 800bc5c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	61bb      	str	r3, [r7, #24]
}
 800bc76:	bf00      	nop
 800bc78:	e7fe      	b.n	800bc78 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc7a:	68ba      	ldr	r2, [r7, #8]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d90a      	bls.n	800bc98 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	617b      	str	r3, [r7, #20]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc98:	2302      	movs	r3, #2
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2100      	movs	r1, #0
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f7ff ff00 	bl	800baa8 <xQueueGenericCreateStatic>
 800bca8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bcb6:	69fb      	ldr	r3, [r7, #28]
	}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3720      	adds	r7, #32
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	613b      	str	r3, [r7, #16]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d90a      	bls.n	800bd04 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	60fb      	str	r3, [r7, #12]
}
 800bd00:	bf00      	nop
 800bd02:	e7fe      	b.n	800bd02 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd04:	2202      	movs	r2, #2
 800bd06:	2100      	movs	r1, #0
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f7ff ff45 	bl	800bb98 <xQueueGenericCreate>
 800bd0e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d002      	beq.n	800bd1c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bd1c:	697b      	ldr	r3, [r7, #20]
	}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
	...

0800bd28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08e      	sub	sp, #56	; 0x38
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]
 800bd34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd36:	2300      	movs	r3, #0
 800bd38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <xQueueGenericSend+0x32>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d103      	bne.n	800bd68 <xQueueGenericSend+0x40>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <xQueueGenericSend+0x44>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e000      	b.n	800bd6e <xQueueGenericSend+0x46>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10a      	bne.n	800bd88 <xQueueGenericSend+0x60>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d103      	bne.n	800bd96 <xQueueGenericSend+0x6e>
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d101      	bne.n	800bd9a <xQueueGenericSend+0x72>
 800bd96:	2301      	movs	r3, #1
 800bd98:	e000      	b.n	800bd9c <xQueueGenericSend+0x74>
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	623b      	str	r3, [r7, #32]
}
 800bdb2:	bf00      	nop
 800bdb4:	e7fe      	b.n	800bdb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdb6:	f001 fc4d 	bl	800d654 <xTaskGetSchedulerState>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d102      	bne.n	800bdc6 <xQueueGenericSend+0x9e>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d101      	bne.n	800bdca <xQueueGenericSend+0xa2>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e000      	b.n	800bdcc <xQueueGenericSend+0xa4>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10a      	bne.n	800bde6 <xQueueGenericSend+0xbe>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	61fb      	str	r3, [r7, #28]
}
 800bde2:	bf00      	nop
 800bde4:	e7fe      	b.n	800bde4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bde6:	f002 fa8d 	bl	800e304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d302      	bcc.n	800bdfc <xQueueGenericSend+0xd4>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d129      	bne.n	800be50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	68b9      	ldr	r1, [r7, #8]
 800be00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be02:	f000 fc5e 	bl	800c6c2 <prvCopyDataToQueue>
 800be06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d010      	beq.n	800be32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	3324      	adds	r3, #36	; 0x24
 800be14:	4618      	mov	r0, r3
 800be16:	f001 fa5f 	bl	800d2d8 <xTaskRemoveFromEventList>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d013      	beq.n	800be48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be20:	4b3f      	ldr	r3, [pc, #252]	; (800bf20 <xQueueGenericSend+0x1f8>)
 800be22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	e00a      	b.n	800be48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be34:	2b00      	cmp	r3, #0
 800be36:	d007      	beq.n	800be48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be38:	4b39      	ldr	r3, [pc, #228]	; (800bf20 <xQueueGenericSend+0x1f8>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be48:	f002 fa8c 	bl	800e364 <vPortExitCritical>
				return pdPASS;
 800be4c:	2301      	movs	r3, #1
 800be4e:	e063      	b.n	800bf18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d103      	bne.n	800be5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be56:	f002 fa85 	bl	800e364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be5a:	2300      	movs	r3, #0
 800be5c:	e05c      	b.n	800bf18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be60:	2b00      	cmp	r3, #0
 800be62:	d106      	bne.n	800be72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be64:	f107 0314 	add.w	r3, r7, #20
 800be68:	4618      	mov	r0, r3
 800be6a:	f001 fa99 	bl	800d3a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be6e:	2301      	movs	r3, #1
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be72:	f002 fa77 	bl	800e364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be76:	f000 fff9 	bl	800ce6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be7a:	f002 fa43 	bl	800e304 <vPortEnterCritical>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be84:	b25b      	sxtb	r3, r3
 800be86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8a:	d103      	bne.n	800be94 <xQueueGenericSend+0x16c>
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be9a:	b25b      	sxtb	r3, r3
 800be9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea0:	d103      	bne.n	800beaa <xQueueGenericSend+0x182>
 800bea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea4:	2200      	movs	r2, #0
 800bea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800beaa:	f002 fa5b 	bl	800e364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800beae:	1d3a      	adds	r2, r7, #4
 800beb0:	f107 0314 	add.w	r3, r7, #20
 800beb4:	4611      	mov	r1, r2
 800beb6:	4618      	mov	r0, r3
 800beb8:	f001 fa88 	bl	800d3cc <xTaskCheckForTimeOut>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d124      	bne.n	800bf0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bec4:	f000 fcf5 	bl	800c8b2 <prvIsQueueFull>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d018      	beq.n	800bf00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	3310      	adds	r3, #16
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	4611      	mov	r1, r2
 800bed6:	4618      	mov	r0, r3
 800bed8:	f001 f9ae 	bl	800d238 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bede:	f000 fc80 	bl	800c7e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bee2:	f000 ffd1 	bl	800ce88 <xTaskResumeAll>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f47f af7c 	bne.w	800bde6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800beee:	4b0c      	ldr	r3, [pc, #48]	; (800bf20 <xQueueGenericSend+0x1f8>)
 800bef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	e772      	b.n	800bde6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf02:	f000 fc6e 	bl	800c7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf06:	f000 ffbf 	bl	800ce88 <xTaskResumeAll>
 800bf0a:	e76c      	b.n	800bde6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf0e:	f000 fc68 	bl	800c7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf12:	f000 ffb9 	bl	800ce88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3738      	adds	r7, #56	; 0x38
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b090      	sub	sp, #64	; 0x40
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d103      	bne.n	800bf60 <xQueueGenericSendFromISR+0x3c>
 800bf58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <xQueueGenericSendFromISR+0x40>
 800bf60:	2301      	movs	r3, #1
 800bf62:	e000      	b.n	800bf66 <xQueueGenericSendFromISR+0x42>
 800bf64:	2300      	movs	r3, #0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10a      	bne.n	800bf80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6e:	f383 8811 	msr	BASEPRI, r3
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf7c:	bf00      	nop
 800bf7e:	e7fe      	b.n	800bf7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	2b02      	cmp	r3, #2
 800bf84:	d103      	bne.n	800bf8e <xQueueGenericSendFromISR+0x6a>
 800bf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d101      	bne.n	800bf92 <xQueueGenericSendFromISR+0x6e>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e000      	b.n	800bf94 <xQueueGenericSendFromISR+0x70>
 800bf92:	2300      	movs	r3, #0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10a      	bne.n	800bfae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	623b      	str	r3, [r7, #32]
}
 800bfaa:	bf00      	nop
 800bfac:	e7fe      	b.n	800bfac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfae:	f002 fa8b 	bl	800e4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bfb2:	f3ef 8211 	mrs	r2, BASEPRI
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	61fa      	str	r2, [r7, #28]
 800bfc8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bfca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfcc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d302      	bcc.n	800bfe0 <xQueueGenericSendFromISR+0xbc>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d12f      	bne.n	800c040 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bff6:	f000 fb64 	bl	800c6c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bffa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c002:	d112      	bne.n	800c02a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d016      	beq.n	800c03a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00e:	3324      	adds	r3, #36	; 0x24
 800c010:	4618      	mov	r0, r3
 800c012:	f001 f961 	bl	800d2d8 <xTaskRemoveFromEventList>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00e      	beq.n	800c03a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00b      	beq.n	800c03a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	601a      	str	r2, [r3, #0]
 800c028:	e007      	b.n	800c03a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c02a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c02e:	3301      	adds	r3, #1
 800c030:	b2db      	uxtb	r3, r3
 800c032:	b25a      	sxtb	r2, r3
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c03a:	2301      	movs	r3, #1
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c03e:	e001      	b.n	800c044 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c046:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c04e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c052:	4618      	mov	r0, r3
 800c054:	3740      	adds	r7, #64	; 0x40
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b08e      	sub	sp, #56	; 0x38
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10a      	bne.n	800c084 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	623b      	str	r3, [r7, #32]
}
 800c080:	bf00      	nop
 800c082:	e7fe      	b.n	800c082 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	61fb      	str	r3, [r7, #28]
}
 800c09e:	bf00      	nop
 800c0a0:	e7fe      	b.n	800c0a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d103      	bne.n	800c0b2 <xQueueGiveFromISR+0x58>
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <xQueueGiveFromISR+0x5c>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e000      	b.n	800c0b8 <xQueueGiveFromISR+0x5e>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	61bb      	str	r3, [r7, #24]
}
 800c0ce:	bf00      	nop
 800c0d0:	e7fe      	b.n	800c0d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0d2:	f002 f9f9 	bl	800e4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c0d6:	f3ef 8211 	mrs	r2, BASEPRI
 800c0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0de:	f383 8811 	msr	BASEPRI, r3
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	f3bf 8f4f 	dsb	sy
 800c0ea:	617a      	str	r2, [r7, #20]
 800c0ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c0ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d22b      	bcs.n	800c15a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11c:	d112      	bne.n	800c144 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c122:	2b00      	cmp	r3, #0
 800c124:	d016      	beq.n	800c154 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	3324      	adds	r3, #36	; 0x24
 800c12a:	4618      	mov	r0, r3
 800c12c:	f001 f8d4 	bl	800d2d8 <xTaskRemoveFromEventList>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00e      	beq.n	800c154 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00b      	beq.n	800c154 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2201      	movs	r2, #1
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	e007      	b.n	800c154 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c148:	3301      	adds	r3, #1
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	b25a      	sxtb	r2, r3
 800c14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c154:	2301      	movs	r3, #1
 800c156:	637b      	str	r3, [r7, #52]	; 0x34
 800c158:	e001      	b.n	800c15e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	637b      	str	r3, [r7, #52]	; 0x34
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f383 8811 	msr	BASEPRI, r3
}
 800c168:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3738      	adds	r7, #56	; 0x38
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08c      	sub	sp, #48	; 0x30
 800c178:	af00      	add	r7, sp, #0
 800c17a:	60f8      	str	r0, [r7, #12]
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c180:	2300      	movs	r3, #0
 800c182:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d10a      	bne.n	800c1a4 <xQueueReceive+0x30>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	623b      	str	r3, [r7, #32]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d103      	bne.n	800c1b2 <xQueueReceive+0x3e>
 800c1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <xQueueReceive+0x42>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e000      	b.n	800c1b8 <xQueueReceive+0x44>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <xQueueReceive+0x5e>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	61fb      	str	r3, [r7, #28]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1d2:	f001 fa3f 	bl	800d654 <xTaskGetSchedulerState>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d102      	bne.n	800c1e2 <xQueueReceive+0x6e>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <xQueueReceive+0x72>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e000      	b.n	800c1e8 <xQueueReceive+0x74>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10a      	bne.n	800c202 <xQueueReceive+0x8e>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	61bb      	str	r3, [r7, #24]
}
 800c1fe:	bf00      	nop
 800c200:	e7fe      	b.n	800c200 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c202:	f002 f87f 	bl	800e304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01f      	beq.n	800c252 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c216:	f000 fabe 	bl	800c796 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21c:	1e5a      	subs	r2, r3, #1
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00f      	beq.n	800c24a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22c:	3310      	adds	r3, #16
 800c22e:	4618      	mov	r0, r3
 800c230:	f001 f852 	bl	800d2d8 <xTaskRemoveFromEventList>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d007      	beq.n	800c24a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c23a:	4b3d      	ldr	r3, [pc, #244]	; (800c330 <xQueueReceive+0x1bc>)
 800c23c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c240:	601a      	str	r2, [r3, #0]
 800c242:	f3bf 8f4f 	dsb	sy
 800c246:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c24a:	f002 f88b 	bl	800e364 <vPortExitCritical>
				return pdPASS;
 800c24e:	2301      	movs	r3, #1
 800c250:	e069      	b.n	800c326 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d103      	bne.n	800c260 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c258:	f002 f884 	bl	800e364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c25c:	2300      	movs	r3, #0
 800c25e:	e062      	b.n	800c326 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c262:	2b00      	cmp	r3, #0
 800c264:	d106      	bne.n	800c274 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c266:	f107 0310 	add.w	r3, r7, #16
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 f898 	bl	800d3a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c270:	2301      	movs	r3, #1
 800c272:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c274:	f002 f876 	bl	800e364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c278:	f000 fdf8 	bl	800ce6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c27c:	f002 f842 	bl	800e304 <vPortEnterCritical>
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c286:	b25b      	sxtb	r3, r3
 800c288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28c:	d103      	bne.n	800c296 <xQueueReceive+0x122>
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c29c:	b25b      	sxtb	r3, r3
 800c29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a2:	d103      	bne.n	800c2ac <xQueueReceive+0x138>
 800c2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2ac:	f002 f85a 	bl	800e364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2b0:	1d3a      	adds	r2, r7, #4
 800c2b2:	f107 0310 	add.w	r3, r7, #16
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f001 f887 	bl	800d3cc <xTaskCheckForTimeOut>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d123      	bne.n	800c30c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c6:	f000 fade 	bl	800c886 <prvIsQueueEmpty>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d017      	beq.n	800c300 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	3324      	adds	r3, #36	; 0x24
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 ffad 	bl	800d238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2e0:	f000 fa7f 	bl	800c7e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2e4:	f000 fdd0 	bl	800ce88 <xTaskResumeAll>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d189      	bne.n	800c202 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2ee:	4b10      	ldr	r3, [pc, #64]	; (800c330 <xQueueReceive+0x1bc>)
 800c2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2f4:	601a      	str	r2, [r3, #0]
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	e780      	b.n	800c202 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c302:	f000 fa6e 	bl	800c7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c306:	f000 fdbf 	bl	800ce88 <xTaskResumeAll>
 800c30a:	e77a      	b.n	800c202 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c30c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30e:	f000 fa68 	bl	800c7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c312:	f000 fdb9 	bl	800ce88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c318:	f000 fab5 	bl	800c886 <prvIsQueueEmpty>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f43f af6f 	beq.w	800c202 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c326:	4618      	mov	r0, r3
 800c328:	3730      	adds	r7, #48	; 0x30
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	e000ed04 	.word	0xe000ed04

0800c334 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08e      	sub	sp, #56	; 0x38
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c346:	2300      	movs	r3, #0
 800c348:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	623b      	str	r3, [r7, #32]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00a      	beq.n	800c384 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c372:	f383 8811 	msr	BASEPRI, r3
 800c376:	f3bf 8f6f 	isb	sy
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	61fb      	str	r3, [r7, #28]
}
 800c380:	bf00      	nop
 800c382:	e7fe      	b.n	800c382 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c384:	f001 f966 	bl	800d654 <xTaskGetSchedulerState>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d102      	bne.n	800c394 <xQueueSemaphoreTake+0x60>
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <xQueueSemaphoreTake+0x64>
 800c394:	2301      	movs	r3, #1
 800c396:	e000      	b.n	800c39a <xQueueSemaphoreTake+0x66>
 800c398:	2300      	movs	r3, #0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d10a      	bne.n	800c3b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	61bb      	str	r3, [r7, #24]
}
 800c3b0:	bf00      	nop
 800c3b2:	e7fe      	b.n	800c3b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3b4:	f001 ffa6 	bl	800e304 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d024      	beq.n	800c40e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	1e5a      	subs	r2, r3, #1
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d104      	bne.n	800c3de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3d4:	f001 fab4 	bl	800d940 <pvTaskIncrementMutexHeldCount>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00f      	beq.n	800c406 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	3310      	adds	r3, #16
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 ff74 	bl	800d2d8 <xTaskRemoveFromEventList>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3f6:	4b54      	ldr	r3, [pc, #336]	; (800c548 <xQueueSemaphoreTake+0x214>)
 800c3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c406:	f001 ffad 	bl	800e364 <vPortExitCritical>
				return pdPASS;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e097      	b.n	800c53e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d111      	bne.n	800c438 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00a      	beq.n	800c430 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	617b      	str	r3, [r7, #20]
}
 800c42c:	bf00      	nop
 800c42e:	e7fe      	b.n	800c42e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c430:	f001 ff98 	bl	800e364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c434:	2300      	movs	r3, #0
 800c436:	e082      	b.n	800c53e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d106      	bne.n	800c44c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c43e:	f107 030c 	add.w	r3, r7, #12
 800c442:	4618      	mov	r0, r3
 800c444:	f000 ffac 	bl	800d3a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c448:	2301      	movs	r3, #1
 800c44a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c44c:	f001 ff8a 	bl	800e364 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c450:	f000 fd0c 	bl	800ce6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c454:	f001 ff56 	bl	800e304 <vPortEnterCritical>
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c45e:	b25b      	sxtb	r3, r3
 800c460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c464:	d103      	bne.n	800c46e <xQueueSemaphoreTake+0x13a>
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c474:	b25b      	sxtb	r3, r3
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47a:	d103      	bne.n	800c484 <xQueueSemaphoreTake+0x150>
 800c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c484:	f001 ff6e 	bl	800e364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c488:	463a      	mov	r2, r7
 800c48a:	f107 030c 	add.w	r3, r7, #12
 800c48e:	4611      	mov	r1, r2
 800c490:	4618      	mov	r0, r3
 800c492:	f000 ff9b 	bl	800d3cc <xTaskCheckForTimeOut>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d132      	bne.n	800c502 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c49c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c49e:	f000 f9f2 	bl	800c886 <prvIsQueueEmpty>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d026      	beq.n	800c4f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d109      	bne.n	800c4c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c4b0:	f001 ff28 	bl	800e304 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 f8e9 	bl	800d690 <xTaskPriorityInherit>
 800c4be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4c0:	f001 ff50 	bl	800e364 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	3324      	adds	r3, #36	; 0x24
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 feb3 	bl	800d238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4d4:	f000 f985 	bl	800c7e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4d8:	f000 fcd6 	bl	800ce88 <xTaskResumeAll>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f47f af68 	bne.w	800c3b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c4e4:	4b18      	ldr	r3, [pc, #96]	; (800c548 <xQueueSemaphoreTake+0x214>)
 800c4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	e75e      	b.n	800c3b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f8:	f000 f973 	bl	800c7e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4fc:	f000 fcc4 	bl	800ce88 <xTaskResumeAll>
 800c500:	e758      	b.n	800c3b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c504:	f000 f96d 	bl	800c7e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c508:	f000 fcbe 	bl	800ce88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c50c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c50e:	f000 f9ba 	bl	800c886 <prvIsQueueEmpty>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	f43f af4d 	beq.w	800c3b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00d      	beq.n	800c53c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c520:	f001 fef0 	bl	800e304 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c526:	f000 f8b4 	bl	800c692 <prvGetDisinheritPriorityAfterTimeout>
 800c52a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c532:	4618      	mov	r0, r3
 800c534:	f001 f982 	bl	800d83c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c538:	f001 ff14 	bl	800e364 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c53c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3738      	adds	r7, #56	; 0x38
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	e000ed04 	.word	0xe000ed04

0800c54c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08e      	sub	sp, #56	; 0x38
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10a      	bne.n	800c578 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	623b      	str	r3, [r7, #32]
}
 800c574:	bf00      	nop
 800c576:	e7fe      	b.n	800c576 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d103      	bne.n	800c586 <xQueueReceiveFromISR+0x3a>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <xQueueReceiveFromISR+0x3e>
 800c586:	2301      	movs	r3, #1
 800c588:	e000      	b.n	800c58c <xQueueReceiveFromISR+0x40>
 800c58a:	2300      	movs	r3, #0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10a      	bne.n	800c5a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	61fb      	str	r3, [r7, #28]
}
 800c5a2:	bf00      	nop
 800c5a4:	e7fe      	b.n	800c5a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5a6:	f001 ff8f 	bl	800e4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c5aa:	f3ef 8211 	mrs	r2, BASEPRI
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	61ba      	str	r2, [r7, #24]
 800c5c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d02f      	beq.n	800c632 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5dc:	68b9      	ldr	r1, [r7, #8]
 800c5de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e0:	f000 f8d9 	bl	800c796 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	1e5a      	subs	r2, r3, #1
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f4:	d112      	bne.n	800c61c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	691b      	ldr	r3, [r3, #16]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d016      	beq.n	800c62c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c600:	3310      	adds	r3, #16
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fe68 	bl	800d2d8 <xTaskRemoveFromEventList>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00e      	beq.n	800c62c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	e007      	b.n	800c62c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c620:	3301      	adds	r3, #1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	b25a      	sxtb	r2, r3
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c62c:	2301      	movs	r3, #1
 800c62e:	637b      	str	r3, [r7, #52]	; 0x34
 800c630:	e001      	b.n	800c636 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c632:	2300      	movs	r3, #0
 800c634:	637b      	str	r3, [r7, #52]	; 0x34
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	f383 8811 	msr	BASEPRI, r3
}
 800c640:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c644:	4618      	mov	r0, r3
 800c646:	3738      	adds	r7, #56	; 0x38
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <vQueueDelete+0x28>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	60bb      	str	r3, [r7, #8]
}
 800c670:	bf00      	nop
 800c672:	e7fe      	b.n	800c672 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f000 f95f 	bl	800c938 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c680:	2b00      	cmp	r3, #0
 800c682:	d102      	bne.n	800c68a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c684:	68f8      	ldr	r0, [r7, #12]
 800c686:	f002 f82b 	bl	800e6e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c68a:	bf00      	nop
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d006      	beq.n	800c6b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c6ac:	60fb      	str	r3, [r7, #12]
 800c6ae:	e001      	b.n	800c6b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
	}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b086      	sub	sp, #24
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	60f8      	str	r0, [r7, #12]
 800c6ca:	60b9      	str	r1, [r7, #8]
 800c6cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10d      	bne.n	800c6fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d14d      	bne.n	800c784 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f001 f837 	bl	800d760 <xTaskPriorityDisinherit>
 800c6f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	609a      	str	r2, [r3, #8]
 800c6fa:	e043      	b.n	800c784 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d119      	bne.n	800c736 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6858      	ldr	r0, [r3, #4]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c70a:	461a      	mov	r2, r3
 800c70c:	68b9      	ldr	r1, [r7, #8]
 800c70e:	f002 f92f 	bl	800e970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c71a:	441a      	add	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d32b      	bcc.n	800c784 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	605a      	str	r2, [r3, #4]
 800c734:	e026      	b.n	800c784 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	68d8      	ldr	r0, [r3, #12]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73e:	461a      	mov	r2, r3
 800c740:	68b9      	ldr	r1, [r7, #8]
 800c742:	f002 f915 	bl	800e970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	68da      	ldr	r2, [r3, #12]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74e:	425b      	negs	r3, r3
 800c750:	441a      	add	r2, r3
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	68da      	ldr	r2, [r3, #12]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d207      	bcs.n	800c772 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	689a      	ldr	r2, [r3, #8]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76a:	425b      	negs	r3, r3
 800c76c:	441a      	add	r2, r3
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b02      	cmp	r3, #2
 800c776:	d105      	bne.n	800c784 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d002      	beq.n	800c784 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	3b01      	subs	r3, #1
 800c782:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c78c:	697b      	ldr	r3, [r7, #20]
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3718      	adds	r7, #24
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b082      	sub	sp, #8
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
 800c79e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d018      	beq.n	800c7da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	68da      	ldr	r2, [r3, #12]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7b0:	441a      	add	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68da      	ldr	r2, [r3, #12]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d303      	bcc.n	800c7ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68d9      	ldr	r1, [r3, #12]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6838      	ldr	r0, [r7, #0]
 800c7d6:	f002 f8cb 	bl	800e970 <memcpy>
	}
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7ea:	f001 fd8b 	bl	800e304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7f6:	e011      	b.n	800c81c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d012      	beq.n	800c826 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3324      	adds	r3, #36	; 0x24
 800c804:	4618      	mov	r0, r3
 800c806:	f000 fd67 	bl	800d2d8 <xTaskRemoveFromEventList>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c810:	f000 fe3e 	bl	800d490 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	3b01      	subs	r3, #1
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c820:	2b00      	cmp	r3, #0
 800c822:	dce9      	bgt.n	800c7f8 <prvUnlockQueue+0x16>
 800c824:	e000      	b.n	800c828 <prvUnlockQueue+0x46>
					break;
 800c826:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	22ff      	movs	r2, #255	; 0xff
 800c82c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c830:	f001 fd98 	bl	800e364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c834:	f001 fd66 	bl	800e304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c83e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c840:	e011      	b.n	800c866 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d012      	beq.n	800c870 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3310      	adds	r3, #16
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 fd42 	bl	800d2d8 <xTaskRemoveFromEventList>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c85a:	f000 fe19 	bl	800d490 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
 800c860:	3b01      	subs	r3, #1
 800c862:	b2db      	uxtb	r3, r3
 800c864:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c866:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	dce9      	bgt.n	800c842 <prvUnlockQueue+0x60>
 800c86e:	e000      	b.n	800c872 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c870:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	22ff      	movs	r2, #255	; 0xff
 800c876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c87a:	f001 fd73 	bl	800e364 <vPortExitCritical>
}
 800c87e:	bf00      	nop
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b084      	sub	sp, #16
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c88e:	f001 fd39 	bl	800e304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c896:	2b00      	cmp	r3, #0
 800c898:	d102      	bne.n	800c8a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c89a:	2301      	movs	r3, #1
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	e001      	b.n	800c8a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8a4:	f001 fd5e 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b084      	sub	sp, #16
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8ba:	f001 fd23 	bl	800e304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d102      	bne.n	800c8d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	60fb      	str	r3, [r7, #12]
 800c8ce:	e001      	b.n	800c8d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8d4:	f001 fd46 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
	...

0800c8e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	60fb      	str	r3, [r7, #12]
 800c8f2:	e014      	b.n	800c91e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8f4:	4a0f      	ldr	r2, [pc, #60]	; (800c934 <vQueueAddToRegistry+0x50>)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10b      	bne.n	800c918 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c900:	490c      	ldr	r1, [pc, #48]	; (800c934 <vQueueAddToRegistry+0x50>)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c90a:	4a0a      	ldr	r2, [pc, #40]	; (800c934 <vQueueAddToRegistry+0x50>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	00db      	lsls	r3, r3, #3
 800c910:	4413      	add	r3, r2
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c916:	e006      	b.n	800c926 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3301      	adds	r3, #1
 800c91c:	60fb      	str	r3, [r7, #12]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2b07      	cmp	r3, #7
 800c922:	d9e7      	bls.n	800c8f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	20009b10 	.word	0x20009b10

0800c938 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c940:	2300      	movs	r3, #0
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e016      	b.n	800c974 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c946:	4a10      	ldr	r2, [pc, #64]	; (800c988 <vQueueUnregisterQueue+0x50>)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	4413      	add	r3, r2
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	429a      	cmp	r2, r3
 800c954:	d10b      	bne.n	800c96e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c956:	4a0c      	ldr	r2, [pc, #48]	; (800c988 <vQueueUnregisterQueue+0x50>)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2100      	movs	r1, #0
 800c95c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c960:	4a09      	ldr	r2, [pc, #36]	; (800c988 <vQueueUnregisterQueue+0x50>)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	00db      	lsls	r3, r3, #3
 800c966:	4413      	add	r3, r2
 800c968:	2200      	movs	r2, #0
 800c96a:	605a      	str	r2, [r3, #4]
				break;
 800c96c:	e006      	b.n	800c97c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3301      	adds	r3, #1
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b07      	cmp	r3, #7
 800c978:	d9e5      	bls.n	800c946 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	20009b10 	.word	0x20009b10

0800c98c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c99c:	f001 fcb2 	bl	800e304 <vPortEnterCritical>
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9a6:	b25b      	sxtb	r3, r3
 800c9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ac:	d103      	bne.n	800c9b6 <vQueueWaitForMessageRestricted+0x2a>
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9bc:	b25b      	sxtb	r3, r3
 800c9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c2:	d103      	bne.n	800c9cc <vQueueWaitForMessageRestricted+0x40>
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9cc:	f001 fcca 	bl	800e364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d106      	bne.n	800c9e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	3324      	adds	r3, #36	; 0x24
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	68b9      	ldr	r1, [r7, #8]
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f000 fc4d 	bl	800d280 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9e6:	6978      	ldr	r0, [r7, #20]
 800c9e8:	f7ff fefb 	bl	800c7e2 <prvUnlockQueue>
	}
 800c9ec:	bf00      	nop
 800c9ee:	3718      	adds	r7, #24
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08e      	sub	sp, #56	; 0x38
 800c9f8:	af04      	add	r7, sp, #16
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10a      	bne.n	800ca1e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	623b      	str	r3, [r7, #32]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10a      	bne.n	800ca3a <xTaskCreateStatic+0x46>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	61fb      	str	r3, [r7, #28]
}
 800ca36:	bf00      	nop
 800ca38:	e7fe      	b.n	800ca38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca3a:	235c      	movs	r3, #92	; 0x5c
 800ca3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2b5c      	cmp	r3, #92	; 0x5c
 800ca42:	d00a      	beq.n	800ca5a <xTaskCreateStatic+0x66>
	__asm volatile
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	61bb      	str	r3, [r7, #24]
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d01e      	beq.n	800caa0 <xTaskCreateStatic+0xac>
 800ca62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d01b      	beq.n	800caa0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca74:	2202      	movs	r2, #2
 800ca76:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	9303      	str	r3, [sp, #12]
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	9302      	str	r3, [sp, #8]
 800ca82:	f107 0314 	add.w	r3, r7, #20
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	68b9      	ldr	r1, [r7, #8]
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	f000 f850 	bl	800cb38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca9a:	f000 f8dd 	bl	800cc58 <prvAddNewTaskToReadyList>
 800ca9e:	e001      	b.n	800caa4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800caa0:	2300      	movs	r3, #0
 800caa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800caa4:	697b      	ldr	r3, [r7, #20]
	}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3728      	adds	r7, #40	; 0x28
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b08c      	sub	sp, #48	; 0x30
 800cab2:	af04      	add	r7, sp, #16
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	60b9      	str	r1, [r7, #8]
 800cab8:	603b      	str	r3, [r7, #0]
 800caba:	4613      	mov	r3, r2
 800cabc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cabe:	88fb      	ldrh	r3, [r7, #6]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f001 fd40 	bl	800e548 <pvPortMalloc>
 800cac8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00e      	beq.n	800caee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cad0:	205c      	movs	r0, #92	; 0x5c
 800cad2:	f001 fd39 	bl	800e548 <pvPortMalloc>
 800cad6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	697a      	ldr	r2, [r7, #20]
 800cae2:	631a      	str	r2, [r3, #48]	; 0x30
 800cae4:	e005      	b.n	800caf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cae6:	6978      	ldr	r0, [r7, #20]
 800cae8:	f001 fdfa 	bl	800e6e0 <vPortFree>
 800caec:	e001      	b.n	800caf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d017      	beq.n	800cb28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb00:	88fa      	ldrh	r2, [r7, #6]
 800cb02:	2300      	movs	r3, #0
 800cb04:	9303      	str	r3, [sp, #12]
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	9302      	str	r3, [sp, #8]
 800cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	68b9      	ldr	r1, [r7, #8]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f80e 	bl	800cb38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb1c:	69f8      	ldr	r0, [r7, #28]
 800cb1e:	f000 f89b 	bl	800cc58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb22:	2301      	movs	r3, #1
 800cb24:	61bb      	str	r3, [r7, #24]
 800cb26:	e002      	b.n	800cb2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb28:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb2e:	69bb      	ldr	r3, [r7, #24]
	}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3720      	adds	r7, #32
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b088      	sub	sp, #32
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	461a      	mov	r2, r3
 800cb50:	21a5      	movs	r1, #165	; 0xa5
 800cb52:	f001 ff1b 	bl	800e98c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb60:	3b01      	subs	r3, #1
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	4413      	add	r3, r2
 800cb66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	f023 0307 	bic.w	r3, r3, #7
 800cb6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00a      	beq.n	800cb90 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	617b      	str	r3, [r7, #20]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d01f      	beq.n	800cbd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb96:	2300      	movs	r3, #0
 800cb98:	61fb      	str	r3, [r7, #28]
 800cb9a:	e012      	b.n	800cbc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	4413      	add	r3, r2
 800cba2:	7819      	ldrb	r1, [r3, #0]
 800cba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	4413      	add	r3, r2
 800cbaa:	3334      	adds	r3, #52	; 0x34
 800cbac:	460a      	mov	r2, r1
 800cbae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d006      	beq.n	800cbca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	61fb      	str	r3, [r7, #28]
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b0f      	cmp	r3, #15
 800cbc6:	d9e9      	bls.n	800cb9c <prvInitialiseNewTask+0x64>
 800cbc8:	e000      	b.n	800cbcc <prvInitialiseNewTask+0x94>
			{
				break;
 800cbca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cbd4:	e003      	b.n	800cbde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe0:	2b37      	cmp	r3, #55	; 0x37
 800cbe2:	d901      	bls.n	800cbe8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbe4:	2337      	movs	r3, #55	; 0x37
 800cbe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbf2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe fe56 	bl	800b8b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	3318      	adds	r3, #24
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe fe51 	bl	800b8b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	2200      	movs	r2, #0
 800cc28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc32:	683a      	ldr	r2, [r7, #0]
 800cc34:	68f9      	ldr	r1, [r7, #12]
 800cc36:	69b8      	ldr	r0, [r7, #24]
 800cc38:	f001 fa38 	bl	800e0ac <pxPortInitialiseStack>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc4e:	bf00      	nop
 800cc50:	3720      	adds	r7, #32
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
	...

0800cc58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc60:	f001 fb50 	bl	800e304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc64:	4b2d      	ldr	r3, [pc, #180]	; (800cd1c <prvAddNewTaskToReadyList+0xc4>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	4a2c      	ldr	r2, [pc, #176]	; (800cd1c <prvAddNewTaskToReadyList+0xc4>)
 800cc6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc6e:	4b2c      	ldr	r3, [pc, #176]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d109      	bne.n	800cc8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc76:	4a2a      	ldr	r2, [pc, #168]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc7c:	4b27      	ldr	r3, [pc, #156]	; (800cd1c <prvAddNewTaskToReadyList+0xc4>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d110      	bne.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc84:	f000 fc28 	bl	800d4d8 <prvInitialiseTaskLists>
 800cc88:	e00d      	b.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc8a:	4b26      	ldr	r3, [pc, #152]	; (800cd24 <prvAddNewTaskToReadyList+0xcc>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d109      	bne.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc92:	4b23      	ldr	r3, [pc, #140]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d802      	bhi.n	800cca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cca0:	4a1f      	ldr	r2, [pc, #124]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cca6:	4b20      	ldr	r3, [pc, #128]	; (800cd28 <prvAddNewTaskToReadyList+0xd0>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	4a1e      	ldr	r2, [pc, #120]	; (800cd28 <prvAddNewTaskToReadyList+0xd0>)
 800ccae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccb0:	4b1d      	ldr	r3, [pc, #116]	; (800cd28 <prvAddNewTaskToReadyList+0xd0>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbc:	4b1b      	ldr	r3, [pc, #108]	; (800cd2c <prvAddNewTaskToReadyList+0xd4>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d903      	bls.n	800cccc <prvAddNewTaskToReadyList+0x74>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc8:	4a18      	ldr	r2, [pc, #96]	; (800cd2c <prvAddNewTaskToReadyList+0xd4>)
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	4a15      	ldr	r2, [pc, #84]	; (800cd30 <prvAddNewTaskToReadyList+0xd8>)
 800ccda:	441a      	add	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3304      	adds	r3, #4
 800cce0:	4619      	mov	r1, r3
 800cce2:	4610      	mov	r0, r2
 800cce4:	f7fe fdf1 	bl	800b8ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cce8:	f001 fb3c 	bl	800e364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <prvAddNewTaskToReadyList+0xcc>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00e      	beq.n	800cd12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ccf4:	4b0a      	ldr	r3, [pc, #40]	; (800cd20 <prvAddNewTaskToReadyList+0xc8>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d207      	bcs.n	800cd12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd02:	4b0c      	ldr	r3, [pc, #48]	; (800cd34 <prvAddNewTaskToReadyList+0xdc>)
 800cd04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	20000c3c 	.word	0x20000c3c
 800cd20:	20000768 	.word	0x20000768
 800cd24:	20000c48 	.word	0x20000c48
 800cd28:	20000c58 	.word	0x20000c58
 800cd2c:	20000c44 	.word	0x20000c44
 800cd30:	2000076c 	.word	0x2000076c
 800cd34:	e000ed04 	.word	0xe000ed04

0800cd38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd40:	2300      	movs	r3, #0
 800cd42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d017      	beq.n	800cd7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd4a:	4b13      	ldr	r3, [pc, #76]	; (800cd98 <vTaskDelay+0x60>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00a      	beq.n	800cd68 <vTaskDelay+0x30>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	60bb      	str	r3, [r7, #8]
}
 800cd64:	bf00      	nop
 800cd66:	e7fe      	b.n	800cd66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cd68:	f000 f880 	bl	800ce6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 fdfa 	bl	800d968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd74:	f000 f888 	bl	800ce88 <xTaskResumeAll>
 800cd78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d107      	bne.n	800cd90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cd80:	4b06      	ldr	r3, [pc, #24]	; (800cd9c <vTaskDelay+0x64>)
 800cd82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd86:	601a      	str	r2, [r3, #0]
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd90:	bf00      	nop
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	20000c64 	.word	0x20000c64
 800cd9c:	e000ed04 	.word	0xe000ed04

0800cda0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08a      	sub	sp, #40	; 0x28
 800cda4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cdae:	463a      	mov	r2, r7
 800cdb0:	1d39      	adds	r1, r7, #4
 800cdb2:	f107 0308 	add.w	r3, r7, #8
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fe fd26 	bl	800b808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68ba      	ldr	r2, [r7, #8]
 800cdc2:	9202      	str	r2, [sp, #8]
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	460a      	mov	r2, r1
 800cdce:	4921      	ldr	r1, [pc, #132]	; (800ce54 <vTaskStartScheduler+0xb4>)
 800cdd0:	4821      	ldr	r0, [pc, #132]	; (800ce58 <vTaskStartScheduler+0xb8>)
 800cdd2:	f7ff fe0f 	bl	800c9f4 <xTaskCreateStatic>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	4a20      	ldr	r2, [pc, #128]	; (800ce5c <vTaskStartScheduler+0xbc>)
 800cdda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cddc:	4b1f      	ldr	r3, [pc, #124]	; (800ce5c <vTaskStartScheduler+0xbc>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cde4:	2301      	movs	r3, #1
 800cde6:	617b      	str	r3, [r7, #20]
 800cde8:	e001      	b.n	800cdee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cdea:	2300      	movs	r3, #0
 800cdec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d102      	bne.n	800cdfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cdf4:	f000 fe0c 	bl	800da10 <xTimerCreateTimerTask>
 800cdf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d116      	bne.n	800ce2e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ce00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	613b      	str	r3, [r7, #16]
}
 800ce12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce14:	4b12      	ldr	r3, [pc, #72]	; (800ce60 <vTaskStartScheduler+0xc0>)
 800ce16:	f04f 32ff 	mov.w	r2, #4294967295
 800ce1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce1c:	4b11      	ldr	r3, [pc, #68]	; (800ce64 <vTaskStartScheduler+0xc4>)
 800ce1e:	2201      	movs	r2, #1
 800ce20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce22:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <vTaskStartScheduler+0xc8>)
 800ce24:	2200      	movs	r2, #0
 800ce26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce28:	f001 f9ca 	bl	800e1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce2c:	e00e      	b.n	800ce4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce34:	d10a      	bne.n	800ce4c <vTaskStartScheduler+0xac>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	f383 8811 	msr	BASEPRI, r3
 800ce3e:	f3bf 8f6f 	isb	sy
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	60fb      	str	r3, [r7, #12]
}
 800ce48:	bf00      	nop
 800ce4a:	e7fe      	b.n	800ce4a <vTaskStartScheduler+0xaa>
}
 800ce4c:	bf00      	nop
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	0800f728 	.word	0x0800f728
 800ce58:	0800d4a9 	.word	0x0800d4a9
 800ce5c:	20000c60 	.word	0x20000c60
 800ce60:	20000c5c 	.word	0x20000c5c
 800ce64:	20000c48 	.word	0x20000c48
 800ce68:	20000c40 	.word	0x20000c40

0800ce6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce70:	4b04      	ldr	r3, [pc, #16]	; (800ce84 <vTaskSuspendAll+0x18>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3301      	adds	r3, #1
 800ce76:	4a03      	ldr	r2, [pc, #12]	; (800ce84 <vTaskSuspendAll+0x18>)
 800ce78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce7a:	bf00      	nop
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	20000c64 	.word	0x20000c64

0800ce88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce92:	2300      	movs	r3, #0
 800ce94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce96:	4b42      	ldr	r3, [pc, #264]	; (800cfa0 <xTaskResumeAll+0x118>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10a      	bne.n	800ceb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	603b      	str	r3, [r7, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	e7fe      	b.n	800ceb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ceb4:	f001 fa26 	bl	800e304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ceb8:	4b39      	ldr	r3, [pc, #228]	; (800cfa0 <xTaskResumeAll+0x118>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3b01      	subs	r3, #1
 800cebe:	4a38      	ldr	r2, [pc, #224]	; (800cfa0 <xTaskResumeAll+0x118>)
 800cec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cec2:	4b37      	ldr	r3, [pc, #220]	; (800cfa0 <xTaskResumeAll+0x118>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d162      	bne.n	800cf90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ceca:	4b36      	ldr	r3, [pc, #216]	; (800cfa4 <xTaskResumeAll+0x11c>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d05e      	beq.n	800cf90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ced2:	e02f      	b.n	800cf34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ced4:	4b34      	ldr	r3, [pc, #208]	; (800cfa8 <xTaskResumeAll+0x120>)
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3318      	adds	r3, #24
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fe fd4f 	bl	800b984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3304      	adds	r3, #4
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fe fd4a 	bl	800b984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef4:	4b2d      	ldr	r3, [pc, #180]	; (800cfac <xTaskResumeAll+0x124>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d903      	bls.n	800cf04 <xTaskResumeAll+0x7c>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	4a2a      	ldr	r2, [pc, #168]	; (800cfac <xTaskResumeAll+0x124>)
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf08:	4613      	mov	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4413      	add	r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	4a27      	ldr	r2, [pc, #156]	; (800cfb0 <xTaskResumeAll+0x128>)
 800cf12:	441a      	add	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3304      	adds	r3, #4
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	f7fe fcd5 	bl	800b8ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf24:	4b23      	ldr	r3, [pc, #140]	; (800cfb4 <xTaskResumeAll+0x12c>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d302      	bcc.n	800cf34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cf2e:	4b22      	ldr	r3, [pc, #136]	; (800cfb8 <xTaskResumeAll+0x130>)
 800cf30:	2201      	movs	r2, #1
 800cf32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf34:	4b1c      	ldr	r3, [pc, #112]	; (800cfa8 <xTaskResumeAll+0x120>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1cb      	bne.n	800ced4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d001      	beq.n	800cf46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf42:	f000 fb67 	bl	800d614 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cf46:	4b1d      	ldr	r3, [pc, #116]	; (800cfbc <xTaskResumeAll+0x134>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d010      	beq.n	800cf74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf52:	f000 f859 	bl	800d008 <xTaskIncrementTick>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cf5c:	4b16      	ldr	r3, [pc, #88]	; (800cfb8 <xTaskResumeAll+0x130>)
 800cf5e:	2201      	movs	r2, #1
 800cf60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1f1      	bne.n	800cf52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <xTaskResumeAll+0x134>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf74:	4b10      	ldr	r3, [pc, #64]	; (800cfb8 <xTaskResumeAll+0x130>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d009      	beq.n	800cf90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf80:	4b0f      	ldr	r3, [pc, #60]	; (800cfc0 <xTaskResumeAll+0x138>)
 800cf82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf86:	601a      	str	r2, [r3, #0]
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf90:	f001 f9e8 	bl	800e364 <vPortExitCritical>

	return xAlreadyYielded;
 800cf94:	68bb      	ldr	r3, [r7, #8]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20000c64 	.word	0x20000c64
 800cfa4:	20000c3c 	.word	0x20000c3c
 800cfa8:	20000bfc 	.word	0x20000bfc
 800cfac:	20000c44 	.word	0x20000c44
 800cfb0:	2000076c 	.word	0x2000076c
 800cfb4:	20000768 	.word	0x20000768
 800cfb8:	20000c50 	.word	0x20000c50
 800cfbc:	20000c4c 	.word	0x20000c4c
 800cfc0:	e000ed04 	.word	0xe000ed04

0800cfc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cfca:	4b05      	ldr	r3, [pc, #20]	; (800cfe0 <xTaskGetTickCount+0x1c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cfd0:	687b      	ldr	r3, [r7, #4]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	370c      	adds	r7, #12
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	20000c40 	.word	0x20000c40

0800cfe4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cfea:	f001 fa6d 	bl	800e4c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cfee:	2300      	movs	r3, #0
 800cff0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cff2:	4b04      	ldr	r3, [pc, #16]	; (800d004 <xTaskGetTickCountFromISR+0x20>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cff8:	683b      	ldr	r3, [r7, #0]
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3708      	adds	r7, #8
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	20000c40 	.word	0x20000c40

0800d008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d00e:	2300      	movs	r3, #0
 800d010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d012:	4b4f      	ldr	r3, [pc, #316]	; (800d150 <xTaskIncrementTick+0x148>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2b00      	cmp	r3, #0
 800d018:	f040 808f 	bne.w	800d13a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d01c:	4b4d      	ldr	r3, [pc, #308]	; (800d154 <xTaskIncrementTick+0x14c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	3301      	adds	r3, #1
 800d022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d024:	4a4b      	ldr	r2, [pc, #300]	; (800d154 <xTaskIncrementTick+0x14c>)
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d120      	bne.n	800d072 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d030:	4b49      	ldr	r3, [pc, #292]	; (800d158 <xTaskIncrementTick+0x150>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00a      	beq.n	800d050 <xTaskIncrementTick+0x48>
	__asm volatile
 800d03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d03e:	f383 8811 	msr	BASEPRI, r3
 800d042:	f3bf 8f6f 	isb	sy
 800d046:	f3bf 8f4f 	dsb	sy
 800d04a:	603b      	str	r3, [r7, #0]
}
 800d04c:	bf00      	nop
 800d04e:	e7fe      	b.n	800d04e <xTaskIncrementTick+0x46>
 800d050:	4b41      	ldr	r3, [pc, #260]	; (800d158 <xTaskIncrementTick+0x150>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	60fb      	str	r3, [r7, #12]
 800d056:	4b41      	ldr	r3, [pc, #260]	; (800d15c <xTaskIncrementTick+0x154>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a3f      	ldr	r2, [pc, #252]	; (800d158 <xTaskIncrementTick+0x150>)
 800d05c:	6013      	str	r3, [r2, #0]
 800d05e:	4a3f      	ldr	r2, [pc, #252]	; (800d15c <xTaskIncrementTick+0x154>)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6013      	str	r3, [r2, #0]
 800d064:	4b3e      	ldr	r3, [pc, #248]	; (800d160 <xTaskIncrementTick+0x158>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3301      	adds	r3, #1
 800d06a:	4a3d      	ldr	r2, [pc, #244]	; (800d160 <xTaskIncrementTick+0x158>)
 800d06c:	6013      	str	r3, [r2, #0]
 800d06e:	f000 fad1 	bl	800d614 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d072:	4b3c      	ldr	r3, [pc, #240]	; (800d164 <xTaskIncrementTick+0x15c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	693a      	ldr	r2, [r7, #16]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d349      	bcc.n	800d110 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d07c:	4b36      	ldr	r3, [pc, #216]	; (800d158 <xTaskIncrementTick+0x150>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d104      	bne.n	800d090 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d086:	4b37      	ldr	r3, [pc, #220]	; (800d164 <xTaskIncrementTick+0x15c>)
 800d088:	f04f 32ff 	mov.w	r2, #4294967295
 800d08c:	601a      	str	r2, [r3, #0]
					break;
 800d08e:	e03f      	b.n	800d110 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d090:	4b31      	ldr	r3, [pc, #196]	; (800d158 <xTaskIncrementTick+0x150>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d0a0:	693a      	ldr	r2, [r7, #16]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d203      	bcs.n	800d0b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d0a8:	4a2e      	ldr	r2, [pc, #184]	; (800d164 <xTaskIncrementTick+0x15c>)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d0ae:	e02f      	b.n	800d110 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe fc65 	bl	800b984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d004      	beq.n	800d0cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	3318      	adds	r3, #24
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe fc5c 	bl	800b984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d0:	4b25      	ldr	r3, [pc, #148]	; (800d168 <xTaskIncrementTick+0x160>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d903      	bls.n	800d0e0 <xTaskIncrementTick+0xd8>
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0dc:	4a22      	ldr	r2, [pc, #136]	; (800d168 <xTaskIncrementTick+0x160>)
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4a1f      	ldr	r2, [pc, #124]	; (800d16c <xTaskIncrementTick+0x164>)
 800d0ee:	441a      	add	r2, r3
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f7fe fbe7 	bl	800b8ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d100:	4b1b      	ldr	r3, [pc, #108]	; (800d170 <xTaskIncrementTick+0x168>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d106:	429a      	cmp	r2, r3
 800d108:	d3b8      	bcc.n	800d07c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d10a:	2301      	movs	r3, #1
 800d10c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d10e:	e7b5      	b.n	800d07c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d110:	4b17      	ldr	r3, [pc, #92]	; (800d170 <xTaskIncrementTick+0x168>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d116:	4915      	ldr	r1, [pc, #84]	; (800d16c <xTaskIncrementTick+0x164>)
 800d118:	4613      	mov	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	440b      	add	r3, r1
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d901      	bls.n	800d12c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d128:	2301      	movs	r3, #1
 800d12a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d12c:	4b11      	ldr	r3, [pc, #68]	; (800d174 <xTaskIncrementTick+0x16c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d007      	beq.n	800d144 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d134:	2301      	movs	r3, #1
 800d136:	617b      	str	r3, [r7, #20]
 800d138:	e004      	b.n	800d144 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d13a:	4b0f      	ldr	r3, [pc, #60]	; (800d178 <xTaskIncrementTick+0x170>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3301      	adds	r3, #1
 800d140:	4a0d      	ldr	r2, [pc, #52]	; (800d178 <xTaskIncrementTick+0x170>)
 800d142:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d144:	697b      	ldr	r3, [r7, #20]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3718      	adds	r7, #24
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	20000c64 	.word	0x20000c64
 800d154:	20000c40 	.word	0x20000c40
 800d158:	20000bf4 	.word	0x20000bf4
 800d15c:	20000bf8 	.word	0x20000bf8
 800d160:	20000c54 	.word	0x20000c54
 800d164:	20000c5c 	.word	0x20000c5c
 800d168:	20000c44 	.word	0x20000c44
 800d16c:	2000076c 	.word	0x2000076c
 800d170:	20000768 	.word	0x20000768
 800d174:	20000c50 	.word	0x20000c50
 800d178:	20000c4c 	.word	0x20000c4c

0800d17c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d182:	4b28      	ldr	r3, [pc, #160]	; (800d224 <vTaskSwitchContext+0xa8>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d18a:	4b27      	ldr	r3, [pc, #156]	; (800d228 <vTaskSwitchContext+0xac>)
 800d18c:	2201      	movs	r2, #1
 800d18e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d190:	e041      	b.n	800d216 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800d192:	4b25      	ldr	r3, [pc, #148]	; (800d228 <vTaskSwitchContext+0xac>)
 800d194:	2200      	movs	r2, #0
 800d196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d198:	4b24      	ldr	r3, [pc, #144]	; (800d22c <vTaskSwitchContext+0xb0>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	60fb      	str	r3, [r7, #12]
 800d19e:	e010      	b.n	800d1c2 <vTaskSwitchContext+0x46>
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10a      	bne.n	800d1bc <vTaskSwitchContext+0x40>
	__asm volatile
 800d1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1aa:	f383 8811 	msr	BASEPRI, r3
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	607b      	str	r3, [r7, #4]
}
 800d1b8:	bf00      	nop
 800d1ba:	e7fe      	b.n	800d1ba <vTaskSwitchContext+0x3e>
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3b01      	subs	r3, #1
 800d1c0:	60fb      	str	r3, [r7, #12]
 800d1c2:	491b      	ldr	r1, [pc, #108]	; (800d230 <vTaskSwitchContext+0xb4>)
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	4413      	add	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	440b      	add	r3, r1
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d0e4      	beq.n	800d1a0 <vTaskSwitchContext+0x24>
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	4613      	mov	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4413      	add	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4a13      	ldr	r2, [pc, #76]	; (800d230 <vTaskSwitchContext+0xb4>)
 800d1e2:	4413      	add	r3, r2
 800d1e4:	60bb      	str	r3, [r7, #8]
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	605a      	str	r2, [r3, #4]
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	685a      	ldr	r2, [r3, #4]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d104      	bne.n	800d206 <vTaskSwitchContext+0x8a>
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	685a      	ldr	r2, [r3, #4]
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	605a      	str	r2, [r3, #4]
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	4a09      	ldr	r2, [pc, #36]	; (800d234 <vTaskSwitchContext+0xb8>)
 800d20e:	6013      	str	r3, [r2, #0]
 800d210:	4a06      	ldr	r2, [pc, #24]	; (800d22c <vTaskSwitchContext+0xb0>)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6013      	str	r3, [r2, #0]
}
 800d216:	bf00      	nop
 800d218:	3714      	adds	r7, #20
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr
 800d222:	bf00      	nop
 800d224:	20000c64 	.word	0x20000c64
 800d228:	20000c50 	.word	0x20000c50
 800d22c:	20000c44 	.word	0x20000c44
 800d230:	2000076c 	.word	0x2000076c
 800d234:	20000768 	.word	0x20000768

0800d238 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10a      	bne.n	800d25e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	f383 8811 	msr	BASEPRI, r3
 800d250:	f3bf 8f6f 	isb	sy
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	60fb      	str	r3, [r7, #12]
}
 800d25a:	bf00      	nop
 800d25c:	e7fe      	b.n	800d25c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d25e:	4b07      	ldr	r3, [pc, #28]	; (800d27c <vTaskPlaceOnEventList+0x44>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	3318      	adds	r3, #24
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7fe fb53 	bl	800b912 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d26c:	2101      	movs	r1, #1
 800d26e:	6838      	ldr	r0, [r7, #0]
 800d270:	f000 fb7a 	bl	800d968 <prvAddCurrentTaskToDelayedList>
}
 800d274:	bf00      	nop
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	20000768 	.word	0x20000768

0800d280 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d280:	b580      	push	{r7, lr}
 800d282:	b086      	sub	sp, #24
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10a      	bne.n	800d2a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	617b      	str	r3, [r7, #20]
}
 800d2a4:	bf00      	nop
 800d2a6:	e7fe      	b.n	800d2a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2a8:	4b0a      	ldr	r3, [pc, #40]	; (800d2d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	3318      	adds	r3, #24
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7fe fb0a 	bl	800b8ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	68b8      	ldr	r0, [r7, #8]
 800d2c6:	f000 fb4f 	bl	800d968 <prvAddCurrentTaskToDelayedList>
	}
 800d2ca:	bf00      	nop
 800d2cc:	3718      	adds	r7, #24
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	20000768 	.word	0x20000768

0800d2d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b086      	sub	sp, #24
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10a      	bne.n	800d304 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f2:	f383 8811 	msr	BASEPRI, r3
 800d2f6:	f3bf 8f6f 	isb	sy
 800d2fa:	f3bf 8f4f 	dsb	sy
 800d2fe:	60fb      	str	r3, [r7, #12]
}
 800d300:	bf00      	nop
 800d302:	e7fe      	b.n	800d302 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	3318      	adds	r3, #24
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe fb3b 	bl	800b984 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d30e:	4b1e      	ldr	r3, [pc, #120]	; (800d388 <xTaskRemoveFromEventList+0xb0>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d11d      	bne.n	800d352 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	3304      	adds	r3, #4
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe fb32 	bl	800b984 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d324:	4b19      	ldr	r3, [pc, #100]	; (800d38c <xTaskRemoveFromEventList+0xb4>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d903      	bls.n	800d334 <xTaskRemoveFromEventList+0x5c>
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d330:	4a16      	ldr	r2, [pc, #88]	; (800d38c <xTaskRemoveFromEventList+0xb4>)
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4a13      	ldr	r2, [pc, #76]	; (800d390 <xTaskRemoveFromEventList+0xb8>)
 800d342:	441a      	add	r2, r3
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	3304      	adds	r3, #4
 800d348:	4619      	mov	r1, r3
 800d34a:	4610      	mov	r0, r2
 800d34c:	f7fe fabd 	bl	800b8ca <vListInsertEnd>
 800d350:	e005      	b.n	800d35e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	3318      	adds	r3, #24
 800d356:	4619      	mov	r1, r3
 800d358:	480e      	ldr	r0, [pc, #56]	; (800d394 <xTaskRemoveFromEventList+0xbc>)
 800d35a:	f7fe fab6 	bl	800b8ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d362:	4b0d      	ldr	r3, [pc, #52]	; (800d398 <xTaskRemoveFromEventList+0xc0>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d368:	429a      	cmp	r2, r3
 800d36a:	d905      	bls.n	800d378 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d36c:	2301      	movs	r3, #1
 800d36e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d370:	4b0a      	ldr	r3, [pc, #40]	; (800d39c <xTaskRemoveFromEventList+0xc4>)
 800d372:	2201      	movs	r2, #1
 800d374:	601a      	str	r2, [r3, #0]
 800d376:	e001      	b.n	800d37c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d378:	2300      	movs	r3, #0
 800d37a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d37c:	697b      	ldr	r3, [r7, #20]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3718      	adds	r7, #24
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20000c64 	.word	0x20000c64
 800d38c:	20000c44 	.word	0x20000c44
 800d390:	2000076c 	.word	0x2000076c
 800d394:	20000bfc 	.word	0x20000bfc
 800d398:	20000768 	.word	0x20000768
 800d39c:	20000c50 	.word	0x20000c50

0800d3a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3a8:	4b06      	ldr	r3, [pc, #24]	; (800d3c4 <vTaskInternalSetTimeOutState+0x24>)
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d3b0:	4b05      	ldr	r3, [pc, #20]	; (800d3c8 <vTaskInternalSetTimeOutState+0x28>)
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	605a      	str	r2, [r3, #4]
}
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr
 800d3c4:	20000c54 	.word	0x20000c54
 800d3c8:	20000c40 	.word	0x20000c40

0800d3cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b088      	sub	sp, #32
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10a      	bne.n	800d3f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e0:	f383 8811 	msr	BASEPRI, r3
 800d3e4:	f3bf 8f6f 	isb	sy
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	613b      	str	r3, [r7, #16]
}
 800d3ee:	bf00      	nop
 800d3f0:	e7fe      	b.n	800d3f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	60fb      	str	r3, [r7, #12]
}
 800d40a:	bf00      	nop
 800d40c:	e7fe      	b.n	800d40c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d40e:	f000 ff79 	bl	800e304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d412:	4b1d      	ldr	r3, [pc, #116]	; (800d488 <xTaskCheckForTimeOut+0xbc>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	69ba      	ldr	r2, [r7, #24]
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42a:	d102      	bne.n	800d432 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d42c:	2300      	movs	r3, #0
 800d42e:	61fb      	str	r3, [r7, #28]
 800d430:	e023      	b.n	800d47a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	4b15      	ldr	r3, [pc, #84]	; (800d48c <xTaskCheckForTimeOut+0xc0>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d007      	beq.n	800d44e <xTaskCheckForTimeOut+0x82>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	69ba      	ldr	r2, [r7, #24]
 800d444:	429a      	cmp	r2, r3
 800d446:	d302      	bcc.n	800d44e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d448:	2301      	movs	r3, #1
 800d44a:	61fb      	str	r3, [r7, #28]
 800d44c:	e015      	b.n	800d47a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	429a      	cmp	r2, r3
 800d456:	d20b      	bcs.n	800d470 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	1ad2      	subs	r2, r2, r3
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7ff ff9b 	bl	800d3a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d46a:	2300      	movs	r3, #0
 800d46c:	61fb      	str	r3, [r7, #28]
 800d46e:	e004      	b.n	800d47a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	2200      	movs	r2, #0
 800d474:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d476:	2301      	movs	r3, #1
 800d478:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d47a:	f000 ff73 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800d47e:	69fb      	ldr	r3, [r7, #28]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	20000c40 	.word	0x20000c40
 800d48c:	20000c54 	.word	0x20000c54

0800d490 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d490:	b480      	push	{r7}
 800d492:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d494:	4b03      	ldr	r3, [pc, #12]	; (800d4a4 <vTaskMissedYield+0x14>)
 800d496:	2201      	movs	r2, #1
 800d498:	601a      	str	r2, [r3, #0]
}
 800d49a:	bf00      	nop
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr
 800d4a4:	20000c50 	.word	0x20000c50

0800d4a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d4b0:	f000 f852 	bl	800d558 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d4b4:	4b06      	ldr	r3, [pc, #24]	; (800d4d0 <prvIdleTask+0x28>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d9f9      	bls.n	800d4b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d4bc:	4b05      	ldr	r3, [pc, #20]	; (800d4d4 <prvIdleTask+0x2c>)
 800d4be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4c2:	601a      	str	r2, [r3, #0]
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d4cc:	e7f0      	b.n	800d4b0 <prvIdleTask+0x8>
 800d4ce:	bf00      	nop
 800d4d0:	2000076c 	.word	0x2000076c
 800d4d4:	e000ed04 	.word	0xe000ed04

0800d4d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4de:	2300      	movs	r3, #0
 800d4e0:	607b      	str	r3, [r7, #4]
 800d4e2:	e00c      	b.n	800d4fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4413      	add	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4a12      	ldr	r2, [pc, #72]	; (800d538 <prvInitialiseTaskLists+0x60>)
 800d4f0:	4413      	add	r3, r2
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fe f9bc 	bl	800b870 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	607b      	str	r3, [r7, #4]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b37      	cmp	r3, #55	; 0x37
 800d502:	d9ef      	bls.n	800d4e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d504:	480d      	ldr	r0, [pc, #52]	; (800d53c <prvInitialiseTaskLists+0x64>)
 800d506:	f7fe f9b3 	bl	800b870 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d50a:	480d      	ldr	r0, [pc, #52]	; (800d540 <prvInitialiseTaskLists+0x68>)
 800d50c:	f7fe f9b0 	bl	800b870 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d510:	480c      	ldr	r0, [pc, #48]	; (800d544 <prvInitialiseTaskLists+0x6c>)
 800d512:	f7fe f9ad 	bl	800b870 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d516:	480c      	ldr	r0, [pc, #48]	; (800d548 <prvInitialiseTaskLists+0x70>)
 800d518:	f7fe f9aa 	bl	800b870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d51c:	480b      	ldr	r0, [pc, #44]	; (800d54c <prvInitialiseTaskLists+0x74>)
 800d51e:	f7fe f9a7 	bl	800b870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d522:	4b0b      	ldr	r3, [pc, #44]	; (800d550 <prvInitialiseTaskLists+0x78>)
 800d524:	4a05      	ldr	r2, [pc, #20]	; (800d53c <prvInitialiseTaskLists+0x64>)
 800d526:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d528:	4b0a      	ldr	r3, [pc, #40]	; (800d554 <prvInitialiseTaskLists+0x7c>)
 800d52a:	4a05      	ldr	r2, [pc, #20]	; (800d540 <prvInitialiseTaskLists+0x68>)
 800d52c:	601a      	str	r2, [r3, #0]
}
 800d52e:	bf00      	nop
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	2000076c 	.word	0x2000076c
 800d53c:	20000bcc 	.word	0x20000bcc
 800d540:	20000be0 	.word	0x20000be0
 800d544:	20000bfc 	.word	0x20000bfc
 800d548:	20000c10 	.word	0x20000c10
 800d54c:	20000c28 	.word	0x20000c28
 800d550:	20000bf4 	.word	0x20000bf4
 800d554:	20000bf8 	.word	0x20000bf8

0800d558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d55e:	e019      	b.n	800d594 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d560:	f000 fed0 	bl	800e304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d564:	4b10      	ldr	r3, [pc, #64]	; (800d5a8 <prvCheckTasksWaitingTermination+0x50>)
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	3304      	adds	r3, #4
 800d570:	4618      	mov	r0, r3
 800d572:	f7fe fa07 	bl	800b984 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d576:	4b0d      	ldr	r3, [pc, #52]	; (800d5ac <prvCheckTasksWaitingTermination+0x54>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	3b01      	subs	r3, #1
 800d57c:	4a0b      	ldr	r2, [pc, #44]	; (800d5ac <prvCheckTasksWaitingTermination+0x54>)
 800d57e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d580:	4b0b      	ldr	r3, [pc, #44]	; (800d5b0 <prvCheckTasksWaitingTermination+0x58>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3b01      	subs	r3, #1
 800d586:	4a0a      	ldr	r2, [pc, #40]	; (800d5b0 <prvCheckTasksWaitingTermination+0x58>)
 800d588:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d58a:	f000 feeb 	bl	800e364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f810 	bl	800d5b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d594:	4b06      	ldr	r3, [pc, #24]	; (800d5b0 <prvCheckTasksWaitingTermination+0x58>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1e1      	bne.n	800d560 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d59c:	bf00      	nop
 800d59e:	bf00      	nop
 800d5a0:	3708      	adds	r7, #8
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20000c10 	.word	0x20000c10
 800d5ac:	20000c3c 	.word	0x20000c3c
 800d5b0:	20000c24 	.word	0x20000c24

0800d5b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d108      	bne.n	800d5d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f001 f888 	bl	800e6e0 <vPortFree>
				vPortFree( pxTCB );
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f001 f885 	bl	800e6e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d5d6:	e018      	b.n	800d60a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d103      	bne.n	800d5ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f001 f87c 	bl	800e6e0 <vPortFree>
	}
 800d5e8:	e00f      	b.n	800d60a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d00a      	beq.n	800d60a <prvDeleteTCB+0x56>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	60fb      	str	r3, [r7, #12]
}
 800d606:	bf00      	nop
 800d608:	e7fe      	b.n	800d608 <prvDeleteTCB+0x54>
	}
 800d60a:	bf00      	nop
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
	...

0800d614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d61a:	4b0c      	ldr	r3, [pc, #48]	; (800d64c <prvResetNextTaskUnblockTime+0x38>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d104      	bne.n	800d62e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d624:	4b0a      	ldr	r3, [pc, #40]	; (800d650 <prvResetNextTaskUnblockTime+0x3c>)
 800d626:	f04f 32ff 	mov.w	r2, #4294967295
 800d62a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d62c:	e008      	b.n	800d640 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d62e:	4b07      	ldr	r3, [pc, #28]	; (800d64c <prvResetNextTaskUnblockTime+0x38>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	4a04      	ldr	r2, [pc, #16]	; (800d650 <prvResetNextTaskUnblockTime+0x3c>)
 800d63e:	6013      	str	r3, [r2, #0]
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	20000bf4 	.word	0x20000bf4
 800d650:	20000c5c 	.word	0x20000c5c

0800d654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d65a:	4b0b      	ldr	r3, [pc, #44]	; (800d688 <xTaskGetSchedulerState+0x34>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d102      	bne.n	800d668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d662:	2301      	movs	r3, #1
 800d664:	607b      	str	r3, [r7, #4]
 800d666:	e008      	b.n	800d67a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d668:	4b08      	ldr	r3, [pc, #32]	; (800d68c <xTaskGetSchedulerState+0x38>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d102      	bne.n	800d676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d670:	2302      	movs	r3, #2
 800d672:	607b      	str	r3, [r7, #4]
 800d674:	e001      	b.n	800d67a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d676:	2300      	movs	r3, #0
 800d678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d67a:	687b      	ldr	r3, [r7, #4]
	}
 800d67c:	4618      	mov	r0, r3
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr
 800d688:	20000c48 	.word	0x20000c48
 800d68c:	20000c64 	.word	0x20000c64

0800d690 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d69c:	2300      	movs	r3, #0
 800d69e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d051      	beq.n	800d74a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6aa:	4b2a      	ldr	r3, [pc, #168]	; (800d754 <xTaskPriorityInherit+0xc4>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d241      	bcs.n	800d738 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	db06      	blt.n	800d6ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6bc:	4b25      	ldr	r3, [pc, #148]	; (800d754 <xTaskPriorityInherit+0xc4>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	6959      	ldr	r1, [r3, #20]
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	4a1f      	ldr	r2, [pc, #124]	; (800d758 <xTaskPriorityInherit+0xc8>)
 800d6dc:	4413      	add	r3, r2
 800d6de:	4299      	cmp	r1, r3
 800d6e0:	d122      	bne.n	800d728 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe f94c 	bl	800b984 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6ec:	4b19      	ldr	r3, [pc, #100]	; (800d754 <xTaskPriorityInherit+0xc4>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fa:	4b18      	ldr	r3, [pc, #96]	; (800d75c <xTaskPriorityInherit+0xcc>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d903      	bls.n	800d70a <xTaskPriorityInherit+0x7a>
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d706:	4a15      	ldr	r2, [pc, #84]	; (800d75c <xTaskPriorityInherit+0xcc>)
 800d708:	6013      	str	r3, [r2, #0]
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70e:	4613      	mov	r3, r2
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	4413      	add	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4a10      	ldr	r2, [pc, #64]	; (800d758 <xTaskPriorityInherit+0xc8>)
 800d718:	441a      	add	r2, r3
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	3304      	adds	r3, #4
 800d71e:	4619      	mov	r1, r3
 800d720:	4610      	mov	r0, r2
 800d722:	f7fe f8d2 	bl	800b8ca <vListInsertEnd>
 800d726:	e004      	b.n	800d732 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d728:	4b0a      	ldr	r3, [pc, #40]	; (800d754 <xTaskPriorityInherit+0xc4>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d732:	2301      	movs	r3, #1
 800d734:	60fb      	str	r3, [r7, #12]
 800d736:	e008      	b.n	800d74a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d73c:	4b05      	ldr	r3, [pc, #20]	; (800d754 <xTaskPriorityInherit+0xc4>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d742:	429a      	cmp	r2, r3
 800d744:	d201      	bcs.n	800d74a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d746:	2301      	movs	r3, #1
 800d748:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d74a:	68fb      	ldr	r3, [r7, #12]
	}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	20000768 	.word	0x20000768
 800d758:	2000076c 	.word	0x2000076c
 800d75c:	20000c44 	.word	0x20000c44

0800d760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d76c:	2300      	movs	r3, #0
 800d76e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d056      	beq.n	800d824 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d776:	4b2e      	ldr	r3, [pc, #184]	; (800d830 <xTaskPriorityDisinherit+0xd0>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d00a      	beq.n	800d796 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	60fb      	str	r3, [r7, #12]
}
 800d792:	bf00      	nop
 800d794:	e7fe      	b.n	800d794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10a      	bne.n	800d7b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	60bb      	str	r3, [r7, #8]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7b8:	1e5a      	subs	r2, r3, #1
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d02c      	beq.n	800d824 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d128      	bne.n	800d824 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fe f8d4 	bl	800b984 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f4:	4b0f      	ldr	r3, [pc, #60]	; (800d834 <xTaskPriorityDisinherit+0xd4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d903      	bls.n	800d804 <xTaskPriorityDisinherit+0xa4>
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d800:	4a0c      	ldr	r2, [pc, #48]	; (800d834 <xTaskPriorityDisinherit+0xd4>)
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d808:	4613      	mov	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	4a09      	ldr	r2, [pc, #36]	; (800d838 <xTaskPriorityDisinherit+0xd8>)
 800d812:	441a      	add	r2, r3
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	3304      	adds	r3, #4
 800d818:	4619      	mov	r1, r3
 800d81a:	4610      	mov	r0, r2
 800d81c:	f7fe f855 	bl	800b8ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d820:	2301      	movs	r3, #1
 800d822:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d824:	697b      	ldr	r3, [r7, #20]
	}
 800d826:	4618      	mov	r0, r3
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	20000768 	.word	0x20000768
 800d834:	20000c44 	.word	0x20000c44
 800d838:	2000076c 	.word	0x2000076c

0800d83c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b088      	sub	sp, #32
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d84a:	2301      	movs	r3, #1
 800d84c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d06a      	beq.n	800d92a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10a      	bne.n	800d872 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	60fb      	str	r3, [r7, #12]
}
 800d86e:	bf00      	nop
 800d870:	e7fe      	b.n	800d870 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d876:	683a      	ldr	r2, [r7, #0]
 800d878:	429a      	cmp	r2, r3
 800d87a:	d902      	bls.n	800d882 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	61fb      	str	r3, [r7, #28]
 800d880:	e002      	b.n	800d888 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d886:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88c:	69fa      	ldr	r2, [r7, #28]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d04b      	beq.n	800d92a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d146      	bne.n	800d92a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d89c:	4b25      	ldr	r3, [pc, #148]	; (800d934 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	69ba      	ldr	r2, [r7, #24]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d10a      	bne.n	800d8bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	60bb      	str	r3, [r7, #8]
}
 800d8b8:	bf00      	nop
 800d8ba:	e7fe      	b.n	800d8ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	69fa      	ldr	r2, [r7, #28]
 800d8c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	db04      	blt.n	800d8da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	6959      	ldr	r1, [r3, #20]
 800d8de:	693a      	ldr	r2, [r7, #16]
 800d8e0:	4613      	mov	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	4413      	add	r3, r2
 800d8e6:	009b      	lsls	r3, r3, #2
 800d8e8:	4a13      	ldr	r2, [pc, #76]	; (800d938 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d8ea:	4413      	add	r3, r2
 800d8ec:	4299      	cmp	r1, r3
 800d8ee:	d11c      	bne.n	800d92a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7fe f845 	bl	800b984 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8fa:	69bb      	ldr	r3, [r7, #24]
 800d8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8fe:	4b0f      	ldr	r3, [pc, #60]	; (800d93c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	429a      	cmp	r2, r3
 800d904:	d903      	bls.n	800d90e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90a:	4a0c      	ldr	r2, [pc, #48]	; (800d93c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d90c:	6013      	str	r3, [r2, #0]
 800d90e:	69bb      	ldr	r3, [r7, #24]
 800d910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d912:	4613      	mov	r3, r2
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	4413      	add	r3, r2
 800d918:	009b      	lsls	r3, r3, #2
 800d91a:	4a07      	ldr	r2, [pc, #28]	; (800d938 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d91c:	441a      	add	r2, r3
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	3304      	adds	r3, #4
 800d922:	4619      	mov	r1, r3
 800d924:	4610      	mov	r0, r2
 800d926:	f7fd ffd0 	bl	800b8ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d92a:	bf00      	nop
 800d92c:	3720      	adds	r7, #32
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	20000768 	.word	0x20000768
 800d938:	2000076c 	.word	0x2000076c
 800d93c:	20000c44 	.word	0x20000c44

0800d940 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d944:	4b07      	ldr	r3, [pc, #28]	; (800d964 <pvTaskIncrementMutexHeldCount+0x24>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d004      	beq.n	800d956 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d94c:	4b05      	ldr	r3, [pc, #20]	; (800d964 <pvTaskIncrementMutexHeldCount+0x24>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d952:	3201      	adds	r2, #1
 800d954:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d956:	4b03      	ldr	r3, [pc, #12]	; (800d964 <pvTaskIncrementMutexHeldCount+0x24>)
 800d958:	681b      	ldr	r3, [r3, #0]
	}
 800d95a:	4618      	mov	r0, r3
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	20000768 	.word	0x20000768

0800d968 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d972:	4b21      	ldr	r3, [pc, #132]	; (800d9f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d978:	4b20      	ldr	r3, [pc, #128]	; (800d9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3304      	adds	r3, #4
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe f800 	bl	800b984 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98a:	d10a      	bne.n	800d9a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d007      	beq.n	800d9a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d992:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3304      	adds	r3, #4
 800d998:	4619      	mov	r1, r3
 800d99a:	4819      	ldr	r0, [pc, #100]	; (800da00 <prvAddCurrentTaskToDelayedList+0x98>)
 800d99c:	f7fd ff95 	bl	800b8ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9a0:	e026      	b.n	800d9f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9aa:	4b14      	ldr	r3, [pc, #80]	; (800d9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68ba      	ldr	r2, [r7, #8]
 800d9b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d209      	bcs.n	800d9ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9ba:	4b12      	ldr	r3, [pc, #72]	; (800da04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	4610      	mov	r0, r2
 800d9c8:	f7fd ffa3 	bl	800b912 <vListInsert>
}
 800d9cc:	e010      	b.n	800d9f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9ce:	4b0e      	ldr	r3, [pc, #56]	; (800da08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	4b0a      	ldr	r3, [pc, #40]	; (800d9fc <prvAddCurrentTaskToDelayedList+0x94>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	4619      	mov	r1, r3
 800d9da:	4610      	mov	r0, r2
 800d9dc:	f7fd ff99 	bl	800b912 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d9e0:	4b0a      	ldr	r3, [pc, #40]	; (800da0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d202      	bcs.n	800d9f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d9ea:	4a08      	ldr	r2, [pc, #32]	; (800da0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	6013      	str	r3, [r2, #0]
}
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	20000c40 	.word	0x20000c40
 800d9fc:	20000768 	.word	0x20000768
 800da00:	20000c28 	.word	0x20000c28
 800da04:	20000bf8 	.word	0x20000bf8
 800da08:	20000bf4 	.word	0x20000bf4
 800da0c:	20000c5c 	.word	0x20000c5c

0800da10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b08a      	sub	sp, #40	; 0x28
 800da14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800da16:	2300      	movs	r3, #0
 800da18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800da1a:	f000 fb07 	bl	800e02c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800da1e:	4b1c      	ldr	r3, [pc, #112]	; (800da90 <xTimerCreateTimerTask+0x80>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d021      	beq.n	800da6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da26:	2300      	movs	r3, #0
 800da28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da2e:	1d3a      	adds	r2, r7, #4
 800da30:	f107 0108 	add.w	r1, r7, #8
 800da34:	f107 030c 	add.w	r3, r7, #12
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fd feff 	bl	800b83c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da3e:	6879      	ldr	r1, [r7, #4]
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	9202      	str	r2, [sp, #8]
 800da46:	9301      	str	r3, [sp, #4]
 800da48:	2302      	movs	r3, #2
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	2300      	movs	r3, #0
 800da4e:	460a      	mov	r2, r1
 800da50:	4910      	ldr	r1, [pc, #64]	; (800da94 <xTimerCreateTimerTask+0x84>)
 800da52:	4811      	ldr	r0, [pc, #68]	; (800da98 <xTimerCreateTimerTask+0x88>)
 800da54:	f7fe ffce 	bl	800c9f4 <xTaskCreateStatic>
 800da58:	4603      	mov	r3, r0
 800da5a:	4a10      	ldr	r2, [pc, #64]	; (800da9c <xTimerCreateTimerTask+0x8c>)
 800da5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da5e:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <xTimerCreateTimerTask+0x8c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da66:	2301      	movs	r3, #1
 800da68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10a      	bne.n	800da86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800da70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da74:	f383 8811 	msr	BASEPRI, r3
 800da78:	f3bf 8f6f 	isb	sy
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	613b      	str	r3, [r7, #16]
}
 800da82:	bf00      	nop
 800da84:	e7fe      	b.n	800da84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da86:	697b      	ldr	r3, [r7, #20]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	20000c98 	.word	0x20000c98
 800da94:	0800f730 	.word	0x0800f730
 800da98:	0800dbd5 	.word	0x0800dbd5
 800da9c:	20000c9c 	.word	0x20000c9c

0800daa0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b08a      	sub	sp, #40	; 0x28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
 800daac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800daae:	2300      	movs	r3, #0
 800dab0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10a      	bne.n	800dace <xTimerGenericCommand+0x2e>
	__asm volatile
 800dab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	623b      	str	r3, [r7, #32]
}
 800daca:	bf00      	nop
 800dacc:	e7fe      	b.n	800dacc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dace:	4b1a      	ldr	r3, [pc, #104]	; (800db38 <xTimerGenericCommand+0x98>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d02a      	beq.n	800db2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b05      	cmp	r3, #5
 800dae6:	dc18      	bgt.n	800db1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dae8:	f7ff fdb4 	bl	800d654 <xTaskGetSchedulerState>
 800daec:	4603      	mov	r3, r0
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d109      	bne.n	800db06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800daf2:	4b11      	ldr	r3, [pc, #68]	; (800db38 <xTimerGenericCommand+0x98>)
 800daf4:	6818      	ldr	r0, [r3, #0]
 800daf6:	f107 0110 	add.w	r1, r7, #16
 800dafa:	2300      	movs	r3, #0
 800dafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dafe:	f7fe f913 	bl	800bd28 <xQueueGenericSend>
 800db02:	6278      	str	r0, [r7, #36]	; 0x24
 800db04:	e012      	b.n	800db2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db06:	4b0c      	ldr	r3, [pc, #48]	; (800db38 <xTimerGenericCommand+0x98>)
 800db08:	6818      	ldr	r0, [r3, #0]
 800db0a:	f107 0110 	add.w	r1, r7, #16
 800db0e:	2300      	movs	r3, #0
 800db10:	2200      	movs	r2, #0
 800db12:	f7fe f909 	bl	800bd28 <xQueueGenericSend>
 800db16:	6278      	str	r0, [r7, #36]	; 0x24
 800db18:	e008      	b.n	800db2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db1a:	4b07      	ldr	r3, [pc, #28]	; (800db38 <xTimerGenericCommand+0x98>)
 800db1c:	6818      	ldr	r0, [r3, #0]
 800db1e:	f107 0110 	add.w	r1, r7, #16
 800db22:	2300      	movs	r3, #0
 800db24:	683a      	ldr	r2, [r7, #0]
 800db26:	f7fe f9fd 	bl	800bf24 <xQueueGenericSendFromISR>
 800db2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3728      	adds	r7, #40	; 0x28
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	20000c98 	.word	0x20000c98

0800db3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af02      	add	r7, sp, #8
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db46:	4b22      	ldr	r3, [pc, #136]	; (800dbd0 <prvProcessExpiredTimer+0x94>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	3304      	adds	r3, #4
 800db54:	4618      	mov	r0, r3
 800db56:	f7fd ff15 	bl	800b984 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db60:	f003 0304 	and.w	r3, r3, #4
 800db64:	2b00      	cmp	r3, #0
 800db66:	d022      	beq.n	800dbae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	699a      	ldr	r2, [r3, #24]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	18d1      	adds	r1, r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	6978      	ldr	r0, [r7, #20]
 800db76:	f000 f8d1 	bl	800dd1c <prvInsertTimerInActiveList>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d01f      	beq.n	800dbc0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db80:	2300      	movs	r3, #0
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	2300      	movs	r3, #0
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	2100      	movs	r1, #0
 800db8a:	6978      	ldr	r0, [r7, #20]
 800db8c:	f7ff ff88 	bl	800daa0 <xTimerGenericCommand>
 800db90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d113      	bne.n	800dbc0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9c:	f383 8811 	msr	BASEPRI, r3
 800dba0:	f3bf 8f6f 	isb	sy
 800dba4:	f3bf 8f4f 	dsb	sy
 800dba8:	60fb      	str	r3, [r7, #12]
}
 800dbaa:	bf00      	nop
 800dbac:	e7fe      	b.n	800dbac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbb4:	f023 0301 	bic.w	r3, r3, #1
 800dbb8:	b2da      	uxtb	r2, r3
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	6978      	ldr	r0, [r7, #20]
 800dbc6:	4798      	blx	r3
}
 800dbc8:	bf00      	nop
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20000c90 	.word	0x20000c90

0800dbd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbdc:	f107 0308 	add.w	r3, r7, #8
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f000 f857 	bl	800dc94 <prvGetNextExpireTime>
 800dbe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	4619      	mov	r1, r3
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f000 f803 	bl	800dbf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dbf2:	f000 f8d5 	bl	800dda0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbf6:	e7f1      	b.n	800dbdc <prvTimerTask+0x8>

0800dbf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dc02:	f7ff f933 	bl	800ce6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc06:	f107 0308 	add.w	r3, r7, #8
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 f866 	bl	800dcdc <prvSampleTimeNow>
 800dc10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d130      	bne.n	800dc7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10a      	bne.n	800dc34 <prvProcessTimerOrBlockTask+0x3c>
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d806      	bhi.n	800dc34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc26:	f7ff f92f 	bl	800ce88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc2a:	68f9      	ldr	r1, [r7, #12]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7ff ff85 	bl	800db3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc32:	e024      	b.n	800dc7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d008      	beq.n	800dc4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc3a:	4b13      	ldr	r3, [pc, #76]	; (800dc88 <prvProcessTimerOrBlockTask+0x90>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d101      	bne.n	800dc48 <prvProcessTimerOrBlockTask+0x50>
 800dc44:	2301      	movs	r3, #1
 800dc46:	e000      	b.n	800dc4a <prvProcessTimerOrBlockTask+0x52>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc4c:	4b0f      	ldr	r3, [pc, #60]	; (800dc8c <prvProcessTimerOrBlockTask+0x94>)
 800dc4e:	6818      	ldr	r0, [r3, #0]
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	4619      	mov	r1, r3
 800dc5a:	f7fe fe97 	bl	800c98c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc5e:	f7ff f913 	bl	800ce88 <xTaskResumeAll>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10a      	bne.n	800dc7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc68:	4b09      	ldr	r3, [pc, #36]	; (800dc90 <prvProcessTimerOrBlockTask+0x98>)
 800dc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc6e:	601a      	str	r2, [r3, #0]
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	f3bf 8f6f 	isb	sy
}
 800dc78:	e001      	b.n	800dc7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc7a:	f7ff f905 	bl	800ce88 <xTaskResumeAll>
}
 800dc7e:	bf00      	nop
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	20000c94 	.word	0x20000c94
 800dc8c:	20000c98 	.word	0x20000c98
 800dc90:	e000ed04 	.word	0xe000ed04

0800dc94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dc9c:	4b0e      	ldr	r3, [pc, #56]	; (800dcd8 <prvGetNextExpireTime+0x44>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <prvGetNextExpireTime+0x16>
 800dca6:	2201      	movs	r2, #1
 800dca8:	e000      	b.n	800dcac <prvGetNextExpireTime+0x18>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d105      	bne.n	800dcc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dcb8:	4b07      	ldr	r3, [pc, #28]	; (800dcd8 <prvGetNextExpireTime+0x44>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	60fb      	str	r3, [r7, #12]
 800dcc2:	e001      	b.n	800dcc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr
 800dcd6:	bf00      	nop
 800dcd8:	20000c90 	.word	0x20000c90

0800dcdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dce4:	f7ff f96e 	bl	800cfc4 <xTaskGetTickCount>
 800dce8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dcea:	4b0b      	ldr	r3, [pc, #44]	; (800dd18 <prvSampleTimeNow+0x3c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d205      	bcs.n	800dd00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dcf4:	f000 f936 	bl	800df64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	601a      	str	r2, [r3, #0]
 800dcfe:	e002      	b.n	800dd06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dd06:	4a04      	ldr	r2, [pc, #16]	; (800dd18 <prvSampleTimeNow+0x3c>)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	20000ca0 	.word	0x20000ca0

0800dd1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b086      	sub	sp, #24
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
 800dd28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	68ba      	ldr	r2, [r7, #8]
 800dd32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d812      	bhi.n	800dd68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd42:	687a      	ldr	r2, [r7, #4]
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	1ad2      	subs	r2, r2, r3
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	699b      	ldr	r3, [r3, #24]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d302      	bcc.n	800dd56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd50:	2301      	movs	r3, #1
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	e01b      	b.n	800dd8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd56:	4b10      	ldr	r3, [pc, #64]	; (800dd98 <prvInsertTimerInActiveList+0x7c>)
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	4619      	mov	r1, r3
 800dd60:	4610      	mov	r0, r2
 800dd62:	f7fd fdd6 	bl	800b912 <vListInsert>
 800dd66:	e012      	b.n	800dd8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d206      	bcs.n	800dd7e <prvInsertTimerInActiveList+0x62>
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d302      	bcc.n	800dd7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	617b      	str	r3, [r7, #20]
 800dd7c:	e007      	b.n	800dd8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd7e:	4b07      	ldr	r3, [pc, #28]	; (800dd9c <prvInsertTimerInActiveList+0x80>)
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	3304      	adds	r3, #4
 800dd86:	4619      	mov	r1, r3
 800dd88:	4610      	mov	r0, r2
 800dd8a:	f7fd fdc2 	bl	800b912 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd8e:	697b      	ldr	r3, [r7, #20]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3718      	adds	r7, #24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	20000c94 	.word	0x20000c94
 800dd9c:	20000c90 	.word	0x20000c90

0800dda0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08e      	sub	sp, #56	; 0x38
 800dda4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dda6:	e0ca      	b.n	800df3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	da18      	bge.n	800dde0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ddae:	1d3b      	adds	r3, r7, #4
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ddb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10a      	bne.n	800ddd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	61fb      	str	r3, [r7, #28]
}
 800ddcc:	bf00      	nop
 800ddce:	e7fe      	b.n	800ddce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddd6:	6850      	ldr	r0, [r2, #4]
 800ddd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddda:	6892      	ldr	r2, [r2, #8]
 800dddc:	4611      	mov	r1, r2
 800ddde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	f2c0 80aa 	blt.w	800df3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ddec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d004      	beq.n	800ddfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7fd fdc3 	bl	800b984 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ddfe:	463b      	mov	r3, r7
 800de00:	4618      	mov	r0, r3
 800de02:	f7ff ff6b 	bl	800dcdc <prvSampleTimeNow>
 800de06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2b09      	cmp	r3, #9
 800de0c:	f200 8097 	bhi.w	800df3e <prvProcessReceivedCommands+0x19e>
 800de10:	a201      	add	r2, pc, #4	; (adr r2, 800de18 <prvProcessReceivedCommands+0x78>)
 800de12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de16:	bf00      	nop
 800de18:	0800de41 	.word	0x0800de41
 800de1c:	0800de41 	.word	0x0800de41
 800de20:	0800de41 	.word	0x0800de41
 800de24:	0800deb5 	.word	0x0800deb5
 800de28:	0800dec9 	.word	0x0800dec9
 800de2c:	0800df13 	.word	0x0800df13
 800de30:	0800de41 	.word	0x0800de41
 800de34:	0800de41 	.word	0x0800de41
 800de38:	0800deb5 	.word	0x0800deb5
 800de3c:	0800dec9 	.word	0x0800dec9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de46:	f043 0301 	orr.w	r3, r3, #1
 800de4a:	b2da      	uxtb	r2, r3
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800de52:	68ba      	ldr	r2, [r7, #8]
 800de54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de56:	699b      	ldr	r3, [r3, #24]
 800de58:	18d1      	adds	r1, r2, r3
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de60:	f7ff ff5c 	bl	800dd1c <prvInsertTimerInActiveList>
 800de64:	4603      	mov	r3, r0
 800de66:	2b00      	cmp	r3, #0
 800de68:	d069      	beq.n	800df3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6c:	6a1b      	ldr	r3, [r3, #32]
 800de6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de78:	f003 0304 	and.w	r3, r3, #4
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d05e      	beq.n	800df3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de84:	699b      	ldr	r3, [r3, #24]
 800de86:	441a      	add	r2, r3
 800de88:	2300      	movs	r3, #0
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	2300      	movs	r3, #0
 800de8e:	2100      	movs	r1, #0
 800de90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de92:	f7ff fe05 	bl	800daa0 <xTimerGenericCommand>
 800de96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de98:	6a3b      	ldr	r3, [r7, #32]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d14f      	bne.n	800df3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	61bb      	str	r3, [r7, #24]
}
 800deb0:	bf00      	nop
 800deb2:	e7fe      	b.n	800deb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deba:	f023 0301 	bic.w	r3, r3, #1
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dec6:	e03a      	b.n	800df3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dece:	f043 0301 	orr.w	r3, r3, #1
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dede:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee2:	699b      	ldr	r3, [r3, #24]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10a      	bne.n	800defe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deec:	f383 8811 	msr	BASEPRI, r3
 800def0:	f3bf 8f6f 	isb	sy
 800def4:	f3bf 8f4f 	dsb	sy
 800def8:	617b      	str	r3, [r7, #20]
}
 800defa:	bf00      	nop
 800defc:	e7fe      	b.n	800defc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df00:	699a      	ldr	r2, [r3, #24]
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	18d1      	adds	r1, r2, r3
 800df06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df0c:	f7ff ff06 	bl	800dd1c <prvInsertTimerInActiveList>
					break;
 800df10:	e015      	b.n	800df3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800df12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df18:	f003 0302 	and.w	r3, r3, #2
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d103      	bne.n	800df28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800df20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df22:	f000 fbdd 	bl	800e6e0 <vPortFree>
 800df26:	e00a      	b.n	800df3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df2e:	f023 0301 	bic.w	r3, r3, #1
 800df32:	b2da      	uxtb	r2, r3
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df3a:	e000      	b.n	800df3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800df3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df3e:	4b08      	ldr	r3, [pc, #32]	; (800df60 <prvProcessReceivedCommands+0x1c0>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	1d39      	adds	r1, r7, #4
 800df44:	2200      	movs	r2, #0
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe f914 	bl	800c174 <xQueueReceive>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f47f af2a 	bne.w	800dda8 <prvProcessReceivedCommands+0x8>
	}
}
 800df54:	bf00      	nop
 800df56:	bf00      	nop
 800df58:	3730      	adds	r7, #48	; 0x30
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	20000c98 	.word	0x20000c98

0800df64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b088      	sub	sp, #32
 800df68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df6a:	e048      	b.n	800dffe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df6c:	4b2d      	ldr	r3, [pc, #180]	; (800e024 <prvSwitchTimerLists+0xc0>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df76:	4b2b      	ldr	r3, [pc, #172]	; (800e024 <prvSwitchTimerLists+0xc0>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3304      	adds	r3, #4
 800df84:	4618      	mov	r0, r3
 800df86:	f7fd fcfd 	bl	800b984 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df98:	f003 0304 	and.w	r3, r3, #4
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d02e      	beq.n	800dffe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	699b      	ldr	r3, [r3, #24]
 800dfa4:	693a      	ldr	r2, [r7, #16]
 800dfa6:	4413      	add	r3, r2
 800dfa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d90e      	bls.n	800dfd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfbe:	4b19      	ldr	r3, [pc, #100]	; (800e024 <prvSwitchTimerLists+0xc0>)
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	4610      	mov	r0, r2
 800dfca:	f7fd fca2 	bl	800b912 <vListInsert>
 800dfce:	e016      	b.n	800dffe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	693a      	ldr	r2, [r7, #16]
 800dfd8:	2100      	movs	r1, #0
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f7ff fd60 	bl	800daa0 <xTimerGenericCommand>
 800dfe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d10a      	bne.n	800dffe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfec:	f383 8811 	msr	BASEPRI, r3
 800dff0:	f3bf 8f6f 	isb	sy
 800dff4:	f3bf 8f4f 	dsb	sy
 800dff8:	603b      	str	r3, [r7, #0]
}
 800dffa:	bf00      	nop
 800dffc:	e7fe      	b.n	800dffc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dffe:	4b09      	ldr	r3, [pc, #36]	; (800e024 <prvSwitchTimerLists+0xc0>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d1b1      	bne.n	800df6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e008:	4b06      	ldr	r3, [pc, #24]	; (800e024 <prvSwitchTimerLists+0xc0>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e00e:	4b06      	ldr	r3, [pc, #24]	; (800e028 <prvSwitchTimerLists+0xc4>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a04      	ldr	r2, [pc, #16]	; (800e024 <prvSwitchTimerLists+0xc0>)
 800e014:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e016:	4a04      	ldr	r2, [pc, #16]	; (800e028 <prvSwitchTimerLists+0xc4>)
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	6013      	str	r3, [r2, #0]
}
 800e01c:	bf00      	nop
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	20000c90 	.word	0x20000c90
 800e028:	20000c94 	.word	0x20000c94

0800e02c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e032:	f000 f967 	bl	800e304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e036:	4b15      	ldr	r3, [pc, #84]	; (800e08c <prvCheckForValidListAndQueue+0x60>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d120      	bne.n	800e080 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e03e:	4814      	ldr	r0, [pc, #80]	; (800e090 <prvCheckForValidListAndQueue+0x64>)
 800e040:	f7fd fc16 	bl	800b870 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e044:	4813      	ldr	r0, [pc, #76]	; (800e094 <prvCheckForValidListAndQueue+0x68>)
 800e046:	f7fd fc13 	bl	800b870 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e04a:	4b13      	ldr	r3, [pc, #76]	; (800e098 <prvCheckForValidListAndQueue+0x6c>)
 800e04c:	4a10      	ldr	r2, [pc, #64]	; (800e090 <prvCheckForValidListAndQueue+0x64>)
 800e04e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e050:	4b12      	ldr	r3, [pc, #72]	; (800e09c <prvCheckForValidListAndQueue+0x70>)
 800e052:	4a10      	ldr	r2, [pc, #64]	; (800e094 <prvCheckForValidListAndQueue+0x68>)
 800e054:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e056:	2300      	movs	r3, #0
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	4b11      	ldr	r3, [pc, #68]	; (800e0a0 <prvCheckForValidListAndQueue+0x74>)
 800e05c:	4a11      	ldr	r2, [pc, #68]	; (800e0a4 <prvCheckForValidListAndQueue+0x78>)
 800e05e:	2110      	movs	r1, #16
 800e060:	200a      	movs	r0, #10
 800e062:	f7fd fd21 	bl	800baa8 <xQueueGenericCreateStatic>
 800e066:	4603      	mov	r3, r0
 800e068:	4a08      	ldr	r2, [pc, #32]	; (800e08c <prvCheckForValidListAndQueue+0x60>)
 800e06a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e06c:	4b07      	ldr	r3, [pc, #28]	; (800e08c <prvCheckForValidListAndQueue+0x60>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d005      	beq.n	800e080 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e074:	4b05      	ldr	r3, [pc, #20]	; (800e08c <prvCheckForValidListAndQueue+0x60>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	490b      	ldr	r1, [pc, #44]	; (800e0a8 <prvCheckForValidListAndQueue+0x7c>)
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fc32 	bl	800c8e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e080:	f000 f970 	bl	800e364 <vPortExitCritical>
}
 800e084:	bf00      	nop
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	20000c98 	.word	0x20000c98
 800e090:	20000c68 	.word	0x20000c68
 800e094:	20000c7c 	.word	0x20000c7c
 800e098:	20000c90 	.word	0x20000c90
 800e09c:	20000c94 	.word	0x20000c94
 800e0a0:	20000d44 	.word	0x20000d44
 800e0a4:	20000ca4 	.word	0x20000ca4
 800e0a8:	0800f738 	.word	0x0800f738

0800e0ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	60f8      	str	r0, [r7, #12]
 800e0b4:	60b9      	str	r1, [r7, #8]
 800e0b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	3b04      	subs	r3, #4
 800e0bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e0c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3b04      	subs	r3, #4
 800e0ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	f023 0201 	bic.w	r2, r3, #1
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	3b04      	subs	r3, #4
 800e0da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e0dc:	4a0c      	ldr	r2, [pc, #48]	; (800e110 <pxPortInitialiseStack+0x64>)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	3b14      	subs	r3, #20
 800e0e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	3b04      	subs	r3, #4
 800e0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f06f 0202 	mvn.w	r2, #2
 800e0fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3b20      	subs	r3, #32
 800e100:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e102:	68fb      	ldr	r3, [r7, #12]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	0800e115 	.word	0x0800e115

0800e114 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e114:	b480      	push	{r7}
 800e116:	b085      	sub	sp, #20
 800e118:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e11a:	2300      	movs	r3, #0
 800e11c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e11e:	4b12      	ldr	r3, [pc, #72]	; (800e168 <prvTaskExitError+0x54>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e126:	d00a      	beq.n	800e13e <prvTaskExitError+0x2a>
	__asm volatile
 800e128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	60fb      	str	r3, [r7, #12]
}
 800e13a:	bf00      	nop
 800e13c:	e7fe      	b.n	800e13c <prvTaskExitError+0x28>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e142:	f383 8811 	msr	BASEPRI, r3
 800e146:	f3bf 8f6f 	isb	sy
 800e14a:	f3bf 8f4f 	dsb	sy
 800e14e:	60bb      	str	r3, [r7, #8]
}
 800e150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e152:	bf00      	nop
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d0fc      	beq.n	800e154 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e15a:	bf00      	nop
 800e15c:	bf00      	nop
 800e15e:	3714      	adds	r7, #20
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr
 800e168:	2000000c 	.word	0x2000000c
 800e16c:	00000000 	.word	0x00000000

0800e170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <pxCurrentTCBConst2>)
 800e172:	6819      	ldr	r1, [r3, #0]
 800e174:	6808      	ldr	r0, [r1, #0]
 800e176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17a:	f380 8809 	msr	PSP, r0
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f04f 0000 	mov.w	r0, #0
 800e186:	f380 8811 	msr	BASEPRI, r0
 800e18a:	4770      	bx	lr
 800e18c:	f3af 8000 	nop.w

0800e190 <pxCurrentTCBConst2>:
 800e190:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop

0800e198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e198:	4808      	ldr	r0, [pc, #32]	; (800e1bc <prvPortStartFirstTask+0x24>)
 800e19a:	6800      	ldr	r0, [r0, #0]
 800e19c:	6800      	ldr	r0, [r0, #0]
 800e19e:	f380 8808 	msr	MSP, r0
 800e1a2:	f04f 0000 	mov.w	r0, #0
 800e1a6:	f380 8814 	msr	CONTROL, r0
 800e1aa:	b662      	cpsie	i
 800e1ac:	b661      	cpsie	f
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	df00      	svc	0
 800e1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1ba:	bf00      	nop
 800e1bc:	e000ed08 	.word	0xe000ed08

0800e1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e1c6:	4b46      	ldr	r3, [pc, #280]	; (800e2e0 <xPortStartScheduler+0x120>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a46      	ldr	r2, [pc, #280]	; (800e2e4 <xPortStartScheduler+0x124>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d10a      	bne.n	800e1e6 <xPortStartScheduler+0x26>
	__asm volatile
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	613b      	str	r3, [r7, #16]
}
 800e1e2:	bf00      	nop
 800e1e4:	e7fe      	b.n	800e1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e1e6:	4b3e      	ldr	r3, [pc, #248]	; (800e2e0 <xPortStartScheduler+0x120>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a3f      	ldr	r2, [pc, #252]	; (800e2e8 <xPortStartScheduler+0x128>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d10a      	bne.n	800e206 <xPortStartScheduler+0x46>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	60fb      	str	r3, [r7, #12]
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e206:	4b39      	ldr	r3, [pc, #228]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	22ff      	movs	r2, #255	; 0xff
 800e216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e220:	78fb      	ldrb	r3, [r7, #3]
 800e222:	b2db      	uxtb	r3, r3
 800e224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b31      	ldr	r3, [pc, #196]	; (800e2f0 <xPortStartScheduler+0x130>)
 800e22c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e22e:	4b31      	ldr	r3, [pc, #196]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e230:	2207      	movs	r2, #7
 800e232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e234:	e009      	b.n	800e24a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e236:	4b2f      	ldr	r3, [pc, #188]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3b01      	subs	r3, #1
 800e23c:	4a2d      	ldr	r2, [pc, #180]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e23e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	b2db      	uxtb	r3, r3
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	b2db      	uxtb	r3, r3
 800e248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e24a:	78fb      	ldrb	r3, [r7, #3]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e252:	2b80      	cmp	r3, #128	; 0x80
 800e254:	d0ef      	beq.n	800e236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e256:	4b27      	ldr	r3, [pc, #156]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f1c3 0307 	rsb	r3, r3, #7
 800e25e:	2b04      	cmp	r3, #4
 800e260:	d00a      	beq.n	800e278 <xPortStartScheduler+0xb8>
	__asm volatile
 800e262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	60bb      	str	r3, [r7, #8]
}
 800e274:	bf00      	nop
 800e276:	e7fe      	b.n	800e276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e278:	4b1e      	ldr	r3, [pc, #120]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	021b      	lsls	r3, r3, #8
 800e27e:	4a1d      	ldr	r2, [pc, #116]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e282:	4b1c      	ldr	r3, [pc, #112]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e28a:	4a1a      	ldr	r2, [pc, #104]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e28c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	b2da      	uxtb	r2, r3
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e296:	4b18      	ldr	r3, [pc, #96]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a17      	ldr	r2, [pc, #92]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e29c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2a2:	4b15      	ldr	r3, [pc, #84]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a14      	ldr	r2, [pc, #80]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e2a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2ae:	f000 f8dd 	bl	800e46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2b2:	4b12      	ldr	r3, [pc, #72]	; (800e2fc <xPortStartScheduler+0x13c>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2b8:	f000 f8fc 	bl	800e4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2bc:	4b10      	ldr	r3, [pc, #64]	; (800e300 <xPortStartScheduler+0x140>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a0f      	ldr	r2, [pc, #60]	; (800e300 <xPortStartScheduler+0x140>)
 800e2c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e2c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2c8:	f7ff ff66 	bl	800e198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e2cc:	f7fe ff56 	bl	800d17c <vTaskSwitchContext>
	prvTaskExitError();
 800e2d0:	f7ff ff20 	bl	800e114 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e2d4:	2300      	movs	r3, #0
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3718      	adds	r7, #24
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	e000ed00 	.word	0xe000ed00
 800e2e4:	410fc271 	.word	0x410fc271
 800e2e8:	410fc270 	.word	0x410fc270
 800e2ec:	e000e400 	.word	0xe000e400
 800e2f0:	20000d94 	.word	0x20000d94
 800e2f4:	20000d98 	.word	0x20000d98
 800e2f8:	e000ed20 	.word	0xe000ed20
 800e2fc:	2000000c 	.word	0x2000000c
 800e300:	e000ef34 	.word	0xe000ef34

0800e304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
	__asm volatile
 800e30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	607b      	str	r3, [r7, #4]
}
 800e31c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <vPortEnterCritical+0x58>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3301      	adds	r3, #1
 800e324:	4a0d      	ldr	r2, [pc, #52]	; (800e35c <vPortEnterCritical+0x58>)
 800e326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e328:	4b0c      	ldr	r3, [pc, #48]	; (800e35c <vPortEnterCritical+0x58>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d10f      	bne.n	800e350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e330:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <vPortEnterCritical+0x5c>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00a      	beq.n	800e350 <vPortEnterCritical+0x4c>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	603b      	str	r3, [r7, #0]
}
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <vPortEnterCritical+0x4a>
	}
}
 800e350:	bf00      	nop
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	2000000c 	.word	0x2000000c
 800e360:	e000ed04 	.word	0xe000ed04

0800e364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e36a:	4b12      	ldr	r3, [pc, #72]	; (800e3b4 <vPortExitCritical+0x50>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10a      	bne.n	800e388 <vPortExitCritical+0x24>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	607b      	str	r3, [r7, #4]
}
 800e384:	bf00      	nop
 800e386:	e7fe      	b.n	800e386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e388:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <vPortExitCritical+0x50>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	4a09      	ldr	r2, [pc, #36]	; (800e3b4 <vPortExitCritical+0x50>)
 800e390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e392:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <vPortExitCritical+0x50>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d105      	bne.n	800e3a6 <vPortExitCritical+0x42>
 800e39a:	2300      	movs	r3, #0
 800e39c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	f383 8811 	msr	BASEPRI, r3
}
 800e3a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3a6:	bf00      	nop
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	2000000c 	.word	0x2000000c
	...

0800e3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3c0:	f3ef 8009 	mrs	r0, PSP
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	4b15      	ldr	r3, [pc, #84]	; (800e420 <pxCurrentTCBConst>)
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	f01e 0f10 	tst.w	lr, #16
 800e3d0:	bf08      	it	eq
 800e3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3da:	6010      	str	r0, [r2, #0]
 800e3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e3e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e3e4:	f380 8811 	msr	BASEPRI, r0
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	f7fe fec4 	bl	800d17c <vTaskSwitchContext>
 800e3f4:	f04f 0000 	mov.w	r0, #0
 800e3f8:	f380 8811 	msr	BASEPRI, r0
 800e3fc:	bc09      	pop	{r0, r3}
 800e3fe:	6819      	ldr	r1, [r3, #0]
 800e400:	6808      	ldr	r0, [r1, #0]
 800e402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e406:	f01e 0f10 	tst.w	lr, #16
 800e40a:	bf08      	it	eq
 800e40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e410:	f380 8809 	msr	PSP, r0
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	f3af 8000 	nop.w

0800e420 <pxCurrentTCBConst>:
 800e420:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop

0800e428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
	__asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	607b      	str	r3, [r7, #4]
}
 800e440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e442:	f7fe fde1 	bl	800d008 <xTaskIncrementTick>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d003      	beq.n	800e454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e44c:	4b06      	ldr	r3, [pc, #24]	; (800e468 <xPortSysTickHandler+0x40>)
 800e44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	2300      	movs	r3, #0
 800e456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	f383 8811 	msr	BASEPRI, r3
}
 800e45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e460:	bf00      	nop
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	e000ed04 	.word	0xe000ed04

0800e46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e46c:	b480      	push	{r7}
 800e46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e470:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <vPortSetupTimerInterrupt+0x34>)
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e476:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <vPortSetupTimerInterrupt+0x38>)
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e47c:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <vPortSetupTimerInterrupt+0x3c>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a0a      	ldr	r2, [pc, #40]	; (800e4ac <vPortSetupTimerInterrupt+0x40>)
 800e482:	fba2 2303 	umull	r2, r3, r2, r3
 800e486:	099b      	lsrs	r3, r3, #6
 800e488:	4a09      	ldr	r2, [pc, #36]	; (800e4b0 <vPortSetupTimerInterrupt+0x44>)
 800e48a:	3b01      	subs	r3, #1
 800e48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e48e:	4b04      	ldr	r3, [pc, #16]	; (800e4a0 <vPortSetupTimerInterrupt+0x34>)
 800e490:	2207      	movs	r2, #7
 800e492:	601a      	str	r2, [r3, #0]
}
 800e494:	bf00      	nop
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	e000e010 	.word	0xe000e010
 800e4a4:	e000e018 	.word	0xe000e018
 800e4a8:	20000000 	.word	0x20000000
 800e4ac:	10624dd3 	.word	0x10624dd3
 800e4b0:	e000e014 	.word	0xe000e014

0800e4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e4c4 <vPortEnableVFP+0x10>
 800e4b8:	6801      	ldr	r1, [r0, #0]
 800e4ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4be:	6001      	str	r1, [r0, #0]
 800e4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4c2:	bf00      	nop
 800e4c4:	e000ed88 	.word	0xe000ed88

0800e4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4ce:	f3ef 8305 	mrs	r3, IPSR
 800e4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b0f      	cmp	r3, #15
 800e4d8:	d914      	bls.n	800e504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e4da:	4a17      	ldr	r2, [pc, #92]	; (800e538 <vPortValidateInterruptPriority+0x70>)
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4413      	add	r3, r2
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e4e4:	4b15      	ldr	r3, [pc, #84]	; (800e53c <vPortValidateInterruptPriority+0x74>)
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	7afa      	ldrb	r2, [r7, #11]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d20a      	bcs.n	800e504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	607b      	str	r3, [r7, #4]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e504:	4b0e      	ldr	r3, [pc, #56]	; (800e540 <vPortValidateInterruptPriority+0x78>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e50c:	4b0d      	ldr	r3, [pc, #52]	; (800e544 <vPortValidateInterruptPriority+0x7c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d90a      	bls.n	800e52a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	603b      	str	r3, [r7, #0]
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <vPortValidateInterruptPriority+0x60>
	}
 800e52a:	bf00      	nop
 800e52c:	3714      	adds	r7, #20
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	e000e3f0 	.word	0xe000e3f0
 800e53c:	20000d94 	.word	0x20000d94
 800e540:	e000ed0c 	.word	0xe000ed0c
 800e544:	20000d98 	.word	0x20000d98

0800e548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b08a      	sub	sp, #40	; 0x28
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e550:	2300      	movs	r3, #0
 800e552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e554:	f7fe fc8a 	bl	800ce6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e558:	4b5b      	ldr	r3, [pc, #364]	; (800e6c8 <pvPortMalloc+0x180>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d101      	bne.n	800e564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e560:	f000 f920 	bl	800e7a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e564:	4b59      	ldr	r3, [pc, #356]	; (800e6cc <pvPortMalloc+0x184>)
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4013      	ands	r3, r2
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f040 8093 	bne.w	800e698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d01d      	beq.n	800e5b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e578:	2208      	movs	r2, #8
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4413      	add	r3, r2
 800e57e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f003 0307 	and.w	r3, r3, #7
 800e586:	2b00      	cmp	r3, #0
 800e588:	d014      	beq.n	800e5b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f023 0307 	bic.w	r3, r3, #7
 800e590:	3308      	adds	r3, #8
 800e592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f003 0307 	and.w	r3, r3, #7
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00a      	beq.n	800e5b4 <pvPortMalloc+0x6c>
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	617b      	str	r3, [r7, #20]
}
 800e5b0:	bf00      	nop
 800e5b2:	e7fe      	b.n	800e5b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d06e      	beq.n	800e698 <pvPortMalloc+0x150>
 800e5ba:	4b45      	ldr	r3, [pc, #276]	; (800e6d0 <pvPortMalloc+0x188>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d869      	bhi.n	800e698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5c4:	4b43      	ldr	r3, [pc, #268]	; (800e6d4 <pvPortMalloc+0x18c>)
 800e5c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e5c8:	4b42      	ldr	r3, [pc, #264]	; (800e6d4 <pvPortMalloc+0x18c>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5ce:	e004      	b.n	800e5da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d903      	bls.n	800e5ec <pvPortMalloc+0xa4>
 800e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1f1      	bne.n	800e5d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e5ec:	4b36      	ldr	r3, [pc, #216]	; (800e6c8 <pvPortMalloc+0x180>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d050      	beq.n	800e698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2208      	movs	r2, #8
 800e5fc:	4413      	add	r3, r2
 800e5fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	6a3b      	ldr	r3, [r7, #32]
 800e606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	1ad2      	subs	r2, r2, r3
 800e610:	2308      	movs	r3, #8
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	429a      	cmp	r2, r3
 800e616:	d91f      	bls.n	800e658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4413      	add	r3, r2
 800e61e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	f003 0307 	and.w	r3, r3, #7
 800e626:	2b00      	cmp	r3, #0
 800e628:	d00a      	beq.n	800e640 <pvPortMalloc+0xf8>
	__asm volatile
 800e62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62e:	f383 8811 	msr	BASEPRI, r3
 800e632:	f3bf 8f6f 	isb	sy
 800e636:	f3bf 8f4f 	dsb	sy
 800e63a:	613b      	str	r3, [r7, #16]
}
 800e63c:	bf00      	nop
 800e63e:	e7fe      	b.n	800e63e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e642:	685a      	ldr	r2, [r3, #4]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	1ad2      	subs	r2, r2, r3
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e652:	69b8      	ldr	r0, [r7, #24]
 800e654:	f000 f908 	bl	800e868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e658:	4b1d      	ldr	r3, [pc, #116]	; (800e6d0 <pvPortMalloc+0x188>)
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	4a1b      	ldr	r2, [pc, #108]	; (800e6d0 <pvPortMalloc+0x188>)
 800e664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e666:	4b1a      	ldr	r3, [pc, #104]	; (800e6d0 <pvPortMalloc+0x188>)
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	4b1b      	ldr	r3, [pc, #108]	; (800e6d8 <pvPortMalloc+0x190>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	429a      	cmp	r2, r3
 800e670:	d203      	bcs.n	800e67a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e672:	4b17      	ldr	r3, [pc, #92]	; (800e6d0 <pvPortMalloc+0x188>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a18      	ldr	r2, [pc, #96]	; (800e6d8 <pvPortMalloc+0x190>)
 800e678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	685a      	ldr	r2, [r3, #4]
 800e67e:	4b13      	ldr	r3, [pc, #76]	; (800e6cc <pvPortMalloc+0x184>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	431a      	orrs	r2, r3
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68a:	2200      	movs	r2, #0
 800e68c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e68e:	4b13      	ldr	r3, [pc, #76]	; (800e6dc <pvPortMalloc+0x194>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3301      	adds	r3, #1
 800e694:	4a11      	ldr	r2, [pc, #68]	; (800e6dc <pvPortMalloc+0x194>)
 800e696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e698:	f7fe fbf6 	bl	800ce88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e69c:	69fb      	ldr	r3, [r7, #28]
 800e69e:	f003 0307 	and.w	r3, r3, #7
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00a      	beq.n	800e6bc <pvPortMalloc+0x174>
	__asm volatile
 800e6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	60fb      	str	r3, [r7, #12]
}
 800e6b8:	bf00      	nop
 800e6ba:	e7fe      	b.n	800e6ba <pvPortMalloc+0x172>
	return pvReturn;
 800e6bc:	69fb      	ldr	r3, [r7, #28]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3728      	adds	r7, #40	; 0x28
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	20008da4 	.word	0x20008da4
 800e6cc:	20008db8 	.word	0x20008db8
 800e6d0:	20008da8 	.word	0x20008da8
 800e6d4:	20008d9c 	.word	0x20008d9c
 800e6d8:	20008dac 	.word	0x20008dac
 800e6dc:	20008db0 	.word	0x20008db0

0800e6e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d04d      	beq.n	800e78e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6f2:	2308      	movs	r3, #8
 800e6f4:	425b      	negs	r3, r3
 800e6f6:	697a      	ldr	r2, [r7, #20]
 800e6f8:	4413      	add	r3, r2
 800e6fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	4b24      	ldr	r3, [pc, #144]	; (800e798 <vPortFree+0xb8>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	4013      	ands	r3, r2
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d10a      	bne.n	800e724 <vPortFree+0x44>
	__asm volatile
 800e70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	60fb      	str	r3, [r7, #12]
}
 800e720:	bf00      	nop
 800e722:	e7fe      	b.n	800e722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00a      	beq.n	800e742 <vPortFree+0x62>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	60bb      	str	r3, [r7, #8]
}
 800e73e:	bf00      	nop
 800e740:	e7fe      	b.n	800e740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	4b14      	ldr	r3, [pc, #80]	; (800e798 <vPortFree+0xb8>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4013      	ands	r3, r2
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d01e      	beq.n	800e78e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d11a      	bne.n	800e78e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	4b0e      	ldr	r3, [pc, #56]	; (800e798 <vPortFree+0xb8>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	43db      	mvns	r3, r3
 800e762:	401a      	ands	r2, r3
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e768:	f7fe fb80 	bl	800ce6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	685a      	ldr	r2, [r3, #4]
 800e770:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <vPortFree+0xbc>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4413      	add	r3, r2
 800e776:	4a09      	ldr	r2, [pc, #36]	; (800e79c <vPortFree+0xbc>)
 800e778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e77a:	6938      	ldr	r0, [r7, #16]
 800e77c:	f000 f874 	bl	800e868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e780:	4b07      	ldr	r3, [pc, #28]	; (800e7a0 <vPortFree+0xc0>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	3301      	adds	r3, #1
 800e786:	4a06      	ldr	r2, [pc, #24]	; (800e7a0 <vPortFree+0xc0>)
 800e788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e78a:	f7fe fb7d 	bl	800ce88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e78e:	bf00      	nop
 800e790:	3718      	adds	r7, #24
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	20008db8 	.word	0x20008db8
 800e79c:	20008da8 	.word	0x20008da8
 800e7a0:	20008db4 	.word	0x20008db4

0800e7a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7b0:	4b27      	ldr	r3, [pc, #156]	; (800e850 <prvHeapInit+0xac>)
 800e7b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f003 0307 	and.w	r3, r3, #7
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00c      	beq.n	800e7d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3307      	adds	r3, #7
 800e7c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f023 0307 	bic.w	r3, r3, #7
 800e7ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e7cc:	68ba      	ldr	r2, [r7, #8]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	4a1f      	ldr	r2, [pc, #124]	; (800e850 <prvHeapInit+0xac>)
 800e7d4:	4413      	add	r3, r2
 800e7d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e7dc:	4a1d      	ldr	r2, [pc, #116]	; (800e854 <prvHeapInit+0xb0>)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e7e2:	4b1c      	ldr	r3, [pc, #112]	; (800e854 <prvHeapInit+0xb0>)
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e7f0:	2208      	movs	r2, #8
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	1a9b      	subs	r3, r3, r2
 800e7f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f023 0307 	bic.w	r3, r3, #7
 800e7fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	4a15      	ldr	r2, [pc, #84]	; (800e858 <prvHeapInit+0xb4>)
 800e804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e806:	4b14      	ldr	r3, [pc, #80]	; (800e858 <prvHeapInit+0xb4>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2200      	movs	r2, #0
 800e80c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e80e:	4b12      	ldr	r3, [pc, #72]	; (800e858 <prvHeapInit+0xb4>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2200      	movs	r2, #0
 800e814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	1ad2      	subs	r2, r2, r3
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e824:	4b0c      	ldr	r3, [pc, #48]	; (800e858 <prvHeapInit+0xb4>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	4a0a      	ldr	r2, [pc, #40]	; (800e85c <prvHeapInit+0xb8>)
 800e832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	4a09      	ldr	r2, [pc, #36]	; (800e860 <prvHeapInit+0xbc>)
 800e83a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e83c:	4b09      	ldr	r3, [pc, #36]	; (800e864 <prvHeapInit+0xc0>)
 800e83e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e842:	601a      	str	r2, [r3, #0]
}
 800e844:	bf00      	nop
 800e846:	3714      	adds	r7, #20
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	20000d9c 	.word	0x20000d9c
 800e854:	20008d9c 	.word	0x20008d9c
 800e858:	20008da4 	.word	0x20008da4
 800e85c:	20008dac 	.word	0x20008dac
 800e860:	20008da8 	.word	0x20008da8
 800e864:	20008db8 	.word	0x20008db8

0800e868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e868:	b480      	push	{r7}
 800e86a:	b085      	sub	sp, #20
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e870:	4b28      	ldr	r3, [pc, #160]	; (800e914 <prvInsertBlockIntoFreeList+0xac>)
 800e872:	60fb      	str	r3, [r7, #12]
 800e874:	e002      	b.n	800e87c <prvInsertBlockIntoFreeList+0x14>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	60fb      	str	r3, [r7, #12]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	429a      	cmp	r2, r3
 800e884:	d8f7      	bhi.n	800e876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	68ba      	ldr	r2, [r7, #8]
 800e890:	4413      	add	r3, r2
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	429a      	cmp	r2, r3
 800e896:	d108      	bne.n	800e8aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	441a      	add	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	68ba      	ldr	r2, [r7, #8]
 800e8b4:	441a      	add	r2, r3
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d118      	bne.n	800e8f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	4b15      	ldr	r3, [pc, #84]	; (800e918 <prvInsertBlockIntoFreeList+0xb0>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d00d      	beq.n	800e8e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685a      	ldr	r2, [r3, #4]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	441a      	add	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	601a      	str	r2, [r3, #0]
 800e8e4:	e008      	b.n	800e8f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e8e6:	4b0c      	ldr	r3, [pc, #48]	; (800e918 <prvInsertBlockIntoFreeList+0xb0>)
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	e003      	b.n	800e8f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681a      	ldr	r2, [r3, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e8f8:	68fa      	ldr	r2, [r7, #12]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d002      	beq.n	800e906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	687a      	ldr	r2, [r7, #4]
 800e904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e906:	bf00      	nop
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	20008d9c 	.word	0x20008d9c
 800e918:	20008da4 	.word	0x20008da4

0800e91c <__errno>:
 800e91c:	4b01      	ldr	r3, [pc, #4]	; (800e924 <__errno+0x8>)
 800e91e:	6818      	ldr	r0, [r3, #0]
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	20000010 	.word	0x20000010

0800e928 <__libc_init_array>:
 800e928:	b570      	push	{r4, r5, r6, lr}
 800e92a:	4d0d      	ldr	r5, [pc, #52]	; (800e960 <__libc_init_array+0x38>)
 800e92c:	4c0d      	ldr	r4, [pc, #52]	; (800e964 <__libc_init_array+0x3c>)
 800e92e:	1b64      	subs	r4, r4, r5
 800e930:	10a4      	asrs	r4, r4, #2
 800e932:	2600      	movs	r6, #0
 800e934:	42a6      	cmp	r6, r4
 800e936:	d109      	bne.n	800e94c <__libc_init_array+0x24>
 800e938:	4d0b      	ldr	r5, [pc, #44]	; (800e968 <__libc_init_array+0x40>)
 800e93a:	4c0c      	ldr	r4, [pc, #48]	; (800e96c <__libc_init_array+0x44>)
 800e93c:	f000 fc9c 	bl	800f278 <_init>
 800e940:	1b64      	subs	r4, r4, r5
 800e942:	10a4      	asrs	r4, r4, #2
 800e944:	2600      	movs	r6, #0
 800e946:	42a6      	cmp	r6, r4
 800e948:	d105      	bne.n	800e956 <__libc_init_array+0x2e>
 800e94a:	bd70      	pop	{r4, r5, r6, pc}
 800e94c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e950:	4798      	blx	r3
 800e952:	3601      	adds	r6, #1
 800e954:	e7ee      	b.n	800e934 <__libc_init_array+0xc>
 800e956:	f855 3b04 	ldr.w	r3, [r5], #4
 800e95a:	4798      	blx	r3
 800e95c:	3601      	adds	r6, #1
 800e95e:	e7f2      	b.n	800e946 <__libc_init_array+0x1e>
 800e960:	0800f8c0 	.word	0x0800f8c0
 800e964:	0800f8c0 	.word	0x0800f8c0
 800e968:	0800f8c0 	.word	0x0800f8c0
 800e96c:	0800f8c4 	.word	0x0800f8c4

0800e970 <memcpy>:
 800e970:	440a      	add	r2, r1
 800e972:	4291      	cmp	r1, r2
 800e974:	f100 33ff 	add.w	r3, r0, #4294967295
 800e978:	d100      	bne.n	800e97c <memcpy+0xc>
 800e97a:	4770      	bx	lr
 800e97c:	b510      	push	{r4, lr}
 800e97e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e982:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e986:	4291      	cmp	r1, r2
 800e988:	d1f9      	bne.n	800e97e <memcpy+0xe>
 800e98a:	bd10      	pop	{r4, pc}

0800e98c <memset>:
 800e98c:	4402      	add	r2, r0
 800e98e:	4603      	mov	r3, r0
 800e990:	4293      	cmp	r3, r2
 800e992:	d100      	bne.n	800e996 <memset+0xa>
 800e994:	4770      	bx	lr
 800e996:	f803 1b01 	strb.w	r1, [r3], #1
 800e99a:	e7f9      	b.n	800e990 <memset+0x4>

0800e99c <sniprintf>:
 800e99c:	b40c      	push	{r2, r3}
 800e99e:	b530      	push	{r4, r5, lr}
 800e9a0:	4b17      	ldr	r3, [pc, #92]	; (800ea00 <sniprintf+0x64>)
 800e9a2:	1e0c      	subs	r4, r1, #0
 800e9a4:	681d      	ldr	r5, [r3, #0]
 800e9a6:	b09d      	sub	sp, #116	; 0x74
 800e9a8:	da08      	bge.n	800e9bc <sniprintf+0x20>
 800e9aa:	238b      	movs	r3, #139	; 0x8b
 800e9ac:	602b      	str	r3, [r5, #0]
 800e9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b2:	b01d      	add	sp, #116	; 0x74
 800e9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9b8:	b002      	add	sp, #8
 800e9ba:	4770      	bx	lr
 800e9bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e9c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e9c4:	bf14      	ite	ne
 800e9c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e9ca:	4623      	moveq	r3, r4
 800e9cc:	9304      	str	r3, [sp, #16]
 800e9ce:	9307      	str	r3, [sp, #28]
 800e9d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9d4:	9002      	str	r0, [sp, #8]
 800e9d6:	9006      	str	r0, [sp, #24]
 800e9d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e9dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e9de:	ab21      	add	r3, sp, #132	; 0x84
 800e9e0:	a902      	add	r1, sp, #8
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	9301      	str	r3, [sp, #4]
 800e9e6:	f000 f8a3 	bl	800eb30 <_svfiprintf_r>
 800e9ea:	1c43      	adds	r3, r0, #1
 800e9ec:	bfbc      	itt	lt
 800e9ee:	238b      	movlt	r3, #139	; 0x8b
 800e9f0:	602b      	strlt	r3, [r5, #0]
 800e9f2:	2c00      	cmp	r4, #0
 800e9f4:	d0dd      	beq.n	800e9b2 <sniprintf+0x16>
 800e9f6:	9b02      	ldr	r3, [sp, #8]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	701a      	strb	r2, [r3, #0]
 800e9fc:	e7d9      	b.n	800e9b2 <sniprintf+0x16>
 800e9fe:	bf00      	nop
 800ea00:	20000010 	.word	0x20000010

0800ea04 <_vsniprintf_r>:
 800ea04:	b530      	push	{r4, r5, lr}
 800ea06:	1e14      	subs	r4, r2, #0
 800ea08:	4605      	mov	r5, r0
 800ea0a:	b09b      	sub	sp, #108	; 0x6c
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	da05      	bge.n	800ea1c <_vsniprintf_r+0x18>
 800ea10:	238b      	movs	r3, #139	; 0x8b
 800ea12:	602b      	str	r3, [r5, #0]
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295
 800ea18:	b01b      	add	sp, #108	; 0x6c
 800ea1a:	bd30      	pop	{r4, r5, pc}
 800ea1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ea20:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ea24:	bf14      	ite	ne
 800ea26:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea2a:	4623      	moveq	r3, r4
 800ea2c:	9302      	str	r3, [sp, #8]
 800ea2e:	9305      	str	r3, [sp, #20]
 800ea30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea34:	9100      	str	r1, [sp, #0]
 800ea36:	9104      	str	r1, [sp, #16]
 800ea38:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ea40:	4669      	mov	r1, sp
 800ea42:	4628      	mov	r0, r5
 800ea44:	f000 f874 	bl	800eb30 <_svfiprintf_r>
 800ea48:	1c43      	adds	r3, r0, #1
 800ea4a:	bfbc      	itt	lt
 800ea4c:	238b      	movlt	r3, #139	; 0x8b
 800ea4e:	602b      	strlt	r3, [r5, #0]
 800ea50:	2c00      	cmp	r4, #0
 800ea52:	d0e1      	beq.n	800ea18 <_vsniprintf_r+0x14>
 800ea54:	9b00      	ldr	r3, [sp, #0]
 800ea56:	2200      	movs	r2, #0
 800ea58:	701a      	strb	r2, [r3, #0]
 800ea5a:	e7dd      	b.n	800ea18 <_vsniprintf_r+0x14>

0800ea5c <vsniprintf>:
 800ea5c:	b507      	push	{r0, r1, r2, lr}
 800ea5e:	9300      	str	r3, [sp, #0]
 800ea60:	4613      	mov	r3, r2
 800ea62:	460a      	mov	r2, r1
 800ea64:	4601      	mov	r1, r0
 800ea66:	4803      	ldr	r0, [pc, #12]	; (800ea74 <vsniprintf+0x18>)
 800ea68:	6800      	ldr	r0, [r0, #0]
 800ea6a:	f7ff ffcb 	bl	800ea04 <_vsniprintf_r>
 800ea6e:	b003      	add	sp, #12
 800ea70:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea74:	20000010 	.word	0x20000010

0800ea78 <__ssputs_r>:
 800ea78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea7c:	688e      	ldr	r6, [r1, #8]
 800ea7e:	429e      	cmp	r6, r3
 800ea80:	4682      	mov	sl, r0
 800ea82:	460c      	mov	r4, r1
 800ea84:	4690      	mov	r8, r2
 800ea86:	461f      	mov	r7, r3
 800ea88:	d838      	bhi.n	800eafc <__ssputs_r+0x84>
 800ea8a:	898a      	ldrh	r2, [r1, #12]
 800ea8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea90:	d032      	beq.n	800eaf8 <__ssputs_r+0x80>
 800ea92:	6825      	ldr	r5, [r4, #0]
 800ea94:	6909      	ldr	r1, [r1, #16]
 800ea96:	eba5 0901 	sub.w	r9, r5, r1
 800ea9a:	6965      	ldr	r5, [r4, #20]
 800ea9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eaa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	444b      	add	r3, r9
 800eaa8:	106d      	asrs	r5, r5, #1
 800eaaa:	429d      	cmp	r5, r3
 800eaac:	bf38      	it	cc
 800eaae:	461d      	movcc	r5, r3
 800eab0:	0553      	lsls	r3, r2, #21
 800eab2:	d531      	bpl.n	800eb18 <__ssputs_r+0xa0>
 800eab4:	4629      	mov	r1, r5
 800eab6:	f000 fb39 	bl	800f12c <_malloc_r>
 800eaba:	4606      	mov	r6, r0
 800eabc:	b950      	cbnz	r0, 800ead4 <__ssputs_r+0x5c>
 800eabe:	230c      	movs	r3, #12
 800eac0:	f8ca 3000 	str.w	r3, [sl]
 800eac4:	89a3      	ldrh	r3, [r4, #12]
 800eac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaca:	81a3      	strh	r3, [r4, #12]
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295
 800ead0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ead4:	6921      	ldr	r1, [r4, #16]
 800ead6:	464a      	mov	r2, r9
 800ead8:	f7ff ff4a 	bl	800e970 <memcpy>
 800eadc:	89a3      	ldrh	r3, [r4, #12]
 800eade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eae6:	81a3      	strh	r3, [r4, #12]
 800eae8:	6126      	str	r6, [r4, #16]
 800eaea:	6165      	str	r5, [r4, #20]
 800eaec:	444e      	add	r6, r9
 800eaee:	eba5 0509 	sub.w	r5, r5, r9
 800eaf2:	6026      	str	r6, [r4, #0]
 800eaf4:	60a5      	str	r5, [r4, #8]
 800eaf6:	463e      	mov	r6, r7
 800eaf8:	42be      	cmp	r6, r7
 800eafa:	d900      	bls.n	800eafe <__ssputs_r+0x86>
 800eafc:	463e      	mov	r6, r7
 800eafe:	4632      	mov	r2, r6
 800eb00:	6820      	ldr	r0, [r4, #0]
 800eb02:	4641      	mov	r1, r8
 800eb04:	f000 faa8 	bl	800f058 <memmove>
 800eb08:	68a3      	ldr	r3, [r4, #8]
 800eb0a:	6822      	ldr	r2, [r4, #0]
 800eb0c:	1b9b      	subs	r3, r3, r6
 800eb0e:	4432      	add	r2, r6
 800eb10:	60a3      	str	r3, [r4, #8]
 800eb12:	6022      	str	r2, [r4, #0]
 800eb14:	2000      	movs	r0, #0
 800eb16:	e7db      	b.n	800ead0 <__ssputs_r+0x58>
 800eb18:	462a      	mov	r2, r5
 800eb1a:	f000 fb61 	bl	800f1e0 <_realloc_r>
 800eb1e:	4606      	mov	r6, r0
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d1e1      	bne.n	800eae8 <__ssputs_r+0x70>
 800eb24:	6921      	ldr	r1, [r4, #16]
 800eb26:	4650      	mov	r0, sl
 800eb28:	f000 fab0 	bl	800f08c <_free_r>
 800eb2c:	e7c7      	b.n	800eabe <__ssputs_r+0x46>
	...

0800eb30 <_svfiprintf_r>:
 800eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb34:	4698      	mov	r8, r3
 800eb36:	898b      	ldrh	r3, [r1, #12]
 800eb38:	061b      	lsls	r3, r3, #24
 800eb3a:	b09d      	sub	sp, #116	; 0x74
 800eb3c:	4607      	mov	r7, r0
 800eb3e:	460d      	mov	r5, r1
 800eb40:	4614      	mov	r4, r2
 800eb42:	d50e      	bpl.n	800eb62 <_svfiprintf_r+0x32>
 800eb44:	690b      	ldr	r3, [r1, #16]
 800eb46:	b963      	cbnz	r3, 800eb62 <_svfiprintf_r+0x32>
 800eb48:	2140      	movs	r1, #64	; 0x40
 800eb4a:	f000 faef 	bl	800f12c <_malloc_r>
 800eb4e:	6028      	str	r0, [r5, #0]
 800eb50:	6128      	str	r0, [r5, #16]
 800eb52:	b920      	cbnz	r0, 800eb5e <_svfiprintf_r+0x2e>
 800eb54:	230c      	movs	r3, #12
 800eb56:	603b      	str	r3, [r7, #0]
 800eb58:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5c:	e0d1      	b.n	800ed02 <_svfiprintf_r+0x1d2>
 800eb5e:	2340      	movs	r3, #64	; 0x40
 800eb60:	616b      	str	r3, [r5, #20]
 800eb62:	2300      	movs	r3, #0
 800eb64:	9309      	str	r3, [sp, #36]	; 0x24
 800eb66:	2320      	movs	r3, #32
 800eb68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb70:	2330      	movs	r3, #48	; 0x30
 800eb72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ed1c <_svfiprintf_r+0x1ec>
 800eb76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb7a:	f04f 0901 	mov.w	r9, #1
 800eb7e:	4623      	mov	r3, r4
 800eb80:	469a      	mov	sl, r3
 800eb82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb86:	b10a      	cbz	r2, 800eb8c <_svfiprintf_r+0x5c>
 800eb88:	2a25      	cmp	r2, #37	; 0x25
 800eb8a:	d1f9      	bne.n	800eb80 <_svfiprintf_r+0x50>
 800eb8c:	ebba 0b04 	subs.w	fp, sl, r4
 800eb90:	d00b      	beq.n	800ebaa <_svfiprintf_r+0x7a>
 800eb92:	465b      	mov	r3, fp
 800eb94:	4622      	mov	r2, r4
 800eb96:	4629      	mov	r1, r5
 800eb98:	4638      	mov	r0, r7
 800eb9a:	f7ff ff6d 	bl	800ea78 <__ssputs_r>
 800eb9e:	3001      	adds	r0, #1
 800eba0:	f000 80aa 	beq.w	800ecf8 <_svfiprintf_r+0x1c8>
 800eba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eba6:	445a      	add	r2, fp
 800eba8:	9209      	str	r2, [sp, #36]	; 0x24
 800ebaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f000 80a2 	beq.w	800ecf8 <_svfiprintf_r+0x1c8>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebbe:	f10a 0a01 	add.w	sl, sl, #1
 800ebc2:	9304      	str	r3, [sp, #16]
 800ebc4:	9307      	str	r3, [sp, #28]
 800ebc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebca:	931a      	str	r3, [sp, #104]	; 0x68
 800ebcc:	4654      	mov	r4, sl
 800ebce:	2205      	movs	r2, #5
 800ebd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd4:	4851      	ldr	r0, [pc, #324]	; (800ed1c <_svfiprintf_r+0x1ec>)
 800ebd6:	f7f1 fb23 	bl	8000220 <memchr>
 800ebda:	9a04      	ldr	r2, [sp, #16]
 800ebdc:	b9d8      	cbnz	r0, 800ec16 <_svfiprintf_r+0xe6>
 800ebde:	06d0      	lsls	r0, r2, #27
 800ebe0:	bf44      	itt	mi
 800ebe2:	2320      	movmi	r3, #32
 800ebe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebe8:	0711      	lsls	r1, r2, #28
 800ebea:	bf44      	itt	mi
 800ebec:	232b      	movmi	r3, #43	; 0x2b
 800ebee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebf2:	f89a 3000 	ldrb.w	r3, [sl]
 800ebf6:	2b2a      	cmp	r3, #42	; 0x2a
 800ebf8:	d015      	beq.n	800ec26 <_svfiprintf_r+0xf6>
 800ebfa:	9a07      	ldr	r2, [sp, #28]
 800ebfc:	4654      	mov	r4, sl
 800ebfe:	2000      	movs	r0, #0
 800ec00:	f04f 0c0a 	mov.w	ip, #10
 800ec04:	4621      	mov	r1, r4
 800ec06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec0a:	3b30      	subs	r3, #48	; 0x30
 800ec0c:	2b09      	cmp	r3, #9
 800ec0e:	d94e      	bls.n	800ecae <_svfiprintf_r+0x17e>
 800ec10:	b1b0      	cbz	r0, 800ec40 <_svfiprintf_r+0x110>
 800ec12:	9207      	str	r2, [sp, #28]
 800ec14:	e014      	b.n	800ec40 <_svfiprintf_r+0x110>
 800ec16:	eba0 0308 	sub.w	r3, r0, r8
 800ec1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	9304      	str	r3, [sp, #16]
 800ec22:	46a2      	mov	sl, r4
 800ec24:	e7d2      	b.n	800ebcc <_svfiprintf_r+0x9c>
 800ec26:	9b03      	ldr	r3, [sp, #12]
 800ec28:	1d19      	adds	r1, r3, #4
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	9103      	str	r1, [sp, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	bfbb      	ittet	lt
 800ec32:	425b      	neglt	r3, r3
 800ec34:	f042 0202 	orrlt.w	r2, r2, #2
 800ec38:	9307      	strge	r3, [sp, #28]
 800ec3a:	9307      	strlt	r3, [sp, #28]
 800ec3c:	bfb8      	it	lt
 800ec3e:	9204      	strlt	r2, [sp, #16]
 800ec40:	7823      	ldrb	r3, [r4, #0]
 800ec42:	2b2e      	cmp	r3, #46	; 0x2e
 800ec44:	d10c      	bne.n	800ec60 <_svfiprintf_r+0x130>
 800ec46:	7863      	ldrb	r3, [r4, #1]
 800ec48:	2b2a      	cmp	r3, #42	; 0x2a
 800ec4a:	d135      	bne.n	800ecb8 <_svfiprintf_r+0x188>
 800ec4c:	9b03      	ldr	r3, [sp, #12]
 800ec4e:	1d1a      	adds	r2, r3, #4
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	9203      	str	r2, [sp, #12]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	bfb8      	it	lt
 800ec58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec5c:	3402      	adds	r4, #2
 800ec5e:	9305      	str	r3, [sp, #20]
 800ec60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ed2c <_svfiprintf_r+0x1fc>
 800ec64:	7821      	ldrb	r1, [r4, #0]
 800ec66:	2203      	movs	r2, #3
 800ec68:	4650      	mov	r0, sl
 800ec6a:	f7f1 fad9 	bl	8000220 <memchr>
 800ec6e:	b140      	cbz	r0, 800ec82 <_svfiprintf_r+0x152>
 800ec70:	2340      	movs	r3, #64	; 0x40
 800ec72:	eba0 000a 	sub.w	r0, r0, sl
 800ec76:	fa03 f000 	lsl.w	r0, r3, r0
 800ec7a:	9b04      	ldr	r3, [sp, #16]
 800ec7c:	4303      	orrs	r3, r0
 800ec7e:	3401      	adds	r4, #1
 800ec80:	9304      	str	r3, [sp, #16]
 800ec82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec86:	4826      	ldr	r0, [pc, #152]	; (800ed20 <_svfiprintf_r+0x1f0>)
 800ec88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec8c:	2206      	movs	r2, #6
 800ec8e:	f7f1 fac7 	bl	8000220 <memchr>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	d038      	beq.n	800ed08 <_svfiprintf_r+0x1d8>
 800ec96:	4b23      	ldr	r3, [pc, #140]	; (800ed24 <_svfiprintf_r+0x1f4>)
 800ec98:	bb1b      	cbnz	r3, 800ece2 <_svfiprintf_r+0x1b2>
 800ec9a:	9b03      	ldr	r3, [sp, #12]
 800ec9c:	3307      	adds	r3, #7
 800ec9e:	f023 0307 	bic.w	r3, r3, #7
 800eca2:	3308      	adds	r3, #8
 800eca4:	9303      	str	r3, [sp, #12]
 800eca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eca8:	4433      	add	r3, r6
 800ecaa:	9309      	str	r3, [sp, #36]	; 0x24
 800ecac:	e767      	b.n	800eb7e <_svfiprintf_r+0x4e>
 800ecae:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	2001      	movs	r0, #1
 800ecb6:	e7a5      	b.n	800ec04 <_svfiprintf_r+0xd4>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	3401      	adds	r4, #1
 800ecbc:	9305      	str	r3, [sp, #20]
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	f04f 0c0a 	mov.w	ip, #10
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecca:	3a30      	subs	r2, #48	; 0x30
 800eccc:	2a09      	cmp	r2, #9
 800ecce:	d903      	bls.n	800ecd8 <_svfiprintf_r+0x1a8>
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d0c5      	beq.n	800ec60 <_svfiprintf_r+0x130>
 800ecd4:	9105      	str	r1, [sp, #20]
 800ecd6:	e7c3      	b.n	800ec60 <_svfiprintf_r+0x130>
 800ecd8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecdc:	4604      	mov	r4, r0
 800ecde:	2301      	movs	r3, #1
 800ece0:	e7f0      	b.n	800ecc4 <_svfiprintf_r+0x194>
 800ece2:	ab03      	add	r3, sp, #12
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	462a      	mov	r2, r5
 800ece8:	4b0f      	ldr	r3, [pc, #60]	; (800ed28 <_svfiprintf_r+0x1f8>)
 800ecea:	a904      	add	r1, sp, #16
 800ecec:	4638      	mov	r0, r7
 800ecee:	f3af 8000 	nop.w
 800ecf2:	1c42      	adds	r2, r0, #1
 800ecf4:	4606      	mov	r6, r0
 800ecf6:	d1d6      	bne.n	800eca6 <_svfiprintf_r+0x176>
 800ecf8:	89ab      	ldrh	r3, [r5, #12]
 800ecfa:	065b      	lsls	r3, r3, #25
 800ecfc:	f53f af2c 	bmi.w	800eb58 <_svfiprintf_r+0x28>
 800ed00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed02:	b01d      	add	sp, #116	; 0x74
 800ed04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed08:	ab03      	add	r3, sp, #12
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	462a      	mov	r2, r5
 800ed0e:	4b06      	ldr	r3, [pc, #24]	; (800ed28 <_svfiprintf_r+0x1f8>)
 800ed10:	a904      	add	r1, sp, #16
 800ed12:	4638      	mov	r0, r7
 800ed14:	f000 f87a 	bl	800ee0c <_printf_i>
 800ed18:	e7eb      	b.n	800ecf2 <_svfiprintf_r+0x1c2>
 800ed1a:	bf00      	nop
 800ed1c:	0800f884 	.word	0x0800f884
 800ed20:	0800f88e 	.word	0x0800f88e
 800ed24:	00000000 	.word	0x00000000
 800ed28:	0800ea79 	.word	0x0800ea79
 800ed2c:	0800f88a 	.word	0x0800f88a

0800ed30 <_printf_common>:
 800ed30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed34:	4616      	mov	r6, r2
 800ed36:	4699      	mov	r9, r3
 800ed38:	688a      	ldr	r2, [r1, #8]
 800ed3a:	690b      	ldr	r3, [r1, #16]
 800ed3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed40:	4293      	cmp	r3, r2
 800ed42:	bfb8      	it	lt
 800ed44:	4613      	movlt	r3, r2
 800ed46:	6033      	str	r3, [r6, #0]
 800ed48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed4c:	4607      	mov	r7, r0
 800ed4e:	460c      	mov	r4, r1
 800ed50:	b10a      	cbz	r2, 800ed56 <_printf_common+0x26>
 800ed52:	3301      	adds	r3, #1
 800ed54:	6033      	str	r3, [r6, #0]
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	0699      	lsls	r1, r3, #26
 800ed5a:	bf42      	ittt	mi
 800ed5c:	6833      	ldrmi	r3, [r6, #0]
 800ed5e:	3302      	addmi	r3, #2
 800ed60:	6033      	strmi	r3, [r6, #0]
 800ed62:	6825      	ldr	r5, [r4, #0]
 800ed64:	f015 0506 	ands.w	r5, r5, #6
 800ed68:	d106      	bne.n	800ed78 <_printf_common+0x48>
 800ed6a:	f104 0a19 	add.w	sl, r4, #25
 800ed6e:	68e3      	ldr	r3, [r4, #12]
 800ed70:	6832      	ldr	r2, [r6, #0]
 800ed72:	1a9b      	subs	r3, r3, r2
 800ed74:	42ab      	cmp	r3, r5
 800ed76:	dc26      	bgt.n	800edc6 <_printf_common+0x96>
 800ed78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed7c:	1e13      	subs	r3, r2, #0
 800ed7e:	6822      	ldr	r2, [r4, #0]
 800ed80:	bf18      	it	ne
 800ed82:	2301      	movne	r3, #1
 800ed84:	0692      	lsls	r2, r2, #26
 800ed86:	d42b      	bmi.n	800ede0 <_printf_common+0xb0>
 800ed88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed8c:	4649      	mov	r1, r9
 800ed8e:	4638      	mov	r0, r7
 800ed90:	47c0      	blx	r8
 800ed92:	3001      	adds	r0, #1
 800ed94:	d01e      	beq.n	800edd4 <_printf_common+0xa4>
 800ed96:	6823      	ldr	r3, [r4, #0]
 800ed98:	68e5      	ldr	r5, [r4, #12]
 800ed9a:	6832      	ldr	r2, [r6, #0]
 800ed9c:	f003 0306 	and.w	r3, r3, #6
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	bf08      	it	eq
 800eda4:	1aad      	subeq	r5, r5, r2
 800eda6:	68a3      	ldr	r3, [r4, #8]
 800eda8:	6922      	ldr	r2, [r4, #16]
 800edaa:	bf0c      	ite	eq
 800edac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800edb0:	2500      	movne	r5, #0
 800edb2:	4293      	cmp	r3, r2
 800edb4:	bfc4      	itt	gt
 800edb6:	1a9b      	subgt	r3, r3, r2
 800edb8:	18ed      	addgt	r5, r5, r3
 800edba:	2600      	movs	r6, #0
 800edbc:	341a      	adds	r4, #26
 800edbe:	42b5      	cmp	r5, r6
 800edc0:	d11a      	bne.n	800edf8 <_printf_common+0xc8>
 800edc2:	2000      	movs	r0, #0
 800edc4:	e008      	b.n	800edd8 <_printf_common+0xa8>
 800edc6:	2301      	movs	r3, #1
 800edc8:	4652      	mov	r2, sl
 800edca:	4649      	mov	r1, r9
 800edcc:	4638      	mov	r0, r7
 800edce:	47c0      	blx	r8
 800edd0:	3001      	adds	r0, #1
 800edd2:	d103      	bne.n	800eddc <_printf_common+0xac>
 800edd4:	f04f 30ff 	mov.w	r0, #4294967295
 800edd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eddc:	3501      	adds	r5, #1
 800edde:	e7c6      	b.n	800ed6e <_printf_common+0x3e>
 800ede0:	18e1      	adds	r1, r4, r3
 800ede2:	1c5a      	adds	r2, r3, #1
 800ede4:	2030      	movs	r0, #48	; 0x30
 800ede6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800edea:	4422      	add	r2, r4
 800edec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800edf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800edf4:	3302      	adds	r3, #2
 800edf6:	e7c7      	b.n	800ed88 <_printf_common+0x58>
 800edf8:	2301      	movs	r3, #1
 800edfa:	4622      	mov	r2, r4
 800edfc:	4649      	mov	r1, r9
 800edfe:	4638      	mov	r0, r7
 800ee00:	47c0      	blx	r8
 800ee02:	3001      	adds	r0, #1
 800ee04:	d0e6      	beq.n	800edd4 <_printf_common+0xa4>
 800ee06:	3601      	adds	r6, #1
 800ee08:	e7d9      	b.n	800edbe <_printf_common+0x8e>
	...

0800ee0c <_printf_i>:
 800ee0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee10:	460c      	mov	r4, r1
 800ee12:	4691      	mov	r9, r2
 800ee14:	7e27      	ldrb	r7, [r4, #24]
 800ee16:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ee18:	2f78      	cmp	r7, #120	; 0x78
 800ee1a:	4680      	mov	r8, r0
 800ee1c:	469a      	mov	sl, r3
 800ee1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee22:	d807      	bhi.n	800ee34 <_printf_i+0x28>
 800ee24:	2f62      	cmp	r7, #98	; 0x62
 800ee26:	d80a      	bhi.n	800ee3e <_printf_i+0x32>
 800ee28:	2f00      	cmp	r7, #0
 800ee2a:	f000 80d8 	beq.w	800efde <_printf_i+0x1d2>
 800ee2e:	2f58      	cmp	r7, #88	; 0x58
 800ee30:	f000 80a3 	beq.w	800ef7a <_printf_i+0x16e>
 800ee34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee3c:	e03a      	b.n	800eeb4 <_printf_i+0xa8>
 800ee3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee42:	2b15      	cmp	r3, #21
 800ee44:	d8f6      	bhi.n	800ee34 <_printf_i+0x28>
 800ee46:	a001      	add	r0, pc, #4	; (adr r0, 800ee4c <_printf_i+0x40>)
 800ee48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ee4c:	0800eea5 	.word	0x0800eea5
 800ee50:	0800eeb9 	.word	0x0800eeb9
 800ee54:	0800ee35 	.word	0x0800ee35
 800ee58:	0800ee35 	.word	0x0800ee35
 800ee5c:	0800ee35 	.word	0x0800ee35
 800ee60:	0800ee35 	.word	0x0800ee35
 800ee64:	0800eeb9 	.word	0x0800eeb9
 800ee68:	0800ee35 	.word	0x0800ee35
 800ee6c:	0800ee35 	.word	0x0800ee35
 800ee70:	0800ee35 	.word	0x0800ee35
 800ee74:	0800ee35 	.word	0x0800ee35
 800ee78:	0800efc5 	.word	0x0800efc5
 800ee7c:	0800eee9 	.word	0x0800eee9
 800ee80:	0800efa7 	.word	0x0800efa7
 800ee84:	0800ee35 	.word	0x0800ee35
 800ee88:	0800ee35 	.word	0x0800ee35
 800ee8c:	0800efe7 	.word	0x0800efe7
 800ee90:	0800ee35 	.word	0x0800ee35
 800ee94:	0800eee9 	.word	0x0800eee9
 800ee98:	0800ee35 	.word	0x0800ee35
 800ee9c:	0800ee35 	.word	0x0800ee35
 800eea0:	0800efaf 	.word	0x0800efaf
 800eea4:	680b      	ldr	r3, [r1, #0]
 800eea6:	1d1a      	adds	r2, r3, #4
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	600a      	str	r2, [r1, #0]
 800eeac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eeb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	e0a3      	b.n	800f000 <_printf_i+0x1f4>
 800eeb8:	6825      	ldr	r5, [r4, #0]
 800eeba:	6808      	ldr	r0, [r1, #0]
 800eebc:	062e      	lsls	r6, r5, #24
 800eebe:	f100 0304 	add.w	r3, r0, #4
 800eec2:	d50a      	bpl.n	800eeda <_printf_i+0xce>
 800eec4:	6805      	ldr	r5, [r0, #0]
 800eec6:	600b      	str	r3, [r1, #0]
 800eec8:	2d00      	cmp	r5, #0
 800eeca:	da03      	bge.n	800eed4 <_printf_i+0xc8>
 800eecc:	232d      	movs	r3, #45	; 0x2d
 800eece:	426d      	negs	r5, r5
 800eed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eed4:	485e      	ldr	r0, [pc, #376]	; (800f050 <_printf_i+0x244>)
 800eed6:	230a      	movs	r3, #10
 800eed8:	e019      	b.n	800ef0e <_printf_i+0x102>
 800eeda:	f015 0f40 	tst.w	r5, #64	; 0x40
 800eede:	6805      	ldr	r5, [r0, #0]
 800eee0:	600b      	str	r3, [r1, #0]
 800eee2:	bf18      	it	ne
 800eee4:	b22d      	sxthne	r5, r5
 800eee6:	e7ef      	b.n	800eec8 <_printf_i+0xbc>
 800eee8:	680b      	ldr	r3, [r1, #0]
 800eeea:	6825      	ldr	r5, [r4, #0]
 800eeec:	1d18      	adds	r0, r3, #4
 800eeee:	6008      	str	r0, [r1, #0]
 800eef0:	0628      	lsls	r0, r5, #24
 800eef2:	d501      	bpl.n	800eef8 <_printf_i+0xec>
 800eef4:	681d      	ldr	r5, [r3, #0]
 800eef6:	e002      	b.n	800eefe <_printf_i+0xf2>
 800eef8:	0669      	lsls	r1, r5, #25
 800eefa:	d5fb      	bpl.n	800eef4 <_printf_i+0xe8>
 800eefc:	881d      	ldrh	r5, [r3, #0]
 800eefe:	4854      	ldr	r0, [pc, #336]	; (800f050 <_printf_i+0x244>)
 800ef00:	2f6f      	cmp	r7, #111	; 0x6f
 800ef02:	bf0c      	ite	eq
 800ef04:	2308      	moveq	r3, #8
 800ef06:	230a      	movne	r3, #10
 800ef08:	2100      	movs	r1, #0
 800ef0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef0e:	6866      	ldr	r6, [r4, #4]
 800ef10:	60a6      	str	r6, [r4, #8]
 800ef12:	2e00      	cmp	r6, #0
 800ef14:	bfa2      	ittt	ge
 800ef16:	6821      	ldrge	r1, [r4, #0]
 800ef18:	f021 0104 	bicge.w	r1, r1, #4
 800ef1c:	6021      	strge	r1, [r4, #0]
 800ef1e:	b90d      	cbnz	r5, 800ef24 <_printf_i+0x118>
 800ef20:	2e00      	cmp	r6, #0
 800ef22:	d04d      	beq.n	800efc0 <_printf_i+0x1b4>
 800ef24:	4616      	mov	r6, r2
 800ef26:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef2a:	fb03 5711 	mls	r7, r3, r1, r5
 800ef2e:	5dc7      	ldrb	r7, [r0, r7]
 800ef30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef34:	462f      	mov	r7, r5
 800ef36:	42bb      	cmp	r3, r7
 800ef38:	460d      	mov	r5, r1
 800ef3a:	d9f4      	bls.n	800ef26 <_printf_i+0x11a>
 800ef3c:	2b08      	cmp	r3, #8
 800ef3e:	d10b      	bne.n	800ef58 <_printf_i+0x14c>
 800ef40:	6823      	ldr	r3, [r4, #0]
 800ef42:	07df      	lsls	r7, r3, #31
 800ef44:	d508      	bpl.n	800ef58 <_printf_i+0x14c>
 800ef46:	6923      	ldr	r3, [r4, #16]
 800ef48:	6861      	ldr	r1, [r4, #4]
 800ef4a:	4299      	cmp	r1, r3
 800ef4c:	bfde      	ittt	le
 800ef4e:	2330      	movle	r3, #48	; 0x30
 800ef50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef58:	1b92      	subs	r2, r2, r6
 800ef5a:	6122      	str	r2, [r4, #16]
 800ef5c:	f8cd a000 	str.w	sl, [sp]
 800ef60:	464b      	mov	r3, r9
 800ef62:	aa03      	add	r2, sp, #12
 800ef64:	4621      	mov	r1, r4
 800ef66:	4640      	mov	r0, r8
 800ef68:	f7ff fee2 	bl	800ed30 <_printf_common>
 800ef6c:	3001      	adds	r0, #1
 800ef6e:	d14c      	bne.n	800f00a <_printf_i+0x1fe>
 800ef70:	f04f 30ff 	mov.w	r0, #4294967295
 800ef74:	b004      	add	sp, #16
 800ef76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef7a:	4835      	ldr	r0, [pc, #212]	; (800f050 <_printf_i+0x244>)
 800ef7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ef80:	6823      	ldr	r3, [r4, #0]
 800ef82:	680e      	ldr	r6, [r1, #0]
 800ef84:	061f      	lsls	r7, r3, #24
 800ef86:	f856 5b04 	ldr.w	r5, [r6], #4
 800ef8a:	600e      	str	r6, [r1, #0]
 800ef8c:	d514      	bpl.n	800efb8 <_printf_i+0x1ac>
 800ef8e:	07d9      	lsls	r1, r3, #31
 800ef90:	bf44      	itt	mi
 800ef92:	f043 0320 	orrmi.w	r3, r3, #32
 800ef96:	6023      	strmi	r3, [r4, #0]
 800ef98:	b91d      	cbnz	r5, 800efa2 <_printf_i+0x196>
 800ef9a:	6823      	ldr	r3, [r4, #0]
 800ef9c:	f023 0320 	bic.w	r3, r3, #32
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	2310      	movs	r3, #16
 800efa4:	e7b0      	b.n	800ef08 <_printf_i+0xfc>
 800efa6:	6823      	ldr	r3, [r4, #0]
 800efa8:	f043 0320 	orr.w	r3, r3, #32
 800efac:	6023      	str	r3, [r4, #0]
 800efae:	2378      	movs	r3, #120	; 0x78
 800efb0:	4828      	ldr	r0, [pc, #160]	; (800f054 <_printf_i+0x248>)
 800efb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800efb6:	e7e3      	b.n	800ef80 <_printf_i+0x174>
 800efb8:	065e      	lsls	r6, r3, #25
 800efba:	bf48      	it	mi
 800efbc:	b2ad      	uxthmi	r5, r5
 800efbe:	e7e6      	b.n	800ef8e <_printf_i+0x182>
 800efc0:	4616      	mov	r6, r2
 800efc2:	e7bb      	b.n	800ef3c <_printf_i+0x130>
 800efc4:	680b      	ldr	r3, [r1, #0]
 800efc6:	6826      	ldr	r6, [r4, #0]
 800efc8:	6960      	ldr	r0, [r4, #20]
 800efca:	1d1d      	adds	r5, r3, #4
 800efcc:	600d      	str	r5, [r1, #0]
 800efce:	0635      	lsls	r5, r6, #24
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	d501      	bpl.n	800efd8 <_printf_i+0x1cc>
 800efd4:	6018      	str	r0, [r3, #0]
 800efd6:	e002      	b.n	800efde <_printf_i+0x1d2>
 800efd8:	0671      	lsls	r1, r6, #25
 800efda:	d5fb      	bpl.n	800efd4 <_printf_i+0x1c8>
 800efdc:	8018      	strh	r0, [r3, #0]
 800efde:	2300      	movs	r3, #0
 800efe0:	6123      	str	r3, [r4, #16]
 800efe2:	4616      	mov	r6, r2
 800efe4:	e7ba      	b.n	800ef5c <_printf_i+0x150>
 800efe6:	680b      	ldr	r3, [r1, #0]
 800efe8:	1d1a      	adds	r2, r3, #4
 800efea:	600a      	str	r2, [r1, #0]
 800efec:	681e      	ldr	r6, [r3, #0]
 800efee:	6862      	ldr	r2, [r4, #4]
 800eff0:	2100      	movs	r1, #0
 800eff2:	4630      	mov	r0, r6
 800eff4:	f7f1 f914 	bl	8000220 <memchr>
 800eff8:	b108      	cbz	r0, 800effe <_printf_i+0x1f2>
 800effa:	1b80      	subs	r0, r0, r6
 800effc:	6060      	str	r0, [r4, #4]
 800effe:	6863      	ldr	r3, [r4, #4]
 800f000:	6123      	str	r3, [r4, #16]
 800f002:	2300      	movs	r3, #0
 800f004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f008:	e7a8      	b.n	800ef5c <_printf_i+0x150>
 800f00a:	6923      	ldr	r3, [r4, #16]
 800f00c:	4632      	mov	r2, r6
 800f00e:	4649      	mov	r1, r9
 800f010:	4640      	mov	r0, r8
 800f012:	47d0      	blx	sl
 800f014:	3001      	adds	r0, #1
 800f016:	d0ab      	beq.n	800ef70 <_printf_i+0x164>
 800f018:	6823      	ldr	r3, [r4, #0]
 800f01a:	079b      	lsls	r3, r3, #30
 800f01c:	d413      	bmi.n	800f046 <_printf_i+0x23a>
 800f01e:	68e0      	ldr	r0, [r4, #12]
 800f020:	9b03      	ldr	r3, [sp, #12]
 800f022:	4298      	cmp	r0, r3
 800f024:	bfb8      	it	lt
 800f026:	4618      	movlt	r0, r3
 800f028:	e7a4      	b.n	800ef74 <_printf_i+0x168>
 800f02a:	2301      	movs	r3, #1
 800f02c:	4632      	mov	r2, r6
 800f02e:	4649      	mov	r1, r9
 800f030:	4640      	mov	r0, r8
 800f032:	47d0      	blx	sl
 800f034:	3001      	adds	r0, #1
 800f036:	d09b      	beq.n	800ef70 <_printf_i+0x164>
 800f038:	3501      	adds	r5, #1
 800f03a:	68e3      	ldr	r3, [r4, #12]
 800f03c:	9903      	ldr	r1, [sp, #12]
 800f03e:	1a5b      	subs	r3, r3, r1
 800f040:	42ab      	cmp	r3, r5
 800f042:	dcf2      	bgt.n	800f02a <_printf_i+0x21e>
 800f044:	e7eb      	b.n	800f01e <_printf_i+0x212>
 800f046:	2500      	movs	r5, #0
 800f048:	f104 0619 	add.w	r6, r4, #25
 800f04c:	e7f5      	b.n	800f03a <_printf_i+0x22e>
 800f04e:	bf00      	nop
 800f050:	0800f895 	.word	0x0800f895
 800f054:	0800f8a6 	.word	0x0800f8a6

0800f058 <memmove>:
 800f058:	4288      	cmp	r0, r1
 800f05a:	b510      	push	{r4, lr}
 800f05c:	eb01 0402 	add.w	r4, r1, r2
 800f060:	d902      	bls.n	800f068 <memmove+0x10>
 800f062:	4284      	cmp	r4, r0
 800f064:	4623      	mov	r3, r4
 800f066:	d807      	bhi.n	800f078 <memmove+0x20>
 800f068:	1e43      	subs	r3, r0, #1
 800f06a:	42a1      	cmp	r1, r4
 800f06c:	d008      	beq.n	800f080 <memmove+0x28>
 800f06e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f072:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f076:	e7f8      	b.n	800f06a <memmove+0x12>
 800f078:	4402      	add	r2, r0
 800f07a:	4601      	mov	r1, r0
 800f07c:	428a      	cmp	r2, r1
 800f07e:	d100      	bne.n	800f082 <memmove+0x2a>
 800f080:	bd10      	pop	{r4, pc}
 800f082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f08a:	e7f7      	b.n	800f07c <memmove+0x24>

0800f08c <_free_r>:
 800f08c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f08e:	2900      	cmp	r1, #0
 800f090:	d048      	beq.n	800f124 <_free_r+0x98>
 800f092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f096:	9001      	str	r0, [sp, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f1a1 0404 	sub.w	r4, r1, #4
 800f09e:	bfb8      	it	lt
 800f0a0:	18e4      	addlt	r4, r4, r3
 800f0a2:	f000 f8d3 	bl	800f24c <__malloc_lock>
 800f0a6:	4a20      	ldr	r2, [pc, #128]	; (800f128 <_free_r+0x9c>)
 800f0a8:	9801      	ldr	r0, [sp, #4]
 800f0aa:	6813      	ldr	r3, [r2, #0]
 800f0ac:	4615      	mov	r5, r2
 800f0ae:	b933      	cbnz	r3, 800f0be <_free_r+0x32>
 800f0b0:	6063      	str	r3, [r4, #4]
 800f0b2:	6014      	str	r4, [r2, #0]
 800f0b4:	b003      	add	sp, #12
 800f0b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f0ba:	f000 b8cd 	b.w	800f258 <__malloc_unlock>
 800f0be:	42a3      	cmp	r3, r4
 800f0c0:	d90b      	bls.n	800f0da <_free_r+0x4e>
 800f0c2:	6821      	ldr	r1, [r4, #0]
 800f0c4:	1862      	adds	r2, r4, r1
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	bf04      	itt	eq
 800f0ca:	681a      	ldreq	r2, [r3, #0]
 800f0cc:	685b      	ldreq	r3, [r3, #4]
 800f0ce:	6063      	str	r3, [r4, #4]
 800f0d0:	bf04      	itt	eq
 800f0d2:	1852      	addeq	r2, r2, r1
 800f0d4:	6022      	streq	r2, [r4, #0]
 800f0d6:	602c      	str	r4, [r5, #0]
 800f0d8:	e7ec      	b.n	800f0b4 <_free_r+0x28>
 800f0da:	461a      	mov	r2, r3
 800f0dc:	685b      	ldr	r3, [r3, #4]
 800f0de:	b10b      	cbz	r3, 800f0e4 <_free_r+0x58>
 800f0e0:	42a3      	cmp	r3, r4
 800f0e2:	d9fa      	bls.n	800f0da <_free_r+0x4e>
 800f0e4:	6811      	ldr	r1, [r2, #0]
 800f0e6:	1855      	adds	r5, r2, r1
 800f0e8:	42a5      	cmp	r5, r4
 800f0ea:	d10b      	bne.n	800f104 <_free_r+0x78>
 800f0ec:	6824      	ldr	r4, [r4, #0]
 800f0ee:	4421      	add	r1, r4
 800f0f0:	1854      	adds	r4, r2, r1
 800f0f2:	42a3      	cmp	r3, r4
 800f0f4:	6011      	str	r1, [r2, #0]
 800f0f6:	d1dd      	bne.n	800f0b4 <_free_r+0x28>
 800f0f8:	681c      	ldr	r4, [r3, #0]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	6053      	str	r3, [r2, #4]
 800f0fe:	4421      	add	r1, r4
 800f100:	6011      	str	r1, [r2, #0]
 800f102:	e7d7      	b.n	800f0b4 <_free_r+0x28>
 800f104:	d902      	bls.n	800f10c <_free_r+0x80>
 800f106:	230c      	movs	r3, #12
 800f108:	6003      	str	r3, [r0, #0]
 800f10a:	e7d3      	b.n	800f0b4 <_free_r+0x28>
 800f10c:	6825      	ldr	r5, [r4, #0]
 800f10e:	1961      	adds	r1, r4, r5
 800f110:	428b      	cmp	r3, r1
 800f112:	bf04      	itt	eq
 800f114:	6819      	ldreq	r1, [r3, #0]
 800f116:	685b      	ldreq	r3, [r3, #4]
 800f118:	6063      	str	r3, [r4, #4]
 800f11a:	bf04      	itt	eq
 800f11c:	1949      	addeq	r1, r1, r5
 800f11e:	6021      	streq	r1, [r4, #0]
 800f120:	6054      	str	r4, [r2, #4]
 800f122:	e7c7      	b.n	800f0b4 <_free_r+0x28>
 800f124:	b003      	add	sp, #12
 800f126:	bd30      	pop	{r4, r5, pc}
 800f128:	20008dbc 	.word	0x20008dbc

0800f12c <_malloc_r>:
 800f12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12e:	1ccd      	adds	r5, r1, #3
 800f130:	f025 0503 	bic.w	r5, r5, #3
 800f134:	3508      	adds	r5, #8
 800f136:	2d0c      	cmp	r5, #12
 800f138:	bf38      	it	cc
 800f13a:	250c      	movcc	r5, #12
 800f13c:	2d00      	cmp	r5, #0
 800f13e:	4606      	mov	r6, r0
 800f140:	db01      	blt.n	800f146 <_malloc_r+0x1a>
 800f142:	42a9      	cmp	r1, r5
 800f144:	d903      	bls.n	800f14e <_malloc_r+0x22>
 800f146:	230c      	movs	r3, #12
 800f148:	6033      	str	r3, [r6, #0]
 800f14a:	2000      	movs	r0, #0
 800f14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f14e:	f000 f87d 	bl	800f24c <__malloc_lock>
 800f152:	4921      	ldr	r1, [pc, #132]	; (800f1d8 <_malloc_r+0xac>)
 800f154:	680a      	ldr	r2, [r1, #0]
 800f156:	4614      	mov	r4, r2
 800f158:	b99c      	cbnz	r4, 800f182 <_malloc_r+0x56>
 800f15a:	4f20      	ldr	r7, [pc, #128]	; (800f1dc <_malloc_r+0xb0>)
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	b923      	cbnz	r3, 800f16a <_malloc_r+0x3e>
 800f160:	4621      	mov	r1, r4
 800f162:	4630      	mov	r0, r6
 800f164:	f000 f862 	bl	800f22c <_sbrk_r>
 800f168:	6038      	str	r0, [r7, #0]
 800f16a:	4629      	mov	r1, r5
 800f16c:	4630      	mov	r0, r6
 800f16e:	f000 f85d 	bl	800f22c <_sbrk_r>
 800f172:	1c43      	adds	r3, r0, #1
 800f174:	d123      	bne.n	800f1be <_malloc_r+0x92>
 800f176:	230c      	movs	r3, #12
 800f178:	6033      	str	r3, [r6, #0]
 800f17a:	4630      	mov	r0, r6
 800f17c:	f000 f86c 	bl	800f258 <__malloc_unlock>
 800f180:	e7e3      	b.n	800f14a <_malloc_r+0x1e>
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	1b5b      	subs	r3, r3, r5
 800f186:	d417      	bmi.n	800f1b8 <_malloc_r+0x8c>
 800f188:	2b0b      	cmp	r3, #11
 800f18a:	d903      	bls.n	800f194 <_malloc_r+0x68>
 800f18c:	6023      	str	r3, [r4, #0]
 800f18e:	441c      	add	r4, r3
 800f190:	6025      	str	r5, [r4, #0]
 800f192:	e004      	b.n	800f19e <_malloc_r+0x72>
 800f194:	6863      	ldr	r3, [r4, #4]
 800f196:	42a2      	cmp	r2, r4
 800f198:	bf0c      	ite	eq
 800f19a:	600b      	streq	r3, [r1, #0]
 800f19c:	6053      	strne	r3, [r2, #4]
 800f19e:	4630      	mov	r0, r6
 800f1a0:	f000 f85a 	bl	800f258 <__malloc_unlock>
 800f1a4:	f104 000b 	add.w	r0, r4, #11
 800f1a8:	1d23      	adds	r3, r4, #4
 800f1aa:	f020 0007 	bic.w	r0, r0, #7
 800f1ae:	1ac2      	subs	r2, r0, r3
 800f1b0:	d0cc      	beq.n	800f14c <_malloc_r+0x20>
 800f1b2:	1a1b      	subs	r3, r3, r0
 800f1b4:	50a3      	str	r3, [r4, r2]
 800f1b6:	e7c9      	b.n	800f14c <_malloc_r+0x20>
 800f1b8:	4622      	mov	r2, r4
 800f1ba:	6864      	ldr	r4, [r4, #4]
 800f1bc:	e7cc      	b.n	800f158 <_malloc_r+0x2c>
 800f1be:	1cc4      	adds	r4, r0, #3
 800f1c0:	f024 0403 	bic.w	r4, r4, #3
 800f1c4:	42a0      	cmp	r0, r4
 800f1c6:	d0e3      	beq.n	800f190 <_malloc_r+0x64>
 800f1c8:	1a21      	subs	r1, r4, r0
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	f000 f82e 	bl	800f22c <_sbrk_r>
 800f1d0:	3001      	adds	r0, #1
 800f1d2:	d1dd      	bne.n	800f190 <_malloc_r+0x64>
 800f1d4:	e7cf      	b.n	800f176 <_malloc_r+0x4a>
 800f1d6:	bf00      	nop
 800f1d8:	20008dbc 	.word	0x20008dbc
 800f1dc:	20008dc0 	.word	0x20008dc0

0800f1e0 <_realloc_r>:
 800f1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e2:	4607      	mov	r7, r0
 800f1e4:	4614      	mov	r4, r2
 800f1e6:	460e      	mov	r6, r1
 800f1e8:	b921      	cbnz	r1, 800f1f4 <_realloc_r+0x14>
 800f1ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f1ee:	4611      	mov	r1, r2
 800f1f0:	f7ff bf9c 	b.w	800f12c <_malloc_r>
 800f1f4:	b922      	cbnz	r2, 800f200 <_realloc_r+0x20>
 800f1f6:	f7ff ff49 	bl	800f08c <_free_r>
 800f1fa:	4625      	mov	r5, r4
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f200:	f000 f830 	bl	800f264 <_malloc_usable_size_r>
 800f204:	42a0      	cmp	r0, r4
 800f206:	d20f      	bcs.n	800f228 <_realloc_r+0x48>
 800f208:	4621      	mov	r1, r4
 800f20a:	4638      	mov	r0, r7
 800f20c:	f7ff ff8e 	bl	800f12c <_malloc_r>
 800f210:	4605      	mov	r5, r0
 800f212:	2800      	cmp	r0, #0
 800f214:	d0f2      	beq.n	800f1fc <_realloc_r+0x1c>
 800f216:	4631      	mov	r1, r6
 800f218:	4622      	mov	r2, r4
 800f21a:	f7ff fba9 	bl	800e970 <memcpy>
 800f21e:	4631      	mov	r1, r6
 800f220:	4638      	mov	r0, r7
 800f222:	f7ff ff33 	bl	800f08c <_free_r>
 800f226:	e7e9      	b.n	800f1fc <_realloc_r+0x1c>
 800f228:	4635      	mov	r5, r6
 800f22a:	e7e7      	b.n	800f1fc <_realloc_r+0x1c>

0800f22c <_sbrk_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	4d06      	ldr	r5, [pc, #24]	; (800f248 <_sbrk_r+0x1c>)
 800f230:	2300      	movs	r3, #0
 800f232:	4604      	mov	r4, r0
 800f234:	4608      	mov	r0, r1
 800f236:	602b      	str	r3, [r5, #0]
 800f238:	f7f3 fcfe 	bl	8002c38 <_sbrk>
 800f23c:	1c43      	adds	r3, r0, #1
 800f23e:	d102      	bne.n	800f246 <_sbrk_r+0x1a>
 800f240:	682b      	ldr	r3, [r5, #0]
 800f242:	b103      	cbz	r3, 800f246 <_sbrk_r+0x1a>
 800f244:	6023      	str	r3, [r4, #0]
 800f246:	bd38      	pop	{r3, r4, r5, pc}
 800f248:	20009b50 	.word	0x20009b50

0800f24c <__malloc_lock>:
 800f24c:	4801      	ldr	r0, [pc, #4]	; (800f254 <__malloc_lock+0x8>)
 800f24e:	f000 b811 	b.w	800f274 <__retarget_lock_acquire_recursive>
 800f252:	bf00      	nop
 800f254:	20009b58 	.word	0x20009b58

0800f258 <__malloc_unlock>:
 800f258:	4801      	ldr	r0, [pc, #4]	; (800f260 <__malloc_unlock+0x8>)
 800f25a:	f000 b80c 	b.w	800f276 <__retarget_lock_release_recursive>
 800f25e:	bf00      	nop
 800f260:	20009b58 	.word	0x20009b58

0800f264 <_malloc_usable_size_r>:
 800f264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f268:	1f18      	subs	r0, r3, #4
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	bfbc      	itt	lt
 800f26e:	580b      	ldrlt	r3, [r1, r0]
 800f270:	18c0      	addlt	r0, r0, r3
 800f272:	4770      	bx	lr

0800f274 <__retarget_lock_acquire_recursive>:
 800f274:	4770      	bx	lr

0800f276 <__retarget_lock_release_recursive>:
 800f276:	4770      	bx	lr

0800f278 <_init>:
 800f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f27a:	bf00      	nop
 800f27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27e:	bc08      	pop	{r3}
 800f280:	469e      	mov	lr, r3
 800f282:	4770      	bx	lr

0800f284 <_fini>:
 800f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f286:	bf00      	nop
 800f288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f28a:	bc08      	pop	{r3}
 800f28c:	469e      	mov	lr, r3
 800f28e:	4770      	bx	lr
