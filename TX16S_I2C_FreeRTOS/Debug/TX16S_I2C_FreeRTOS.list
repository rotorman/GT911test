
TX16S_I2C_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  0800cd00  0800cd00  0001cd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2e8  0800d2e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2e8  0800d2e8  0001d2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2f0  0800d2f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2f0  0800d2f0  0001d2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2f4  0800d2f4  0001d2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d2f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009a2c  20000074  0800d36c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009aa0  0800d36c  00029aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000316ae  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d98  00000000  00000000  00051752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002670  00000000  00000000  000574f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002450  00000000  00000000  00059b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007fbb  00000000  00000000  0005bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d9a7  00000000  00000000  00063f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105c85  00000000  00000000  00091912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197597  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9d0  00000000  00000000  001975ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cce8 	.word	0x0800cce8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800cce8 	.word	0x0800cce8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96e 	b.w	800092c <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	468c      	mov	ip, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	f040 8083 	bne.w	800077e <__udivmoddi4+0x116>
 8000678:	428a      	cmp	r2, r1
 800067a:	4617      	mov	r7, r2
 800067c:	d947      	bls.n	800070e <__udivmoddi4+0xa6>
 800067e:	fab2 f282 	clz	r2, r2
 8000682:	b142      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000684:	f1c2 0020 	rsb	r0, r2, #32
 8000688:	fa24 f000 	lsr.w	r0, r4, r0
 800068c:	4091      	lsls	r1, r2
 800068e:	4097      	lsls	r7, r2
 8000690:	ea40 0c01 	orr.w	ip, r0, r1
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbbc f6f8 	udiv	r6, ip, r8
 80006a0:	fa1f fe87 	uxth.w	lr, r7
 80006a4:	fb08 c116 	mls	r1, r8, r6, ip
 80006a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ac:	fb06 f10e 	mul.w	r1, r6, lr
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ba:	f080 8119 	bcs.w	80008f0 <__udivmoddi4+0x288>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8116 	bls.w	80008f0 <__udivmoddi4+0x288>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	443b      	add	r3, r7
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006d0:	fb08 3310 	mls	r3, r8, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006dc:	45a6      	cmp	lr, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	193c      	adds	r4, r7, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8105 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006ea:	45a6      	cmp	lr, r4
 80006ec:	f240 8102 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006f0:	3802      	subs	r0, #2
 80006f2:	443c      	add	r4, r7
 80006f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006f8:	eba4 040e 	sub.w	r4, r4, lr
 80006fc:	2600      	movs	r6, #0
 80006fe:	b11d      	cbz	r5, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c5 4300 	strd	r4, r3, [r5]
 8000708:	4631      	mov	r1, r6
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	b902      	cbnz	r2, 8000712 <__udivmoddi4+0xaa>
 8000710:	deff      	udf	#255	; 0xff
 8000712:	fab2 f282 	clz	r2, r2
 8000716:	2a00      	cmp	r2, #0
 8000718:	d150      	bne.n	80007bc <__udivmoddi4+0x154>
 800071a:	1bcb      	subs	r3, r1, r7
 800071c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	2601      	movs	r6, #1
 8000726:	fbb3 fcfe 	udiv	ip, r3, lr
 800072a:	0c21      	lsrs	r1, r4, #16
 800072c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000730:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000734:	fb08 f30c 	mul.w	r3, r8, ip
 8000738:	428b      	cmp	r3, r1
 800073a:	d907      	bls.n	800074c <__udivmoddi4+0xe4>
 800073c:	1879      	adds	r1, r7, r1
 800073e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0xe2>
 8000744:	428b      	cmp	r3, r1
 8000746:	f200 80e9 	bhi.w	800091c <__udivmoddi4+0x2b4>
 800074a:	4684      	mov	ip, r0
 800074c:	1ac9      	subs	r1, r1, r3
 800074e:	b2a3      	uxth	r3, r4
 8000750:	fbb1 f0fe 	udiv	r0, r1, lr
 8000754:	fb0e 1110 	mls	r1, lr, r0, r1
 8000758:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800075c:	fb08 f800 	mul.w	r8, r8, r0
 8000760:	45a0      	cmp	r8, r4
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x10c>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 33ff 	add.w	r3, r0, #4294967295
 800076a:	d202      	bcs.n	8000772 <__udivmoddi4+0x10a>
 800076c:	45a0      	cmp	r8, r4
 800076e:	f200 80d9 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 8000772:	4618      	mov	r0, r3
 8000774:	eba4 0408 	sub.w	r4, r4, r8
 8000778:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800077c:	e7bf      	b.n	80006fe <__udivmoddi4+0x96>
 800077e:	428b      	cmp	r3, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x12e>
 8000782:	2d00      	cmp	r5, #0
 8000784:	f000 80b1 	beq.w	80008ea <__udivmoddi4+0x282>
 8000788:	2600      	movs	r6, #0
 800078a:	e9c5 0100 	strd	r0, r1, [r5]
 800078e:	4630      	mov	r0, r6
 8000790:	4631      	mov	r1, r6
 8000792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000796:	fab3 f683 	clz	r6, r3
 800079a:	2e00      	cmp	r6, #0
 800079c:	d14a      	bne.n	8000834 <__udivmoddi4+0x1cc>
 800079e:	428b      	cmp	r3, r1
 80007a0:	d302      	bcc.n	80007a8 <__udivmoddi4+0x140>
 80007a2:	4282      	cmp	r2, r0
 80007a4:	f200 80b8 	bhi.w	8000918 <__udivmoddi4+0x2b0>
 80007a8:	1a84      	subs	r4, r0, r2
 80007aa:	eb61 0103 	sbc.w	r1, r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	468c      	mov	ip, r1
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d0a8      	beq.n	8000708 <__udivmoddi4+0xa0>
 80007b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ba:	e7a5      	b.n	8000708 <__udivmoddi4+0xa0>
 80007bc:	f1c2 0320 	rsb	r3, r2, #32
 80007c0:	fa20 f603 	lsr.w	r6, r0, r3
 80007c4:	4097      	lsls	r7, r2
 80007c6:	fa01 f002 	lsl.w	r0, r1, r2
 80007ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ce:	40d9      	lsrs	r1, r3
 80007d0:	4330      	orrs	r0, r6
 80007d2:	0c03      	lsrs	r3, r0, #16
 80007d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007d8:	fa1f f887 	uxth.w	r8, r7
 80007dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80007e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e4:	fb06 f108 	mul.w	r1, r6, r8
 80007e8:	4299      	cmp	r1, r3
 80007ea:	fa04 f402 	lsl.w	r4, r4, r2
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x19c>
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f6:	f080 808d 	bcs.w	8000914 <__udivmoddi4+0x2ac>
 80007fa:	4299      	cmp	r1, r3
 80007fc:	f240 808a 	bls.w	8000914 <__udivmoddi4+0x2ac>
 8000800:	3e02      	subs	r6, #2
 8000802:	443b      	add	r3, r7
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	b281      	uxth	r1, r0
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000814:	fb00 f308 	mul.w	r3, r0, r8
 8000818:	428b      	cmp	r3, r1
 800081a:	d907      	bls.n	800082c <__udivmoddi4+0x1c4>
 800081c:	1879      	adds	r1, r7, r1
 800081e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000822:	d273      	bcs.n	800090c <__udivmoddi4+0x2a4>
 8000824:	428b      	cmp	r3, r1
 8000826:	d971      	bls.n	800090c <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	4439      	add	r1, r7
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000832:	e778      	b.n	8000726 <__udivmoddi4+0xbe>
 8000834:	f1c6 0c20 	rsb	ip, r6, #32
 8000838:	fa03 f406 	lsl.w	r4, r3, r6
 800083c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000840:	431c      	orrs	r4, r3
 8000842:	fa20 f70c 	lsr.w	r7, r0, ip
 8000846:	fa01 f306 	lsl.w	r3, r1, r6
 800084a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800084e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000852:	431f      	orrs	r7, r3
 8000854:	0c3b      	lsrs	r3, r7, #16
 8000856:	fbb1 f9fe 	udiv	r9, r1, lr
 800085a:	fa1f f884 	uxth.w	r8, r4
 800085e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000862:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000866:	fb09 fa08 	mul.w	sl, r9, r8
 800086a:	458a      	cmp	sl, r1
 800086c:	fa02 f206 	lsl.w	r2, r2, r6
 8000870:	fa00 f306 	lsl.w	r3, r0, r6
 8000874:	d908      	bls.n	8000888 <__udivmoddi4+0x220>
 8000876:	1861      	adds	r1, r4, r1
 8000878:	f109 30ff 	add.w	r0, r9, #4294967295
 800087c:	d248      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 800087e:	458a      	cmp	sl, r1
 8000880:	d946      	bls.n	8000910 <__udivmoddi4+0x2a8>
 8000882:	f1a9 0902 	sub.w	r9, r9, #2
 8000886:	4421      	add	r1, r4
 8000888:	eba1 010a 	sub.w	r1, r1, sl
 800088c:	b2bf      	uxth	r7, r7
 800088e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000892:	fb0e 1110 	mls	r1, lr, r0, r1
 8000896:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800089a:	fb00 f808 	mul.w	r8, r0, r8
 800089e:	45b8      	cmp	r8, r7
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x24a>
 80008a2:	19e7      	adds	r7, r4, r7
 80008a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a8:	d22e      	bcs.n	8000908 <__udivmoddi4+0x2a0>
 80008aa:	45b8      	cmp	r8, r7
 80008ac:	d92c      	bls.n	8000908 <__udivmoddi4+0x2a0>
 80008ae:	3802      	subs	r0, #2
 80008b0:	4427      	add	r7, r4
 80008b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008b6:	eba7 0708 	sub.w	r7, r7, r8
 80008ba:	fba0 8902 	umull	r8, r9, r0, r2
 80008be:	454f      	cmp	r7, r9
 80008c0:	46c6      	mov	lr, r8
 80008c2:	4649      	mov	r1, r9
 80008c4:	d31a      	bcc.n	80008fc <__udivmoddi4+0x294>
 80008c6:	d017      	beq.n	80008f8 <__udivmoddi4+0x290>
 80008c8:	b15d      	cbz	r5, 80008e2 <__udivmoddi4+0x27a>
 80008ca:	ebb3 020e 	subs.w	r2, r3, lr
 80008ce:	eb67 0701 	sbc.w	r7, r7, r1
 80008d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008d6:	40f2      	lsrs	r2, r6
 80008d8:	ea4c 0202 	orr.w	r2, ip, r2
 80008dc:	40f7      	lsrs	r7, r6
 80008de:	e9c5 2700 	strd	r2, r7, [r5]
 80008e2:	2600      	movs	r6, #0
 80008e4:	4631      	mov	r1, r6
 80008e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e70b      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e9      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6fd      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008f8:	4543      	cmp	r3, r8
 80008fa:	d2e5      	bcs.n	80008c8 <__udivmoddi4+0x260>
 80008fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000900:	eb69 0104 	sbc.w	r1, r9, r4
 8000904:	3801      	subs	r0, #1
 8000906:	e7df      	b.n	80008c8 <__udivmoddi4+0x260>
 8000908:	4608      	mov	r0, r1
 800090a:	e7d2      	b.n	80008b2 <__udivmoddi4+0x24a>
 800090c:	4660      	mov	r0, ip
 800090e:	e78d      	b.n	800082c <__udivmoddi4+0x1c4>
 8000910:	4681      	mov	r9, r0
 8000912:	e7b9      	b.n	8000888 <__udivmoddi4+0x220>
 8000914:	4666      	mov	r6, ip
 8000916:	e775      	b.n	8000804 <__udivmoddi4+0x19c>
 8000918:	4630      	mov	r0, r6
 800091a:	e74a      	b.n	80007b2 <__udivmoddi4+0x14a>
 800091c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000920:	4439      	add	r1, r7
 8000922:	e713      	b.n	800074c <__udivmoddi4+0xe4>
 8000924:	3802      	subs	r0, #2
 8000926:	443c      	add	r4, r7
 8000928:	e724      	b.n	8000774 <__udivmoddi4+0x10c>
 800092a:	bf00      	nop

0800092c <__aeabi_idiv0>:
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop

08000930 <serialPrintf>:
#define CRLF "\r\n"

#define PRINTF_BUFFER_SIZE    128

void serialPrintf(const char * format, ...)
{
 8000930:	b40f      	push	{r0, r1, r2, r3}
 8000932:	b590      	push	{r4, r7, lr}
 8000934:	b0a5      	sub	sp, #148	; 0x94
 8000936:	af00      	add	r7, sp, #0
	va_list arglist;
	char tmp[PRINTF_BUFFER_SIZE + 1];

	snprintf(tmp, PRINTF_BUFFER_SIZE, "+%05lums: ", HAL_GetTick());
 8000938:	f002 f8e4 	bl	8002b04 <HAL_GetTick>
 800093c:	4603      	mov	r3, r0
 800093e:	1d38      	adds	r0, r7, #4
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <serialPrintf+0x7c>)
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	f00b fd62 	bl	800c40c <sniprintf>
	va_start(arglist, format);
 8000948:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800094c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	vsnprintf(tmp + strlen(tmp), PRINTF_BUFFER_SIZE - strlen(tmp), format, arglist);
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fc56 	bl	8000204 <strlen>
 8000958:	4602      	mov	r2, r0
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	189c      	adds	r4, r3, r2
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fc4f 	bl	8000204 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 800096c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000970:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000974:	4620      	mov	r0, r4
 8000976:	f00b fda9 	bl	800c4cc <vsniprintf>
	tmp[PRINTF_BUFFER_SIZE] = '\0';
 800097a:	2300      	movs	r3, #0
 800097c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	va_end(arglist);

	const char *t = tmp;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	HAL_UART_Transmit(&huart3, (uint8_t *) t, strlen(t), 10);
 8000986:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800098a:	f7ff fc3b 	bl	8000204 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	230a      	movs	r3, #10
 8000994:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <serialPrintf+0x80>)
 800099a:	f006 fd9a 	bl	80074d2 <HAL_UART_Transmit>
}
 800099e:	bf00      	nop
 80009a0:	3794      	adds	r7, #148	; 0x94
 80009a2:	46bd      	mov	sp, r7
 80009a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009a8:	b004      	add	sp, #16
 80009aa:	4770      	bx	lr
 80009ac:	0800cd24 	.word	0x0800cd24
 80009b0:	20008e20 	.word	0x20008e20

080009b4 <TOUCH_AF_INT_Change>:

#define debugPrintf(...) do { serialPrintf(__VA_ARGS__); } while(0)
#define TRACE(f_, ...)        debugPrintf((TRACE_TIME_FORMAT f_ CRLF), TRACE_TIME_VALUE, ##__VA_ARGS__)

void TOUCH_AF_INT_Change(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	4619      	mov	r1, r3
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <TOUCH_AF_INT_Change+0x28>)
 80009d0:	f002 fd20 	bl	8003414 <HAL_GPIO_Init>
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021c00 	.word	0x40021c00

080009e0 <TOUCH_AF_GPIOConfig>:

static void TOUCH_AF_GPIOConfig(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = TOUCH_RST_Pin;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStructure);
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <TOUCH_AF_GPIOConfig+0x5c>)
 80009fe:	f002 fd09 	bl	8003414 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <TOUCH_AF_GPIOConfig+0x5c>)
 8000a0a:	f002 fec7 	bl	800379c <HAL_GPIO_WritePin>

	GPIO_InitStructure.Pin = TOUCH_INT_Pin;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStructure);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <TOUCH_AF_GPIOConfig+0x60>)
 8000a24:	f002 fcf6 	bl	8003414 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2104      	movs	r1, #4
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <TOUCH_AF_GPIOConfig+0x60>)
 8000a2e:	f002 feb5 	bl	800379c <HAL_GPIO_WritePin>
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021400 	.word	0x40021400
 8000a40:	40021c00 	.word	0x40021c00

08000a44 <I2C_GT911_ReadRegister>:

bool I2C_GT911_ReadRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af04      	add	r7, sp, #16
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	80fb      	strh	r3, [r7, #6]
 8000a50:	4613      	mov	r3, r2
 8000a52:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Mem_Read(&hi2c1, GT911_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_16BIT, buf, len, 100) != HAL_OK)
 8000a54:	797b      	ldrb	r3, [r7, #5]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	88fa      	ldrh	r2, [r7, #6]
 8000a5a:	2164      	movs	r1, #100	; 0x64
 8000a5c:	9102      	str	r1, [sp, #8]
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2310      	movs	r3, #16
 8000a66:	2128      	movs	r1, #40	; 0x28
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <I2C_GT911_ReadRegister+0x60>)
 8000a6a:	f003 f8ef 	bl	8003c4c <HAL_I2C_Mem_Read>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d011      	beq.n	8000a98 <I2C_GT911_ReadRegister+0x54>
	{
		TRACE("I2C ERROR: GT911 ReadRegister failed");
 8000a74:	f002 f846 	bl	8002b04 <HAL_GetTick>
 8000a78:	ee07 0a90 	vmov	s15, r0
 8000a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a80:	ee17 0a90 	vmov	r0, s15
 8000a84:	f7ff fd80 	bl	8000588 <__aeabi_f2d>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <I2C_GT911_ReadRegister+0x64>)
 8000a8e:	f7ff ff4f 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000a92:	beff      	bkpt	0x00ff
		return false;
 8000a94:	2300      	movs	r3, #0
 8000a96:	e000      	b.n	8000a9a <I2C_GT911_ReadRegister+0x56>
	}
	return true;
 8000a98:	2301      	movs	r3, #1
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20008e64 	.word	0x20008e64
 8000aa8:	0800cd30 	.word	0x0800cd30

08000aac <I2C_GT911_WriteRegister>:

bool I2C_GT911_WriteRegister(uint16_t reg, uint8_t * buf, uint8_t len)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af04      	add	r7, sp, #16
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	80fb      	strh	r3, [r7, #6]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Mem_Write(&hi2c1, GT911_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_16BIT, buf, len, 100) != HAL_OK)
 8000abc:	797b      	ldrb	r3, [r7, #5]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	88fa      	ldrh	r2, [r7, #6]
 8000ac2:	2164      	movs	r1, #100	; 0x64
 8000ac4:	9102      	str	r1, [sp, #8]
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	2310      	movs	r3, #16
 8000ace:	2128      	movs	r1, #40	; 0x28
 8000ad0:	480e      	ldr	r0, [pc, #56]	; (8000b0c <I2C_GT911_WriteRegister+0x60>)
 8000ad2:	f002 ffc1 	bl	8003a58 <HAL_I2C_Mem_Write>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d011      	beq.n	8000b00 <I2C_GT911_WriteRegister+0x54>
	{
		TRACE("I2C ERROR: GT911 WriteRegister failed");
 8000adc:	f002 f812 	bl	8002b04 <HAL_GetTick>
 8000ae0:	ee07 0a90 	vmov	s15, r0
 8000ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ae8:	ee17 0a90 	vmov	r0, s15
 8000aec:	f7ff fd4c 	bl	8000588 <__aeabi_f2d>
 8000af0:	4602      	mov	r2, r0
 8000af2:	460b      	mov	r3, r1
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <I2C_GT911_WriteRegister+0x64>)
 8000af6:	f7ff ff1b 	bl	8000930 <serialPrintf>
		asm("bkpt 255");
 8000afa:	beff      	bkpt	0x00ff
		return false;
 8000afc:	2300      	movs	r3, #0
 8000afe:	e000      	b.n	8000b02 <I2C_GT911_WriteRegister+0x56>
	}
	return true;
 8000b00:	2301      	movs	r3, #1
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20008e64 	.word	0x20008e64
 8000b10:	0800cd60 	.word	0x0800cd60

08000b14 <I2C_GT911_SendConfig>:

bool I2C_GT911_SendConfig(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint8_t i = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	buf[0] = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	713b      	strb	r3, [r7, #4]
	buf[1] = 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	717b      	strb	r3, [r7, #5]
	bool bResult = true;
 8000b26:	2301      	movs	r3, #1
 8000b28:	71bb      	strb	r3, [r7, #6]

	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e009      	b.n	8000b44 <I2C_GT911_SendConfig+0x30>
		buf[0] += TOUCH_GT911_Cfg[i];//check sum
 8000b30:	793a      	ldrb	r2, [r7, #4]
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4927      	ldr	r1, [pc, #156]	; (8000bd4 <I2C_GT911_SendConfig+0xc0>)
 8000b36:	5ccb      	ldrb	r3, [r1, r3]
 8000b38:	4413      	add	r3, r2
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	713b      	strb	r3, [r7, #4]
	for (i = 0; i < sizeof(TOUCH_GT911_Cfg); i++)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	3301      	adds	r3, #1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2bb7      	cmp	r3, #183	; 0xb7
 8000b48:	d9f2      	bls.n	8000b30 <I2C_GT911_SendConfig+0x1c>

	buf[0] = (~buf[0]) + 1;
 8000b4a:	793b      	ldrb	r3, [r7, #4]
 8000b4c:	425b      	negs	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	713b      	strb	r3, [r7, #4]
	if (!I2C_GT911_WriteRegister(GT_CFGS_REG, (uint8_t *) TOUCH_GT911_Cfg, sizeof(TOUCH_GT911_Cfg)))
 8000b52:	22b8      	movs	r2, #184	; 0xb8
 8000b54:	491f      	ldr	r1, [pc, #124]	; (8000bd4 <I2C_GT911_SendConfig+0xc0>)
 8000b56:	f248 0047 	movw	r0, #32839	; 0x8047
 8000b5a:	f7ff ffa7 	bl	8000aac <I2C_GT911_WriteRegister>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f083 0301 	eor.w	r3, r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d010      	beq.n	8000b8c <I2C_GT911_SendConfig+0x78>
	{
		TRACE("GT911 ERROR: write config failed");
 8000b6a:	f001 ffcb 	bl	8002b04 <HAL_GetTick>
 8000b6e:	ee07 0a90 	vmov	s15, r0
 8000b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b76:	ee17 0a90 	vmov	r0, s15
 8000b7a:	f7ff fd05 	bl	8000588 <__aeabi_f2d>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	460b      	mov	r3, r1
 8000b82:	4815      	ldr	r0, [pc, #84]	; (8000bd8 <I2C_GT911_SendConfig+0xc4>)
 8000b84:	f7ff fed4 	bl	8000930 <serialPrintf>
		bResult = false;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	71bb      	strb	r3, [r7, #6]
	}

	if (!I2C_GT911_WriteRegister(GT_CHECK_REG, buf, 2)) //write checksum
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2202      	movs	r2, #2
 8000b90:	4619      	mov	r1, r3
 8000b92:	f248 00ff 	movw	r0, #33023	; 0x80ff
 8000b96:	f7ff ff89 	bl	8000aac <I2C_GT911_WriteRegister>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f083 0301 	eor.w	r3, r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d010      	beq.n	8000bc8 <I2C_GT911_SendConfig+0xb4>
		{
			TRACE("GT911 ERROR: write config checksum failed");
 8000ba6:	f001 ffad 	bl	8002b04 <HAL_GetTick>
 8000baa:	ee07 0a90 	vmov	s15, r0
 8000bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb2:	ee17 0a90 	vmov	r0, s15
 8000bb6:	f7ff fce7 	bl	8000588 <__aeabi_f2d>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	4807      	ldr	r0, [pc, #28]	; (8000bdc <I2C_GT911_SendConfig+0xc8>)
 8000bc0:	f7ff feb6 	bl	8000930 <serialPrintf>
			bResult = false;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	71bb      	strb	r3, [r7, #6]
		}
	return bResult;
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	0800d178 	.word	0x0800d178
 8000bd8:	0800cd90 	.word	0x0800cd90
 8000bdc:	0800cdbc 	.word	0x0800cdbc

08000be0 <touchPanelInit>:

bool touchPanelInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af02      	add	r7, sp, #8
	uint8_t tmp[4] = { 0 };
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]

	TRACE("Touchpanel init start ...");
 8000bea:	f001 ff8b 	bl	8002b04 <HAL_GetTick>
 8000bee:	ee07 0a90 	vmov	s15, r0
 8000bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf6:	ee17 0a90 	vmov	r0, s15
 8000bfa:	f7ff fcc5 	bl	8000588 <__aeabi_f2d>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	48a9      	ldr	r0, [pc, #676]	; (8000ea8 <touchPanelInit+0x2c8>)
 8000c04:	f7ff fe94 	bl	8000930 <serialPrintf>

	TOUCH_AF_GPIOConfig(); //SET RST=OUT INT=OUT INT=LOW
 8000c08:	f7ff feea 	bl	80009e0 <TOUCH_AF_GPIOConfig>
	//I2C_Init();

	TPRST_LOW();
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c12:	48a6      	ldr	r0, [pc, #664]	; (8000eac <touchPanelInit+0x2cc>)
 8000c14:	f002 fdc2 	bl	800379c <HAL_GPIO_WritePin>
	TPINT_HIGH();
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	48a4      	ldr	r0, [pc, #656]	; (8000eb0 <touchPanelInit+0x2d0>)
 8000c1e:	f002 fdbd 	bl	800379c <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(1));
 8000c22:	2001      	movs	r0, #1
 8000c24:	f008 fbfd 	bl	8009422 <osDelay>

	TPRST_HIGH();
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2e:	489f      	ldr	r0, [pc, #636]	; (8000eac <touchPanelInit+0x2cc>)
 8000c30:	f002 fdb4 	bl	800379c <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(6));
 8000c34:	2006      	movs	r0, #6
 8000c36:	f008 fbf4 	bl	8009422 <osDelay>

	TPINT_LOW();
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	489c      	ldr	r0, [pc, #624]	; (8000eb0 <touchPanelInit+0x2d0>)
 8000c40:	f002 fdac 	bl	800379c <HAL_GPIO_WritePin>
	osDelay(pdMS_TO_TICKS(55));
 8000c44:	2037      	movs	r0, #55	; 0x37
 8000c46:	f008 fbec 	bl	8009422 <osDelay>

	TOUCH_AF_INT_Change();  //Set INT INPUT INT=LOW
 8000c4a:	f7ff feb3 	bl	80009b4 <TOUCH_AF_INT_Change>

	osDelay(pdMS_TO_TICKS(50));
 8000c4e:	2032      	movs	r0, #50	; 0x32
 8000c50:	f008 fbe7 	bl	8009422 <osDelay>

	TRACE("Reading Touch registry");
 8000c54:	f001 ff56 	bl	8002b04 <HAL_GetTick>
 8000c58:	ee07 0a90 	vmov	s15, r0
 8000c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c60:	ee17 0a90 	vmov	r0, s15
 8000c64:	f7ff fc90 	bl	8000588 <__aeabi_f2d>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4891      	ldr	r0, [pc, #580]	; (8000eb4 <touchPanelInit+0x2d4>)
 8000c6e:	f7ff fe5f 	bl	8000930 <serialPrintf>
	if (!I2C_GT911_ReadRegister(GT_PID_REG, tmp, 4))
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2204      	movs	r2, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	f248 1040 	movw	r0, #33088	; 0x8140
 8000c7c:	f7ff fee2 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f083 0301 	eor.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00e      	beq.n	8000caa <touchPanelInit+0xca>
	{
		TRACE("GT911 ERROR: Product ID read failed");
 8000c8c:	f001 ff3a 	bl	8002b04 <HAL_GetTick>
 8000c90:	ee07 0a90 	vmov	s15, r0
 8000c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c98:	ee17 0a90 	vmov	r0, s15
 8000c9c:	f7ff fc74 	bl	8000588 <__aeabi_f2d>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	4884      	ldr	r0, [pc, #528]	; (8000eb8 <touchPanelInit+0x2d8>)
 8000ca6:	f7ff fe43 	bl	8000930 <serialPrintf>
	}

	if (strcmp((char *) tmp, "911") == 0)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4983      	ldr	r1, [pc, #524]	; (8000ebc <touchPanelInit+0x2dc>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fa9e 	bl	80001f0 <strcmp>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 80e1 	bne.w	8000e7e <touchPanelInit+0x29e>
	{
		TRACE("GT911 chip detected");
 8000cbc:	f001 ff22 	bl	8002b04 <HAL_GetTick>
 8000cc0:	ee07 0a90 	vmov	s15, r0
 8000cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc8:	ee17 0a90 	vmov	r0, s15
 8000ccc:	f7ff fc5c 	bl	8000588 <__aeabi_f2d>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	487a      	ldr	r0, [pc, #488]	; (8000ec0 <touchPanelInit+0x2e0>)
 8000cd6:	f7ff fe2b 	bl	8000930 <serialPrintf>
		tmp[0] = 0X02;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f248 0040 	movw	r0, #32832	; 0x8040
 8000ce8:	f7ff fee0 	bl	8000aac <I2C_GT911_WriteRegister>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f083 0301 	eor.w	r3, r3, #1
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00e      	beq.n	8000d16 <touchPanelInit+0x136>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000cf8:	f001 ff04 	bl	8002b04 <HAL_GetTick>
 8000cfc:	ee07 0a90 	vmov	s15, r0
 8000d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d04:	ee17 0a90 	vmov	r0, s15
 8000d08:	f7ff fc3e 	bl	8000588 <__aeabi_f2d>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	486c      	ldr	r0, [pc, #432]	; (8000ec4 <touchPanelInit+0x2e4>)
 8000d12:	f7ff fe0d 	bl	8000930 <serialPrintf>
		}
		if (!I2C_GT911_ReadRegister(GT_CFGS_REG, tmp, 1))
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f248 0047 	movw	r0, #32839	; 0x8047
 8000d20:	f7ff fe90 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00e      	beq.n	8000d4e <touchPanelInit+0x16e>
		{
			TRACE("GT911 ERROR: configuration register read failed");
 8000d30:	f001 fee8 	bl	8002b04 <HAL_GetTick>
 8000d34:	ee07 0a90 	vmov	s15, r0
 8000d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3c:	ee17 0a90 	vmov	r0, s15
 8000d40:	f7ff fc22 	bl	8000588 <__aeabi_f2d>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	485f      	ldr	r0, [pc, #380]	; (8000ec8 <touchPanelInit+0x2e8>)
 8000d4a:	f7ff fdf1 	bl	8000930 <serialPrintf>
		}

		TRACE("Chip config Ver:%x", tmp[0]);
 8000d4e:	f001 fed9 	bl	8002b04 <HAL_GetTick>
 8000d52:	ee07 0a90 	vmov	s15, r0
 8000d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5a:	ee17 0a90 	vmov	r0, s15
 8000d5e:	f7ff fc13 	bl	8000588 <__aeabi_f2d>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	7939      	ldrb	r1, [r7, #4]
 8000d68:	9100      	str	r1, [sp, #0]
 8000d6a:	4858      	ldr	r0, [pc, #352]	; (8000ecc <touchPanelInit+0x2ec>)
 8000d6c:	f7ff fde0 	bl	8000930 <serialPrintf>
		if (tmp[0] <= GT911_CFG_NUMER)  //Config ver
 8000d70:	793b      	ldrb	r3, [r7, #4]
 8000d72:	2b6c      	cmp	r3, #108	; 0x6c
 8000d74:	d827      	bhi.n	8000dc6 <touchPanelInit+0x1e6>
		{
			TRACE("Sending new config %d", GT911_CFG_NUMER);
 8000d76:	f001 fec5 	bl	8002b04 <HAL_GetTick>
 8000d7a:	ee07 0a90 	vmov	s15, r0
 8000d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d82:	ee17 0a90 	vmov	r0, s15
 8000d86:	f7ff fbff 	bl	8000588 <__aeabi_f2d>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	216c      	movs	r1, #108	; 0x6c
 8000d90:	9100      	str	r1, [sp, #0]
 8000d92:	484f      	ldr	r0, [pc, #316]	; (8000ed0 <touchPanelInit+0x2f0>)
 8000d94:	f7ff fdcc 	bl	8000930 <serialPrintf>
			if (!I2C_GT911_SendConfig())
 8000d98:	f7ff febc 	bl	8000b14 <I2C_GT911_SendConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f083 0301 	eor.w	r3, r3, #1
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00e      	beq.n	8000dc6 <touchPanelInit+0x1e6>
			{
				TRACE("GT911 ERROR: sending configration failed");
 8000da8:	f001 feac 	bl	8002b04 <HAL_GetTick>
 8000dac:	ee07 0a90 	vmov	s15, r0
 8000db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db4:	ee17 0a90 	vmov	r0, s15
 8000db8:	f7ff fbe6 	bl	8000588 <__aeabi_f2d>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4844      	ldr	r0, [pc, #272]	; (8000ed4 <touchPanelInit+0x2f4>)
 8000dc2:	f7ff fdb5 	bl	8000930 <serialPrintf>
			}
		}

		if (!I2C_GT911_ReadRegister(GT911_FIRMWARE_VERSION_REG, tmp, 2))
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2202      	movs	r2, #2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f248 1044 	movw	r0, #33092	; 0x8144
 8000dd0:	f7ff fe38 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f083 0301 	eor.w	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00f      	beq.n	8000e00 <touchPanelInit+0x220>
		{
			TRACE("GT911 ERROR: reading firmware version failed");
 8000de0:	f001 fe90 	bl	8002b04 <HAL_GetTick>
 8000de4:	ee07 0a90 	vmov	s15, r0
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	ee17 0a90 	vmov	r0, s15
 8000df0:	f7ff fbca 	bl	8000588 <__aeabi_f2d>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4837      	ldr	r0, [pc, #220]	; (8000ed8 <touchPanelInit+0x2f8>)
 8000dfa:	f7ff fd99 	bl	8000930 <serialPrintf>
 8000dfe:	e01b      	b.n	8000e38 <touchPanelInit+0x258>
		}
		else
		{
			touchGT911fwver = (tmp[1] << 8) + tmp[0];
 8000e00:	797b      	ldrb	r3, [r7, #5]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	793b      	ldrb	r3, [r7, #4]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4413      	add	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <touchPanelInit+0x2fc>)
 8000e12:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 FW version: %u", touchGT911fwver);
 8000e14:	f001 fe76 	bl	8002b04 <HAL_GetTick>
 8000e18:	ee07 0a90 	vmov	s15, r0
 8000e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e20:	ee17 0a90 	vmov	r0, s15
 8000e24:	f7ff fbb0 	bl	8000588 <__aeabi_f2d>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	492b      	ldr	r1, [pc, #172]	; (8000edc <touchPanelInit+0x2fc>)
 8000e2e:	8809      	ldrh	r1, [r1, #0]
 8000e30:	9100      	str	r1, [sp, #0]
 8000e32:	482b      	ldr	r0, [pc, #172]	; (8000ee0 <touchPanelInit+0x300>)
 8000e34:	f7ff fd7c 	bl	8000930 <serialPrintf>
		}

		osDelay(pdMS_TO_TICKS(10));
 8000e38:	200a      	movs	r0, #10
 8000e3a:	f008 faf2 	bl	8009422 <osDelay>

		tmp[0] = 0X00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	713b      	strb	r3, [r7, #4]
		if (!I2C_GT911_WriteRegister(GT_CTRL_REG, tmp, 1))  //end reset
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2201      	movs	r2, #1
 8000e46:	4619      	mov	r1, r3
 8000e48:	f248 0040 	movw	r0, #32832	; 0x8040
 8000e4c:	f7ff fe2e 	bl	8000aac <I2C_GT911_WriteRegister>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f083 0301 	eor.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d00e      	beq.n	8000e7a <touchPanelInit+0x29a>
		{
			TRACE("GT911 ERROR: write to control register failed");
 8000e5c:	f001 fe52 	bl	8002b04 <HAL_GetTick>
 8000e60:	ee07 0a90 	vmov	s15, r0
 8000e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e68:	ee17 0a90 	vmov	r0, s15
 8000e6c:	f7ff fb8c 	bl	8000588 <__aeabi_f2d>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <touchPanelInit+0x2e4>)
 8000e76:	f7ff fd5b 	bl	8000930 <serialPrintf>
		}
		// touchGT911Flag = true;

		//TOUCH_AF_ExtiConfig();

		return true;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <touchPanelInit+0x2be>
	}
	TRACE("GT911 chip NOT FOUND");
 8000e7e:	f001 fe41 	bl	8002b04 <HAL_GetTick>
 8000e82:	ee07 0a90 	vmov	s15, r0
 8000e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e8a:	ee17 0a90 	vmov	r0, s15
 8000e8e:	f7ff fb7b 	bl	8000588 <__aeabi_f2d>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <touchPanelInit+0x304>)
 8000e98:	f7ff fd4a 	bl	8000930 <serialPrintf>
	return false;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	0800cdf0 	.word	0x0800cdf0
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40021c00 	.word	0x40021c00
 8000eb4:	0800ce14 	.word	0x0800ce14
 8000eb8:	0800ce34 	.word	0x0800ce34
 8000ebc:	0800ce60 	.word	0x0800ce60
 8000ec0:	0800ce64 	.word	0x0800ce64
 8000ec4:	0800ce80 	.word	0x0800ce80
 8000ec8:	0800ceb8 	.word	0x0800ceb8
 8000ecc:	0800cef0 	.word	0x0800cef0
 8000ed0:	0800cf0c 	.word	0x0800cf0c
 8000ed4:	0800cf2c 	.word	0x0800cf2c
 8000ed8:	0800cf60 	.word	0x0800cf60
 8000edc:	20000090 	.word	0x20000090
 8000ee0:	0800cf98 	.word	0x0800cf98
 8000ee4:	0800cfb8 	.word	0x0800cfb8

08000ee8 <touchPanelDeInit>:

void touchPanelDeInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	//TOUCH_AF_ExtiStop();
	//touchGT911Flag = false;
	TRACE("touchPanelDeInit()");
 8000eec:	f001 fe0a 	bl	8002b04 <HAL_GetTick>
 8000ef0:	ee07 0a90 	vmov	s15, r0
 8000ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef8:	ee17 0a90 	vmov	r0, s15
 8000efc:	f7ff fb44 	bl	8000588 <__aeabi_f2d>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <touchPanelDeInit+0x28>)
 8000f06:	f7ff fd13 	bl	8000930 <serialPrintf>
	asm("bkpt 255");
 8000f0a:	beff      	bkpt	0x00ff
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	0800cfd8 	.word	0x0800cfd8

08000f14 <touchPanelRead>:

void touchPanelRead()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af02      	add	r7, sp, #8
	uint8_t state = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	70bb      	strb	r3, [r7, #2]
	// if (!touchEventOccured)
	//   return;

	// touchEventOccured = false;

	uint32_t startReadStatus = HAL_GetTick();
 8000f1e:	f001 fdf1 	bl	8002b04 <HAL_GetTick>
 8000f22:	6078      	str	r0, [r7, #4]
	do {
		if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG, &state, 1)) {
 8000f24:	1cbb      	adds	r3, r7, #2
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f248 104e 	movw	r0, #33102	; 0x814e
 8000f2e:	f7ff fd89 	bl	8000a44 <I2C_GT911_ReadRegister>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f083 0301 	eor.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d028      	beq.n	8000f90 <touchPanelRead+0x7c>
			HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2104      	movs	r1, #4
 8000f42:	48b7      	ldr	r0, [pc, #732]	; (8001220 <touchPanelRead+0x30c>)
 8000f44:	f002 fc2a 	bl	800379c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	48b4      	ldr	r0, [pc, #720]	; (8001220 <touchPanelRead+0x30c>)
 8000f4e:	f002 fc25 	bl	800379c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2120      	movs	r1, #32
 8000f56:	48b2      	ldr	r0, [pc, #712]	; (8001220 <touchPanelRead+0x30c>)
 8000f58:	f002 fc20 	bl	800379c <HAL_GPIO_WritePin>
			touchGT911hiccups++;
 8000f5c:	4bb1      	ldr	r3, [pc, #708]	; (8001224 <touchPanelRead+0x310>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4baf      	ldr	r3, [pc, #700]	; (8001224 <touchPanelRead+0x310>)
 8000f66:	801a      	strh	r2, [r3, #0]
			TRACE("GT911 I2C read XY error");
 8000f68:	f001 fdcc 	bl	8002b04 <HAL_GetTick>
 8000f6c:	ee07 0a90 	vmov	s15, r0
 8000f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f74:	ee17 0a90 	vmov	r0, s15
 8000f78:	f7ff fb06 	bl	8000588 <__aeabi_f2d>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	460b      	mov	r3, r1
 8000f80:	48a9      	ldr	r0, [pc, #676]	; (8001228 <touchPanelRead+0x314>)
 8000f82:	f7ff fcd5 	bl	8000930 <serialPrintf>
			touchPanelDeInit();
 8000f86:	f7ff ffaf 	bl	8000ee8 <touchPanelDeInit>
			touchPanelInit();
 8000f8a:	f7ff fe29 	bl	8000be0 <touchPanelInit>
			return;
 8000f8e:	e18d      	b.n	80012ac <touchPanelRead+0x398>
		}

		if (state & 0x80u) {
 8000f90:	78bb      	ldrb	r3, [r7, #2]
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <touchPanelRead+0x9a>
			// ready
			break;
		}
		HAL_Delay(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f001 fdbf 	bl	8002b1c <HAL_Delay>
	} while (HAL_GetTick() - startReadStatus < GT911_TIMEOUT);
 8000f9e:	f001 fdb1 	bl	8002b04 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d9bb      	bls.n	8000f24 <touchPanelRead+0x10>
 8000fac:	e000      	b.n	8000fb0 <touchPanelRead+0x9c>
			break;
 8000fae:	bf00      	nop

	TRACE("touch state = 0x%x", state);
 8000fb0:	f001 fda8 	bl	8002b04 <HAL_GetTick>
 8000fb4:	ee07 0a90 	vmov	s15, r0
 8000fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fbc:	ee17 0a90 	vmov	r0, s15
 8000fc0:	f7ff fae2 	bl	8000588 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	78b9      	ldrb	r1, [r7, #2]
 8000fca:	9100      	str	r1, [sp, #0]
 8000fcc:	4897      	ldr	r0, [pc, #604]	; (800122c <touchPanelRead+0x318>)
 8000fce:	f7ff fcaf 	bl	8000930 <serialPrintf>
	if (state & 0x80u) {
 8000fd2:	78bb      	ldrb	r3, [r7, #2]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f280 80c2 	bge.w	8001160 <touchPanelRead+0x24c>
		uint8_t pointsCount = (state & 0x0Fu);
 8000fdc:	78bb      	ldrb	r3, [r7, #2]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	70fb      	strb	r3, [r7, #3]

		if (pointsCount > 0 && pointsCount <= GT911_MAX_TP) {
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80a1 	beq.w	800112e <touchPanelRead+0x21a>
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	f200 809d 	bhi.w	800112e <touchPanelRead+0x21a>
			if (!I2C_GT911_ReadRegister(GT911_READ_XY_REG + 1, touchData.data, pointsCount * sizeof(TouchPoint)))
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	498b      	ldr	r1, [pc, #556]	; (8001230 <touchPanelRead+0x31c>)
 8001004:	f248 104f 	movw	r0, #33103	; 0x814f
 8001008:	f7ff fd1c 	bl	8000a44 <I2C_GT911_ReadRegister>
 800100c:	4603      	mov	r3, r0
 800100e:	f083 0301 	eor.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d028      	beq.n	800106a <touchPanelRead+0x156>
			{
				HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2104      	movs	r1, #4
 800101c:	4880      	ldr	r0, [pc, #512]	; (8001220 <touchPanelRead+0x30c>)
 800101e:	f002 fbbd 	bl	800379c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2110      	movs	r1, #16
 8001026:	487e      	ldr	r0, [pc, #504]	; (8001220 <touchPanelRead+0x30c>)
 8001028:	f002 fbb8 	bl	800379c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2120      	movs	r1, #32
 8001030:	487b      	ldr	r0, [pc, #492]	; (8001220 <touchPanelRead+0x30c>)
 8001032:	f002 fbb3 	bl	800379c <HAL_GPIO_WritePin>
				touchGT911hiccups++;
 8001036:	4b7b      	ldr	r3, [pc, #492]	; (8001224 <touchPanelRead+0x310>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b79      	ldr	r3, [pc, #484]	; (8001224 <touchPanelRead+0x310>)
 8001040:	801a      	strh	r2, [r3, #0]
				TRACE("GT911 I2C data read error");
 8001042:	f001 fd5f 	bl	8002b04 <HAL_GetTick>
 8001046:	ee07 0a90 	vmov	s15, r0
 800104a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104e:	ee17 0a90 	vmov	r0, s15
 8001052:	f7ff fa99 	bl	8000588 <__aeabi_f2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4876      	ldr	r0, [pc, #472]	; (8001234 <touchPanelRead+0x320>)
 800105c:	f7ff fc68 	bl	8000930 <serialPrintf>
				touchPanelDeInit();
 8001060:	f7ff ff42 	bl	8000ee8 <touchPanelDeInit>
				touchPanelInit();
 8001064:	f7ff fdbc 	bl	8000be0 <touchPanelInit>
				return;
 8001068:	e120      	b.n	80012ac <touchPanelRead+0x398>
			}
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 800106a:	4b73      	ldr	r3, [pc, #460]	; (8001238 <touchPanelRead+0x324>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <touchPanelRead+0x16e>
 8001072:	4b71      	ldr	r3, [pc, #452]	; (8001238 <touchPanelRead+0x324>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d003      	beq.n	8001082 <touchPanelRead+0x16e>
 800107a:	4b6f      	ldr	r3, [pc, #444]	; (8001238 <touchPanelRead+0x324>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b04      	cmp	r3, #4
 8001080:	d117      	bne.n	80010b2 <touchPanelRead+0x19e>
			{
				touchState.event = TE_DOWN;
 8001082:	4b6d      	ldr	r3, [pc, #436]	; (8001238 <touchPanelRead+0x324>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
				touchState.startX = touchState.x = touchData.points[0].x;
 8001088:	4b69      	ldr	r3, [pc, #420]	; (8001230 <touchPanelRead+0x31c>)
 800108a:	885b      	ldrh	r3, [r3, #2]
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <touchPanelRead+0x324>)
 8001090:	805a      	strh	r2, [r3, #2]
 8001092:	4b69      	ldr	r3, [pc, #420]	; (8001238 <touchPanelRead+0x324>)
 8001094:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001098:	4b67      	ldr	r3, [pc, #412]	; (8001238 <touchPanelRead+0x324>)
 800109a:	80da      	strh	r2, [r3, #6]
				touchState.startY = touchState.y = touchData.points[0].y;
 800109c:	4b64      	ldr	r3, [pc, #400]	; (8001230 <touchPanelRead+0x31c>)
 800109e:	889b      	ldrh	r3, [r3, #4]
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b65      	ldr	r3, [pc, #404]	; (8001238 <touchPanelRead+0x324>)
 80010a4:	809a      	strh	r2, [r3, #4]
 80010a6:	4b64      	ldr	r3, [pc, #400]	; (8001238 <touchPanelRead+0x324>)
 80010a8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80010ac:	4b62      	ldr	r3, [pc, #392]	; (8001238 <touchPanelRead+0x324>)
 80010ae:	811a      	strh	r2, [r3, #8]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 80010b0:	e055      	b.n	800115e <touchPanelRead+0x24a>
			}
			else
			{
				touchState.deltaX = touchData.points[0].x - touchState.x;
 80010b2:	4b5f      	ldr	r3, [pc, #380]	; (8001230 <touchPanelRead+0x31c>)
 80010b4:	885a      	ldrh	r2, [r3, #2]
 80010b6:	4b60      	ldr	r3, [pc, #384]	; (8001238 <touchPanelRead+0x324>)
 80010b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b5c      	ldr	r3, [pc, #368]	; (8001238 <touchPanelRead+0x324>)
 80010c6:	815a      	strh	r2, [r3, #10]
				touchState.deltaY = touchData.points[0].y - touchState.y;
 80010c8:	4b59      	ldr	r3, [pc, #356]	; (8001230 <touchPanelRead+0x31c>)
 80010ca:	889a      	ldrh	r2, [r3, #4]
 80010cc:	4b5a      	ldr	r3, [pc, #360]	; (8001238 <touchPanelRead+0x324>)
 80010ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b57      	ldr	r3, [pc, #348]	; (8001238 <touchPanelRead+0x324>)
 80010dc:	819a      	strh	r2, [r3, #12]
				if (touchState.event == TE_SLIDE || abs(touchState.deltaX) >= SLIDE_RANGE || abs(touchState.deltaY) >= SLIDE_RANGE)
 80010de:	4b56      	ldr	r3, [pc, #344]	; (8001238 <touchPanelRead+0x324>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d015      	beq.n	8001112 <touchPanelRead+0x1fe>
 80010e6:	4b54      	ldr	r3, [pc, #336]	; (8001238 <touchPanelRead+0x324>)
 80010e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bfb8      	it	lt
 80010f0:	425b      	neglt	r3, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	2306      	movs	r3, #6
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d20a      	bcs.n	8001112 <touchPanelRead+0x1fe>
 80010fc:	4b4e      	ldr	r3, [pc, #312]	; (8001238 <touchPanelRead+0x324>)
 80010fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	bfb8      	it	lt
 8001106:	425b      	neglt	r3, r3
 8001108:	b29a      	uxth	r2, r3
 800110a:	2306      	movs	r3, #6
 800110c:	b29b      	uxth	r3, r3
 800110e:	429a      	cmp	r2, r3
 8001110:	d325      	bcc.n	800115e <touchPanelRead+0x24a>
				{
					touchState.event = TE_SLIDE;
 8001112:	4b49      	ldr	r3, [pc, #292]	; (8001238 <touchPanelRead+0x324>)
 8001114:	2203      	movs	r2, #3
 8001116:	701a      	strb	r2, [r3, #0]
					touchState.x = touchData.points[0].x;
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <touchPanelRead+0x31c>)
 800111a:	885b      	ldrh	r3, [r3, #2]
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <touchPanelRead+0x324>)
 8001120:	805a      	strh	r2, [r3, #2]
					touchState.y = touchData.points[0].y;
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <touchPanelRead+0x31c>)
 8001124:	889b      	ldrh	r3, [r3, #4]
 8001126:	b21a      	sxth	r2, r3
 8001128:	4b43      	ldr	r3, [pc, #268]	; (8001238 <touchPanelRead+0x324>)
 800112a:	809a      	strh	r2, [r3, #4]
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 800112c:	e017      	b.n	800115e <touchPanelRead+0x24a>
				}
			}
		}
		else
		{
			if (touchState.event == TE_SLIDE)
 800112e:	4b42      	ldr	r3, [pc, #264]	; (8001238 <touchPanelRead+0x324>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d103      	bne.n	800113e <touchPanelRead+0x22a>
			{
				touchState.event = TE_SLIDE_END;
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <touchPanelRead+0x324>)
 8001138:	2204      	movs	r2, #4
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e010      	b.n	8001160 <touchPanelRead+0x24c>
			}
			else if (touchState.event == TE_DOWN)
 800113e:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <touchPanelRead+0x324>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d103      	bne.n	800114e <touchPanelRead+0x23a>
			{
				touchState.event = TE_UP;
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <touchPanelRead+0x324>)
 8001148:	2202      	movs	r2, #2
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e008      	b.n	8001160 <touchPanelRead+0x24c>
			}
			else if (touchState.event != TE_SLIDE_END) {
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <touchPanelRead+0x324>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b04      	cmp	r3, #4
 8001154:	d004      	beq.n	8001160 <touchPanelRead+0x24c>
				touchState.event = TE_NONE;
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <touchPanelRead+0x324>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e000      	b.n	8001160 <touchPanelRead+0x24c>
			if (touchState.event == TE_NONE || touchState.event == TE_UP || touchState.event == TE_SLIDE_END)
 800115e:	bf00      	nop
			}
		}
	}

	uint8_t zero = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	707b      	strb	r3, [r7, #1]
	if (!I2C_GT911_WriteRegister(GT911_READ_XY_REG, &zero, 1))
 8001164:	1c7b      	adds	r3, r7, #1
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	f248 104e 	movw	r0, #33102	; 0x814e
 800116e:	f7ff fc9d 	bl	8000aac <I2C_GT911_WriteRegister>
 8001172:	4603      	mov	r3, r0
 8001174:	f083 0301 	eor.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00e      	beq.n	800119c <touchPanelRead+0x288>
	{
		TRACE("GT911 ERROR: clearing XY register failed");
 800117e:	f001 fcc1 	bl	8002b04 <HAL_GetTick>
 8001182:	ee07 0a90 	vmov	s15, r0
 8001186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118a:	ee17 0a90 	vmov	r0, s15
 800118e:	f7ff f9fb 	bl	8000588 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4829      	ldr	r0, [pc, #164]	; (800123c <touchPanelRead+0x328>)
 8001198:	f7ff fbca 	bl	8000930 <serialPrintf>
	}

	switch (touchState.event) {
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <touchPanelRead+0x324>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d873      	bhi.n	800128c <touchPanelRead+0x378>
 80011a4:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <touchPanelRead+0x298>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	08001201 	.word	0x08001201
 80011b4:	080011e1 	.word	0x080011e1
 80011b8:	0800126d 	.word	0x0800126d
 80011bc:	0800124d 	.word	0x0800124d
		case TE_NONE:
			TRACE("touch event = NONE"); break;
 80011c0:	f001 fca0 	bl	8002b04 <HAL_GetTick>
 80011c4:	ee07 0a90 	vmov	s15, r0
 80011c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011cc:	ee17 0a90 	vmov	r0, s15
 80011d0:	f7ff f9da 	bl	8000588 <__aeabi_f2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4819      	ldr	r0, [pc, #100]	; (8001240 <touchPanelRead+0x32c>)
 80011da:	f7ff fba9 	bl	8000930 <serialPrintf>
 80011de:	e065      	b.n	80012ac <touchPanelRead+0x398>
		case TE_UP:
			TRACE("touch event = UP"); break;
 80011e0:	f001 fc90 	bl	8002b04 <HAL_GetTick>
 80011e4:	ee07 0a90 	vmov	s15, r0
 80011e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ec:	ee17 0a90 	vmov	r0, s15
 80011f0:	f7ff f9ca 	bl	8000588 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4812      	ldr	r0, [pc, #72]	; (8001244 <touchPanelRead+0x330>)
 80011fa:	f7ff fb99 	bl	8000930 <serialPrintf>
 80011fe:	e055      	b.n	80012ac <touchPanelRead+0x398>
		case TE_DOWN:
			TRACE("touch event = DOWN"); break;
 8001200:	f001 fc80 	bl	8002b04 <HAL_GetTick>
 8001204:	ee07 0a90 	vmov	s15, r0
 8001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120c:	ee17 0a90 	vmov	r0, s15
 8001210:	f7ff f9ba 	bl	8000588 <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <touchPanelRead+0x334>)
 800121a:	f7ff fb89 	bl	8000930 <serialPrintf>
 800121e:	e045      	b.n	80012ac <touchPanelRead+0x398>
 8001220:	40021000 	.word	0x40021000
 8001224:	20000092 	.word	0x20000092
 8001228:	0800cff4 	.word	0x0800cff4
 800122c:	0800d014 	.word	0x0800d014
 8001230:	200093f8 	.word	0x200093f8
 8001234:	0800d030 	.word	0x0800d030
 8001238:	20009584 	.word	0x20009584
 800123c:	0800d054 	.word	0x0800d054
 8001240:	0800d088 	.word	0x0800d088
 8001244:	0800d0a4 	.word	0x0800d0a4
 8001248:	0800d0c0 	.word	0x0800d0c0
		case TE_SLIDE_END:
			TRACE("touch event = SLIDE_END"); break;
 800124c:	f001 fc5a 	bl	8002b04 <HAL_GetTick>
 8001250:	ee07 0a90 	vmov	s15, r0
 8001254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001258:	ee17 0a90 	vmov	r0, s15
 800125c:	f7ff f994 	bl	8000588 <__aeabi_f2d>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <touchPanelRead+0x3a0>)
 8001266:	f7ff fb63 	bl	8000930 <serialPrintf>
 800126a:	e01f      	b.n	80012ac <touchPanelRead+0x398>
		case TE_SLIDE:
			TRACE("touch event = SLIDE"); break;
 800126c:	f001 fc4a 	bl	8002b04 <HAL_GetTick>
 8001270:	ee07 0a90 	vmov	s15, r0
 8001274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001278:	ee17 0a90 	vmov	r0, s15
 800127c:	f7ff f984 	bl	8000588 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <touchPanelRead+0x3a4>)
 8001286:	f7ff fb53 	bl	8000930 <serialPrintf>
 800128a:	e00f      	b.n	80012ac <touchPanelRead+0x398>
		default:
			TRACE("touch event = UNKNOWN"); break;
 800128c:	f001 fc3a 	bl	8002b04 <HAL_GetTick>
 8001290:	ee07 0a90 	vmov	s15, r0
 8001294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001298:	ee17 0a90 	vmov	r0, s15
 800129c:	f7ff f974 	bl	8000588 <__aeabi_f2d>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <touchPanelRead+0x3a8>)
 80012a6:	f7ff fb43 	bl	8000930 <serialPrintf>
 80012aa:	bf00      	nop
	}
}
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0800d0dc 	.word	0x0800d0dc
 80012b8:	0800d0fc 	.word	0x0800d0fc
 80012bc:	0800d118 	.word	0x0800d118

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c4:	f001 fbe8 	bl	8002a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c8:	f000 f868 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012cc:	f000 fbdc 	bl	8001a88 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012d0:	f000 fb5e 	bl	8001990 <MX_USB_OTG_FS_PCD_Init>
  MX_FMC_Init();
 80012d4:	f000 fb8a 	bl	80019ec <MX_FMC_Init>
  MX_USART3_UART_Init();
 80012d8:	f000 fb06 	bl	80018e8 <MX_USART3_UART_Init>
  MX_LTDC_Init();
 80012dc:	f000 f99e 	bl	800161c <MX_LTDC_Init>
  MX_I2C1_Init();
 80012e0:	f000 f95a 	bl	8001598 <MX_I2C1_Init>
  MX_ADC3_Init();
 80012e4:	f000 f8dc 	bl	80014a0 <MX_ADC3_Init>
  MX_DAC_Init();
 80012e8:	f000 f92c 	bl	8001544 <MX_DAC_Init>
  MX_SDIO_SD_Init();
 80012ec:	f000 fa52 	bl	8001794 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80012f0:	f000 fa70 	bl	80017d4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80012f4:	f000 faa4 	bl	8001840 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012f8:	f000 facc 	bl	8001894 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80012fc:	f000 fb1e 	bl	800193c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001300:	f007 fc98 	bl	8008c34 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET); // Turn on power
 8001304:	2201      	movs	r2, #1
 8001306:	2102      	movs	r1, #2
 8001308:	481a      	ldr	r0, [pc, #104]	; (8001374 <main+0xb4>)
 800130a:	f002 fa47 	bl	800379c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2104      	movs	r1, #4
 8001312:	4819      	ldr	r0, [pc, #100]	; (8001378 <main+0xb8>)
 8001314:	f002 fa42 	bl	800379c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2110      	movs	r1, #16
 800131c:	4816      	ldr	r0, [pc, #88]	; (8001378 <main+0xb8>)
 800131e:	f002 fa3d 	bl	800379c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2120      	movs	r1, #32
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <main+0xb8>)
 8001328:	f002 fa38 	bl	800379c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800132c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001330:	f001 fbf4 	bl	8002b1c <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001334:	f007 ff62 	bl	80091fc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinSemI2CCB */
  BinSemI2CCBHandle = osSemaphoreNew(1, 1, &BinSemI2CCB_attributes);
 8001338:	4a10      	ldr	r2, [pc, #64]	; (800137c <main+0xbc>)
 800133a:	2101      	movs	r1, #1
 800133c:	2001      	movs	r0, #1
 800133e:	f008 f88b 	bl	8009458 <osSemaphoreNew>
 8001342:	4603      	mov	r3, r0
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <main+0xc0>)
 8001346:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <main+0xc4>)
 800134a:	2100      	movs	r1, #0
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <main+0xc8>)
 800134e:	f007 ffd6 	bl	80092fe <osThreadNew>
 8001352:	4603      	mov	r3, r0
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <main+0xcc>)
 8001356:	6013      	str	r3, [r2, #0]

  /* creation of TouchTask */
  TouchTaskHandle = osThreadNew(TouchTaskEntry, NULL, &TouchTask_attributes);
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <main+0xd0>)
 800135a:	2100      	movs	r1, #0
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <main+0xd4>)
 800135e:	f007 ffce 	bl	80092fe <osThreadNew>
 8001362:	4603      	mov	r3, r0
 8001364:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <main+0xd8>)
 8001366:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001368:	f007 ff8e 	bl	8009288 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	osDelay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f008 f858 	bl	8009422 <osDelay>
 8001372:	e7fb      	b.n	800136c <main+0xac>
 8001374:	40022400 	.word	0x40022400
 8001378:	40021000 	.word	0x40021000
 800137c:	0800d278 	.word	0x0800d278
 8001380:	20009440 	.word	0x20009440
 8001384:	0800d230 	.word	0x0800d230
 8001388:	08001f35 	.word	0x08001f35
 800138c:	20008dc4 	.word	0x20008dc4
 8001390:	0800d254 	.word	0x0800d254
 8001394:	08001f49 	.word	0x08001f49
 8001398:	20009368 	.word	0x20009368

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0a0      	sub	sp, #128	; 0x80
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013a6:	2230      	movs	r2, #48	; 0x30
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f00b f826 	bl	800c3fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2230      	movs	r2, #48	; 0x30
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00b f817 	bl	800c3fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <SystemClock_Config+0xfc>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a30      	ldr	r2, [pc, #192]	; (8001498 <SystemClock_Config+0xfc>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <SystemClock_Config+0xfc>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <SystemClock_Config+0x100>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a2a      	ldr	r2, [pc, #168]	; (800149c <SystemClock_Config+0x100>)
 80013f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b28      	ldr	r3, [pc, #160]	; (800149c <SystemClock_Config+0x100>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001406:	2301      	movs	r3, #1
 8001408:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001414:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001418:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800141a:	2306      	movs	r3, #6
 800141c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 800141e:	23a8      	movs	r3, #168	; 0xa8
 8001420:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001422:	2302      	movs	r3, #2
 8001424:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001426:	2307      	movs	r3, #7
 8001428:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fdca 	bl	8004fc8 <HAL_RCC_OscConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800143a:	f000 fded 	bl	8002018 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143e:	230f      	movs	r3, #15
 8001440:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001442:	2302      	movs	r3, #2
 8001444:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800144a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001456:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800145a:	2105      	movs	r1, #5
 800145c:	4618      	mov	r0, r3
 800145e:	f004 f82b 	bl	80054b8 <HAL_RCC_ClockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001468:	f000 fdd6 	bl	8002018 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800146c:	2308      	movs	r3, #8
 800146e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001470:	2332      	movs	r3, #50	; 0x32
 8001472:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001474:	2302      	movs	r3, #2
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4618      	mov	r0, r3
 8001482:	f004 fa1b 	bl	80058bc <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800148c:	f000 fdc4 	bl	8002018 <Error_Handler>
  }
}
 8001490:	bf00      	nop
 8001492:	3780      	adds	r7, #128	; 0x80
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_ADC3_Init+0x98>)
 80014b4:	4a21      	ldr	r2, [pc, #132]	; (800153c <MX_ADC3_Init+0x9c>)
 80014b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_ADC3_Init+0x98>)
 80014ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_ADC3_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_ADC3_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_ADC3_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_ADC3_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_ADC3_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_ADC3_Init+0x98>)
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <MX_ADC3_Init+0xa0>)
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_ADC3_Init+0x98>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_ADC3_Init+0x98>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_ADC3_Init+0x98>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_ADC3_Init+0x98>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_ADC3_Init+0x98>)
 8001502:	f001 fb2f 	bl	8002b64 <HAL_ADC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800150c:	f000 fd84 	bl	8002018 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001510:	2304      	movs	r3, #4
 8001512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_ADC3_Init+0x98>)
 8001522:	f001 fb63 	bl	8002bec <HAL_ADC_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800152c:	f000 fd74 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000936c 	.word	0x2000936c
 800153c:	40012200 	.word	0x40012200
 8001540:	0f000001 	.word	0x0f000001

08001544 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_DAC_Init+0x4c>)
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <MX_DAC_Init+0x50>)
 8001556:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <MX_DAC_Init+0x4c>)
 800155a:	f001 fe57 	bl	800320c <HAL_DAC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001564:	f000 fd58 	bl	8002018 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_DAC_Init+0x4c>)
 8001578:	f001 fe6a 	bl	8003250 <HAL_DAC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001582:	f000 fd49 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000942c 	.word	0x2000942c
 8001594:	40007400 	.word	0x40007400

08001598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_I2C1_Init+0x78>)
 800159e:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <MX_I2C1_Init+0x7c>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_I2C1_Init+0x78>)
 80015a4:	4a1c      	ldr	r2, [pc, #112]	; (8001618 <MX_I2C1_Init+0x80>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_I2C1_Init+0x78>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_I2C1_Init+0x78>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_I2C1_Init+0x78>)
 80015b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_I2C1_Init+0x78>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_I2C1_Init+0x78>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_I2C1_Init+0x78>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_I2C1_Init+0x78>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <MX_I2C1_Init+0x78>)
 80015d8:	f002 f8fa 	bl	80037d0 <HAL_I2C_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80015e2:	f000 fd19 	bl	8002018 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <MX_I2C1_Init+0x78>)
 80015ea:	f003 f8b0 	bl	800474e <HAL_I2CEx_ConfigAnalogFilter>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80015f4:	f000 fd10 	bl	8002018 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_I2C1_Init+0x78>)
 80015fc:	f003 f8e3 	bl	80047c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 8001606:	f000 fd07 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20008e64 	.word	0x20008e64
 8001614:	40005400 	.word	0x40005400
 8001618:	00061a80 	.word	0x00061a80

0800161c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b09a      	sub	sp, #104	; 0x68
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001622:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001626:	2234      	movs	r2, #52	; 0x34
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f00a fee6 	bl	800c3fc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001630:	463b      	mov	r3, r7
 8001632:	2234      	movs	r2, #52	; 0x34
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f00a fee0 	bl	800c3fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <MX_LTDC_Init+0x170>)
 800163e:	4a54      	ldr	r2, [pc, #336]	; (8001790 <MX_LTDC_Init+0x174>)
 8001640:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001642:	4b52      	ldr	r3, [pc, #328]	; (800178c <MX_LTDC_Init+0x170>)
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <MX_LTDC_Init+0x170>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800164e:	4b4f      	ldr	r3, [pc, #316]	; (800178c <MX_LTDC_Init+0x170>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001654:	4b4d      	ldr	r3, [pc, #308]	; (800178c <MX_LTDC_Init+0x170>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 2;
 800165a:	4b4c      	ldr	r3, [pc, #304]	; (800178c <MX_LTDC_Init+0x170>)
 800165c:	2202      	movs	r2, #2
 800165e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 10;
 8001660:	4b4a      	ldr	r3, [pc, #296]	; (800178c <MX_LTDC_Init+0x170>)
 8001662:	220a      	movs	r2, #10
 8001664:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <MX_LTDC_Init+0x170>)
 8001668:	222a      	movs	r2, #42	; 0x2a
 800166a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 12;
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <MX_LTDC_Init+0x170>)
 800166e:	220c      	movs	r2, #12
 8001670:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 8001672:	4b46      	ldr	r3, [pc, #280]	; (800178c <MX_LTDC_Init+0x170>)
 8001674:	f240 220a 	movw	r2, #522	; 0x20a
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 284;
 800167a:	4b44      	ldr	r3, [pc, #272]	; (800178c <MX_LTDC_Init+0x170>)
 800167c:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 8001682:	4b42      	ldr	r3, [pc, #264]	; (800178c <MX_LTDC_Init+0x170>)
 8001684:	f240 220d 	movw	r2, #525	; 0x20d
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 286;
 800168a:	4b40      	ldr	r3, [pc, #256]	; (800178c <MX_LTDC_Init+0x170>)
 800168c:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001692:	4b3e      	ldr	r3, [pc, #248]	; (800178c <MX_LTDC_Init+0x170>)
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800169a:	4b3c      	ldr	r3, [pc, #240]	; (800178c <MX_LTDC_Init+0x170>)
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80016a2:	4b3a      	ldr	r3, [pc, #232]	; (800178c <MX_LTDC_Init+0x170>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80016aa:	4838      	ldr	r0, [pc, #224]	; (800178c <MX_LTDC_Init+0x170>)
 80016ac:	f003 f8ca 	bl	8004844 <HAL_LTDC_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80016b6:	f000 fcaf 	bl	8002018 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 479;
 80016be:	f240 13df 	movw	r3, #479	; 0x1df
 80016c2:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 271;
 80016c8:	f240 130f 	movw	r3, #271	; 0x10f
 80016cc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80016ce:	2302      	movs	r3, #2
 80016d0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 80016d2:	23ff      	movs	r3, #255	; 0xff
 80016d4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80016da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016de:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016e0:	2305      	movs	r3, #5
 80016e2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 261120;
 80016e4:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 80016e8:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80016ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80016f0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016f4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	481e      	ldr	r0, [pc, #120]	; (800178c <MX_LTDC_Init+0x170>)
 8001712:	f003 f967 	bl	80049e4 <HAL_LTDC_ConfigLayer>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 800171c:	f000 fc7c 	bl	8002018 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 479;
 8001724:	f240 13df 	movw	r3, #479	; 0x1df
 8001728:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 271;
 800172e:	f240 130f 	movw	r3, #271	; 0x10f
 8001732:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001734:	2302      	movs	r3, #2
 8001736:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001744:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001746:	2305      	movs	r3, #5
 8001748:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 261120;
 800174a:	f44f 337f 	mov.w	r3, #261120	; 0x3fc00
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 8001750:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 8001756:	f44f 7388 	mov.w	r3, #272	; 0x110
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	2201      	movs	r2, #1
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_LTDC_Init+0x170>)
 8001776:	f003 f935 	bl	80049e4 <HAL_LTDC_ConfigLayer>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_LTDC_Init+0x168>
  {
    Error_Handler();
 8001780:	f000 fc4a 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3768      	adds	r7, #104	; 0x68
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200092c0 	.word	0x200092c0
 8001790:	40016800 	.word	0x40016800

08001794 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_SDIO_SD_Init+0x38>)
 800179a:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <MX_SDIO_SD_Init+0x3c>)
 800179c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_SDIO_SD_Init+0x38>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_SDIO_SD_Init+0x38>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_SDIO_SD_Init+0x38>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_SDIO_SD_Init+0x38>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <MX_SDIO_SD_Init+0x38>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <MX_SDIO_SD_Init+0x38>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	20009444 	.word	0x20009444
 80017d0:	40012c00 	.word	0x40012c00

080017d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <MX_SPI2_Init+0x64>)
 80017da:	4a18      	ldr	r2, [pc, #96]	; (800183c <MX_SPI2_Init+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_SPI2_Init+0x64>)
 80017e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_SPI2_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_SPI2_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_SPI2_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_SPI2_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_SPI2_Init+0x64>)
 8001800:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001804:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_SPI2_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_SPI2_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_SPI2_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_SPI2_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_SPI2_Init+0x64>)
 8001820:	220a      	movs	r2, #10
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_SPI2_Init+0x64>)
 8001826:	f005 fad0 	bl	8006dca <HAL_SPI_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001830:	f000 fbf2 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20008dc8 	.word	0x20008dc8
 800183c:	40003800 	.word	0x40003800

08001840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <MX_USART1_UART_Init+0x50>)
 8001848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <MX_USART1_UART_Init+0x4c>)
 800184c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_USART1_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001866:	220c      	movs	r2, #12
 8001868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <MX_USART1_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_USART1_UART_Init+0x4c>)
 8001878:	f005 fdde 	bl	8007438 <HAL_UART_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001882:	f000 fbc9 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200093b4 	.word	0x200093b4
 8001890:	40011000 	.word	0x40011000

08001894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_USART2_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART2_UART_Init+0x4c>)
 80018cc:	f005 fdb4 	bl	8007438 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f000 fb9f 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000950c 	.word	0x2000950c
 80018e4:	40004400 	.word	0x40004400

080018e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_USART3_UART_Init+0x48>)
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <MX_USART3_UART_Init+0x4c>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 400000;
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_USART3_UART_Init+0x48>)
 80018f4:	4a10      	ldr	r2, [pc, #64]	; (8001938 <MX_USART3_UART_Init+0x50>)
 80018f6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <MX_USART3_UART_Init+0x48>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART3_UART_Init+0x48>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <MX_USART3_UART_Init+0x48>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART3_UART_Init+0x48>)
 800190c:	220c      	movs	r2, #12
 800190e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <MX_USART3_UART_Init+0x48>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART3_UART_Init+0x48>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_USART3_UART_Init+0x48>)
 800191e:	f005 fd8b 	bl	8007438 <HAL_UART_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001928:	f000 fb76 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20008e20 	.word	0x20008e20
 8001934:	40004800 	.word	0x40004800
 8001938:	00061a80 	.word	0x00061a80

0800193c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <MX_USART6_UART_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_USART6_UART_Init+0x4c>)
 8001974:	f005 fd60 	bl	8007438 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800197e:	f000 fb4b 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200094c8 	.word	0x200094c8
 800198c:	40011400 	.word	0x40011400

08001990 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800199a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199e:	2204      	movs	r2, #4
 80019a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a4:	2202      	movs	r2, #2
 80019a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b0:	2202      	movs	r2, #2
 80019b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d4:	f003 f9db 	bl	8004d8e <HAL_PCD_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019de:	f000 fb1b 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20008eb8 	.word	0x20008eb8

080019ec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	615a      	str	r2, [r3, #20]
 8001a02:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <MX_FMC_Init+0x98>)
 8001a08:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a18:	2204      	movs	r2, #4
 8001a1a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a1c:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a1e:	2210      	movs	r2, #16
 8001a20:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a24:	2240      	movs	r2, #64	; 0x40
 8001a26:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001a46:	2310      	movs	r3, #16
 8001a48:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001a52:	2310      	movs	r3, #16
 8001a54:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001a56:	2310      	movs	r3, #16
 8001a58:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001a5e:	2310      	movs	r3, #16
 8001a60:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <MX_FMC_Init+0x94>)
 8001a68:	f005 f97b 	bl	8006d62 <HAL_SDRAM_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001a72:	f000 fad1 	bl	8002018 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a76:	bf00      	nop
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20009550 	.word	0x20009550
 8001a84:	a0000140 	.word	0xa0000140

08001a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	; 0x40
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa2:	4bb0      	ldr	r3, [pc, #704]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4aaf      	ldr	r2, [pc, #700]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001aa8:	f043 0310 	orr.w	r3, r3, #16
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4bad      	ldr	r3, [pc, #692]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
 8001abe:	4ba9      	ldr	r3, [pc, #676]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4aa8      	ldr	r2, [pc, #672]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4ba6      	ldr	r3, [pc, #664]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	4ba2      	ldr	r3, [pc, #648]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4aa1      	ldr	r2, [pc, #644]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b9f      	ldr	r3, [pc, #636]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	4b9b      	ldr	r3, [pc, #620]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a9a      	ldr	r2, [pc, #616]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001afc:	f043 0320 	orr.w	r3, r3, #32
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b98      	ldr	r3, [pc, #608]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	4b94      	ldr	r3, [pc, #592]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a93      	ldr	r2, [pc, #588]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b91      	ldr	r3, [pc, #580]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b8d      	ldr	r3, [pc, #564]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a8c      	ldr	r2, [pc, #560]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b8a      	ldr	r3, [pc, #552]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b86      	ldr	r3, [pc, #536]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a85      	ldr	r2, [pc, #532]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b83      	ldr	r3, [pc, #524]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b7f      	ldr	r3, [pc, #508]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a7e      	ldr	r2, [pc, #504]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b78      	ldr	r3, [pc, #480]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a77      	ldr	r2, [pc, #476]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b75      	ldr	r3, [pc, #468]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a70      	ldr	r2, [pc, #448]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a69      	ldr	r2, [pc, #420]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001bc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <MX_GPIO_Init+0x2dc>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2174      	movs	r1, #116	; 0x74
 8001bd6:	4864      	ldr	r0, [pc, #400]	; (8001d68 <MX_GPIO_Init+0x2e0>)
 8001bd8:	f001 fde0 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INTMODboot_GPIO_Port, INTMODboot_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be2:	4862      	ldr	r0, [pc, #392]	; (8001d6c <MX_GPIO_Init+0x2e4>)
 8001be4:	f001 fdda 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCDnRST_GPIO_Port, LCDnRST_Pin, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bee:	485f      	ldr	r0, [pc, #380]	; (8001d6c <MX_GPIO_Init+0x2e4>)
 8001bf0:	f001 fdd4 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bfa:	485d      	ldr	r0, [pc, #372]	; (8001d70 <MX_GPIO_Init+0x2e8>)
 8001bfc:	f001 fdce 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TESTPOINT_Pin|IntModPwr_Pin|UART3Pwr_Pin, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f248 1120 	movw	r1, #33056	; 0x8120
 8001c06:	485b      	ldr	r0, [pc, #364]	; (8001d74 <MX_GPIO_Init+0x2ec>)
 8001c08:	f001 fdc8 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AudioMute_GPIO_Port, AudioMute_Pin, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	4858      	ldr	r0, [pc, #352]	; (8001d74 <MX_GPIO_Init+0x2ec>)
 8001c12:	f001 fdc3 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	210b      	movs	r1, #11
 8001c1a:	4857      	ldr	r0, [pc, #348]	; (8001d78 <MX_GPIO_Init+0x2f0>)
 8001c1c:	f001 fdbe 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_SET);
 8001c20:	2201      	movs	r2, #1
 8001c22:	2102      	movs	r1, #2
 8001c24:	4855      	ldr	r0, [pc, #340]	; (8001d7c <MX_GPIO_Init+0x2f4>)
 8001c26:	f001 fdb9 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TrainerOut_GPIO_Port, TrainerOut_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	4854      	ldr	r0, [pc, #336]	; (8001d80 <MX_GPIO_Init+0x2f8>)
 8001c30:	f001 fdb4 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TelemDir_GPIO_Port, TelemDir_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2110      	movs	r1, #16
 8001c38:	4852      	ldr	r0, [pc, #328]	; (8001d84 <MX_GPIO_Init+0x2fc>)
 8001c3a:	f001 fdaf 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothEn_GPIO_Port, BluetoothEn_Pin, GPIO_PIN_RESET);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c44:	4850      	ldr	r0, [pc, #320]	; (8001d88 <MX_GPIO_Init+0x300>)
 8001c46:	f001 fda9 	bl	800379c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEDred_Pin LEDgreen_Pin LEDblue_Pin HAPTIC_Pin */
  GPIO_InitStruct.Pin = LEDred_Pin|LEDgreen_Pin|LEDblue_Pin|HAPTIC_Pin;
 8001c4a:	2374      	movs	r3, #116	; 0x74
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4841      	ldr	r0, [pc, #260]	; (8001d68 <MX_GPIO_Init+0x2e0>)
 8001c62:	f001 fbd7 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWEL_Pin */
  GPIO_InitStruct.Pin = SWEL_Pin;
 8001c66:	2308      	movs	r3, #8
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SWEL_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c76:	4619      	mov	r1, r3
 8001c78:	483b      	ldr	r0, [pc, #236]	; (8001d68 <MX_GPIO_Init+0x2e0>)
 8001c7a:	f001 fbcb 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYenter_Pin KEYpageprevious_Pin SWAL_Pin KEYrtn_Pin
                           KEYtelem_Pin KEYmdl_Pin KEYsys_Pin */
  GPIO_InitStruct.Pin = KEYenter_Pin|KEYpageprevious_Pin|SWAL_Pin|KEYrtn_Pin
 8001c7e:	f648 13f0 	movw	r3, #35312	; 0x89f0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |KEYtelem_Pin|KEYmdl_Pin|KEYsys_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c90:	4619      	mov	r1, r3
 8001c92:	4836      	ldr	r0, [pc, #216]	; (8001d6c <MX_GPIO_Init+0x2e4>)
 8001c94:	f001 fbbe 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYpagenext_Pin TrimLHR_Pin */
  GPIO_InitStruct.Pin = KEYpagenext_Pin|TrimLHR_Pin;
 8001c98:	f242 0310 	movw	r3, #8208	; 0x2010
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001caa:	4619      	mov	r1, r3
 8001cac:	4834      	ldr	r0, [pc, #208]	; (8001d80 <MX_GPIO_Init+0x2f8>)
 8001cae:	f001 fbb1 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTMODboot_Pin LCDnRST_Pin */
  GPIO_InitStruct.Pin = INTMODboot_Pin|LCDnRST_Pin;
 8001cb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4828      	ldr	r0, [pc, #160]	; (8001d6c <MX_GPIO_Init+0x2e4>)
 8001ccc:	f001 fba2 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_RST_Pin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4821      	ldr	r0, [pc, #132]	; (8001d70 <MX_GPIO_Init+0x2e8>)
 8001cea:	f001 fb93 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_INT_Pin PCBREV1_Pin PCBREV2_Pin ROTENCB_Pin
                           ROTENCA_Pin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin|PCBREV1_Pin|PCBREV2_Pin|ROTENCB_Pin
 8001cee:	f640 5384 	movw	r3, #3460	; 0xd84
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ROTENCA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d00:	4619      	mov	r1, r3
 8001d02:	4822      	ldr	r0, [pc, #136]	; (8001d8c <MX_GPIO_Init+0x304>)
 8001d04:	f001 fb86 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWF_Pin SWEH_Pin SWAH_Pin SWBH_Pin
                           SWI_Pin SWJ_Pin */
  GPIO_InitStruct.Pin = SWF_Pin|SWEH_Pin|SWAH_Pin|SWBH_Pin
 8001d08:	f24d 2318 	movw	r3, #53784	; 0xd218
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SWI_Pin|SWJ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d12:	2301      	movs	r3, #1
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481b      	ldr	r0, [pc, #108]	; (8001d8c <MX_GPIO_Init+0x304>)
 8001d1e:	f001 fb79 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : TESTPOINT_Pin AudioMute_Pin IntModPwr_Pin UART3Pwr_Pin */
  GPIO_InitStruct.Pin = TESTPOINT_Pin|AudioMute_Pin|IntModPwr_Pin|UART3Pwr_Pin;
 8001d22:	f248 13a0 	movw	r3, #33184	; 0x81a0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480e      	ldr	r0, [pc, #56]	; (8001d74 <MX_GPIO_Init+0x2ec>)
 8001d3c:	f001 fb6a 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : TrimLHL_Pin */
  GPIO_InitStruct.Pin = TrimLHL_Pin;
 8001d40:	2340      	movs	r3, #64	; 0x40
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TrimLHL_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d50:	4619      	mov	r1, r3
 8001d52:	4808      	ldr	r0, [pc, #32]	; (8001d74 <MX_GPIO_Init+0x2ec>)
 8001d54:	f001 fb5e 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDpresent_Pin TrainerIn_Pin */
  GPIO_InitStruct.Pin = SDpresent_Pin|TrainerIn_Pin;
 8001d58:	2360      	movs	r3, #96	; 0x60
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e015      	b.n	8001d90 <MX_GPIO_Init+0x308>
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40022400 	.word	0x40022400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d96:	4619      	mov	r1, r3
 8001d98:	4860      	ldr	r0, [pc, #384]	; (8001f1c <MX_GPIO_Init+0x494>)
 8001d9a:	f001 fb3b 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART6pwr_Pin LCDbacklight_Pin ExtModPwr_Pin */
  GPIO_InitStruct.Pin = UART6pwr_Pin|LCDbacklight_Pin|ExtModPwr_Pin;
 8001d9e:	230b      	movs	r3, #11
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db2:	4619      	mov	r1, r3
 8001db4:	485a      	ldr	r0, [pc, #360]	; (8001f20 <MX_GPIO_Init+0x498>)
 8001db6:	f001 fb2d 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRswitch_Pin */
  GPIO_InitStruct.Pin = PWRswitch_Pin;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(PWRswitch_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4855      	ldr	r0, [pc, #340]	; (8001f24 <MX_GPIO_Init+0x49c>)
 8001dce:	f001 fb21 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRon_Pin */
  GPIO_InitStruct.Pin = PWRon_Pin;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(PWRon_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	484e      	ldr	r0, [pc, #312]	; (8001f24 <MX_GPIO_Init+0x49c>)
 8001dea:	f001 fb13 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWBL_Pin TrainerDetect_Pin */
  GPIO_InitStruct.Pin = SWBL_Pin|TrainerDetect_Pin;
 8001dee:	f241 0310 	movw	r3, #4112	; 0x1010
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e00:	4619      	mov	r1, r3
 8001e02:	4847      	ldr	r0, [pc, #284]	; (8001f20 <MX_GPIO_Init+0x498>)
 8001e04:	f001 fb06 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : TrimRSD_Pin TrimRSU_Pin SWCL_Pin */
  GPIO_InitStruct.Pin = TrimRSD_Pin|TrimRSU_Pin|SWCL_Pin;
 8001e08:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4840      	ldr	r0, [pc, #256]	; (8001f20 <MX_GPIO_Init+0x498>)
 8001e1e:	f001 faf9 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWCH_Pin TrimLSU_Pin TrimR_Pin TrimRHR_Pin */
  GPIO_InitStruct.Pin = SWCH_Pin|TrimLSU_Pin|TrimR_Pin|TrimRHR_Pin;
 8001e22:	f642 0388 	movw	r3, #10376	; 0x2888
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e34:	4619      	mov	r1, r3
 8001e36:	483c      	ldr	r0, [pc, #240]	; (8001f28 <MX_GPIO_Init+0x4a0>)
 8001e38:	f001 faec 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8001e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4835      	ldr	r0, [pc, #212]	; (8001f28 <MX_GPIO_Init+0x4a0>)
 8001e52:	f001 fadf 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDH_Pin TrimLSD_Pin TrimRV_Pin TrimRVD_Pin
                           TrimLVU_Pin */
  GPIO_InitStruct.Pin = SWDH_Pin|TrimLSD_Pin|TrimRV_Pin|TrimRVD_Pin
 8001e56:	f44f 43e3 	mov.w	r3, #29056	; 0x7180
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVU_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e68:	4619      	mov	r1, r3
 8001e6a:	482e      	ldr	r0, [pc, #184]	; (8001f24 <MX_GPIO_Init+0x49c>)
 8001e6c:	f001 fad2 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWDL_Pin SWGL_Pin SWGH_Pin SWH_Pin
                           TrimLVD_Pin */
  GPIO_InitStruct.Pin = SWDL_Pin|SWGL_Pin|SWGH_Pin|SWH_Pin
 8001e70:	f241 03cc 	movw	r3, #4300	; 0x10cc
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |TrimLVD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e82:	4619      	mov	r1, r3
 8001e84:	4829      	ldr	r0, [pc, #164]	; (8001f2c <MX_GPIO_Init+0x4a4>)
 8001e86:	f001 fac5 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : TrainerOut_Pin */
  GPIO_InitStruct.Pin = TrainerOut_Pin;
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TrainerOut_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	481e      	ldr	r0, [pc, #120]	; (8001f1c <MX_GPIO_Init+0x494>)
 8001ea2:	f001 fab7 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : ExtModTX_Pin */
  GPIO_InitStruct.Pin = ExtModTX_Pin;
 8001ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ExtModTX_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481d      	ldr	r0, [pc, #116]	; (8001f30 <MX_GPIO_Init+0x4a8>)
 8001ebc:	f001 faaa 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : TelemDir_Pin */
  GPIO_InitStruct.Pin = TelemDir_Pin;
 8001ec0:	2310      	movs	r3, #16
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TelemDir_GPIO_Port, &GPIO_InitStruct);
 8001ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4814      	ldr	r0, [pc, #80]	; (8001f28 <MX_GPIO_Init+0x4a0>)
 8001ed8:	f001 fa9c 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pin : BluetoothEn_Pin */
  GPIO_InitStruct.Pin = BluetoothEn_Pin;
 8001edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(BluetoothEn_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_GPIO_Init+0x4a4>)
 8001ef6:	f001 fa8d 	bl	8003414 <HAL_GPIO_Init>

  /*Configure GPIO pins : USBchaCtrl_Pin USBchgDetect_Pin */
  GPIO_InitStruct.Pin = USBchaCtrl_Pin|USBchgDetect_Pin;
 8001efa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4807      	ldr	r0, [pc, #28]	; (8001f2c <MX_GPIO_Init+0x4a4>)
 8001f10:	f001 fa80 	bl	8003414 <HAL_GPIO_Init>

}
 8001f14:	bf00      	nop
 8001f16:	3740      	adds	r7, #64	; 0x40
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40022400 	.word	0x40022400
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021800 	.word	0x40021800
 8001f30:	40020000 	.word	0x40020000

08001f34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS (1000));
 8001f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f40:	f007 fa6f 	bl	8009422 <osDelay>
 8001f44:	e7fa      	b.n	8001f3c <StartDefaultTask+0x8>
	...

08001f48 <TouchTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TouchTaskEntry */
void TouchTaskEntry(void *argument)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TouchTaskEntry */
  osDelay(pdMS_TO_TICKS (50));
 8001f50:	2032      	movs	r0, #50	; 0x32
 8001f52:	f007 fa66 	bl	8009422 <osDelay>

  if (!touchPanelInit())
 8001f56:	f7fe fe43 	bl	8000be0 <touchPanelInit>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f083 0301 	eor.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00f      	beq.n	8001f86 <TouchTaskEntry+0x3e>
  {
    TRACE("ERROR: touchPanelInit() failed");
 8001f66:	f000 fdcd 	bl	8002b04 <HAL_GetTick>
 8001f6a:	ee07 0a90 	vmov	s15, r0
 8001f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f72:	ee17 0a90 	vmov	r0, s15
 8001f76:	f7fe fb07 	bl	8000588 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4819      	ldr	r0, [pc, #100]	; (8001fe4 <TouchTaskEntry+0x9c>)
 8001f80:	f7fe fcd6 	bl	8000930 <serialPrintf>
    asm("bkpt 255");
 8001f84:	beff      	bkpt	0x00ff
  }

  /* Infinite loop */
  for(;;)
  {
    if (HAL_GPIO_ReadPin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin) == GPIO_PIN_SET)
 8001f86:	2104      	movs	r1, #4
 8001f88:	4817      	ldr	r0, [pc, #92]	; (8001fe8 <TouchTaskEntry+0xa0>)
 8001f8a:	f001 fbef 	bl	800376c <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <TouchTaskEntry+0x50>
   	{
    	touchPanelRead();
 8001f94:	f7fe ffbe 	bl	8000f14 <touchPanelRead>
   	}

   	// Check Power-Off
   	if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	4814      	ldr	r0, [pc, #80]	; (8001fec <TouchTaskEntry+0xa4>)
 8001f9c:	f001 fbe6 	bl	800376c <HAL_GPIO_ReadPin>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d114      	bne.n	8001fd0 <TouchTaskEntry+0x88>
   	{
   		//HAL_GPIO_WritePin(LEDred_GPIO_Port, LEDred_Pin, GPIO_PIN_SET);
   		//HAL_GPIO_WritePin(LEDgreen_GPIO_Port, LEDgreen_Pin, GPIO_PIN_RESET);
   		HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2120      	movs	r1, #32
 8001faa:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <TouchTaskEntry+0xa8>)
 8001fac:	f001 fbf6 	bl	800379c <HAL_GPIO_WritePin>

   		// Check again in 1 second
   		osDelay(pdMS_TO_TICKS (1000));
 8001fb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fb4:	f007 fa35 	bl	8009422 <osDelay>
   		if (HAL_GPIO_ReadPin(PWRswitch_GPIO_Port, PWRswitch_Pin) == GPIO_PIN_RESET)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	480c      	ldr	r0, [pc, #48]	; (8001fec <TouchTaskEntry+0xa4>)
 8001fbc:	f001 fbd6 	bl	800376c <HAL_GPIO_ReadPin>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d104      	bne.n	8001fd0 <TouchTaskEntry+0x88>
   		{
   			HAL_GPIO_WritePin(PWRon_GPIO_Port, PWRon_Pin, GPIO_PIN_RESET); // Turn off power
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4808      	ldr	r0, [pc, #32]	; (8001fec <TouchTaskEntry+0xa4>)
 8001fcc:	f001 fbe6 	bl	800379c <HAL_GPIO_WritePin>
   		}
   	}
   	HAL_GPIO_WritePin(LEDblue_GPIO_Port, LEDblue_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2120      	movs	r1, #32
 8001fd4:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <TouchTaskEntry+0xa8>)
 8001fd6:	f001 fbe1 	bl	800379c <HAL_GPIO_WritePin>

   	osDelay(pdMS_TO_TICKS (50));
 8001fda:	2032      	movs	r0, #50	; 0x32
 8001fdc:	f007 fa21 	bl	8009422 <osDelay>
    if (HAL_GPIO_ReadPin(TOUCH_INT_GPIO_Port, TOUCH_INT_Pin) == GPIO_PIN_SET)
 8001fe0:	e7d1      	b.n	8001f86 <TouchTaskEntry+0x3e>
 8001fe2:	bf00      	nop
 8001fe4:	0800d138 	.word	0x0800d138
 8001fe8:	40021c00 	.word	0x40021c00
 8001fec:	40022400 	.word	0x40022400
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002006:	f000 fd69 	bl	8002adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000

08002018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002020:	e7fe      	b.n	8002020 <Error_Handler+0x8>
	...

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_MspInit+0x54>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_MspInit+0x54>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x54>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_MspInit+0x54>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_MspInit+0x54>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_MspInit+0x54>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	210f      	movs	r1, #15
 8002066:	f06f 0001 	mvn.w	r0, #1
 800206a:	f001 f8a5 	bl	80031b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a31      	ldr	r2, [pc, #196]	; (8002160 <HAL_ADC_MspInit+0xe4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d15c      	bne.n	8002158 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a21      	ldr	r2, [pc, #132]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020e0:	f043 0304 	orr.w	r3, r3, #4
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <HAL_ADC_MspInit+0xe8>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    PA0/WKUP     ------> ADC3_IN0
    PA1     ------> ADC3_IN1
    PA2     ------> ADC3_IN2
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = SLIDER1_Pin|VBattery_Pin|EX1_Pin|EX2_Pin;
 800210e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002114:	2303      	movs	r3, #3
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800211c:	f107 031c 	add.w	r3, r7, #28
 8002120:	4619      	mov	r1, r3
 8002122:	4811      	ldr	r0, [pc, #68]	; (8002168 <HAL_ADC_MspInit+0xec>)
 8002124:	f001 f976 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POT1_Pin|POS6_Pin|POT2_Pin|SLIDER2_Pin;
 8002128:	230f      	movs	r3, #15
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212c:	2303      	movs	r3, #3
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	480c      	ldr	r0, [pc, #48]	; (800216c <HAL_ADC_MspInit+0xf0>)
 800213c:	f001 f96a 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = StickLH_Pin|StickLV_Pin|StickRH_Pin|StickRV_Pin;
 8002140:	230f      	movs	r3, #15
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002144:	2303      	movs	r3, #3
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	4619      	mov	r1, r3
 8002152:	4807      	ldr	r0, [pc, #28]	; (8002170 <HAL_ADC_MspInit+0xf4>)
 8002154:	f001 f95e 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3730      	adds	r7, #48	; 0x30
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40012200 	.word	0x40012200
 8002164:	40023800 	.word	0x40023800
 8002168:	40021400 	.word	0x40021400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020000 	.word	0x40020000

08002174 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_DAC_MspInit+0x7c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d127      	bne.n	80021e6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_DAC_MspInit+0x80>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_DAC_MspInit+0x80>)
 80021a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_DAC_MspInit+0x80>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_DAC_MspInit+0x80>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_DAC_MspInit+0x80>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_DAC_MspInit+0x80>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = Audio_Pin;
 80021ce:	2310      	movs	r3, #16
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d2:	2303      	movs	r3, #3
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Audio_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_DAC_MspInit+0x84>)
 80021e2:	f001 f917 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40007400 	.word	0x40007400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000

080021fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_I2C_MspInit+0x84>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12c      	bne.n	8002278 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800223a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002240:	2312      	movs	r3, #18
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800224c:	2304      	movs	r3, #4
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <HAL_I2C_MspInit+0x8c>)
 8002258:	f001 f8dc 	bl	8003414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226a:	6413      	str	r3, [r2, #64]	; 0x40
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_I2C_MspInit+0x88>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40005400 	.word	0x40005400
 8002284:	40023800 	.word	0x40023800
 8002288:	40020400 	.word	0x40020400

0800228c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08c      	sub	sp, #48	; 0x30
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a38      	ldr	r2, [pc, #224]	; (800238c <HAL_LTDC_MspInit+0x100>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d169      	bne.n	8002382 <HAL_LTDC_MspInit+0xf6>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a36      	ldr	r2, [pc, #216]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a28      	ldr	r2, [pc, #160]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a21      	ldr	r2, [pc, #132]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 800230c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_LTDC_MspInit+0x104>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    PK4     ------> LTDC_B5
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800231e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002330:	230e      	movs	r3, #14
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	4816      	ldr	r0, [pc, #88]	; (8002394 <HAL_LTDC_MspInit+0x108>)
 800233c:	f001 f86a 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002340:	f648 637c 	movw	r3, #36476	; 0x8e7c
 8002344:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002352:	230e      	movs	r3, #14
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	480e      	ldr	r0, [pc, #56]	; (8002398 <HAL_LTDC_MspInit+0x10c>)
 800235e:	f001 f859 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002362:	23ff      	movs	r3, #255	; 0xff
 8002364:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002372:	230e      	movs	r3, #14
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	4619      	mov	r1, r3
 800237c:	4807      	ldr	r0, [pc, #28]	; (800239c <HAL_LTDC_MspInit+0x110>)
 800237e:	f001 f849 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002382:	bf00      	nop
 8002384:	3730      	adds	r7, #48	; 0x30
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40016800 	.word	0x40016800
 8002390:	40023800 	.word	0x40023800
 8002394:	40022000 	.word	0x40022000
 8002398:	40022400 	.word	0x40022400
 800239c:	40022800 	.word	0x40022800

080023a0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a28      	ldr	r2, [pc, #160]	; (8002460 <HAL_SD_MspInit+0xc0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d14a      	bne.n	8002458 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b27      	ldr	r3, [pc, #156]	; (8002464 <HAL_SD_MspInit+0xc4>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a26      	ldr	r2, [pc, #152]	; (8002464 <HAL_SD_MspInit+0xc4>)
 80023cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <HAL_SD_MspInit+0xc4>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_SD_MspInit+0xc4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <HAL_SD_MspInit+0xc4>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_SD_MspInit+0xc4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_SD_MspInit+0xc4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a18      	ldr	r2, [pc, #96]	; (8002464 <HAL_SD_MspInit+0xc4>)
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_SD_MspInit+0xc4>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002416:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800241a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002428:	230c      	movs	r3, #12
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <HAL_SD_MspInit+0xc8>)
 8002434:	f000 ffee 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002438:	2304      	movs	r3, #4
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002448:	230c      	movs	r3, #12
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	4806      	ldr	r0, [pc, #24]	; (800246c <HAL_SD_MspInit+0xcc>)
 8002454:	f000 ffde 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40012c00 	.word	0x40012c00
 8002464:	40023800 	.word	0x40023800
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00

08002470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_SPI_MspInit+0x84>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12b      	bne.n	80024ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_SPI_MspInit+0x88>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_SPI_MspInit+0x88>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_SPI_MspInit+0x88>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_SPI_MspInit+0x88>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_SPI_MspInit+0x88>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_SPI_MspInit+0x88>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    PI0     ------> SPI2_NSS
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024ca:	230f      	movs	r3, #15
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d6:	2303      	movs	r3, #3
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024da:	2305      	movs	r3, #5
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <HAL_SPI_MspInit+0x8c>)
 80024e6:	f000 ff95 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024ea:	bf00      	nop
 80024ec:	3728      	adds	r7, #40	; 0x28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40003800 	.word	0x40003800
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40022000 	.word	0x40022000

08002500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b090      	sub	sp, #64	; 0x40
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_UART_MspInit+0x1b4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12c      	bne.n	800257c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
 8002526:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 800252c:	f043 0310 	orr.w	r3, r3, #16
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b61      	ldr	r3, [pc, #388]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a5c      	ldr	r2, [pc, #368]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800255a:	23c0      	movs	r3, #192	; 0xc0
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800256a:	2307      	movs	r3, #7
 800256c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002572:	4619      	mov	r1, r3
 8002574:	4851      	ldr	r0, [pc, #324]	; (80026bc <HAL_UART_MspInit+0x1bc>)
 8002576:	f000 ff4d 	bl	8003414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800257a:	e096      	b.n	80026aa <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a4f      	ldr	r2, [pc, #316]	; (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12c      	bne.n	80025e0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b48      	ldr	r3, [pc, #288]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	4b44      	ldr	r3, [pc, #272]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a43      	ldr	r2, [pc, #268]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025be:	2360      	movs	r3, #96	; 0x60
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025ce:	2307      	movs	r3, #7
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d6:	4619      	mov	r1, r3
 80025d8:	483a      	ldr	r0, [pc, #232]	; (80026c4 <HAL_UART_MspInit+0x1c4>)
 80025da:	f000 ff1b 	bl	8003414 <HAL_GPIO_Init>
}
 80025de:	e064      	b.n	80026aa <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART3)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_UART_MspInit+0x1c8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d12d      	bne.n	8002646 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	4b32      	ldr	r3, [pc, #200]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 80025f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002622:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002634:	2307      	movs	r3, #7
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800263c:	4619      	mov	r1, r3
 800263e:	481f      	ldr	r0, [pc, #124]	; (80026bc <HAL_UART_MspInit+0x1bc>)
 8002640:	f000 fee8 	bl	8003414 <HAL_GPIO_Init>
}
 8002644:	e031      	b.n	80026aa <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a20      	ldr	r2, [pc, #128]	; (80026cc <HAL_UART_MspInit+0x1cc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d12c      	bne.n	80026aa <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	4b18      	ldr	r3, [pc, #96]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 800265a:	f043 0320 	orr.w	r3, r3, #32
 800265e:	6453      	str	r3, [r2, #68]	; 0x44
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4a10      	ldr	r2, [pc, #64]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 8002676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_UART_MspInit+0x1b8>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8002688:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800269a:	2308      	movs	r3, #8
 800269c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800269e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a2:	4619      	mov	r1, r3
 80026a4:	480a      	ldr	r0, [pc, #40]	; (80026d0 <HAL_UART_MspInit+0x1d0>)
 80026a6:	f000 feb5 	bl	8003414 <HAL_GPIO_Init>
}
 80026aa:	bf00      	nop
 80026ac:	3740      	adds	r7, #64	; 0x40
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020400 	.word	0x40020400
 80026c0:	40004400 	.word	0x40004400
 80026c4:	40020c00 	.word	0x40020c00
 80026c8:	40004800 	.word	0x40004800
 80026cc:	40011400 	.word	0x40011400
 80026d0:	40021800 	.word	0x40021800

080026d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f4:	d13f      	bne.n	8002776 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b21      	ldr	r3, [pc, #132]	; (8002780 <HAL_PCD_MspInit+0xac>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_PCD_MspInit+0xac>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b1e      	ldr	r3, [pc, #120]	; (8002780 <HAL_PCD_MspInit+0xac>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002718:	2300      	movs	r3, #0
 800271a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4619      	mov	r1, r3
 8002726:	4817      	ldr	r0, [pc, #92]	; (8002784 <HAL_PCD_MspInit+0xb0>)
 8002728:	f000 fe74 	bl	8003414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800272c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273a:	2303      	movs	r3, #3
 800273c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800273e:	230a      	movs	r3, #10
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	480e      	ldr	r0, [pc, #56]	; (8002784 <HAL_PCD_MspInit+0xb0>)
 800274a:	f000 fe63 	bl	8003414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_PCD_MspInit+0xac>)
 8002750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002752:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <HAL_PCD_MspInit+0xac>)
 8002754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002758:	6353      	str	r3, [r2, #52]	; 0x34
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_PCD_MspInit+0xac>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a07      	ldr	r2, [pc, #28]	; (8002780 <HAL_PCD_MspInit+0xac>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_PCD_MspInit+0xac>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002776:	bf00      	nop
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	40020000 	.word	0x40020000

08002788 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_FMC_MspInit+0x104>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d16f      	bne.n	8002884 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_FMC_MspInit+0x104>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_FMC_MspInit+0x108>)
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	4a37      	ldr	r2, [pc, #220]	; (8002890 <HAL_FMC_MspInit+0x108>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6393      	str	r3, [r2, #56]	; 0x38
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_FMC_MspInit+0x108>)
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PB5   ------> FMC_SDCKE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80027c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	2302      	movs	r3, #2
 80027ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027d8:	230c      	movs	r3, #12
 80027da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	4619      	mov	r1, r3
 80027e0:	482c      	ldr	r0, [pc, #176]	; (8002894 <HAL_FMC_MspInit+0x10c>)
 80027e2:	f000 fe17 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027e6:	2360      	movs	r3, #96	; 0x60
 80027e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f2:	2303      	movs	r3, #3
 80027f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027f6:	230c      	movs	r3, #12
 80027f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	4826      	ldr	r0, [pc, #152]	; (8002898 <HAL_FMC_MspInit+0x110>)
 8002800:	f000 fe08 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002804:	f248 1333 	movw	r3, #33075	; 0x8133
 8002808:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002816:	230c      	movs	r3, #12
 8002818:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	4619      	mov	r1, r3
 800281e:	481f      	ldr	r0, [pc, #124]	; (800289c <HAL_FMC_MspInit+0x114>)
 8002820:	f000 fdf8 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002824:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002828:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002836:	230c      	movs	r3, #12
 8002838:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	4619      	mov	r1, r3
 800283e:	4818      	ldr	r0, [pc, #96]	; (80028a0 <HAL_FMC_MspInit+0x118>)
 8002840:	f000 fde8 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002844:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002848:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002856:	230c      	movs	r3, #12
 8002858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4811      	ldr	r0, [pc, #68]	; (80028a4 <HAL_FMC_MspInit+0x11c>)
 8002860:	f000 fdd8 	bl	8003414 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002864:	2320      	movs	r3, #32
 8002866:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002874:	230c      	movs	r3, #12
 8002876:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	4619      	mov	r1, r3
 800287c:	480a      	ldr	r0, [pc, #40]	; (80028a8 <HAL_FMC_MspInit+0x120>)
 800287e:	f000 fdc9 	bl	8003414 <HAL_GPIO_Init>
 8002882:	e000      	b.n	8002886 <HAL_FMC_MspInit+0xfe>
    return;
 8002884:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000094 	.word	0x20000094
 8002890:	40023800 	.word	0x40023800
 8002894:	40021400 	.word	0x40021400
 8002898:	40021c00 	.word	0x40021c00
 800289c:	40021800 	.word	0x40021800
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	40020400 	.word	0x40020400

080028ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80028b4:	f7ff ff68 	bl	8002788 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08c      	sub	sp, #48	; 0x30
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	2019      	movs	r0, #25
 80028d6:	f000 fc6f 	bl	80031b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028da:	2019      	movs	r0, #25
 80028dc:	f000 fc88 	bl	80031f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <HAL_InitTick+0xa4>)
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <HAL_InitTick+0xa4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6453      	str	r3, [r2, #68]	; 0x44
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <HAL_InitTick+0xa4>)
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028fc:	f107 0210 	add.w	r2, r7, #16
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f002 ffa6 	bl	8005858 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800290c:	f002 ff90 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8002910:	4603      	mov	r3, r0
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <HAL_InitTick+0xa8>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	0c9b      	lsrs	r3, r3, #18
 8002920:	3b01      	subs	r3, #1
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_InitTick+0xac>)
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <HAL_InitTick+0xb0>)
 8002928:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_InitTick+0xac>)
 800292c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002930:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_InitTick+0xac>)
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_InitTick+0xac>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_InitTick+0xac>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002944:	4809      	ldr	r0, [pc, #36]	; (800296c <HAL_InitTick+0xac>)
 8002946:	f004 fac9 	bl	8006edc <HAL_TIM_Base_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d104      	bne.n	800295a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002950:	4806      	ldr	r0, [pc, #24]	; (800296c <HAL_InitTick+0xac>)
 8002952:	f004 fb1d 	bl	8006f90 <HAL_TIM_Base_Start_IT>
 8002956:	4603      	mov	r3, r0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3730      	adds	r7, #48	; 0x30
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	431bde83 	.word	0x431bde83
 800296c:	20009598 	.word	0x20009598
 8002970:	40010000 	.word	0x40010000

08002974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <NMI_Handler+0x4>

0800297a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <HardFault_Handler+0x4>

08002980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <MemManage_Handler+0x4>

08002986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <UsageFault_Handler+0x4>

08002992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029a6:	f004 fb63 	bl	8007070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20009598 	.word	0x20009598

080029b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029bc:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <_sbrk+0x5c>)
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <_sbrk+0x60>)
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <_sbrk+0x64>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <_sbrk+0x64>)
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <_sbrk+0x68>)
 80029d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d207      	bcs.n	80029f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029e4:	f009 fcd2 	bl	800c38c <__errno>
 80029e8:	4603      	mov	r3, r0
 80029ea:	220c      	movs	r2, #12
 80029ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295
 80029f2:	e009      	b.n	8002a08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <_sbrk+0x64>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <_sbrk+0x64>)
 8002a04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20030000 	.word	0x20030000
 8002a14:	00000400 	.word	0x00000400
 8002a18:	20000098 	.word	0x20000098
 8002a1c:	20009aa0 	.word	0x20009aa0

08002a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <SystemInit+0x20>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <SystemInit+0x20>)
 8002a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a48:	480d      	ldr	r0, [pc, #52]	; (8002a80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a4a:	490e      	ldr	r1, [pc, #56]	; (8002a84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a0b      	ldr	r2, [pc, #44]	; (8002a8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a60:	4c0b      	ldr	r4, [pc, #44]	; (8002a90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a6e:	f7ff ffd7 	bl	8002a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a72:	f009 fc91 	bl	800c398 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a76:	f7fe fc23 	bl	80012c0 <main>
  bx  lr    
 8002a7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a84:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a88:	0800d2f8 	.word	0x0800d2f8
  ldr r2, =_sbss
 8002a8c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002a90:	20009aa0 	.word	0x20009aa0

08002a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a94:	e7fe      	b.n	8002a94 <ADC_IRQHandler>
	...

08002a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <HAL_Init+0x40>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	; (8002ad8 <HAL_Init+0x40>)
 8002aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_Init+0x40>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_Init+0x40>)
 8002aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab4:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a07      	ldr	r2, [pc, #28]	; (8002ad8 <HAL_Init+0x40>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ac0:	2003      	movs	r0, #3
 8002ac2:	f000 fb6e 	bl	80031a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7ff fefa 	bl	80028c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002acc:	f7ff faaa 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023c00 	.word	0x40023c00

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x20>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_IncTick+0x24>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000008 	.word	0x20000008
 8002b00:	200095e0 	.word	0x200095e0

08002b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetTick+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	200095e0 	.word	0x200095e0

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff ffee 	bl	8002b04 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_Delay+0x44>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b42:	bf00      	nop
 8002b44:	f7ff ffde 	bl	8002b04 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000008 	.word	0x20000008

08002b64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e033      	b.n	8002be2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fa7a 	bl	800207c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002baa:	f023 0302 	bic.w	r3, r3, #2
 8002bae:	f043 0202 	orr.w	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f94a 	bl	8002e50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f023 0303 	bic.w	r3, r3, #3
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002bd2:	e001      	b.n	8002bd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x1c>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e113      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x244>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b09      	cmp	r3, #9
 8002c16:	d925      	bls.n	8002c64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68d9      	ldr	r1, [r3, #12]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b1e      	subs	r3, #30
 8002c2e:	2207      	movs	r2, #7
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43da      	mvns	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68d9      	ldr	r1, [r3, #12]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4603      	mov	r3, r0
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4403      	add	r3, r0
 8002c56:	3b1e      	subs	r3, #30
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e022      	b.n	8002caa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	2207      	movs	r2, #7
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	400a      	ands	r2, r1
 8002c86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6919      	ldr	r1, [r3, #16]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4403      	add	r3, r0
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d824      	bhi.n	8002cfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b05      	subs	r3, #5
 8002cc4:	221f      	movs	r2, #31
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3b05      	subs	r3, #5
 8002cee:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfa:	e04c      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b0c      	cmp	r3, #12
 8002d02:	d824      	bhi.n	8002d4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	3b23      	subs	r3, #35	; 0x23
 8002d16:	221f      	movs	r2, #31
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43da      	mvns	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	400a      	ands	r2, r1
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b23      	subs	r3, #35	; 0x23
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d4c:	e023      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b41      	subs	r3, #65	; 0x41
 8002d60:	221f      	movs	r2, #31
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	3b41      	subs	r3, #65	; 0x41
 8002d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <HAL_ADC_ConfigChannel+0x250>)
 8002d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <HAL_ADC_ConfigChannel+0x254>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d10f      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1d8>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2b12      	cmp	r3, #18
 8002daa:	d10b      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_ADC_ConfigChannel+0x254>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d12b      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x23a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <HAL_ADC_ConfigChannel+0x258>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d003      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x1f4>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b11      	cmp	r3, #17
 8002dde:	d122      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <HAL_ADC_ConfigChannel+0x258>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d111      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_ADC_ConfigChannel+0x25c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_ADC_ConfigChannel+0x260>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	0c9a      	lsrs	r2, r3, #18
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e18:	e002      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f9      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40012300 	.word	0x40012300
 8002e40:	40012000 	.word	0x40012000
 8002e44:	10000012 	.word	0x10000012
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	431bde83 	.word	0x431bde83

08002e50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e58:	4b79      	ldr	r3, [pc, #484]	; (8003040 <ADC_Init+0x1f0>)
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	021a      	lsls	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6899      	ldr	r1, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	4a58      	ldr	r2, [pc, #352]	; (8003044 <ADC_Init+0x1f4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6899      	ldr	r1, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	e00f      	b.n	8002f4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0202 	bic.w	r2, r2, #2
 8002f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6899      	ldr	r1, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7e1b      	ldrb	r3, [r3, #24]
 8002f68:	005a      	lsls	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	035a      	lsls	r2, r3, #13
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e007      	b.n	8002fc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	051a      	lsls	r2, r3, #20
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6899      	ldr	r1, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003006:	025a      	lsls	r2, r3, #9
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6899      	ldr	r1, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	029a      	lsls	r2, r3, #10
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40012300 	.word	0x40012300
 8003044:	0f000001 	.word	0x0f000001

08003048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	60d3      	str	r3, [r2, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	; (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
         );
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ff4c 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ca:	f7ff ff61 	bl	8003090 <__NVIC_GetPriorityGrouping>
 80031ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	6978      	ldr	r0, [r7, #20]
 80031d6:	f7ff ffb1 	bl	800313c <NVIC_EncodePriority>
 80031da:	4602      	mov	r2, r0
 80031dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff80 	bl	80030e8 <__NVIC_SetPriority>
}
 80031e8:	bf00      	nop
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff54 	bl	80030ac <__NVIC_EnableIRQ>
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e014      	b.n	8003248 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	791b      	ldrb	r3, [r3, #4]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe ffa0 	bl	8002174 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	795b      	ldrb	r3, [r3, #5]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_DAC_ConfigChannel+0x18>
 8003264:	2302      	movs	r3, #2
 8003266:	e03c      	b.n	80032e2 <HAL_DAC_ConfigChannel+0x92>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2202      	movs	r2, #2
 8003272:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4013      	ands	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	22c0      	movs	r2, #192	; 0xc0
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	400a      	ands	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_DMA_Start_IT+0x26>
 8003310:	2302      	movs	r3, #2
 8003312:	e040      	b.n	8003396 <HAL_DMA_Start_IT+0xa8>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d12f      	bne.n	8003388 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f83a 	bl	80033b6 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003346:	223f      	movs	r2, #63	; 0x3f
 8003348:	409a      	lsls	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0216 	orr.w	r2, r2, #22
 800335c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0208 	orr.w	r2, r2, #8
 8003374:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0201 	orr.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	e005      	b.n	8003394 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003390:	2302      	movs	r3, #2
 8003392:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003394:	7dfb      	ldrb	r3, [r7, #23]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033d2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d108      	bne.n	80033f6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033f4:	e007      	b.n	8003406 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	60da      	str	r2, [r3, #12]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e177      	b.n	8003720 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003430:	2201      	movs	r2, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	429a      	cmp	r2, r3
 800344a:	f040 8166 	bne.w	800371a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d005      	beq.n	8003466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003462:	2b02      	cmp	r3, #2
 8003464:	d130      	bne.n	80034c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800349c:	2201      	movs	r2, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 0201 	and.w	r2, r3, #1
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d017      	beq.n	8003504 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d123      	bne.n	8003558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	08da      	lsrs	r2, r3, #3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3208      	adds	r2, #8
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	220f      	movs	r2, #15
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	08da      	lsrs	r2, r3, #3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3208      	adds	r2, #8
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0203 	and.w	r2, r3, #3
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80c0 	beq.w	800371a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_GPIO_Init+0x324>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_GPIO_Init+0x324>)
 80035a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_GPIO_Init+0x324>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035b6:	4a61      	ldr	r2, [pc, #388]	; (800373c <HAL_GPIO_Init+0x328>)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	089b      	lsrs	r3, r3, #2
 80035bc:	3302      	adds	r3, #2
 80035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	220f      	movs	r2, #15
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_GPIO_Init+0x32c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d037      	beq.n	8003652 <HAL_GPIO_Init+0x23e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_GPIO_Init+0x330>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d031      	beq.n	800364e <HAL_GPIO_Init+0x23a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_GPIO_Init+0x334>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02b      	beq.n	800364a <HAL_GPIO_Init+0x236>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a55      	ldr	r2, [pc, #340]	; (800374c <HAL_GPIO_Init+0x338>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d025      	beq.n	8003646 <HAL_GPIO_Init+0x232>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a54      	ldr	r2, [pc, #336]	; (8003750 <HAL_GPIO_Init+0x33c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <HAL_GPIO_Init+0x22e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a53      	ldr	r2, [pc, #332]	; (8003754 <HAL_GPIO_Init+0x340>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d019      	beq.n	800363e <HAL_GPIO_Init+0x22a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a52      	ldr	r2, [pc, #328]	; (8003758 <HAL_GPIO_Init+0x344>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d013      	beq.n	800363a <HAL_GPIO_Init+0x226>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a51      	ldr	r2, [pc, #324]	; (800375c <HAL_GPIO_Init+0x348>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00d      	beq.n	8003636 <HAL_GPIO_Init+0x222>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a50      	ldr	r2, [pc, #320]	; (8003760 <HAL_GPIO_Init+0x34c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <HAL_GPIO_Init+0x21e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4f      	ldr	r2, [pc, #316]	; (8003764 <HAL_GPIO_Init+0x350>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_GPIO_Init+0x21a>
 800362a:	2309      	movs	r3, #9
 800362c:	e012      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800362e:	230a      	movs	r3, #10
 8003630:	e010      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003632:	2308      	movs	r3, #8
 8003634:	e00e      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003636:	2307      	movs	r3, #7
 8003638:	e00c      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800363a:	2306      	movs	r3, #6
 800363c:	e00a      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800363e:	2305      	movs	r3, #5
 8003640:	e008      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003642:	2304      	movs	r3, #4
 8003644:	e006      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003646:	2303      	movs	r3, #3
 8003648:	e004      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800364a:	2302      	movs	r3, #2
 800364c:	e002      	b.n	8003654 <HAL_GPIO_Init+0x240>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_GPIO_Init+0x240>
 8003652:	2300      	movs	r3, #0
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	f002 0203 	and.w	r2, r2, #3
 800365a:	0092      	lsls	r2, r2, #2
 800365c:	4093      	lsls	r3, r2
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003664:	4935      	ldr	r1, [pc, #212]	; (800373c <HAL_GPIO_Init+0x328>)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	3302      	adds	r3, #2
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003672:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <HAL_GPIO_Init+0x354>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003696:	4a34      	ldr	r2, [pc, #208]	; (8003768 <HAL_GPIO_Init+0x354>)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800369c:	4b32      	ldr	r3, [pc, #200]	; (8003768 <HAL_GPIO_Init+0x354>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c0:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_GPIO_Init+0x354>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036c6:	4b28      	ldr	r3, [pc, #160]	; (8003768 <HAL_GPIO_Init+0x354>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ea:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_GPIO_Init+0x354>)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_GPIO_Init+0x354>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_GPIO_Init+0x354>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3301      	adds	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	f67f ae84 	bls.w	8003430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003728:	bf00      	nop
 800372a:	bf00      	nop
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	40013800 	.word	0x40013800
 8003740:	40020000 	.word	0x40020000
 8003744:	40020400 	.word	0x40020400
 8003748:	40020800 	.word	0x40020800
 800374c:	40020c00 	.word	0x40020c00
 8003750:	40021000 	.word	0x40021000
 8003754:	40021400 	.word	0x40021400
 8003758:	40021800 	.word	0x40021800
 800375c:	40021c00 	.word	0x40021c00
 8003760:	40022000 	.word	0x40022000
 8003764:	40022400 	.word	0x40022400
 8003768:	40013c00 	.word	0x40013c00

0800376c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	887b      	ldrh	r3, [r7, #2]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	e001      	b.n	800378e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800378e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
 80037a8:	4613      	mov	r3, r2
 80037aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037ac:	787b      	ldrb	r3, [r7, #1]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037b2:	887a      	ldrh	r2, [r7, #2]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b8:	e003      	b.n	80037c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ba:	887b      	ldrh	r3, [r7, #2]
 80037bc:	041a      	lsls	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	619a      	str	r2, [r3, #24]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e12b      	b.n	8003a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fe fd00 	bl	80021fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	; 0x24
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003834:	f001 ffe8 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8003838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	4a81      	ldr	r2, [pc, #516]	; (8003a44 <HAL_I2C_Init+0x274>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d807      	bhi.n	8003854 <HAL_I2C_Init+0x84>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a80      	ldr	r2, [pc, #512]	; (8003a48 <HAL_I2C_Init+0x278>)
 8003848:	4293      	cmp	r3, r2
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e006      	b.n	8003862 <HAL_I2C_Init+0x92>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4a7d      	ldr	r2, [pc, #500]	; (8003a4c <HAL_I2C_Init+0x27c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	bf94      	ite	ls
 800385c:	2301      	movls	r3, #1
 800385e:	2300      	movhi	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e0e7      	b.n	8003a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a78      	ldr	r2, [pc, #480]	; (8003a50 <HAL_I2C_Init+0x280>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0c9b      	lsrs	r3, r3, #18
 8003874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4a6a      	ldr	r2, [pc, #424]	; (8003a44 <HAL_I2C_Init+0x274>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d802      	bhi.n	80038a4 <HAL_I2C_Init+0xd4>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3301      	adds	r3, #1
 80038a2:	e009      	b.n	80038b8 <HAL_I2C_Init+0xe8>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	4a69      	ldr	r2, [pc, #420]	; (8003a54 <HAL_I2C_Init+0x284>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	099b      	lsrs	r3, r3, #6
 80038b6:	3301      	adds	r3, #1
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	495c      	ldr	r1, [pc, #368]	; (8003a44 <HAL_I2C_Init+0x274>)
 80038d4:	428b      	cmp	r3, r1
 80038d6:	d819      	bhi.n	800390c <HAL_I2C_Init+0x13c>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1e59      	subs	r1, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e6:	1c59      	adds	r1, r3, #1
 80038e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038ec:	400b      	ands	r3, r1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_I2C_Init+0x138>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1e59      	subs	r1, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003900:	3301      	adds	r3, #1
 8003902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003906:	e051      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 8003908:	2304      	movs	r3, #4
 800390a:	e04f      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d111      	bne.n	8003938 <HAL_I2C_Init+0x168>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e012      	b.n	800395e <HAL_I2C_Init+0x18e>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1e58      	subs	r0, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	0099      	lsls	r1, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	fbb0 f3f3 	udiv	r3, r0, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Init+0x196>
 8003962:	2301      	movs	r3, #1
 8003964:	e022      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10e      	bne.n	800398c <HAL_I2C_Init+0x1bc>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e58      	subs	r0, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	440b      	add	r3, r1
 800397c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398a:	e00f      	b.n	80039ac <HAL_I2C_Init+0x1dc>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e58      	subs	r0, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	0099      	lsls	r1, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	6809      	ldr	r1, [r1, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6911      	ldr	r1, [r2, #16]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68d2      	ldr	r2, [r2, #12]
 80039e6:	4311      	orrs	r1, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	000186a0 	.word	0x000186a0
 8003a48:	001e847f 	.word	0x001e847f
 8003a4c:	003d08ff 	.word	0x003d08ff
 8003a50:	431bde83 	.word	0x431bde83
 8003a54:	10624dd3 	.word	0x10624dd3

08003a58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	4608      	mov	r0, r1
 8003a62:	4611      	mov	r1, r2
 8003a64:	461a      	mov	r2, r3
 8003a66:	4603      	mov	r3, r0
 8003a68:	817b      	strh	r3, [r7, #10]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	813b      	strh	r3, [r7, #8]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a72:	f7ff f847 	bl	8002b04 <HAL_GetTick>
 8003a76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	f040 80d9 	bne.w	8003c38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2319      	movs	r3, #25
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	496d      	ldr	r1, [pc, #436]	; (8003c44 <HAL_I2C_Mem_Write+0x1ec>)
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fc7f 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0cc      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_Mem_Write+0x56>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0c5      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d007      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	; 0x21
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2240      	movs	r2, #64	; 0x40
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a4d      	ldr	r2, [pc, #308]	; (8003c48 <HAL_I2C_Mem_Write+0x1f0>)
 8003b14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b16:	88f8      	ldrh	r0, [r7, #6]
 8003b18:	893a      	ldrh	r2, [r7, #8]
 8003b1a:	8979      	ldrh	r1, [r7, #10]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	4603      	mov	r3, r0
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fab6 	bl	8004098 <I2C_RequestMemoryWrite>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d052      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e081      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fd00 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d107      	bne.n	8003b5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06b      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_I2C_Mem_Write+0x180>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d017      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1aa      	bne.n	8003b36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fcec 	bl	80045c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00d      	beq.n	8003c0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d107      	bne.n	8003c08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e016      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	00100002 	.word	0x00100002
 8003c48:	ffff0000 	.word	0xffff0000

08003c4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08c      	sub	sp, #48	; 0x30
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	817b      	strh	r3, [r7, #10]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	813b      	strh	r3, [r7, #8]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c66:	f7fe ff4d 	bl	8002b04 <HAL_GetTick>
 8003c6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	f040 8208 	bne.w	800408a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	2319      	movs	r3, #25
 8003c80:	2201      	movs	r2, #1
 8003c82:	497b      	ldr	r1, [pc, #492]	; (8003e70 <HAL_I2C_Mem_Read+0x224>)
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fb85 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
 8003c92:	e1fb      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x56>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e1f4      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d007      	beq.n	8003cc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2222      	movs	r2, #34	; 0x22
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2240      	movs	r2, #64	; 0x40
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a5b      	ldr	r2, [pc, #364]	; (8003e74 <HAL_I2C_Mem_Read+0x228>)
 8003d08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d0a:	88f8      	ldrh	r0, [r7, #6]
 8003d0c:	893a      	ldrh	r2, [r7, #8]
 8003d0e:	8979      	ldrh	r1, [r7, #10]
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	4603      	mov	r3, r0
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa52 	bl	80041c4 <I2C_RequestMemoryRead>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1b0      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d113      	bne.n	8003d5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d32:	2300      	movs	r3, #0
 8003d34:	623b      	str	r3, [r7, #32]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	623b      	str	r3, [r7, #32]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e184      	b.n	8004064 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d11b      	bne.n	8003d9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e164      	b.n	8004064 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d11b      	bne.n	8003dda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	e144      	b.n	8004064 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003df0:	e138      	b.n	8004064 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	f200 80f1 	bhi.w	8003fde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d123      	bne.n	8003e4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fc1b 	bl	8004644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e139      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e4a:	e10b      	b.n	8004064 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d14e      	bne.n	8003ef2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4906      	ldr	r1, [pc, #24]	; (8003e78 <HAL_I2C_Mem_Read+0x22c>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fa98 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e10e      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
 8003e6e:	bf00      	nop
 8003e70:	00100002 	.word	0x00100002
 8003e74:	ffff0000 	.word	0xffff0000
 8003e78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ef0:	e0b8      	b.n	8004064 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4966      	ldr	r1, [pc, #408]	; (8004094 <HAL_I2C_Mem_Read+0x448>)
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fa49 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0bf      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2200      	movs	r2, #0
 8003f56:	494f      	ldr	r1, [pc, #316]	; (8004094 <HAL_I2C_Mem_Read+0x448>)
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fa1b 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e091      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fdc:	e042      	b.n	8004064 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fb2e 	bl	8004644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e04c      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	b2d2      	uxtb	r2, r2
 8003ffe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b04      	cmp	r3, #4
 8004030:	d118      	bne.n	8004064 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	f47f aec2 	bne.w	8003df2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	3728      	adds	r7, #40	; 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	00010004 	.word	0x00010004

08004098 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	4608      	mov	r0, r1
 80040a2:	4611      	mov	r1, r2
 80040a4:	461a      	mov	r2, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	460b      	mov	r3, r1
 80040ac:	813b      	strh	r3, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f960 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00d      	beq.n	80040f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e8:	d103      	bne.n	80040f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e05f      	b.n	80041b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004104:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	6a3a      	ldr	r2, [r7, #32]
 800410a:	492d      	ldr	r1, [pc, #180]	; (80041c0 <I2C_RequestMemoryWrite+0x128>)
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f998 	bl	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e04c      	b.n	80041b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	6a39      	ldr	r1, [r7, #32]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa02 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00d      	beq.n	800415e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b04      	cmp	r3, #4
 8004148:	d107      	bne.n	800415a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004158:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e02b      	b.n	80041b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004164:	893b      	ldrh	r3, [r7, #8]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]
 800416e:	e021      	b.n	80041b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004170:	893b      	ldrh	r3, [r7, #8]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	b29b      	uxth	r3, r3
 8004176:	b2da      	uxtb	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004180:	6a39      	ldr	r1, [r7, #32]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f9dc 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b04      	cmp	r3, #4
 8004194:	d107      	bne.n	80041a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e005      	b.n	80041b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041aa:	893b      	ldrh	r3, [r7, #8]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	00010002 	.word	0x00010002

080041c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	4608      	mov	r0, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	461a      	mov	r2, r3
 80041d2:	4603      	mov	r3, r0
 80041d4:	817b      	strh	r3, [r7, #10]
 80041d6:	460b      	mov	r3, r1
 80041d8:	813b      	strh	r3, [r7, #8]
 80041da:	4613      	mov	r3, r2
 80041dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2200      	movs	r2, #0
 8004206:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f8c2 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004224:	d103      	bne.n	800422e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e0aa      	b.n	8004388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004240:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	6a3a      	ldr	r2, [r7, #32]
 8004246:	4952      	ldr	r1, [pc, #328]	; (8004390 <I2C_RequestMemoryRead+0x1cc>)
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f8fa 	bl	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e097      	b.n	8004388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800426e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004270:	6a39      	ldr	r1, [r7, #32]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f964 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b04      	cmp	r3, #4
 8004284:	d107      	bne.n	8004296 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004294:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e076      	b.n	8004388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a0:	893b      	ldrh	r3, [r7, #8]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]
 80042aa:	e021      	b.n	80042f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042ac:	893b      	ldrh	r3, [r7, #8]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042bc:	6a39      	ldr	r1, [r7, #32]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f93e 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00d      	beq.n	80042e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d107      	bne.n	80042e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e050      	b.n	8004388 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042e6:	893b      	ldrh	r3, [r7, #8]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f2:	6a39      	ldr	r1, [r7, #32]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f923 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00d      	beq.n	800431c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	2b04      	cmp	r3, #4
 8004306:	d107      	bne.n	8004318 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004316:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e035      	b.n	8004388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2200      	movs	r2, #0
 8004334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f82b 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00d      	beq.n	8004360 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d103      	bne.n	800435c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e013      	b.n	8004388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004360:	897b      	ldrh	r3, [r7, #10]
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	6a3a      	ldr	r2, [r7, #32]
 8004374:	4906      	ldr	r1, [pc, #24]	; (8004390 <I2C_RequestMemoryRead+0x1cc>)
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f863 	bl	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	00010002 	.word	0x00010002

08004394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a4:	e025      	b.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d021      	beq.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fe fba9 	bl	8002b04 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e023      	b.n	800443a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10d      	bne.n	8004418 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	e00c      	b.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	429a      	cmp	r2, r3
 8004436:	d0b6      	beq.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004450:	e051      	b.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d123      	bne.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800447a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0204 	orr.w	r2, r3, #4
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e046      	b.n	8004538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d021      	beq.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fe fb27 	bl	8002b04 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e020      	b.n	8004538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d10c      	bne.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf14      	ite	ne
 8004512:	2301      	movne	r3, #1
 8004514:	2300      	moveq	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	e00b      	b.n	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	43da      	mvns	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4013      	ands	r3, r2
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d18d      	bne.n	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800454c:	e02d      	b.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f8ce 	bl	80046f0 <I2C_IsAcknowledgeFailed>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e02d      	b.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d021      	beq.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fe facd 	bl	8002b04 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d116      	bne.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e007      	b.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d1ca      	bne.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ce:	e02d      	b.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f88d 	bl	80046f0 <I2C_IsAcknowledgeFailed>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e02d      	b.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d021      	beq.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e8:	f7fe fa8c 	bl	8002b04 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e007      	b.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b04      	cmp	r3, #4
 8004638:	d1ca      	bne.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004650:	e042      	b.n	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b10      	cmp	r3, #16
 800465e:	d119      	bne.n	8004694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0210 	mvn.w	r2, #16
 8004668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e029      	b.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004694:	f7fe fa36 	bl	8002b04 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d116      	bne.n	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e007      	b.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d1b5      	bne.n	8004652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d11b      	bne.n	8004740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	f043 0204 	orr.w	r2, r3, #4
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b20      	cmp	r3, #32
 8004762:	d129      	bne.n	80047b8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2224      	movs	r2, #36	; 0x24
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0210 	bic.w	r2, r2, #16
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e000      	b.n	80047ba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
  }
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d12a      	bne.n	8004836 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2224      	movs	r2, #36	; 0x24
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004800:	89fb      	ldrh	r3, [r7, #14]
 8004802:	f023 030f 	bic.w	r3, r3, #15
 8004806:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	b29a      	uxth	r2, r3
 800480c:	89fb      	ldrh	r3, [r7, #14]
 800480e:	4313      	orrs	r3, r2
 8004810:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	89fa      	ldrh	r2, [r7, #14]
 8004818:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0bf      	b.n	80049d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fd0e 	bl	800228c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699a      	ldr	r2, [r3, #24]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004886:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6999      	ldr	r1, [r3, #24]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800489c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6899      	ldr	r1, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b4a      	ldr	r3, [pc, #296]	; (80049e0 <HAL_LTDC_Init+0x19c>)
 80048b8:	400b      	ands	r3, r1
 80048ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6899      	ldr	r1, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68d9      	ldr	r1, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_LTDC_Init+0x19c>)
 80048e6:	400b      	ands	r3, r1
 80048e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	041b      	lsls	r3, r3, #16
 80048f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68d9      	ldr	r1, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6919      	ldr	r1, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4b33      	ldr	r3, [pc, #204]	; (80049e0 <HAL_LTDC_Init+0x19c>)
 8004914:	400b      	ands	r3, r1
 8004916:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6919      	ldr	r1, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6959      	ldr	r1, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <HAL_LTDC_Init+0x19c>)
 8004942:	400b      	ands	r3, r1
 8004944:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6959      	ldr	r1, [r3, #20]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004986:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800499a:	431a      	orrs	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0206 	orr.w	r2, r2, #6
 80049b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	f000f800 	.word	0xf000f800

080049e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049e4:	b5b0      	push	{r4, r5, r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_LTDC_ConfigLayer+0x1a>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e02c      	b.n	8004a58 <HAL_LTDC_ConfigLayer+0x74>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2134      	movs	r1, #52	; 0x34
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4614      	mov	r4, r2
 8004a22:	461d      	mov	r5, r3
 8004a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f811 	bl	8004a60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bdb0      	pop	{r4, r5, r7, pc}

08004a60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b089      	sub	sp, #36	; 0x24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	0c1b      	lsrs	r3, r3, #16
 8004a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7c:	4413      	add	r3, r2
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	01db      	lsls	r3, r3, #7
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3384      	adds	r3, #132	; 0x84
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	4611      	mov	r1, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	01d2      	lsls	r2, r2, #7
 8004a9c:	440a      	add	r2, r1
 8004a9e:	3284      	adds	r2, #132	; 0x84
 8004aa0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004aa4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab6:	4413      	add	r3, r2
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	01db      	lsls	r3, r3, #7
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3384      	adds	r3, #132	; 0x84
 8004ac8:	4619      	mov	r1, r3
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ade:	4413      	add	r3, r2
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	01db      	lsls	r3, r3, #7
 8004aee:	4413      	add	r3, r2
 8004af0:	3384      	adds	r3, #132	; 0x84
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	4611      	mov	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	01d2      	lsls	r2, r2, #7
 8004afe:	440a      	add	r2, r1
 8004b00:	3284      	adds	r2, #132	; 0x84
 8004b02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004b06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b16:	4413      	add	r3, r2
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	01db      	lsls	r3, r3, #7
 8004b24:	440b      	add	r3, r1
 8004b26:	3384      	adds	r3, #132	; 0x84
 8004b28:	4619      	mov	r1, r3
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	01db      	lsls	r3, r3, #7
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3384      	adds	r3, #132	; 0x84
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	4611      	mov	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	01d2      	lsls	r2, r2, #7
 8004b4a:	440a      	add	r2, r1
 8004b4c:	3284      	adds	r2, #132	; 0x84
 8004b4e:	f023 0307 	bic.w	r3, r3, #7
 8004b52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	01db      	lsls	r3, r3, #7
 8004b5e:	4413      	add	r3, r2
 8004b60:	3384      	adds	r3, #132	; 0x84
 8004b62:	461a      	mov	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b7a:	041b      	lsls	r3, r3, #16
 8004b7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	061b      	lsls	r3, r3, #24
 8004b84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	01db      	lsls	r3, r3, #7
 8004b90:	4413      	add	r3, r2
 8004b92:	3384      	adds	r3, #132	; 0x84
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	01db      	lsls	r3, r3, #7
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3384      	adds	r3, #132	; 0x84
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	01db      	lsls	r3, r3, #7
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3384      	adds	r3, #132	; 0x84
 8004bc8:	4619      	mov	r1, r3
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	01db      	lsls	r3, r3, #7
 8004bda:	4413      	add	r3, r2
 8004bdc:	3384      	adds	r3, #132	; 0x84
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	4611      	mov	r1, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	01d2      	lsls	r2, r2, #7
 8004bea:	440a      	add	r2, r1
 8004bec:	3284      	adds	r2, #132	; 0x84
 8004bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bf2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	01db      	lsls	r3, r3, #7
 8004bfe:	4413      	add	r3, r2
 8004c00:	3384      	adds	r3, #132	; 0x84
 8004c02:	461a      	mov	r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	01db      	lsls	r3, r3, #7
 8004c14:	4413      	add	r3, r2
 8004c16:	3384      	adds	r3, #132	; 0x84
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	01d2      	lsls	r2, r2, #7
 8004c24:	440a      	add	r2, r1
 8004c26:	3284      	adds	r2, #132	; 0x84
 8004c28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c2c:	f023 0307 	bic.w	r3, r3, #7
 8004c30:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	6809      	ldr	r1, [r1, #0]
 8004c3e:	4608      	mov	r0, r1
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	01c9      	lsls	r1, r1, #7
 8004c44:	4401      	add	r1, r0
 8004c46:	3184      	adds	r1, #132	; 0x84
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	01db      	lsls	r3, r3, #7
 8004c56:	4413      	add	r3, r2
 8004c58:	3384      	adds	r3, #132	; 0x84
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	01db      	lsls	r3, r3, #7
 8004c66:	4413      	add	r3, r2
 8004c68:	3384      	adds	r3, #132	; 0x84
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	01db      	lsls	r3, r3, #7
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3384      	adds	r3, #132	; 0x84
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d102      	bne.n	8004c94 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004c8e:	2304      	movs	r3, #4
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	e01b      	b.n	8004ccc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e014      	b.n	8004ccc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d00b      	beq.n	8004cc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d007      	beq.n	8004cc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d003      	beq.n	8004cc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cbe:	2b07      	cmp	r3, #7
 8004cc0:	d102      	bne.n	8004cc8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	61fb      	str	r3, [r7, #28]
 8004cc6:	e001      	b.n	8004ccc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	01db      	lsls	r3, r3, #7
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3384      	adds	r3, #132	; 0x84
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	01d2      	lsls	r2, r2, #7
 8004ce6:	440a      	add	r2, r1
 8004ce8:	3284      	adds	r2, #132	; 0x84
 8004cea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004cee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	041a      	lsls	r2, r3, #16
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	1acb      	subs	r3, r1, r3
 8004d06:	69f9      	ldr	r1, [r7, #28]
 8004d08:	fb01 f303 	mul.w	r3, r1, r3
 8004d0c:	3303      	adds	r3, #3
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	6809      	ldr	r1, [r1, #0]
 8004d12:	4608      	mov	r0, r1
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	01c9      	lsls	r1, r1, #7
 8004d18:	4401      	add	r1, r0
 8004d1a:	3184      	adds	r1, #132	; 0x84
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	01db      	lsls	r3, r3, #7
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3384      	adds	r3, #132	; 0x84
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	4611      	mov	r1, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	01d2      	lsls	r2, r2, #7
 8004d3a:	440a      	add	r2, r1
 8004d3c:	3284      	adds	r2, #132	; 0x84
 8004d3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d42:	f023 0307 	bic.w	r3, r3, #7
 8004d46:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	01db      	lsls	r3, r3, #7
 8004d52:	4413      	add	r3, r2
 8004d54:	3384      	adds	r3, #132	; 0x84
 8004d56:	461a      	mov	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	01db      	lsls	r3, r3, #7
 8004d68:	4413      	add	r3, r2
 8004d6a:	3384      	adds	r3, #132	; 0x84
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	4611      	mov	r1, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	01d2      	lsls	r2, r2, #7
 8004d78:	440a      	add	r2, r1
 8004d7a:	3284      	adds	r2, #132	; 0x84
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6013      	str	r3, [r2, #0]
}
 8004d82:	bf00      	nop
 8004d84:	3724      	adds	r7, #36	; 0x24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d90:	b08f      	sub	sp, #60	; 0x3c
 8004d92:	af0a      	add	r7, sp, #40	; 0x28
 8004d94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e10f      	b.n	8004fc0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fd fc8a 	bl	80026d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f003 fcd3 	bl	800878a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	603b      	str	r3, [r7, #0]
 8004dea:	687e      	ldr	r6, [r7, #4]
 8004dec:	466d      	mov	r5, sp
 8004dee:	f106 0410 	add.w	r4, r6, #16
 8004df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004dfe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e02:	1d33      	adds	r3, r6, #4
 8004e04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e06:	6838      	ldr	r0, [r7, #0]
 8004e08:	f003 fc5e 	bl	80086c8 <USB_CoreInit>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d005      	beq.n	8004e1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e0d0      	b.n	8004fc0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2100      	movs	r1, #0
 8004e24:	4618      	mov	r0, r3
 8004e26:	f003 fcc1 	bl	80087ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
 8004e2e:	e04a      	b.n	8004ec6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	6879      	ldr	r1, [r7, #4]
 8004e34:	4613      	mov	r3, r2
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	1a9b      	subs	r3, r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	333d      	adds	r3, #61	; 0x3d
 8004e40:	2201      	movs	r2, #1
 8004e42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e44:	7bfa      	ldrb	r2, [r7, #15]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	333c      	adds	r3, #60	; 0x3c
 8004e54:	7bfa      	ldrb	r2, [r7, #15]
 8004e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e58:	7bfa      	ldrb	r2, [r7, #15]
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	b298      	uxth	r0, r3
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	3342      	adds	r3, #66	; 0x42
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	333f      	adds	r3, #63	; 0x3f
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e84:	7bfa      	ldrb	r2, [r7, #15]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	1a9b      	subs	r3, r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3344      	adds	r3, #68	; 0x44
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	3348      	adds	r3, #72	; 0x48
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004eac:	7bfa      	ldrb	r2, [r7, #15]
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	3350      	adds	r3, #80	; 0x50
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3af      	bcc.n	8004e30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]
 8004ed4:	e044      	b.n	8004f60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ed6:	7bfa      	ldrb	r2, [r7, #15]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eec:	7bfa      	ldrb	r2, [r7, #15]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004efe:	7bfa      	ldrb	r2, [r7, #15]
 8004f00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f02:	7bfa      	ldrb	r2, [r7, #15]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f18:	7bfa      	ldrb	r2, [r7, #15]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	7bfa      	ldrb	r2, [r7, #15]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d3b5      	bcc.n	8004ed6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	687e      	ldr	r6, [r7, #4]
 8004f72:	466d      	mov	r5, sp
 8004f74:	f106 0410 	add.w	r4, r6, #16
 8004f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f84:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f88:	1d33      	adds	r3, r6, #4
 8004f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f8c:	6838      	ldr	r0, [r7, #0]
 8004f8e:	f003 fc37 	bl	8008800 <USB_DevInit>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e00d      	b.n	8004fc0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f003 fde6 	bl	8008b8a <USB_DevDisconnect>

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e264      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d075      	beq.n	80050d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fe6:	4ba3      	ldr	r3, [pc, #652]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d00c      	beq.n	800500c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ff2:	4ba0      	ldr	r3, [pc, #640]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d112      	bne.n	8005024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ffe:	4b9d      	ldr	r3, [pc, #628]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800500a:	d10b      	bne.n	8005024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800500c:	4b99      	ldr	r3, [pc, #612]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d05b      	beq.n	80050d0 <HAL_RCC_OscConfig+0x108>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d157      	bne.n	80050d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e23f      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502c:	d106      	bne.n	800503c <HAL_RCC_OscConfig+0x74>
 800502e:	4b91      	ldr	r3, [pc, #580]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a90      	ldr	r2, [pc, #576]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e01d      	b.n	8005078 <HAL_RCC_OscConfig+0xb0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005044:	d10c      	bne.n	8005060 <HAL_RCC_OscConfig+0x98>
 8005046:	4b8b      	ldr	r3, [pc, #556]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a8a      	ldr	r2, [pc, #552]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	4b88      	ldr	r3, [pc, #544]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a87      	ldr	r2, [pc, #540]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	e00b      	b.n	8005078 <HAL_RCC_OscConfig+0xb0>
 8005060:	4b84      	ldr	r3, [pc, #528]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a83      	ldr	r2, [pc, #524]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4b81      	ldr	r3, [pc, #516]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a80      	ldr	r2, [pc, #512]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d013      	beq.n	80050a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005080:	f7fd fd40 	bl	8002b04 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005088:	f7fd fd3c 	bl	8002b04 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	; 0x64
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e204      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509a:	4b76      	ldr	r3, [pc, #472]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0xc0>
 80050a6:	e014      	b.n	80050d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fd fd2c 	bl	8002b04 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b0:	f7fd fd28 	bl	8002b04 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1f0      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c2:	4b6c      	ldr	r3, [pc, #432]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0xe8>
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d063      	beq.n	80051a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050de:	4b65      	ldr	r3, [pc, #404]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ea:	4b62      	ldr	r3, [pc, #392]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d11c      	bne.n	8005130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050f6:	4b5f      	ldr	r3, [pc, #380]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d116      	bne.n	8005130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005102:	4b5c      	ldr	r3, [pc, #368]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_RCC_OscConfig+0x152>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d001      	beq.n	800511a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e1c4      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511a:	4b56      	ldr	r3, [pc, #344]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4952      	ldr	r1, [pc, #328]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800512a:	4313      	orrs	r3, r2
 800512c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512e:	e03a      	b.n	80051a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d020      	beq.n	800517a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005138:	4b4f      	ldr	r3, [pc, #316]	; (8005278 <HAL_RCC_OscConfig+0x2b0>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fd fce1 	bl	8002b04 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005146:	f7fd fcdd 	bl	8002b04 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e1a5      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005158:	4b46      	ldr	r3, [pc, #280]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005164:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4940      	ldr	r1, [pc, #256]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]
 8005178:	e015      	b.n	80051a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800517a:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <HAL_RCC_OscConfig+0x2b0>)
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd fcc0 	bl	8002b04 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005188:	f7fd fcbc 	bl	8002b04 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e184      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519a:	4b36      	ldr	r3, [pc, #216]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d030      	beq.n	8005214 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ba:	4b30      	ldr	r3, [pc, #192]	; (800527c <HAL_RCC_OscConfig+0x2b4>)
 80051bc:	2201      	movs	r2, #1
 80051be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fd fca0 	bl	8002b04 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c8:	f7fd fc9c 	bl	8002b04 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e164      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051da:	4b26      	ldr	r3, [pc, #152]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x200>
 80051e6:	e015      	b.n	8005214 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e8:	4b24      	ldr	r3, [pc, #144]	; (800527c <HAL_RCC_OscConfig+0x2b4>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ee:	f7fd fc89 	bl	8002b04 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051f6:	f7fd fc85 	bl	8002b04 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e14d      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1f0      	bne.n	80051f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a0 	beq.w	8005362 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	4b0f      	ldr	r3, [pc, #60]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a0e      	ldr	r2, [pc, #56]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
 8005242:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <HAL_RCC_OscConfig+0x2ac>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524e:	2301      	movs	r3, #1
 8005250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005252:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_OscConfig+0x2b8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d121      	bne.n	80052a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800525e:	4b08      	ldr	r3, [pc, #32]	; (8005280 <HAL_RCC_OscConfig+0x2b8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a07      	ldr	r2, [pc, #28]	; (8005280 <HAL_RCC_OscConfig+0x2b8>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526a:	f7fd fc4b 	bl	8002b04 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005270:	e011      	b.n	8005296 <HAL_RCC_OscConfig+0x2ce>
 8005272:	bf00      	nop
 8005274:	40023800 	.word	0x40023800
 8005278:	42470000 	.word	0x42470000
 800527c:	42470e80 	.word	0x42470e80
 8005280:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005284:	f7fd fc3e 	bl	8002b04 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e106      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005296:	4b85      	ldr	r3, [pc, #532]	; (80054ac <HAL_RCC_OscConfig+0x4e4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d106      	bne.n	80052b8 <HAL_RCC_OscConfig+0x2f0>
 80052aa:	4b81      	ldr	r3, [pc, #516]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	4a80      	ldr	r2, [pc, #512]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	6713      	str	r3, [r2, #112]	; 0x70
 80052b6:	e01c      	b.n	80052f2 <HAL_RCC_OscConfig+0x32a>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b05      	cmp	r3, #5
 80052be:	d10c      	bne.n	80052da <HAL_RCC_OscConfig+0x312>
 80052c0:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c4:	4a7a      	ldr	r2, [pc, #488]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052c6:	f043 0304 	orr.w	r3, r3, #4
 80052ca:	6713      	str	r3, [r2, #112]	; 0x70
 80052cc:	4b78      	ldr	r3, [pc, #480]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	4a77      	ldr	r2, [pc, #476]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052d2:	f043 0301 	orr.w	r3, r3, #1
 80052d6:	6713      	str	r3, [r2, #112]	; 0x70
 80052d8:	e00b      	b.n	80052f2 <HAL_RCC_OscConfig+0x32a>
 80052da:	4b75      	ldr	r3, [pc, #468]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	4a74      	ldr	r2, [pc, #464]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	6713      	str	r3, [r2, #112]	; 0x70
 80052e6:	4b72      	ldr	r3, [pc, #456]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	4a71      	ldr	r2, [pc, #452]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80052ec:	f023 0304 	bic.w	r3, r3, #4
 80052f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d015      	beq.n	8005326 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fa:	f7fd fc03 	bl	8002b04 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005300:	e00a      	b.n	8005318 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fd fbff 	bl	8002b04 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d901      	bls.n	8005318 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e0c5      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005318:	4b65      	ldr	r3, [pc, #404]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0ee      	beq.n	8005302 <HAL_RCC_OscConfig+0x33a>
 8005324:	e014      	b.n	8005350 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005326:	f7fd fbed 	bl	8002b04 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532c:	e00a      	b.n	8005344 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800532e:	f7fd fbe9 	bl	8002b04 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f241 3288 	movw	r2, #5000	; 0x1388
 800533c:	4293      	cmp	r3, r2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e0af      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005344:	4b5a      	ldr	r3, [pc, #360]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ee      	bne.n	800532e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005350:	7dfb      	ldrb	r3, [r7, #23]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d105      	bne.n	8005362 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005356:	4b56      	ldr	r3, [pc, #344]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	4a55      	ldr	r2, [pc, #340]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 800535c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005360:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 809b 	beq.w	80054a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800536c:	4b50      	ldr	r3, [pc, #320]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 030c 	and.w	r3, r3, #12
 8005374:	2b08      	cmp	r3, #8
 8005376:	d05c      	beq.n	8005432 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d141      	bne.n	8005404 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005380:	4b4c      	ldr	r3, [pc, #304]	; (80054b4 <HAL_RCC_OscConfig+0x4ec>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005386:	f7fd fbbd 	bl	8002b04 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538e:	f7fd fbb9 	bl	8002b04 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e081      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a0:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f0      	bne.n	800538e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	019b      	lsls	r3, r3, #6
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	3b01      	subs	r3, #1
 80053c6:	041b      	lsls	r3, r3, #16
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	061b      	lsls	r3, r3, #24
 80053d0:	4937      	ldr	r1, [pc, #220]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053d6:	4b37      	ldr	r3, [pc, #220]	; (80054b4 <HAL_RCC_OscConfig+0x4ec>)
 80053d8:	2201      	movs	r2, #1
 80053da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fd fb92 	bl	8002b04 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fd fb8e 	bl	8002b04 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e056      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f6:	4b2e      	ldr	r3, [pc, #184]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x41c>
 8005402:	e04e      	b.n	80054a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005404:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <HAL_RCC_OscConfig+0x4ec>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7fd fb7b 	bl	8002b04 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005412:	f7fd fb77 	bl	8002b04 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e03f      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005424:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f0      	bne.n	8005412 <HAL_RCC_OscConfig+0x44a>
 8005430:	e037      	b.n	80054a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d101      	bne.n	800543e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e032      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800543e:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <HAL_RCC_OscConfig+0x4e8>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d028      	beq.n	800549e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005456:	429a      	cmp	r2, r3
 8005458:	d121      	bne.n	800549e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d11a      	bne.n	800549e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800546e:	4013      	ands	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005474:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005476:	4293      	cmp	r3, r2
 8005478:	d111      	bne.n	800549e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	3b01      	subs	r3, #1
 8005488:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d107      	bne.n	800549e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d001      	beq.n	80054a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40007000 	.word	0x40007000
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470060 	.word	0x42470060

080054b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0cc      	b.n	8005666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054cc:	4b68      	ldr	r3, [pc, #416]	; (8005670 <HAL_RCC_ClockConfig+0x1b8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d90c      	bls.n	80054f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054da:	4b65      	ldr	r3, [pc, #404]	; (8005670 <HAL_RCC_ClockConfig+0x1b8>)
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	4b63      	ldr	r3, [pc, #396]	; (8005670 <HAL_RCC_ClockConfig+0x1b8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0b8      	b.n	8005666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d020      	beq.n	8005542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800550c:	4b59      	ldr	r3, [pc, #356]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	4a58      	ldr	r2, [pc, #352]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005524:	4b53      	ldr	r3, [pc, #332]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a52      	ldr	r2, [pc, #328]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800552e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005530:	4b50      	ldr	r3, [pc, #320]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	494d      	ldr	r1, [pc, #308]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 800553e:	4313      	orrs	r3, r2
 8005540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d044      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d107      	bne.n	8005566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005556:	4b47      	ldr	r3, [pc, #284]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d119      	bne.n	8005596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e07f      	b.n	8005666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d003      	beq.n	8005576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005572:	2b03      	cmp	r3, #3
 8005574:	d107      	bne.n	8005586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005576:	4b3f      	ldr	r3, [pc, #252]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e06f      	b.n	8005666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005586:	4b3b      	ldr	r3, [pc, #236]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e067      	b.n	8005666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005596:	4b37      	ldr	r3, [pc, #220]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f023 0203 	bic.w	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4934      	ldr	r1, [pc, #208]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a8:	f7fd faac 	bl	8002b04 <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ae:	e00a      	b.n	80055c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b0:	f7fd faa8 	bl	8002b04 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e04f      	b.n	8005666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	4b2b      	ldr	r3, [pc, #172]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 020c 	and.w	r2, r3, #12
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d1eb      	bne.n	80055b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055d8:	4b25      	ldr	r3, [pc, #148]	; (8005670 <HAL_RCC_ClockConfig+0x1b8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d20c      	bcs.n	8005600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e6:	4b22      	ldr	r3, [pc, #136]	; (8005670 <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ee:	4b20      	ldr	r3, [pc, #128]	; (8005670 <HAL_RCC_ClockConfig+0x1b8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d001      	beq.n	8005600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e032      	b.n	8005666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d008      	beq.n	800561e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4916      	ldr	r1, [pc, #88]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	4313      	orrs	r3, r2
 800561c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800562a:	4b12      	ldr	r3, [pc, #72]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	490e      	ldr	r1, [pc, #56]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	4313      	orrs	r3, r2
 800563c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800563e:	f000 f821 	bl	8005684 <HAL_RCC_GetSysClockFreq>
 8005642:	4602      	mov	r2, r0
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	490a      	ldr	r1, [pc, #40]	; (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 8005650:	5ccb      	ldrb	r3, [r1, r3]
 8005652:	fa22 f303 	lsr.w	r3, r2, r3
 8005656:	4a09      	ldr	r2, [pc, #36]	; (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fd f92e 	bl	80028c0 <HAL_InitTick>

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40023c00 	.word	0x40023c00
 8005674:	40023800 	.word	0x40023800
 8005678:	0800d288 	.word	0x0800d288
 800567c:	20000000 	.word	0x20000000
 8005680:	20000004 	.word	0x20000004

08005684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005684:	b5b0      	push	{r4, r5, r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800568a:	2100      	movs	r1, #0
 800568c:	6079      	str	r1, [r7, #4]
 800568e:	2100      	movs	r1, #0
 8005690:	60f9      	str	r1, [r7, #12]
 8005692:	2100      	movs	r1, #0
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005696:	2100      	movs	r1, #0
 8005698:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800569a:	4952      	ldr	r1, [pc, #328]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800569c:	6889      	ldr	r1, [r1, #8]
 800569e:	f001 010c 	and.w	r1, r1, #12
 80056a2:	2908      	cmp	r1, #8
 80056a4:	d00d      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80056a6:	2908      	cmp	r1, #8
 80056a8:	f200 8094 	bhi.w	80057d4 <HAL_RCC_GetSysClockFreq+0x150>
 80056ac:	2900      	cmp	r1, #0
 80056ae:	d002      	beq.n	80056b6 <HAL_RCC_GetSysClockFreq+0x32>
 80056b0:	2904      	cmp	r1, #4
 80056b2:	d003      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x38>
 80056b4:	e08e      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056b6:	4b4c      	ldr	r3, [pc, #304]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80056b8:	60bb      	str	r3, [r7, #8]
       break;
 80056ba:	e08e      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056bc:	4b4b      	ldr	r3, [pc, #300]	; (80057ec <HAL_RCC_GetSysClockFreq+0x168>)
 80056be:	60bb      	str	r3, [r7, #8]
      break;
 80056c0:	e08b      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056c2:	4948      	ldr	r1, [pc, #288]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80056c4:	6849      	ldr	r1, [r1, #4]
 80056c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80056ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056cc:	4945      	ldr	r1, [pc, #276]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80056ce:	6849      	ldr	r1, [r1, #4]
 80056d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d024      	beq.n	8005722 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d8:	4942      	ldr	r1, [pc, #264]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80056da:	6849      	ldr	r1, [r1, #4]
 80056dc:	0989      	lsrs	r1, r1, #6
 80056de:	4608      	mov	r0, r1
 80056e0:	f04f 0100 	mov.w	r1, #0
 80056e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80056e8:	f04f 0500 	mov.w	r5, #0
 80056ec:	ea00 0204 	and.w	r2, r0, r4
 80056f0:	ea01 0305 	and.w	r3, r1, r5
 80056f4:	493d      	ldr	r1, [pc, #244]	; (80057ec <HAL_RCC_GetSysClockFreq+0x168>)
 80056f6:	fb01 f003 	mul.w	r0, r1, r3
 80056fa:	2100      	movs	r1, #0
 80056fc:	fb01 f102 	mul.w	r1, r1, r2
 8005700:	1844      	adds	r4, r0, r1
 8005702:	493a      	ldr	r1, [pc, #232]	; (80057ec <HAL_RCC_GetSysClockFreq+0x168>)
 8005704:	fba2 0101 	umull	r0, r1, r2, r1
 8005708:	1863      	adds	r3, r4, r1
 800570a:	4619      	mov	r1, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	461a      	mov	r2, r3
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	f7fa ff90 	bl	8000638 <__aeabi_uldivmod>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4613      	mov	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e04a      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005722:	4b30      	ldr	r3, [pc, #192]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	461a      	mov	r2, r3
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005732:	f04f 0100 	mov.w	r1, #0
 8005736:	ea02 0400 	and.w	r4, r2, r0
 800573a:	ea03 0501 	and.w	r5, r3, r1
 800573e:	4620      	mov	r0, r4
 8005740:	4629      	mov	r1, r5
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	014b      	lsls	r3, r1, #5
 800574c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005750:	0142      	lsls	r2, r0, #5
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	1b00      	subs	r0, r0, r4
 8005758:	eb61 0105 	sbc.w	r1, r1, r5
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	018b      	lsls	r3, r1, #6
 8005766:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800576a:	0182      	lsls	r2, r0, #6
 800576c:	1a12      	subs	r2, r2, r0
 800576e:	eb63 0301 	sbc.w	r3, r3, r1
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f04f 0100 	mov.w	r1, #0
 800577a:	00d9      	lsls	r1, r3, #3
 800577c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005780:	00d0      	lsls	r0, r2, #3
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	1912      	adds	r2, r2, r4
 8005788:	eb45 0303 	adc.w	r3, r5, r3
 800578c:	f04f 0000 	mov.w	r0, #0
 8005790:	f04f 0100 	mov.w	r1, #0
 8005794:	0299      	lsls	r1, r3, #10
 8005796:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800579a:	0290      	lsls	r0, r2, #10
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f04f 0300 	mov.w	r3, #0
 80057ac:	f7fa ff44 	bl	8000638 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4613      	mov	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	3301      	adds	r3, #1
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	60bb      	str	r3, [r7, #8]
      break;
 80057d2:	e002      	b.n	80057da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80057d6:	60bb      	str	r3, [r7, #8]
      break;
 80057d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057da:	68bb      	ldr	r3, [r7, #8]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bdb0      	pop	{r4, r5, r7, pc}
 80057e4:	40023800 	.word	0x40023800
 80057e8:	00f42400 	.word	0x00f42400
 80057ec:	00b71b00 	.word	0x00b71b00

080057f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <HAL_RCC_GetHCLKFreq+0x14>)
 80057f6:	681b      	ldr	r3, [r3, #0]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000

08005808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800580c:	f7ff fff0 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0a9b      	lsrs	r3, r3, #10
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4903      	ldr	r1, [pc, #12]	; (800582c <HAL_RCC_GetPCLK1Freq+0x24>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	0800d298 	.word	0x0800d298

08005830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005834:	f7ff ffdc 	bl	80057f0 <HAL_RCC_GetHCLKFreq>
 8005838:	4602      	mov	r2, r0
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	0b5b      	lsrs	r3, r3, #13
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	4903      	ldr	r1, [pc, #12]	; (8005854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005846:	5ccb      	ldrb	r3, [r1, r3]
 8005848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800584c:	4618      	mov	r0, r3
 800584e:	bd80      	pop	{r7, pc}
 8005850:	40023800 	.word	0x40023800
 8005854:	0800d298 	.word	0x0800d298

08005858 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	220f      	movs	r2, #15
 8005866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005868:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <HAL_RCC_GetClockConfig+0x5c>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0203 	and.w	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <HAL_RCC_GetClockConfig+0x5c>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_RCC_GetClockConfig+0x5c>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	08db      	lsrs	r3, r3, #3
 8005892:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <HAL_RCC_GetClockConfig+0x60>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 020f 	and.w	r2, r3, #15
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	601a      	str	r2, [r3, #0]
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40023c00 	.word	0x40023c00

080058bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d075      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058f0:	4bad      	ldr	r3, [pc, #692]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058f6:	f7fd f905 	bl	8002b04 <HAL_GetTick>
 80058fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058fe:	f7fd f901 	bl	8002b04 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e18b      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005910:	4ba6      	ldr	r3, [pc, #664]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f0      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	019a      	lsls	r2, r3, #6
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	071b      	lsls	r3, r3, #28
 8005934:	499d      	ldr	r1, [pc, #628]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0302 	and.w	r3, r3, #2
 8005944:	2b00      	cmp	r3, #0
 8005946:	d01f      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005948:	4b98      	ldr	r3, [pc, #608]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594e:	0f1b      	lsrs	r3, r3, #28
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	019a      	lsls	r2, r3, #6
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	061b      	lsls	r3, r3, #24
 8005962:	431a      	orrs	r2, r3
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	071b      	lsls	r3, r3, #28
 8005968:	4990      	ldr	r1, [pc, #576]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800596a:	4313      	orrs	r3, r2
 800596c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005970:	4b8e      	ldr	r3, [pc, #568]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005976:	f023 021f 	bic.w	r2, r3, #31
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	3b01      	subs	r3, #1
 8005980:	498a      	ldr	r1, [pc, #552]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	019a      	lsls	r2, r3, #6
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	061b      	lsls	r3, r3, #24
 80059a0:	431a      	orrs	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	071b      	lsls	r3, r3, #28
 80059a8:	4980      	ldr	r1, [pc, #512]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059b0:	4b7d      	ldr	r3, [pc, #500]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059b6:	f7fd f8a5 	bl	8002b04 <HAL_GetTick>
 80059ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059bc:	e008      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059be:	f7fd f8a1 	bl	8002b04 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e12b      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d0:	4b76      	ldr	r3, [pc, #472]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d079      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059f4:	4b6e      	ldr	r3, [pc, #440]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059fa:	f7fd f883 	bl	8002b04 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a00:	e008      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a02:	f7fd f87f 	bl	8002b04 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e109      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a14:	4b65      	ldr	r3, [pc, #404]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a20:	d0ef      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a2e:	4b5f      	ldr	r3, [pc, #380]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	0f1b      	lsrs	r3, r3, #28
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	019a      	lsls	r2, r3, #6
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	061b      	lsls	r3, r3, #24
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	071b      	lsls	r3, r3, #28
 8005a4e:	4957      	ldr	r1, [pc, #348]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a56:	4b55      	ldr	r3, [pc, #340]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	4950      	ldr	r1, [pc, #320]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01e      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a7c:	4b4b      	ldr	r3, [pc, #300]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	0e1b      	lsrs	r3, r3, #24
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	019a      	lsls	r2, r3, #6
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	061b      	lsls	r3, r3, #24
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	071b      	lsls	r3, r3, #28
 8005a9c:	4943      	ldr	r1, [pc, #268]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005aa4:	4b41      	ldr	r3, [pc, #260]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aaa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	493e      	ldr	r1, [pc, #248]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005aba:	4b3d      	ldr	r3, [pc, #244]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ac0:	f7fd f820 	bl	8002b04 <HAL_GetTick>
 8005ac4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ac8:	f7fd f81c 	bl	8002b04 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e0a6      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ada:	4b34      	ldr	r3, [pc, #208]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae6:	d1ef      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 808d 	beq.w	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	4b2c      	ldr	r3, [pc, #176]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b04:	6413      	str	r3, [r2, #64]	; 0x40
 8005b06:	4b29      	ldr	r3, [pc, #164]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b12:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a27      	ldr	r2, [pc, #156]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b1e:	f7fc fff1 	bl	8002b04 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b26:	f7fc ffed 	bl	8002b04 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e077      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b44:	4b19      	ldr	r3, [pc, #100]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d039      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d032      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b72:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b78:	4a0c      	ldr	r2, [pc, #48]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d11e      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fc ffbb 	bl	8002b04 <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b90:	e014      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fc ffb7 	bl	8002b04 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d90b      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e03f      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005ba8:	42470068 	.word	0x42470068
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	42470070 	.word	0x42470070
 8005bb4:	40007000 	.word	0x40007000
 8005bb8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0e4      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd4:	d10d      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bea:	4911      	ldr	r1, [pc, #68]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	608b      	str	r3, [r1, #8]
 8005bf0:	e005      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	4a0e      	ldr	r2, [pc, #56]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bfc:	6093      	str	r3, [r2, #8]
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0a:	4909      	ldr	r1, [pc, #36]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c22:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c24:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40023800 	.word	0x40023800
 8005c34:	424711e0 	.word	0x424711e0

08005c38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e022      	b.n	8005c90 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d105      	bne.n	8005c62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fc fb9f 	bl	80023a0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2203      	movs	r2, #3
 8005c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f814 	bl	8005c98 <HAL_SD_InitCard>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e00a      	b.n	8005c90 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c98:	b5b0      	push	{r4, r5, r7, lr}
 8005c9a:	b08e      	sub	sp, #56	; 0x38
 8005c9c:	af04      	add	r7, sp, #16
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005cb4:	2376      	movs	r3, #118	; 0x76
 8005cb6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681d      	ldr	r5, [r3, #0]
 8005cbc:	466c      	mov	r4, sp
 8005cbe:	f107 0314 	add.w	r3, r7, #20
 8005cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f001 ff95 	bl	8007c00 <SDIO_Init>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e04c      	b.n	8005d82 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005ce8:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <HAL_SD_InitCard+0xf4>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 ffbc 	bl	8007c70 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005cf8:	4b24      	ldr	r3, [pc, #144]	; (8005d8c <HAL_SD_InitCard+0xf4>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fe10 	bl	8006924 <SD_PowerON>
 8005d04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e02e      	b.n	8005d82 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fd31 	bl	800678c <SD_InitCard>
 8005d2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e01b      	b.n	8005d82 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d52:	4618      	mov	r0, r3
 8005d54:	f002 f81f 	bl	8007d96 <SDMMC_CmdBlockLength>
 8005d58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00f      	beq.n	8005d80 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <HAL_SD_InitCard+0xf8>)
 8005d66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3728      	adds	r7, #40	; 0x28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bdb0      	pop	{r4, r5, r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	422580a0 	.word	0x422580a0
 8005d90:	004005ff 	.word	0x004005ff

08005d94 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	; 0x30
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0c0      	b.n	8005f3e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f040 80b9 	bne.w	8005f3c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d907      	bls.n	8005dee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e0a7      	b.n	8005f3e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2203      	movs	r2, #3
 8005df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8005e0c:	f043 0302 	orr.w	r3, r3, #2
 8005e10:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	4a4c      	ldr	r2, [pc, #304]	; (8005f48 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	4a4b      	ldr	r2, [pc, #300]	; (8005f4c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005e20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	2200      	movs	r2, #0
 8005e28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	2200      	movs	r2, #0
 8005e30:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3380      	adds	r3, #128	; 0x80
 8005e58:	4619      	mov	r1, r3
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	025b      	lsls	r3, r3, #9
 8005e60:	089b      	lsrs	r3, r3, #2
 8005e62:	f7fd fa44 	bl	80032ee <HAL_DMA_Start_IT>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d017      	beq.n	8005e9c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005e7a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a33      	ldr	r2, [pc, #204]	; (8005f50 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e050      	b.n	8005f3e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	025b      	lsls	r3, r3, #9
 8005eae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	025b      	lsls	r3, r3, #9
 8005eba:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005ebc:	2390      	movs	r3, #144	; 0x90
 8005ebe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f107 0210 	add.w	r2, r7, #16
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f001 ff31 	bl	8007d3e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d90a      	bls.n	8005ef8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2282      	movs	r2, #130	; 0x82
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f001 ff95 	bl	8007e1e <SDMMC_CmdReadMultiBlock>
 8005ef4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005ef6:	e009      	b.n	8005f0c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2281      	movs	r2, #129	; 0x81
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 ff68 	bl	8007dda <SDMMC_CmdReadSingleBlock>
 8005f0a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d012      	beq.n	8005f38 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a0e      	ldr	r2, [pc, #56]	; (8005f50 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	431a      	orrs	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e002      	b.n	8005f3e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e000      	b.n	8005f3e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
  }
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3730      	adds	r7, #48	; 0x30
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	08006677 	.word	0x08006677
 8005f4c:	080066e9 	.word	0x080066e9
 8005f50:	004005ff 	.word	0x004005ff
 8005f54:	4225858c 	.word	0x4225858c

08005f58 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08c      	sub	sp, #48	; 0x30
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d107      	bne.n	8005f80 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0c5      	b.n	800610c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	f040 80be 	bne.w	800610a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	441a      	add	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d907      	bls.n	8005fb2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e0ac      	b.n	800610c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8005fd0:	f043 0302 	orr.w	r3, r3, #2
 8005fd4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	4a4e      	ldr	r2, [pc, #312]	; (8006114 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8005fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	4a4d      	ldr	r2, [pc, #308]	; (8006118 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005fe4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fea:	2200      	movs	r2, #0
 8005fec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d002      	beq.n	8005ffc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	025b      	lsls	r3, r3, #9
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d90a      	bls.n	8006018 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	22a0      	movs	r2, #160	; 0xa0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800600e:	4618      	mov	r0, r3
 8006010:	f001 ff49 	bl	8007ea6 <SDMMC_CmdWriteMultiBlock>
 8006014:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006016:	e009      	b.n	800602c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2290      	movs	r2, #144	; 0x90
 800601c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006024:	4618      	mov	r0, r3
 8006026:	f001 ff1c 	bl	8007e62 <SDMMC_CmdWriteSingleBlock>
 800602a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d012      	beq.n	8006058 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a39      	ldr	r2, [pc, #228]	; (800611c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	431a      	orrs	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e059      	b.n	800610c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006058:	4b31      	ldr	r3, [pc, #196]	; (8006120 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800605a:	2201      	movs	r2, #1
 800605c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	2240      	movs	r2, #64	; 0x40
 8006064:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3380      	adds	r3, #128	; 0x80
 800608e:	461a      	mov	r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	025b      	lsls	r3, r3, #9
 8006094:	089b      	lsrs	r3, r3, #2
 8006096:	f7fd f92a 	bl	80032ee <HAL_DMA_Start_IT>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01c      	beq.n	80060da <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80060ae:	f023 0302 	bic.w	r3, r3, #2
 80060b2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a18      	ldr	r2, [pc, #96]	; (800611c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e018      	b.n	800610c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	025b      	lsls	r3, r3, #9
 80060e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80060e6:	2390      	movs	r3, #144	; 0x90
 80060e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80060ea:	2300      	movs	r3, #0
 80060ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f107 0210 	add.w	r2, r7, #16
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f001 fe1c 	bl	8007d3e <SDIO_ConfigData>

      return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3730      	adds	r7, #48	; 0x30
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	0800664d 	.word	0x0800664d
 8006118:	080066e9 	.word	0x080066e9
 800611c:	004005ff 	.word	0x004005ff
 8006120:	4225858c 	.word	0x4225858c

08006124 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006146:	0f9b      	lsrs	r3, r3, #30
 8006148:	b2da      	uxtb	r2, r3
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006152:	0e9b      	lsrs	r3, r3, #26
 8006154:	b2db      	uxtb	r3, r3
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	b2da      	uxtb	r2, r3
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006164:	0e1b      	lsrs	r3, r3, #24
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	b2da      	uxtb	r2, r3
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006176:	0c1b      	lsrs	r3, r3, #16
 8006178:	b2da      	uxtb	r2, r3
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b2da      	uxtb	r2, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800618e:	b2da      	uxtb	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006198:	0d1b      	lsrs	r3, r3, #20
 800619a:	b29a      	uxth	r2, r3
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b6:	0bdb      	lsrs	r3, r3, #15
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061c8:	0b9b      	lsrs	r3, r3, #14
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061da:	0b5b      	lsrs	r3, r3, #13
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ec:	0b1b      	lsrs	r3, r3, #12
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006204:	2b00      	cmp	r3, #0
 8006206:	d163      	bne.n	80062d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800620c:	009a      	lsls	r2, r3, #2
 800620e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006212:	4013      	ands	r3, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006218:	0f92      	lsrs	r2, r2, #30
 800621a:	431a      	orrs	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006224:	0edb      	lsrs	r3, r3, #27
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	b2da      	uxtb	r2, r3
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006236:	0e1b      	lsrs	r3, r3, #24
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	b2da      	uxtb	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006248:	0d5b      	lsrs	r3, r3, #21
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	b2da      	uxtb	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800625a:	0c9b      	lsrs	r3, r3, #18
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	b2da      	uxtb	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626c:	0bdb      	lsrs	r3, r3, #15
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	b2da      	uxtb	r2, r3
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	7e1b      	ldrb	r3, [r3, #24]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	3302      	adds	r3, #2
 8006290:	2201      	movs	r2, #1
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800629a:	fb02 f203 	mul.w	r2, r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	7a1b      	ldrb	r3, [r3, #8]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	2201      	movs	r2, #1
 80062ae:	409a      	lsls	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80062bc:	0a52      	lsrs	r2, r2, #9
 80062be:	fb02 f203 	mul.w	r2, r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062cc:	661a      	str	r2, [r3, #96]	; 0x60
 80062ce:	e031      	b.n	8006334 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d11d      	bne.n	8006314 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062dc:	041b      	lsls	r3, r3, #16
 80062de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e6:	0c1b      	lsrs	r3, r3, #16
 80062e8:	431a      	orrs	r2, r3
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	3301      	adds	r3, #1
 80062f4:	029a      	lsls	r2, r3, #10
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006308:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	661a      	str	r2, [r3, #96]	; 0x60
 8006312:	e00f      	b.n	8006334 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a58      	ldr	r2, [pc, #352]	; (800647c <HAL_SD_GetCardCSD+0x344>)
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e09d      	b.n	8006470 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006338:	0b9b      	lsrs	r3, r3, #14
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	b2da      	uxtb	r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634a:	09db      	lsrs	r3, r3, #7
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006352:	b2da      	uxtb	r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006362:	b2da      	uxtb	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636c:	0fdb      	lsrs	r3, r3, #31
 800636e:	b2da      	uxtb	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006378:	0f5b      	lsrs	r3, r3, #29
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	b2da      	uxtb	r2, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	0e9b      	lsrs	r3, r3, #26
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	b2da      	uxtb	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639c:	0d9b      	lsrs	r3, r3, #22
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ae:	0d5b      	lsrs	r3, r3, #21
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ca:	0c1b      	lsrs	r3, r3, #16
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063de:	0bdb      	lsrs	r3, r3, #15
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	0b9b      	lsrs	r3, r3, #14
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006406:	0b5b      	lsrs	r3, r3, #13
 8006408:	b2db      	uxtb	r3, r3
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	b2da      	uxtb	r2, r3
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	0b1b      	lsrs	r3, r3, #12
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642e:	0a9b      	lsrs	r3, r3, #10
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	b2da      	uxtb	r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	b2da      	uxtb	r2, r3
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645e:	b2da      	uxtb	r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	004005ff 	.word	0x004005ff

08006480 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80064d8:	b5b0      	push	{r4, r5, r7, lr}
 80064da:	b08e      	sub	sp, #56	; 0x38
 80064dc:	af04      	add	r7, sp, #16
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2203      	movs	r2, #3
 80064ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d02e      	beq.n	8006556 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fe:	d106      	bne.n	800650e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	639a      	str	r2, [r3, #56]	; 0x38
 800650c:	e029      	b.n	8006562 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006514:	d10a      	bne.n	800652c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 faba 	bl	8006a90 <SD_WideBus_Enable>
 800651c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	639a      	str	r2, [r3, #56]	; 0x38
 800652a:	e01a      	b.n	8006562 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 faf7 	bl	8006b26 <SD_WideBus_Disable>
 8006538:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
 8006546:	e00c      	b.n	8006562 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
 8006554:	e005      	b.n	8006562 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a26      	ldr	r2, [pc, #152]	; (8006608 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006580:	e01f      	b.n	80065c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681d      	ldr	r5, [r3, #0]
 80065a8:	466c      	mov	r4, sp
 80065aa:	f107 0314 	add.w	r3, r7, #20
 80065ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80065b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80065b6:	f107 0308 	add.w	r3, r7, #8
 80065ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065bc:	4628      	mov	r0, r5
 80065be:	f001 fb1f 	bl	8007c00 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 fbe3 	bl	8007d96 <SDMMC_CmdBlockLength>
 80065d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <HAL_SD_ConfigWideBusOperation+0x130>)
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80065fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3728      	adds	r7, #40	; 0x28
 8006602:	46bd      	mov	sp, r7
 8006604:	bdb0      	pop	{r4, r5, r7, pc}
 8006606:	bf00      	nop
 8006608:	004005ff 	.word	0x004005ff

0800660c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fa0e 	bl	8006a40 <SD_SendStatus>
 8006624:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	0a5b      	lsrs	r3, r3, #9
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006642:	693b      	ldr	r3, [r7, #16]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006668:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	2b82      	cmp	r3, #130	; 0x82
 800668a:	d111      	bne.n	80066b0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f001 fc2b 	bl	8007eec <SDMMC_CmdStopTransfer>
 8006696:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7ff fd3a 	bl	8006124 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0208 	bic.w	r2, r2, #8
 80066be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f002 fb35 	bl	8008d48 <HAL_SD_RxCpltCallback>
#endif
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fc fe51 	bl	800339e <HAL_DMA_GetError>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d03e      	beq.n	8006780 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006708:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d002      	beq.n	800671e <SD_DMAError+0x36>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d12d      	bne.n	800677a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a19      	ldr	r2, [pc, #100]	; (8006788 <SD_DMAError+0xa0>)
 8006724:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006734:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006742:	6978      	ldr	r0, [r7, #20]
 8006744:	f7ff ff62 	bl	800660c <HAL_SD_GetCardState>
 8006748:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b06      	cmp	r3, #6
 800674e:	d002      	beq.n	8006756 <SD_DMAError+0x6e>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b05      	cmp	r3, #5
 8006754:	d10a      	bne.n	800676c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f001 fbc6 	bl	8007eec <SDMMC_CmdStopTransfer>
 8006760:	4602      	mov	r2, r0
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	431a      	orrs	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800677a:	6978      	ldr	r0, [r7, #20]
 800677c:	f7ff fcd2 	bl	8006124 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006780:	bf00      	nop
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	004005ff 	.word	0x004005ff

0800678c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800678c:	b5b0      	push	{r4, r5, r7, lr}
 800678e:	b094      	sub	sp, #80	; 0x50
 8006790:	af04      	add	r7, sp, #16
 8006792:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006794:	2301      	movs	r3, #1
 8006796:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fa76 	bl	8007c8e <SDIO_GetPowerState>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067ac:	e0b6      	b.n	800691c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d02f      	beq.n	8006816 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fca0 	bl	8008100 <SDMMC_CmdSendCID>
 80067c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <SD_InitCard+0x40>
    {
      return errorstate;
 80067c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ca:	e0a7      	b.n	800691c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2100      	movs	r1, #0
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 faa0 	bl	8007d18 <SDIO_GetResponse>
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2104      	movs	r1, #4
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 fa97 	bl	8007d18 <SDIO_GetResponse>
 80067ea:	4602      	mov	r2, r0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2108      	movs	r1, #8
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 fa8e 	bl	8007d18 <SDIO_GetResponse>
 80067fc:	4602      	mov	r2, r0
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	210c      	movs	r1, #12
 8006808:	4618      	mov	r0, r3
 800680a:	f001 fa85 	bl	8007d18 <SDIO_GetResponse>
 800680e:	4602      	mov	r2, r0
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681a:	2b03      	cmp	r3, #3
 800681c:	d00d      	beq.n	800683a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f107 020e 	add.w	r2, r7, #14
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f001 fca6 	bl	800817a <SDMMC_CmdSetRelAdd>
 800682e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <SD_InitCard+0xae>
    {
      return errorstate;
 8006836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006838:	e070      	b.n	800691c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	2b03      	cmp	r3, #3
 8006840:	d036      	beq.n	80068b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006842:	89fb      	ldrh	r3, [r7, #14]
 8006844:	461a      	mov	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006852:	041b      	lsls	r3, r3, #16
 8006854:	4619      	mov	r1, r3
 8006856:	4610      	mov	r0, r2
 8006858:	f001 fc70 	bl	800813c <SDMMC_CmdSendCSD>
 800685c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	e059      	b.n	800691c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2100      	movs	r1, #0
 800686e:	4618      	mov	r0, r3
 8006870:	f001 fa52 	bl	8007d18 <SDIO_GetResponse>
 8006874:	4602      	mov	r2, r0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2104      	movs	r1, #4
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fa49 	bl	8007d18 <SDIO_GetResponse>
 8006886:	4602      	mov	r2, r0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2108      	movs	r1, #8
 8006892:	4618      	mov	r0, r3
 8006894:	f001 fa40 	bl	8007d18 <SDIO_GetResponse>
 8006898:	4602      	mov	r2, r0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	210c      	movs	r1, #12
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fa37 	bl	8007d18 <SDIO_GetResponse>
 80068aa:	4602      	mov	r2, r0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2104      	movs	r1, #4
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 fa2e 	bl	8007d18 <SDIO_GetResponse>
 80068bc:	4603      	mov	r3, r0
 80068be:	0d1a      	lsrs	r2, r3, #20
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80068c4:	f107 0310 	add.w	r3, r7, #16
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fc34 	bl	8006138 <HAL_SD_GetCardCSD>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068da:	e01f      	b.n	800691c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	461a      	mov	r2, r3
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	4608      	mov	r0, r1
 80068ee:	f001 fb1f 	bl	8007f30 <SDMMC_CmdSelDesel>
 80068f2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80068f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <SD_InitCard+0x172>
  {
    return errorstate;
 80068fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fc:	e00e      	b.n	800691c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681d      	ldr	r5, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	466c      	mov	r4, sp
 8006906:	f103 0210 	add.w	r2, r3, #16
 800690a:	ca07      	ldmia	r2, {r0, r1, r2}
 800690c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006910:	3304      	adds	r3, #4
 8006912:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006914:	4628      	mov	r0, r5
 8006916:	f001 f973 	bl	8007c00 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3740      	adds	r7, #64	; 0x40
 8006920:	46bd      	mov	sp, r7
 8006922:	bdb0      	pop	{r4, r5, r7, pc}

08006924 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f001 fb1a 	bl	8007f76 <SDMMC_CmdGoIdleState>
 8006942:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <SD_PowerON+0x2a>
  {
    return errorstate;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	e072      	b.n	8006a34 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fb2d 	bl	8007fb2 <SDMMC_CmdOperCond>
 8006958:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00d      	beq.n	800697c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fb03 	bl	8007f76 <SDMMC_CmdGoIdleState>
 8006970:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	e05b      	b.n	8006a34 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006986:	2b01      	cmp	r3, #1
 8006988:	d137      	bne.n	80069fa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2100      	movs	r1, #0
 8006990:	4618      	mov	r0, r3
 8006992:	f001 fb2d 	bl	8007ff0 <SDMMC_CmdAppCommand>
 8006996:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d02d      	beq.n	80069fa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800699e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069a2:	e047      	b.n	8006a34 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2100      	movs	r1, #0
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 fb20 	bl	8007ff0 <SDMMC_CmdAppCommand>
 80069b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <SD_PowerON+0x98>
    {
      return errorstate;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	e03b      	b.n	8006a34 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	491e      	ldr	r1, [pc, #120]	; (8006a3c <SD_PowerON+0x118>)
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 fb36 	bl	8008034 <SDMMC_CmdAppOperCommand>
 80069c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069d4:	e02e      	b.n	8006a34 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f001 f99b 	bl	8007d18 <SDIO_GetResponse>
 80069e2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	0fdb      	lsrs	r3, r3, #31
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <SD_PowerON+0xcc>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <SD_PowerON+0xce>
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]

    count++;
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	3301      	adds	r3, #1
 80069f8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d802      	bhi.n	8006a0a <SD_PowerON+0xe6>
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0cc      	beq.n	80069a4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d902      	bls.n	8006a1a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a18:	e00c      	b.n	8006a34 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	645a      	str	r2, [r3, #68]	; 0x44
 8006a2a:	e002      	b.n	8006a32 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	c1100000 	.word	0xc1100000

08006a40 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006a50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a54:	e018      	b.n	8006a88 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	4619      	mov	r1, r3
 8006a62:	4610      	mov	r0, r2
 8006a64:	f001 fbaa 	bl	80081bc <SDMMC_CmdSendStatus>
 8006a68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	e009      	b.n	8006a88 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f001 f94c 	bl	8007d18 <SDIO_GetResponse>
 8006a80:	4602      	mov	r2, r0
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 f936 	bl	8007d18 <SDIO_GetResponse>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ab6:	d102      	bne.n	8006abe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006abc:	e02f      	b.n	8006b1e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006abe:	f107 030c 	add.w	r3, r7, #12
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f879 	bl	8006bbc <SD_FindSCR>
 8006aca:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	e023      	b.n	8006b1e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01c      	beq.n	8006b1a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	041b      	lsls	r3, r3, #16
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f001 fa7f 	bl	8007ff0 <SDMMC_CmdAppCommand>
 8006af2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	e00f      	b.n	8006b1e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2102      	movs	r1, #2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 fab8 	bl	800807a <SDMMC_CmdBusWidth>
 8006b0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	e003      	b.n	8006b1e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e001      	b.n	8006b1e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006b1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b086      	sub	sp, #24
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	2300      	movs	r3, #0
 8006b34:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 f8eb 	bl	8007d18 <SDIO_GetResponse>
 8006b42:	4603      	mov	r3, r0
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b4c:	d102      	bne.n	8006b54 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b52:	e02f      	b.n	8006bb4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006b54:	f107 030c 	add.w	r3, r7, #12
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f82e 	bl	8006bbc <SD_FindSCR>
 8006b60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	e023      	b.n	8006bb4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d01c      	beq.n	8006bb0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f001 fa34 	bl	8007ff0 <SDMMC_CmdAppCommand>
 8006b88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	e00f      	b.n	8006bb4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f001 fa6d 	bl	800807a <SDMMC_CmdBusWidth>
 8006ba0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	e003      	b.n	8006bb4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e001      	b.n	8006bb4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006bb0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006bbc:	b590      	push	{r4, r7, lr}
 8006bbe:	b08f      	sub	sp, #60	; 0x3c
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006bc6:	f7fb ff9d 	bl	8002b04 <HAL_GetTick>
 8006bca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60bb      	str	r3, [r7, #8]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2108      	movs	r1, #8
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 f8d7 	bl	8007d96 <SDMMC_CmdBlockLength>
 8006be8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	e0b2      	b.n	8006d5a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfc:	041b      	lsls	r3, r3, #16
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f001 f9f5 	bl	8007ff0 <SDMMC_CmdAppCommand>
 8006c06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	e0a3      	b.n	8006d5a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c12:	f04f 33ff 	mov.w	r3, #4294967295
 8006c16:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006c18:	2308      	movs	r3, #8
 8006c1a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006c1c:	2330      	movs	r3, #48	; 0x30
 8006c1e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006c20:	2302      	movs	r3, #2
 8006c22:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f107 0210 	add.w	r2, r7, #16
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 f881 	bl	8007d3e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 fa3c 	bl	80080be <SDMMC_CmdSendSCR>
 8006c46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d02a      	beq.n	8006ca4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	e083      	b.n	8006d5a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	f107 0208 	add.w	r2, r7, #8
 8006c6c:	18d4      	adds	r4, r2, r3
 8006c6e:	4608      	mov	r0, r1
 8006c70:	f000 fff1 	bl	8007c56 <SDIO_ReadFIFO>
 8006c74:	4603      	mov	r3, r0
 8006c76:	6023      	str	r3, [r4, #0]
      index++;
 8006c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7e:	e006      	b.n	8006c8e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d012      	beq.n	8006cb4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c8e:	f7fb ff39 	bl	8002b04 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d102      	bne.n	8006ca4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ca2:	e05a      	b.n	8006d5a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006caa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0cf      	beq.n	8006c52 <SD_FindSCR+0x96>
 8006cb2:	e000      	b.n	8006cb6 <SD_FindSCR+0xfa>
      break;
 8006cb4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2208      	movs	r2, #8
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006ccc:	2308      	movs	r3, #8
 8006cce:	e044      	b.n	8006d5a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e037      	b.n	8006d5a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006d00:	2320      	movs	r3, #32
 8006d02:	e02a      	b.n	8006d5a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	061a      	lsls	r2, r3, #24
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d1a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	0a1b      	lsrs	r3, r3, #8
 8006d20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d24:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	0e1b      	lsrs	r3, r3, #24
 8006d2a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2e:	601a      	str	r2, [r3, #0]
    scr++;
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	3304      	adds	r3, #4
 8006d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	061a      	lsls	r2, r3, #24
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d42:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006d4c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	0e1b      	lsrs	r3, r3, #24
 8006d52:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	373c      	adds	r7, #60	; 0x3c
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd90      	pop	{r4, r7, pc}

08006d62 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e025      	b.n	8006dc2 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7fb fd8e 	bl	80028ac <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4619      	mov	r1, r3
 8006da2:	4610      	mov	r0, r2
 8006da4:	f000 fe3a 	bl	8007a1c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6818      	ldr	r0, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	f000 fea5 	bl	8007b02 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e07b      	b.n	8006ed4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d108      	bne.n	8006df6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dec:	d009      	beq.n	8006e02 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	61da      	str	r2, [r3, #28]
 8006df4:	e005      	b.n	8006e02 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7fb fb27 	bl	8002470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e54:	431a      	orrs	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e86:	ea42 0103 	orr.w	r1, r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	0c1b      	lsrs	r3, r3, #16
 8006ea0:	f003 0104 	and.w	r1, r3, #4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	f003 0210 	and.w	r2, r3, #16
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69da      	ldr	r2, [r3, #28]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ec2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e041      	b.n	8006f72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f839 	bl	8006f7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f000 f9d8 	bl	80072d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d001      	beq.n	8006fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e04e      	b.n	8007046 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68da      	ldr	r2, [r3, #12]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f042 0201 	orr.w	r2, r2, #1
 8006fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a23      	ldr	r2, [pc, #140]	; (8007054 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d022      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x80>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd2:	d01d      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x80>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d018      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x80>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	; (800705c <HAL_TIM_Base_Start_IT+0xcc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d013      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x80>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00e      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x80>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1b      	ldr	r2, [pc, #108]	; (8007064 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d009      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x80>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a19      	ldr	r2, [pc, #100]	; (8007068 <HAL_TIM_Base_Start_IT+0xd8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x80>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a18      	ldr	r2, [pc, #96]	; (800706c <HAL_TIM_Base_Start_IT+0xdc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d111      	bne.n	8007034 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b06      	cmp	r3, #6
 8007020:	d010      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0201 	orr.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007032:	e007      	b.n	8007044 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40010000 	.word	0x40010000
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800
 8007060:	40000c00 	.word	0x40000c00
 8007064:	40010400 	.word	0x40010400
 8007068:	40014000 	.word	0x40014000
 800706c:	40001800 	.word	0x40001800

08007070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d122      	bne.n	80070cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d11b      	bne.n	80070cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0202 	mvn.w	r2, #2
 800709c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f8ee 	bl	8007294 <HAL_TIM_IC_CaptureCallback>
 80070b8:	e005      	b.n	80070c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f8e0 	bl	8007280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f8f1 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d122      	bne.n	8007120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d11b      	bne.n	8007120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f06f 0204 	mvn.w	r2, #4
 80070f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2202      	movs	r2, #2
 80070f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f8c4 	bl	8007294 <HAL_TIM_IC_CaptureCallback>
 800710c:	e005      	b.n	800711a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f8b6 	bl	8007280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f8c7 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b08      	cmp	r3, #8
 800712c:	d122      	bne.n	8007174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b08      	cmp	r3, #8
 800713a:	d11b      	bne.n	8007174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0208 	mvn.w	r2, #8
 8007144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2204      	movs	r2, #4
 800714a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f003 0303 	and.w	r3, r3, #3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f89a 	bl	8007294 <HAL_TIM_IC_CaptureCallback>
 8007160:	e005      	b.n	800716e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f88c 	bl	8007280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f89d 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0310 	and.w	r3, r3, #16
 800717e:	2b10      	cmp	r3, #16
 8007180:	d122      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	2b10      	cmp	r3, #16
 800718e:	d11b      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0210 	mvn.w	r2, #16
 8007198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2208      	movs	r2, #8
 800719e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f870 	bl	8007294 <HAL_TIM_IC_CaptureCallback>
 80071b4:	e005      	b.n	80071c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f862 	bl	8007280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f873 	bl	80072a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d10e      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d107      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f06f 0201 	mvn.w	r2, #1
 80071ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fa ff00 	bl	8001ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fe:	2b80      	cmp	r3, #128	; 0x80
 8007200:	d10e      	bne.n	8007220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720c:	2b80      	cmp	r3, #128	; 0x80
 800720e:	d107      	bne.n	8007220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f902 	bl	8007424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d10e      	bne.n	800724c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007238:	2b40      	cmp	r3, #64	; 0x40
 800723a:	d107      	bne.n	800724c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f838 	bl	80072bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b20      	cmp	r3, #32
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b20      	cmp	r3, #32
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0220 	mvn.w	r2, #32
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f8cc 	bl	8007410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a40      	ldr	r2, [pc, #256]	; (80073e4 <TIM_Base_SetConfig+0x114>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d013      	beq.n	8007310 <TIM_Base_SetConfig+0x40>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ee:	d00f      	beq.n	8007310 <TIM_Base_SetConfig+0x40>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a3d      	ldr	r2, [pc, #244]	; (80073e8 <TIM_Base_SetConfig+0x118>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00b      	beq.n	8007310 <TIM_Base_SetConfig+0x40>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a3c      	ldr	r2, [pc, #240]	; (80073ec <TIM_Base_SetConfig+0x11c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d007      	beq.n	8007310 <TIM_Base_SetConfig+0x40>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a3b      	ldr	r2, [pc, #236]	; (80073f0 <TIM_Base_SetConfig+0x120>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d003      	beq.n	8007310 <TIM_Base_SetConfig+0x40>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a3a      	ldr	r2, [pc, #232]	; (80073f4 <TIM_Base_SetConfig+0x124>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d108      	bne.n	8007322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a2f      	ldr	r2, [pc, #188]	; (80073e4 <TIM_Base_SetConfig+0x114>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d02b      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007330:	d027      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a2c      	ldr	r2, [pc, #176]	; (80073e8 <TIM_Base_SetConfig+0x118>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d023      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2b      	ldr	r2, [pc, #172]	; (80073ec <TIM_Base_SetConfig+0x11c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01f      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a2a      	ldr	r2, [pc, #168]	; (80073f0 <TIM_Base_SetConfig+0x120>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d01b      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a29      	ldr	r2, [pc, #164]	; (80073f4 <TIM_Base_SetConfig+0x124>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d017      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a28      	ldr	r2, [pc, #160]	; (80073f8 <TIM_Base_SetConfig+0x128>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a27      	ldr	r2, [pc, #156]	; (80073fc <TIM_Base_SetConfig+0x12c>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d00f      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a26      	ldr	r2, [pc, #152]	; (8007400 <TIM_Base_SetConfig+0x130>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00b      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a25      	ldr	r2, [pc, #148]	; (8007404 <TIM_Base_SetConfig+0x134>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d007      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a24      	ldr	r2, [pc, #144]	; (8007408 <TIM_Base_SetConfig+0x138>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_Base_SetConfig+0xb2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a23      	ldr	r2, [pc, #140]	; (800740c <TIM_Base_SetConfig+0x13c>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d108      	bne.n	8007394 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a0a      	ldr	r2, [pc, #40]	; (80073e4 <TIM_Base_SetConfig+0x114>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d003      	beq.n	80073c8 <TIM_Base_SetConfig+0xf8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a0c      	ldr	r2, [pc, #48]	; (80073f4 <TIM_Base_SetConfig+0x124>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d103      	bne.n	80073d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	615a      	str	r2, [r3, #20]
}
 80073d6:	bf00      	nop
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	40000c00 	.word	0x40000c00
 80073f4:	40010400 	.word	0x40010400
 80073f8:	40014000 	.word	0x40014000
 80073fc:	40014400 	.word	0x40014400
 8007400:	40014800 	.word	0x40014800
 8007404:	40001800 	.word	0x40001800
 8007408:	40001c00 	.word	0x40001c00
 800740c:	40002000 	.word	0x40002000

08007410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e03f      	b.n	80074ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fb f84e 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2224      	movs	r2, #36	; 0x24
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800747a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f905 	bl	800768c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007490:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b08a      	sub	sp, #40	; 0x28
 80074d6:	af02      	add	r7, sp, #8
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	603b      	str	r3, [r7, #0]
 80074de:	4613      	mov	r3, r2
 80074e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d17c      	bne.n	80075ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_UART_Transmit+0x2c>
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e075      	b.n	80075ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_UART_Transmit+0x3e>
 800750c:	2302      	movs	r3, #2
 800750e:	e06e      	b.n	80075ee <HAL_UART_Transmit+0x11c>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2221      	movs	r2, #33	; 0x21
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007526:	f7fb faed 	bl	8002b04 <HAL_GetTick>
 800752a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007540:	d108      	bne.n	8007554 <HAL_UART_Transmit+0x82>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d104      	bne.n	8007554 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	61bb      	str	r3, [r7, #24]
 8007552:	e003      	b.n	800755c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007558:	2300      	movs	r3, #0
 800755a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007564:	e02a      	b.n	80075bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2200      	movs	r2, #0
 800756e:	2180      	movs	r1, #128	; 0x80
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f840 	bl	80075f6 <UART_WaitOnFlagUntilTimeout>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e036      	b.n	80075ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10b      	bne.n	800759e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	3302      	adds	r3, #2
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	e007      	b.n	80075ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	781a      	ldrb	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1cf      	bne.n	8007566 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2200      	movs	r2, #0
 80075ce:	2140      	movs	r1, #64	; 0x40
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f000 f810 	bl	80075f6 <UART_WaitOnFlagUntilTimeout>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e006      	b.n	80075ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	e000      	b.n	80075ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80075ec:	2302      	movs	r3, #2
  }
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3720      	adds	r7, #32
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	4613      	mov	r3, r2
 8007604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007606:	e02c      	b.n	8007662 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d028      	beq.n	8007662 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <UART_WaitOnFlagUntilTimeout+0x30>
 8007616:	f7fb fa75 	bl	8002b04 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	429a      	cmp	r2, r3
 8007624:	d21d      	bcs.n	8007662 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68da      	ldr	r2, [r3, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007634:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	695a      	ldr	r2, [r3, #20]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0201 	bic.w	r2, r2, #1
 8007644:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e00f      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4013      	ands	r3, r2
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	429a      	cmp	r2, r3
 8007670:	bf0c      	ite	eq
 8007672:	2301      	moveq	r3, #1
 8007674:	2300      	movne	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	461a      	mov	r2, r3
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	429a      	cmp	r2, r3
 800767e:	d0c3      	beq.n	8007608 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007690:	b09f      	sub	sp, #124	; 0x7c
 8007692:	af00      	add	r7, sp, #0
 8007694:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a2:	68d9      	ldr	r1, [r3, #12]
 80076a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	ea40 0301 	orr.w	r3, r0, r1
 80076ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	431a      	orrs	r2, r3
 80076be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80076c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80076d0:	f021 010c 	bic.w	r1, r1, #12
 80076d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076da:	430b      	orrs	r3, r1
 80076dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ea:	6999      	ldr	r1, [r3, #24]
 80076ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	ea40 0301 	orr.w	r3, r0, r1
 80076f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4bc5      	ldr	r3, [pc, #788]	; (8007a10 <UART_SetConfig+0x384>)
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d004      	beq.n	800770a <UART_SetConfig+0x7e>
 8007700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4bc3      	ldr	r3, [pc, #780]	; (8007a14 <UART_SetConfig+0x388>)
 8007706:	429a      	cmp	r2, r3
 8007708:	d103      	bne.n	8007712 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800770a:	f7fe f891 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 800770e:	6778      	str	r0, [r7, #116]	; 0x74
 8007710:	e002      	b.n	8007718 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007712:	f7fe f879 	bl	8005808 <HAL_RCC_GetPCLK1Freq>
 8007716:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007720:	f040 80b6 	bne.w	8007890 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007726:	461c      	mov	r4, r3
 8007728:	f04f 0500 	mov.w	r5, #0
 800772c:	4622      	mov	r2, r4
 800772e:	462b      	mov	r3, r5
 8007730:	1891      	adds	r1, r2, r2
 8007732:	6439      	str	r1, [r7, #64]	; 0x40
 8007734:	415b      	adcs	r3, r3
 8007736:	647b      	str	r3, [r7, #68]	; 0x44
 8007738:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800773c:	1912      	adds	r2, r2, r4
 800773e:	eb45 0303 	adc.w	r3, r5, r3
 8007742:	f04f 0000 	mov.w	r0, #0
 8007746:	f04f 0100 	mov.w	r1, #0
 800774a:	00d9      	lsls	r1, r3, #3
 800774c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007750:	00d0      	lsls	r0, r2, #3
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	1911      	adds	r1, r2, r4
 8007758:	6639      	str	r1, [r7, #96]	; 0x60
 800775a:	416b      	adcs	r3, r5
 800775c:	667b      	str	r3, [r7, #100]	; 0x64
 800775e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	461a      	mov	r2, r3
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	1891      	adds	r1, r2, r2
 800776a:	63b9      	str	r1, [r7, #56]	; 0x38
 800776c:	415b      	adcs	r3, r3
 800776e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007774:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007778:	f7f8 ff5e 	bl	8000638 <__aeabi_uldivmod>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4ba5      	ldr	r3, [pc, #660]	; (8007a18 <UART_SetConfig+0x38c>)
 8007782:	fba3 2302 	umull	r2, r3, r3, r2
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	011e      	lsls	r6, r3, #4
 800778a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800778c:	461c      	mov	r4, r3
 800778e:	f04f 0500 	mov.w	r5, #0
 8007792:	4622      	mov	r2, r4
 8007794:	462b      	mov	r3, r5
 8007796:	1891      	adds	r1, r2, r2
 8007798:	6339      	str	r1, [r7, #48]	; 0x30
 800779a:	415b      	adcs	r3, r3
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80077a2:	1912      	adds	r2, r2, r4
 80077a4:	eb45 0303 	adc.w	r3, r5, r3
 80077a8:	f04f 0000 	mov.w	r0, #0
 80077ac:	f04f 0100 	mov.w	r1, #0
 80077b0:	00d9      	lsls	r1, r3, #3
 80077b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077b6:	00d0      	lsls	r0, r2, #3
 80077b8:	4602      	mov	r2, r0
 80077ba:	460b      	mov	r3, r1
 80077bc:	1911      	adds	r1, r2, r4
 80077be:	65b9      	str	r1, [r7, #88]	; 0x58
 80077c0:	416b      	adcs	r3, r5
 80077c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	461a      	mov	r2, r3
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	1891      	adds	r1, r2, r2
 80077d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80077d2:	415b      	adcs	r3, r3
 80077d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80077de:	f7f8 ff2b 	bl	8000638 <__aeabi_uldivmod>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4b8c      	ldr	r3, [pc, #560]	; (8007a18 <UART_SetConfig+0x38c>)
 80077e8:	fba3 1302 	umull	r1, r3, r3, r2
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	2164      	movs	r1, #100	; 0x64
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	3332      	adds	r3, #50	; 0x32
 80077fa:	4a87      	ldr	r2, [pc, #540]	; (8007a18 <UART_SetConfig+0x38c>)
 80077fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007800:	095b      	lsrs	r3, r3, #5
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007808:	441e      	add	r6, r3
 800780a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800780c:	4618      	mov	r0, r3
 800780e:	f04f 0100 	mov.w	r1, #0
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	1894      	adds	r4, r2, r2
 8007818:	623c      	str	r4, [r7, #32]
 800781a:	415b      	adcs	r3, r3
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
 800781e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007822:	1812      	adds	r2, r2, r0
 8007824:	eb41 0303 	adc.w	r3, r1, r3
 8007828:	f04f 0400 	mov.w	r4, #0
 800782c:	f04f 0500 	mov.w	r5, #0
 8007830:	00dd      	lsls	r5, r3, #3
 8007832:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007836:	00d4      	lsls	r4, r2, #3
 8007838:	4622      	mov	r2, r4
 800783a:	462b      	mov	r3, r5
 800783c:	1814      	adds	r4, r2, r0
 800783e:	653c      	str	r4, [r7, #80]	; 0x50
 8007840:	414b      	adcs	r3, r1
 8007842:	657b      	str	r3, [r7, #84]	; 0x54
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	461a      	mov	r2, r3
 800784a:	f04f 0300 	mov.w	r3, #0
 800784e:	1891      	adds	r1, r2, r2
 8007850:	61b9      	str	r1, [r7, #24]
 8007852:	415b      	adcs	r3, r3
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800785a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800785e:	f7f8 feeb 	bl	8000638 <__aeabi_uldivmod>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4b6c      	ldr	r3, [pc, #432]	; (8007a18 <UART_SetConfig+0x38c>)
 8007868:	fba3 1302 	umull	r1, r3, r3, r2
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	2164      	movs	r1, #100	; 0x64
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	3332      	adds	r3, #50	; 0x32
 800787a:	4a67      	ldr	r2, [pc, #412]	; (8007a18 <UART_SetConfig+0x38c>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	f003 0207 	and.w	r2, r3, #7
 8007886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4432      	add	r2, r6
 800788c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800788e:	e0b9      	b.n	8007a04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007892:	461c      	mov	r4, r3
 8007894:	f04f 0500 	mov.w	r5, #0
 8007898:	4622      	mov	r2, r4
 800789a:	462b      	mov	r3, r5
 800789c:	1891      	adds	r1, r2, r2
 800789e:	6139      	str	r1, [r7, #16]
 80078a0:	415b      	adcs	r3, r3
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80078a8:	1912      	adds	r2, r2, r4
 80078aa:	eb45 0303 	adc.w	r3, r5, r3
 80078ae:	f04f 0000 	mov.w	r0, #0
 80078b2:	f04f 0100 	mov.w	r1, #0
 80078b6:	00d9      	lsls	r1, r3, #3
 80078b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078bc:	00d0      	lsls	r0, r2, #3
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	eb12 0804 	adds.w	r8, r2, r4
 80078c6:	eb43 0905 	adc.w	r9, r3, r5
 80078ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f04f 0100 	mov.w	r1, #0
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	008b      	lsls	r3, r1, #2
 80078de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80078e2:	0082      	lsls	r2, r0, #2
 80078e4:	4640      	mov	r0, r8
 80078e6:	4649      	mov	r1, r9
 80078e8:	f7f8 fea6 	bl	8000638 <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4b49      	ldr	r3, [pc, #292]	; (8007a18 <UART_SetConfig+0x38c>)
 80078f2:	fba3 2302 	umull	r2, r3, r3, r2
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	011e      	lsls	r6, r3, #4
 80078fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fc:	4618      	mov	r0, r3
 80078fe:	f04f 0100 	mov.w	r1, #0
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	1894      	adds	r4, r2, r2
 8007908:	60bc      	str	r4, [r7, #8]
 800790a:	415b      	adcs	r3, r3
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007912:	1812      	adds	r2, r2, r0
 8007914:	eb41 0303 	adc.w	r3, r1, r3
 8007918:	f04f 0400 	mov.w	r4, #0
 800791c:	f04f 0500 	mov.w	r5, #0
 8007920:	00dd      	lsls	r5, r3, #3
 8007922:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007926:	00d4      	lsls	r4, r2, #3
 8007928:	4622      	mov	r2, r4
 800792a:	462b      	mov	r3, r5
 800792c:	1814      	adds	r4, r2, r0
 800792e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007930:	414b      	adcs	r3, r1
 8007932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	4618      	mov	r0, r3
 800793a:	f04f 0100 	mov.w	r1, #0
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	008b      	lsls	r3, r1, #2
 8007948:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800794c:	0082      	lsls	r2, r0, #2
 800794e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007952:	f7f8 fe71 	bl	8000638 <__aeabi_uldivmod>
 8007956:	4602      	mov	r2, r0
 8007958:	460b      	mov	r3, r1
 800795a:	4b2f      	ldr	r3, [pc, #188]	; (8007a18 <UART_SetConfig+0x38c>)
 800795c:	fba3 1302 	umull	r1, r3, r3, r2
 8007960:	095b      	lsrs	r3, r3, #5
 8007962:	2164      	movs	r1, #100	; 0x64
 8007964:	fb01 f303 	mul.w	r3, r1, r3
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	3332      	adds	r3, #50	; 0x32
 800796e:	4a2a      	ldr	r2, [pc, #168]	; (8007a18 <UART_SetConfig+0x38c>)
 8007970:	fba2 2303 	umull	r2, r3, r2, r3
 8007974:	095b      	lsrs	r3, r3, #5
 8007976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800797a:	441e      	add	r6, r3
 800797c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800797e:	4618      	mov	r0, r3
 8007980:	f04f 0100 	mov.w	r1, #0
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	1894      	adds	r4, r2, r2
 800798a:	603c      	str	r4, [r7, #0]
 800798c:	415b      	adcs	r3, r3
 800798e:	607b      	str	r3, [r7, #4]
 8007990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007994:	1812      	adds	r2, r2, r0
 8007996:	eb41 0303 	adc.w	r3, r1, r3
 800799a:	f04f 0400 	mov.w	r4, #0
 800799e:	f04f 0500 	mov.w	r5, #0
 80079a2:	00dd      	lsls	r5, r3, #3
 80079a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079a8:	00d4      	lsls	r4, r2, #3
 80079aa:	4622      	mov	r2, r4
 80079ac:	462b      	mov	r3, r5
 80079ae:	eb12 0a00 	adds.w	sl, r2, r0
 80079b2:	eb43 0b01 	adc.w	fp, r3, r1
 80079b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f04f 0100 	mov.w	r1, #0
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	f04f 0300 	mov.w	r3, #0
 80079c8:	008b      	lsls	r3, r1, #2
 80079ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079ce:	0082      	lsls	r2, r0, #2
 80079d0:	4650      	mov	r0, sl
 80079d2:	4659      	mov	r1, fp
 80079d4:	f7f8 fe30 	bl	8000638 <__aeabi_uldivmod>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <UART_SetConfig+0x38c>)
 80079de:	fba3 1302 	umull	r1, r3, r3, r2
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	2164      	movs	r1, #100	; 0x64
 80079e6:	fb01 f303 	mul.w	r3, r1, r3
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	3332      	adds	r3, #50	; 0x32
 80079f0:	4a09      	ldr	r2, [pc, #36]	; (8007a18 <UART_SetConfig+0x38c>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	f003 020f 	and.w	r2, r3, #15
 80079fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4432      	add	r2, r6
 8007a02:	609a      	str	r2, [r3, #8]
}
 8007a04:	bf00      	nop
 8007a06:	377c      	adds	r7, #124	; 0x7c
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	bf00      	nop
 8007a10:	40011000 	.word	0x40011000
 8007a14:	40011400 	.word	0x40011400
 8007a18:	51eb851f 	.word	0x51eb851f

08007a1c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d029      	beq.n	8007a8a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a46:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a50:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007a56:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007a5c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007a62:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007a68:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007a6e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007a74:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007a7a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	e034      	b.n	8007af4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a96:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007aa0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007aa6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007aba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007abe:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ac8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007ace:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007ad4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007ada:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007ae0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b087      	sub	sp, #28
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d02e      	beq.n	8007b7a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b28:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b38:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b42:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b4c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b56:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b60:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	609a      	str	r2, [r3, #8]
 8007b78:	e03b      	b.n	8007bf2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b8a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007bb0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007bc0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007bca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007bd4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007bde:	4313      	orrs	r3, r2
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007c00:	b084      	sub	sp, #16
 8007c02:	b480      	push	{r7}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	f107 001c 	add.w	r0, r7, #28
 8007c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007c16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007c18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007c1a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007c1e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007c22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007c26:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007c2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007c3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	b004      	add	sp, #16
 8007c54:	4770      	bx	lr

08007c56 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007c7e:	2002      	movs	r0, #2
 8007c80:	f7fa ff4c 	bl	8002b1c <HAL_Delay>
  
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0303 	and.w	r3, r3, #3
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007cc8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007cce:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007cd4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007ce4:	f023 030f 	bic.w	r3, r3, #15
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b083      	sub	sp, #12
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	b2db      	uxtb	r3, r3
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3314      	adds	r3, #20
 8007d26:	461a      	mov	r2, r3
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
}  
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b085      	sub	sp, #20
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d64:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007d6a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007d70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0

}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b088      	sub	sp, #32
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007da4:	2310      	movs	r3, #16
 8007da6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007da8:	2340      	movs	r3, #64	; 0x40
 8007daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007db6:	f107 0308 	add.w	r3, r7, #8
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff ff74 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc6:	2110      	movs	r1, #16
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fa45 	bl	8008258 <SDMMC_GetCmdResp1>
 8007dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dd0:	69fb      	ldr	r3, [r7, #28]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3720      	adds	r7, #32
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b088      	sub	sp, #32
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007de8:	2311      	movs	r3, #17
 8007dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dec:	2340      	movs	r3, #64	; 0x40
 8007dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007df0:	2300      	movs	r3, #0
 8007df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dfa:	f107 0308 	add.w	r3, r7, #8
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff ff52 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0a:	2111      	movs	r1, #17
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fa23 	bl	8008258 <SDMMC_GetCmdResp1>
 8007e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e14:	69fb      	ldr	r3, [r7, #28]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3720      	adds	r7, #32
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b088      	sub	sp, #32
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007e2c:	2312      	movs	r3, #18
 8007e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e30:	2340      	movs	r3, #64	; 0x40
 8007e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e34:	2300      	movs	r3, #0
 8007e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e3e:	f107 0308 	add.w	r3, r7, #8
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff ff30 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4e:	2112      	movs	r1, #18
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa01 	bl	8008258 <SDMMC_GetCmdResp1>
 8007e56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e58:	69fb      	ldr	r3, [r7, #28]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3720      	adds	r7, #32
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b088      	sub	sp, #32
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007e70:	2318      	movs	r3, #24
 8007e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e74:	2340      	movs	r3, #64	; 0x40
 8007e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e82:	f107 0308 	add.w	r3, r7, #8
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff ff0e 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e92:	2118      	movs	r1, #24
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f9df 	bl	8008258 <SDMMC_GetCmdResp1>
 8007e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3720      	adds	r7, #32
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b088      	sub	sp, #32
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007eb4:	2319      	movs	r3, #25
 8007eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007eb8:	2340      	movs	r3, #64	; 0x40
 8007eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ec4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ec6:	f107 0308 	add.w	r3, r7, #8
 8007eca:	4619      	mov	r1, r3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff feec 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed6:	2119      	movs	r1, #25
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f9bd 	bl	8008258 <SDMMC_GetCmdResp1>
 8007ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3720      	adds	r7, #32
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007ef8:	230c      	movs	r3, #12
 8007efa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007efc:	2340      	movs	r3, #64	; 0x40
 8007efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff feca 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007f16:	4a05      	ldr	r2, [pc, #20]	; (8007f2c <SDMMC_CmdStopTransfer+0x40>)
 8007f18:	210c      	movs	r1, #12
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f99c 	bl	8008258 <SDMMC_GetCmdResp1>
 8007f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f22:	69fb      	ldr	r3, [r7, #28]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3720      	adds	r7, #32
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	05f5e100 	.word	0x05f5e100

08007f30 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08a      	sub	sp, #40	; 0x28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007f40:	2307      	movs	r3, #7
 8007f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f44:	2340      	movs	r3, #64	; 0x40
 8007f46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f50:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f52:	f107 0310 	add.w	r3, r7, #16
 8007f56:	4619      	mov	r1, r3
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff fea6 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f62:	2107      	movs	r1, #7
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f000 f977 	bl	8008258 <SDMMC_GetCmdResp1>
 8007f6a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b088      	sub	sp, #32
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f94:	f107 0308 	add.w	r3, r7, #8
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff fe85 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f92d 	bl	8008200 <SDMMC_GetCmdError>
 8007fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b088      	sub	sp, #32
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007fba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007fc0:	2308      	movs	r3, #8
 8007fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fc4:	2340      	movs	r3, #64	; 0x40
 8007fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff fe66 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fb24 	bl	800862c <SDMMC_GetCmdResp7>
 8007fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3720      	adds	r7, #32
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b088      	sub	sp, #32
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007ffe:	2337      	movs	r3, #55	; 0x37
 8008000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008002:	2340      	movs	r3, #64	; 0x40
 8008004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008006:	2300      	movs	r3, #0
 8008008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800800a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800800e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fe47 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800801c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008020:	2137      	movs	r1, #55	; 0x37
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f918 	bl	8008258 <SDMMC_GetCmdResp1>
 8008028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800802a:	69fb      	ldr	r3, [r7, #28]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3720      	adds	r7, #32
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800804a:	2329      	movs	r3, #41	; 0x29
 800804c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800805c:	f107 0308 	add.w	r3, r7, #8
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f7ff fe21 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fa2b 	bl	80084c4 <SDMMC_GetCmdResp3>
 800806e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008070:	69fb      	ldr	r3, [r7, #28]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3720      	adds	r7, #32
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b088      	sub	sp, #32
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008088:	2306      	movs	r3, #6
 800808a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800808c:	2340      	movs	r3, #64	; 0x40
 800808e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008098:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800809a:	f107 0308 	add.w	r3, r7, #8
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7ff fe02 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80080a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080aa:	2106      	movs	r1, #6
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f8d3 	bl	8008258 <SDMMC_GetCmdResp1>
 80080b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080b4:	69fb      	ldr	r3, [r7, #28]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3720      	adds	r7, #32
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b088      	sub	sp, #32
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80080ca:	2333      	movs	r3, #51	; 0x33
 80080cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80080ce:	2340      	movs	r3, #64	; 0x40
 80080d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80080d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80080dc:	f107 0308 	add.w	r3, r7, #8
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7ff fde1 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80080e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ec:	2133      	movs	r1, #51	; 0x33
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8b2 	bl	8008258 <SDMMC_GetCmdResp1>
 80080f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080f6:	69fb      	ldr	r3, [r7, #28]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3720      	adds	r7, #32
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800810c:	2302      	movs	r3, #2
 800810e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008110:	23c0      	movs	r3, #192	; 0xc0
 8008112:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800811c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800811e:	f107 0308 	add.w	r3, r7, #8
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff fdc0 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f982 	bl	8008434 <SDMMC_GetCmdResp2>
 8008130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008132:	69fb      	ldr	r3, [r7, #28]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3720      	adds	r7, #32
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800814a:	2309      	movs	r3, #9
 800814c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800814e:	23c0      	movs	r3, #192	; 0xc0
 8008150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800815a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800815c:	f107 0308 	add.w	r3, r7, #8
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff fda1 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f963 	bl	8008434 <SDMMC_GetCmdResp2>
 800816e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008170:	69fb      	ldr	r3, [r7, #28]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3720      	adds	r7, #32
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b088      	sub	sp, #32
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008188:	2303      	movs	r3, #3
 800818a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800818c:	2340      	movs	r3, #64	; 0x40
 800818e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008198:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800819a:	f107 0308 	add.w	r3, r7, #8
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7ff fd82 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	2103      	movs	r1, #3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f9c8 	bl	8008540 <SDMMC_GetCmdResp6>
 80081b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081b2:	69fb      	ldr	r3, [r7, #28]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3720      	adds	r7, #32
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80081ca:	230d      	movs	r3, #13
 80081cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80081ce:	2340      	movs	r3, #64	; 0x40
 80081d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80081d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80081dc:	f107 0308 	add.w	r3, r7, #8
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff fd61 	bl	8007caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80081e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ec:	210d      	movs	r1, #13
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f832 	bl	8008258 <SDMMC_GetCmdResp1>
 80081f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081f6:	69fb      	ldr	r3, [r7, #28]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008208:	4b11      	ldr	r3, [pc, #68]	; (8008250 <SDMMC_GetCmdError+0x50>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a11      	ldr	r2, [pc, #68]	; (8008254 <SDMMC_GetCmdError+0x54>)
 800820e:	fba2 2303 	umull	r2, r3, r2, r3
 8008212:	0a5b      	lsrs	r3, r3, #9
 8008214:	f241 3288 	movw	r2, #5000	; 0x1388
 8008218:	fb02 f303 	mul.w	r3, r2, r3
 800821c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1e5a      	subs	r2, r3, #1
 8008222:	60fa      	str	r2, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d102      	bne.n	800822e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008228:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800822c:	e009      	b.n	8008242 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f1      	beq.n	800821e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	22c5      	movs	r2, #197	; 0xc5
 800823e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	20000000 	.word	0x20000000
 8008254:	10624dd3 	.word	0x10624dd3

08008258 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b088      	sub	sp, #32
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	460b      	mov	r3, r1
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008266:	4b70      	ldr	r3, [pc, #448]	; (8008428 <SDMMC_GetCmdResp1+0x1d0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a70      	ldr	r2, [pc, #448]	; (800842c <SDMMC_GetCmdResp1+0x1d4>)
 800826c:	fba2 2303 	umull	r2, r3, r2, r3
 8008270:	0a5a      	lsrs	r2, r3, #9
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	fb02 f303 	mul.w	r3, r2, r3
 8008278:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	1e5a      	subs	r2, r3, #1
 800827e:	61fa      	str	r2, [r7, #28]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008284:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008288:	e0c9      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0ef      	beq.n	800827a <SDMMC_GetCmdResp1+0x22>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1ea      	bne.n	800827a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2204      	movs	r2, #4
 80082b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082b6:	2304      	movs	r3, #4
 80082b8:	e0b1      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d004      	beq.n	80082d0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e0a6      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	22c5      	movs	r2, #197	; 0xc5
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7ff fd11 	bl	8007cfe <SDIO_GetCommandResponse>
 80082dc:	4603      	mov	r3, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	7afb      	ldrb	r3, [r7, #11]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d001      	beq.n	80082ea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e099      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80082ea:	2100      	movs	r1, #0
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff fd13 	bl	8007d18 <SDIO_GetResponse>
 80082f2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4b4e      	ldr	r3, [pc, #312]	; (8008430 <SDMMC_GetCmdResp1+0x1d8>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d101      	bne.n	8008302 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80082fe:	2300      	movs	r3, #0
 8008300:	e08d      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	da02      	bge.n	800830e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800830c:	e087      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d001      	beq.n	800831c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	e080      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008326:	2380      	movs	r3, #128	; 0x80
 8008328:	e079      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008338:	e071      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008348:	e069      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008358:	e061      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008368:	e059      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008378:	e051      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008388:	e049      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008394:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008398:	e041      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80083a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083a8:	e039      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80083b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083b8:	e031      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80083c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80083c8:	e029      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80083d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80083d8:	e021      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d002      	beq.n	80083ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80083e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80083e8:	e019      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80083f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80083f8:	e011      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d002      	beq.n	800840a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008404:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008408:	e009      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d002      	beq.n	800841a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008414:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008418:	e001      	b.n	800841e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800841a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800841e:	4618      	mov	r0, r3
 8008420:	3720      	adds	r7, #32
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000000 	.word	0x20000000
 800842c:	10624dd3 	.word	0x10624dd3
 8008430:	fdffe008 	.word	0xfdffe008

08008434 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800843c:	4b1f      	ldr	r3, [pc, #124]	; (80084bc <SDMMC_GetCmdResp2+0x88>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <SDMMC_GetCmdResp2+0x8c>)
 8008442:	fba2 2303 	umull	r2, r3, r2, r3
 8008446:	0a5b      	lsrs	r3, r3, #9
 8008448:	f241 3288 	movw	r2, #5000	; 0x1388
 800844c:	fb02 f303 	mul.w	r3, r2, r3
 8008450:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	1e5a      	subs	r2, r3, #1
 8008456:	60fa      	str	r2, [r7, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d102      	bne.n	8008462 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800845c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008460:	e026      	b.n	80084b0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008466:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0ef      	beq.n	8008452 <SDMMC_GetCmdResp2+0x1e>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1ea      	bne.n	8008452 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2204      	movs	r2, #4
 800848c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800848e:	2304      	movs	r3, #4
 8008490:	e00e      	b.n	80084b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d004      	beq.n	80084a8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e003      	b.n	80084b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	22c5      	movs	r2, #197	; 0xc5
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	20000000 	.word	0x20000000
 80084c0:	10624dd3 	.word	0x10624dd3

080084c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084cc:	4b1a      	ldr	r3, [pc, #104]	; (8008538 <SDMMC_GetCmdResp3+0x74>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1a      	ldr	r2, [pc, #104]	; (800853c <SDMMC_GetCmdResp3+0x78>)
 80084d2:	fba2 2303 	umull	r2, r3, r2, r3
 80084d6:	0a5b      	lsrs	r3, r3, #9
 80084d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084dc:	fb02 f303 	mul.w	r3, r2, r3
 80084e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	1e5a      	subs	r2, r3, #1
 80084e6:	60fa      	str	r2, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80084f0:	e01b      	b.n	800852a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0ef      	beq.n	80084e2 <SDMMC_GetCmdResp3+0x1e>
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1ea      	bne.n	80084e2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d004      	beq.n	8008522 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2204      	movs	r2, #4
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800851e:	2304      	movs	r3, #4
 8008520:	e003      	b.n	800852a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	22c5      	movs	r2, #197	; 0xc5
 8008526:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	20000000 	.word	0x20000000
 800853c:	10624dd3 	.word	0x10624dd3

08008540 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	460b      	mov	r3, r1
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800854e:	4b35      	ldr	r3, [pc, #212]	; (8008624 <SDMMC_GetCmdResp6+0xe4>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a35      	ldr	r2, [pc, #212]	; (8008628 <SDMMC_GetCmdResp6+0xe8>)
 8008554:	fba2 2303 	umull	r2, r3, r2, r3
 8008558:	0a5b      	lsrs	r3, r3, #9
 800855a:	f241 3288 	movw	r2, #5000	; 0x1388
 800855e:	fb02 f303 	mul.w	r3, r2, r3
 8008562:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	1e5a      	subs	r2, r3, #1
 8008568:	61fa      	str	r2, [r7, #28]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d102      	bne.n	8008574 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800856e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008572:	e052      	b.n	800861a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0ef      	beq.n	8008564 <SDMMC_GetCmdResp6+0x24>
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1ea      	bne.n	8008564 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	f003 0304 	and.w	r3, r3, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2204      	movs	r2, #4
 800859e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085a0:	2304      	movs	r3, #4
 80085a2:	e03a      	b.n	800861a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e02f      	b.n	800861a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f7ff fb9f 	bl	8007cfe <SDIO_GetCommandResponse>
 80085c0:	4603      	mov	r3, r0
 80085c2:	461a      	mov	r2, r3
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d001      	beq.n	80085ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e025      	b.n	800861a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	22c5      	movs	r2, #197	; 0xc5
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80085d4:	2100      	movs	r1, #0
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff fb9e 	bl	8007d18 <SDIO_GetResponse>
 80085dc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	0c1b      	lsrs	r3, r3, #16
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e011      	b.n	800861a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008604:	e009      	b.n	800861a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008614:	e001      	b.n	800861a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000000 	.word	0x20000000
 8008628:	10624dd3 	.word	0x10624dd3

0800862c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008634:	4b22      	ldr	r3, [pc, #136]	; (80086c0 <SDMMC_GetCmdResp7+0x94>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a22      	ldr	r2, [pc, #136]	; (80086c4 <SDMMC_GetCmdResp7+0x98>)
 800863a:	fba2 2303 	umull	r2, r3, r2, r3
 800863e:	0a5b      	lsrs	r3, r3, #9
 8008640:	f241 3288 	movw	r2, #5000	; 0x1388
 8008644:	fb02 f303 	mul.w	r3, r2, r3
 8008648:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1e5a      	subs	r2, r3, #1
 800864e:	60fa      	str	r2, [r7, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008658:	e02c      	b.n	80086b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0ef      	beq.n	800864a <SDMMC_GetCmdResp7+0x1e>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1ea      	bne.n	800864a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d004      	beq.n	800868a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2204      	movs	r2, #4
 8008684:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008686:	2304      	movs	r3, #4
 8008688:	e014      	b.n	80086b4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800869c:	2301      	movs	r3, #1
 800869e:	e009      	b.n	80086b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2240      	movs	r2, #64	; 0x40
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80086b2:	2300      	movs	r3, #0
  
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20000000 	.word	0x20000000
 80086c4:	10624dd3 	.word	0x10624dd3

080086c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086c8:	b084      	sub	sp, #16
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b084      	sub	sp, #16
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
 80086d2:	f107 001c 	add.w	r0, r7, #28
 80086d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d122      	bne.n	8008726 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800870a:	2b01      	cmp	r3, #1
 800870c:	d105      	bne.n	800871a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa56 	bl	8008bcc <USB_CoreReset>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
 8008724:	e01a      	b.n	800875c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa4a 	bl	8008bcc <USB_CoreReset>
 8008738:	4603      	mov	r3, r0
 800873a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800873c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	639a      	str	r2, [r3, #56]	; 0x38
 800874e:	e005      	b.n	800875c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	2b01      	cmp	r3, #1
 8008760:	d10b      	bne.n	800877a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f043 0206 	orr.w	r2, r3, #6
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	f043 0220 	orr.w	r2, r3, #32
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800877a:	7bfb      	ldrb	r3, [r7, #15]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008786:	b004      	add	sp, #16
 8008788:	4770      	bx	lr

0800878a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f023 0201 	bic.w	r2, r3, #1
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d106      	bne.n	80087d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60da      	str	r2, [r3, #12]
 80087d6:	e00b      	b.n	80087f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d106      	bne.n	80087ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60da      	str	r2, [r3, #12]
 80087ea:	e001      	b.n	80087f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e003      	b.n	80087f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80087f0:	2032      	movs	r0, #50	; 0x32
 80087f2:	f7fa f993 	bl	8002b1c <HAL_Delay>

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008800:	b084      	sub	sp, #16
 8008802:	b580      	push	{r7, lr}
 8008804:	b086      	sub	sp, #24
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800880e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800881a:	2300      	movs	r3, #0
 800881c:	613b      	str	r3, [r7, #16]
 800881e:	e009      	b.n	8008834 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	3340      	adds	r3, #64	; 0x40
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	2200      	movs	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	3301      	adds	r3, #1
 8008832:	613b      	str	r3, [r7, #16]
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	2b0e      	cmp	r3, #14
 8008838:	d9f2      	bls.n	8008820 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800883a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d11c      	bne.n	800887a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800884e:	f043 0302 	orr.w	r3, r3, #2
 8008852:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008858:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008864:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008870:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	639a      	str	r2, [r3, #56]	; 0x38
 8008878:	e00b      	b.n	8008892 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008898:	461a      	mov	r2, r3
 800889a:	2300      	movs	r3, #0
 800889c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a4:	4619      	mov	r1, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ac:	461a      	mov	r2, r3
 80088ae:	680b      	ldr	r3, [r1, #0]
 80088b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d10c      	bne.n	80088d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d104      	bne.n	80088c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80088be:	2100      	movs	r1, #0
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f949 	bl	8008b58 <USB_SetDevSpeed>
 80088c6:	e008      	b.n	80088da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80088c8:	2101      	movs	r1, #1
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f944 	bl	8008b58 <USB_SetDevSpeed>
 80088d0:	e003      	b.n	80088da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80088d2:	2103      	movs	r1, #3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f93f 	bl	8008b58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088da:	2110      	movs	r1, #16
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f8f3 	bl	8008ac8 <USB_FlushTxFifo>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f911 	bl	8008b14 <USB_FlushRxFifo>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008902:	461a      	mov	r2, r3
 8008904:	2300      	movs	r3, #0
 8008906:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890e:	461a      	mov	r2, r3
 8008910:	2300      	movs	r3, #0
 8008912:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891a:	461a      	mov	r2, r3
 800891c:	2300      	movs	r3, #0
 800891e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
 8008924:	e043      	b.n	80089ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4413      	add	r3, r2
 800892e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800893c:	d118      	bne.n	8008970 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008950:	461a      	mov	r2, r3
 8008952:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	e013      	b.n	8008982 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4413      	add	r3, r2
 8008962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008966:	461a      	mov	r2, r3
 8008968:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	e008      	b.n	8008982 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897c:	461a      	mov	r2, r3
 800897e:	2300      	movs	r3, #0
 8008980:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898e:	461a      	mov	r2, r3
 8008990:	2300      	movs	r3, #0
 8008992:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a0:	461a      	mov	r2, r3
 80089a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	3301      	adds	r3, #1
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d3b7      	bcc.n	8008926 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089b6:	2300      	movs	r3, #0
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	e043      	b.n	8008a44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089d2:	d118      	bne.n	8008a06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10a      	bne.n	80089f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e6:	461a      	mov	r2, r3
 80089e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089ec:	6013      	str	r3, [r2, #0]
 80089ee:	e013      	b.n	8008a18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fc:	461a      	mov	r2, r3
 80089fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	e008      	b.n	8008a18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	461a      	mov	r2, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a24:	461a      	mov	r2, r3
 8008a26:	2300      	movs	r3, #0
 8008a28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a36:	461a      	mov	r2, r3
 8008a38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	3301      	adds	r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d3b7      	bcc.n	80089bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d105      	bne.n	8008a80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	f043 0210 	orr.w	r2, r3, #16
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	699a      	ldr	r2, [r3, #24]
 8008a84:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <USB_DevInit+0x2c4>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	f043 0208 	orr.w	r2, r3, #8
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d107      	bne.n	8008ab4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aac:	f043 0304 	orr.w	r3, r3, #4
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ac0:	b004      	add	sp, #16
 8008ac2:	4770      	bx	lr
 8008ac4:	803c3800 	.word	0x803c3800

08008ac8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	019b      	lsls	r3, r3, #6
 8008ada:	f043 0220 	orr.w	r2, r3, #32
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4a09      	ldr	r2, [pc, #36]	; (8008b10 <USB_FlushTxFifo+0x48>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d901      	bls.n	8008af4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e006      	b.n	8008b02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	f003 0320 	and.w	r3, r3, #32
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d0f0      	beq.n	8008ae2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	00030d40 	.word	0x00030d40

08008b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2210      	movs	r2, #16
 8008b24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4a09      	ldr	r2, [pc, #36]	; (8008b54 <USB_FlushRxFifo+0x40>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d901      	bls.n	8008b38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e006      	b.n	8008b46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	f003 0310 	and.w	r3, r3, #16
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	d0f0      	beq.n	8008b26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	00030d40 	.word	0x00030d40

08008b58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	460b      	mov	r3, r1
 8008b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	68f9      	ldr	r1, [r7, #12]
 8008b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ba4:	f023 0303 	bic.w	r3, r3, #3
 8008ba8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb8:	f043 0302 	orr.w	r3, r3, #2
 8008bbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	60fb      	str	r3, [r7, #12]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	4a13      	ldr	r2, [pc, #76]	; (8008c30 <USB_CoreReset+0x64>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d901      	bls.n	8008bea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e01b      	b.n	8008c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	daf2      	bge.n	8008bd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f043 0201 	orr.w	r2, r3, #1
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3301      	adds	r3, #1
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4a09      	ldr	r2, [pc, #36]	; (8008c30 <USB_CoreReset+0x64>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d901      	bls.n	8008c14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e006      	b.n	8008c22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d0f0      	beq.n	8008c02 <USB_CoreReset+0x36>

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	00030d40 	.word	0x00030d40

08008c34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008c38:	4904      	ldr	r1, [pc, #16]	; (8008c4c <MX_FATFS_Init+0x18>)
 8008c3a:	4805      	ldr	r0, [pc, #20]	; (8008c50 <MX_FATFS_Init+0x1c>)
 8008c3c:	f000 fa8a 	bl	8009154 <FATFS_LinkDriver>
 8008c40:	4603      	mov	r3, r0
 8008c42:	461a      	mov	r2, r3
 8008c44:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <MX_FATFS_Init+0x20>)
 8008c46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008c48:	bf00      	nop
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	200095e8 	.word	0x200095e8
 8008c50:	0800d2a0 	.word	0x0800d2a0
 8008c54:	200095e4 	.word	0x200095e4

08008c58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008c62:	f000 f87b 	bl	8008d5c <BSP_SD_IsDetected>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d001      	beq.n	8008c70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e012      	b.n	8008c96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008c70:	480b      	ldr	r0, [pc, #44]	; (8008ca0 <BSP_SD_Init+0x48>)
 8008c72:	f7fc ffe1 	bl	8005c38 <HAL_SD_Init>
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008c80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c84:	4806      	ldr	r0, [pc, #24]	; (8008ca0 <BSP_SD_Init+0x48>)
 8008c86:	f7fd fc27 	bl	80064d8 <HAL_SD_ConfigWideBusOperation>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008c94:	79fb      	ldrb	r3, [r7, #7]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20009444 	.word	0x20009444

08008ca4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	68f9      	ldr	r1, [r7, #12]
 8008cba:	4806      	ldr	r0, [pc, #24]	; (8008cd4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008cbc:	f7fd f86a 	bl	8005d94 <HAL_SD_ReadBlocks_DMA>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20009444 	.word	0x20009444

08008cd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	68f9      	ldr	r1, [r7, #12]
 8008cee:	4806      	ldr	r0, [pc, #24]	; (8008d08 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008cf0:	f7fd f932 	bl	8005f58 <HAL_SD_WriteBlocks_DMA>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20009444 	.word	0x20009444

08008d0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008d10:	4805      	ldr	r0, [pc, #20]	; (8008d28 <BSP_SD_GetCardState+0x1c>)
 8008d12:	f7fd fc7b 	bl	800660c <HAL_SD_GetCardState>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	bf14      	ite	ne
 8008d1c:	2301      	movne	r3, #1
 8008d1e:	2300      	moveq	r3, #0
 8008d20:	b2db      	uxtb	r3, r3
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20009444 	.word	0x20009444

08008d2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4803      	ldr	r0, [pc, #12]	; (8008d44 <BSP_SD_GetCardInfo+0x18>)
 8008d38:	f7fd fba2 	bl	8006480 <HAL_SD_GetCardInfo>
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	20009444 	.word	0x20009444

08008d48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008d50:	f000 f9a2 	bl	8009098 <BSP_SD_ReadCpltCallback>
}
 8008d54:	bf00      	nop
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008d62:	2301      	movs	r3, #1
 8008d64:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008d66:	f000 f80b 	bl	8008d80 <BSP_PlatformIsDetected>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008d70:	2300      	movs	r3, #0
 8008d72:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	b2db      	uxtb	r3, r3
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008d86:	2301      	movs	r3, #1
 8008d88:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008d8a:	2120      	movs	r1, #32
 8008d8c:	4806      	ldr	r0, [pc, #24]	; (8008da8 <BSP_PlatformIsDetected+0x28>)
 8008d8e:	f7fa fced 	bl	800376c <HAL_GPIO_ReadPin>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	40020800 	.word	0x40020800

08008dac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8008db4:	f000 fa8e 	bl	80092d4 <osKernelGetTickCount>
 8008db8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8008dba:	e006      	b.n	8008dca <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008dbc:	f7ff ffa6 	bl	8008d0c <BSP_SD_GetCardState>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e009      	b.n	8008dde <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8008dca:	f000 fa83 	bl	80092d4 <osKernelGetTickCount>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d8f0      	bhi.n	8008dbc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008df2:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <SD_CheckStatus+0x38>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008df8:	f7ff ff88 	bl	8008d0c <BSP_SD_GetCardState>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d107      	bne.n	8008e12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e02:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <SD_CheckStatus+0x38>)
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	f023 0301 	bic.w	r3, r3, #1
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	4b04      	ldr	r3, [pc, #16]	; (8008e20 <SD_CheckStatus+0x38>)
 8008e10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008e12:	4b03      	ldr	r3, [pc, #12]	; (8008e20 <SD_CheckStatus+0x38>)
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	b2db      	uxtb	r3, r3
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000009 	.word	0x20000009

08008e24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008e2e:	4b1c      	ldr	r3, [pc, #112]	; (8008ea0 <SD_initialize+0x7c>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008e34:	f000 fa06 	bl	8009244 <osKernelGetState>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d129      	bne.n	8008e92 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008e3e:	f7ff ff0b 	bl	8008c58 <BSP_SD_Init>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d107      	bne.n	8008e58 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff ffcc 	bl	8008de8 <SD_CheckStatus>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <SD_initialize+0x7c>)
 8008e56:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008e58:	4b11      	ldr	r3, [pc, #68]	; (8008ea0 <SD_initialize+0x7c>)
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d017      	beq.n	8008e92 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008e62:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <SD_initialize+0x80>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d107      	bne.n	8008e7a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	200a      	movs	r0, #10
 8008e70:	f000 fb7b 	bl	800956a <osMessageQueueNew>
 8008e74:	4603      	mov	r3, r0
 8008e76:	4a0b      	ldr	r2, [pc, #44]	; (8008ea4 <SD_initialize+0x80>)
 8008e78:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <SD_initialize+0x80>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d107      	bne.n	8008e92 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8008e82:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <SD_initialize+0x7c>)
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f043 0301 	orr.w	r3, r3, #1
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <SD_initialize+0x7c>)
 8008e90:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008e92:	4b03      	ldr	r3, [pc, #12]	; (8008ea0 <SD_initialize+0x7c>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	b2db      	uxtb	r3, r3
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000009 	.word	0x20000009
 8008ea4:	2000009c 	.word	0x2000009c

08008ea8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7ff ff97 	bl	8008de8 <SD_CheckStatus>
 8008eba:	4603      	mov	r3, r0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008ed8:	f247 5030 	movw	r0, #30000	; 0x7530
 8008edc:	f7ff ff66 	bl	8008dac <SD_CheckStatusWithTimeout>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	da01      	bge.n	8008eea <SD_read+0x26>
  {
    return res;
 8008ee6:	7ffb      	ldrb	r3, [r7, #31]
 8008ee8:	e02f      	b.n	8008f4a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	68b8      	ldr	r0, [r7, #8]
 8008ef0:	f7ff fed8 	bl	8008ca4 <BSP_SD_ReadBlocks_DMA>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008ef8:	7fbb      	ldrb	r3, [r7, #30]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d124      	bne.n	8008f48 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <SD_read+0x90>)
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f107 0112 	add.w	r1, r7, #18
 8008f06:	f247 5330 	movw	r3, #30000	; 0x7530
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f000 fc00 	bl	8009710 <osMessageQueueGet>
 8008f10:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d117      	bne.n	8008f48 <SD_read+0x84>
 8008f18:	8a7b      	ldrh	r3, [r7, #18]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d114      	bne.n	8008f48 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8008f1e:	f000 f9d9 	bl	80092d4 <osKernelGetTickCount>
 8008f22:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008f24:	e007      	b.n	8008f36 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008f26:	f7ff fef1 	bl	8008d0c <BSP_SD_GetCardState>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <SD_read+0x72>
              {
                res = RES_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008f34:	e008      	b.n	8008f48 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008f36:	f000 f9cd 	bl	80092d4 <osKernelGetTickCount>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	f247 522f 	movw	r2, #29999	; 0x752f
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d9ee      	bls.n	8008f26 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3720      	adds	r7, #32
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	2000009c 	.word	0x2000009c

08008f58 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b088      	sub	sp, #32
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008f6c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008f70:	f7ff ff1c 	bl	8008dac <SD_CheckStatusWithTimeout>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da01      	bge.n	8008f7e <SD_write+0x26>
  {
    return res;
 8008f7a:	7ffb      	ldrb	r3, [r7, #31]
 8008f7c:	e02d      	b.n	8008fda <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	68b8      	ldr	r0, [r7, #8]
 8008f84:	f7ff fea8 	bl	8008cd8 <BSP_SD_WriteBlocks_DMA>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d124      	bne.n	8008fd8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008f8e:	4b15      	ldr	r3, [pc, #84]	; (8008fe4 <SD_write+0x8c>)
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f107 0112 	add.w	r1, r7, #18
 8008f96:	f247 5330 	movw	r3, #30000	; 0x7530
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f000 fbb8 	bl	8009710 <osMessageQueueGet>
 8008fa0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d117      	bne.n	8008fd8 <SD_write+0x80>
 8008fa8:	8a7b      	ldrh	r3, [r7, #18]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d114      	bne.n	8008fd8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8008fae:	f000 f991 	bl	80092d4 <osKernelGetTickCount>
 8008fb2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008fb4:	e007      	b.n	8008fc6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008fb6:	f7ff fea9 	bl	8008d0c <BSP_SD_GetCardState>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <SD_write+0x6e>
          {
            res = RES_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	77fb      	strb	r3, [r7, #31]
            break;
 8008fc4:	e008      	b.n	8008fd8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008fc6:	f000 f985 	bl	80092d4 <osKernelGetTickCount>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	f247 522f 	movw	r2, #29999	; 0x752f
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d9ee      	bls.n	8008fb6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8008fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3720      	adds	r7, #32
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	2000009c 	.word	0x2000009c

08008fe8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08c      	sub	sp, #48	; 0x30
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	603a      	str	r2, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008ffe:	4b25      	ldr	r3, [pc, #148]	; (8009094 <SD_ioctl+0xac>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 0301 	and.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <SD_ioctl+0x28>
 800900c:	2303      	movs	r3, #3
 800900e:	e03c      	b.n	800908a <SD_ioctl+0xa2>

  switch (cmd)
 8009010:	79bb      	ldrb	r3, [r7, #6]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d834      	bhi.n	8009080 <SD_ioctl+0x98>
 8009016:	a201      	add	r2, pc, #4	; (adr r2, 800901c <SD_ioctl+0x34>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	0800902d 	.word	0x0800902d
 8009020:	08009035 	.word	0x08009035
 8009024:	0800904d 	.word	0x0800904d
 8009028:	08009067 	.word	0x08009067
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009032:	e028      	b.n	8009086 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009034:	f107 030c 	add.w	r3, r7, #12
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff fe77 	bl	8008d2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800903e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800904a:	e01c      	b.n	8009086 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800904c:	f107 030c 	add.w	r3, r7, #12
 8009050:	4618      	mov	r0, r3
 8009052:	f7ff fe6b 	bl	8008d2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	b29a      	uxth	r2, r3
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009064:	e00f      	b.n	8009086 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009066:	f107 030c 	add.w	r3, r7, #12
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff fe5e 	bl	8008d2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	0a5a      	lsrs	r2, r3, #9
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800907e:	e002      	b.n	8009086 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009080:	2304      	movs	r3, #4
 8009082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800908a:	4618      	mov	r0, r3
 800908c:	3730      	adds	r7, #48	; 0x30
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000009 	.word	0x20000009

08009098 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800909e:	2301      	movs	r3, #1
 80090a0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <BSP_SD_ReadCpltCallback+0x20>)
 80090a4:	6818      	ldr	r0, [r3, #0]
 80090a6:	1db9      	adds	r1, r7, #6
 80090a8:	2300      	movs	r3, #0
 80090aa:	2200      	movs	r2, #0
 80090ac:	f000 fad0 	bl	8009650 <osMessageQueuePut>
#endif
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	2000009c 	.word	0x2000009c

080090bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	4613      	mov	r3, r2
 80090c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090ca:	2301      	movs	r3, #1
 80090cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80090d2:	4b1f      	ldr	r3, [pc, #124]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 80090d4:	7a5b      	ldrb	r3, [r3, #9]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d131      	bne.n	8009140 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090dc:	4b1c      	ldr	r3, [pc, #112]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 80090de:	7a5b      	ldrb	r3, [r3, #9]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	461a      	mov	r2, r3
 80090e4:	4b1a      	ldr	r3, [pc, #104]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 80090e6:	2100      	movs	r1, #0
 80090e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80090ea:	4b19      	ldr	r3, [pc, #100]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 80090ec:	7a5b      	ldrb	r3, [r3, #9]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	4a17      	ldr	r2, [pc, #92]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80090fa:	4b15      	ldr	r3, [pc, #84]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 80090fc:	7a5b      	ldrb	r3, [r3, #9]
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	4b13      	ldr	r3, [pc, #76]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 8009104:	4413      	add	r3, r2
 8009106:	79fa      	ldrb	r2, [r7, #7]
 8009108:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800910a:	4b11      	ldr	r3, [pc, #68]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 800910c:	7a5b      	ldrb	r3, [r3, #9]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	b2d1      	uxtb	r1, r2
 8009114:	4a0e      	ldr	r2, [pc, #56]	; (8009150 <FATFS_LinkDriverEx+0x94>)
 8009116:	7251      	strb	r1, [r2, #9]
 8009118:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800911a:	7dbb      	ldrb	r3, [r7, #22]
 800911c:	3330      	adds	r3, #48	; 0x30
 800911e:	b2da      	uxtb	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	3301      	adds	r3, #1
 8009128:	223a      	movs	r2, #58	; 0x3a
 800912a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3302      	adds	r3, #2
 8009130:	222f      	movs	r2, #47	; 0x2f
 8009132:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	3303      	adds	r3, #3
 8009138:	2200      	movs	r2, #0
 800913a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009140:	7dfb      	ldrb	r3, [r7, #23]
}
 8009142:	4618      	mov	r0, r3
 8009144:	371c      	adds	r7, #28
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	200000a0 	.word	0x200000a0

08009154 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800915e:	2200      	movs	r2, #0
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff ffaa 	bl	80090bc <FATFS_LinkDriverEx>
 8009168:	4603      	mov	r3, r0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3708      	adds	r7, #8
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
	...

08009174 <__NVIC_SetPriority>:
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009184:	2b00      	cmp	r3, #0
 8009186:	db0a      	blt.n	800919e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	b2da      	uxtb	r2, r3
 800918c:	490c      	ldr	r1, [pc, #48]	; (80091c0 <__NVIC_SetPriority+0x4c>)
 800918e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009192:	0112      	lsls	r2, r2, #4
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	440b      	add	r3, r1
 8009198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800919c:	e00a      	b.n	80091b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	4908      	ldr	r1, [pc, #32]	; (80091c4 <__NVIC_SetPriority+0x50>)
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	3b04      	subs	r3, #4
 80091ac:	0112      	lsls	r2, r2, #4
 80091ae:	b2d2      	uxtb	r2, r2
 80091b0:	440b      	add	r3, r1
 80091b2:	761a      	strb	r2, [r3, #24]
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	e000e100 	.word	0xe000e100
 80091c4:	e000ed00 	.word	0xe000ed00

080091c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80091cc:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <SysTick_Handler+0x1c>)
 80091ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80091d0:	f002 f872 	bl	800b2b8 <xTaskGetSchedulerState>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d001      	beq.n	80091de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80091da:	f002 fe5d 	bl	800be98 <xPortSysTickHandler>
  }
}
 80091de:	bf00      	nop
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	e000e010 	.word	0xe000e010

080091e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091ec:	2100      	movs	r1, #0
 80091ee:	f06f 0004 	mvn.w	r0, #4
 80091f2:	f7ff ffbf 	bl	8009174 <__NVIC_SetPriority>
#endif
}
 80091f6:	bf00      	nop
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009202:	f3ef 8305 	mrs	r3, IPSR
 8009206:	603b      	str	r3, [r7, #0]
  return(result);
 8009208:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800920e:	f06f 0305 	mvn.w	r3, #5
 8009212:	607b      	str	r3, [r7, #4]
 8009214:	e00c      	b.n	8009230 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009216:	4b0a      	ldr	r3, [pc, #40]	; (8009240 <osKernelInitialize+0x44>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d105      	bne.n	800922a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800921e:	4b08      	ldr	r3, [pc, #32]	; (8009240 <osKernelInitialize+0x44>)
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009224:	2300      	movs	r3, #0
 8009226:	607b      	str	r3, [r7, #4]
 8009228:	e002      	b.n	8009230 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800922a:	f04f 33ff 	mov.w	r3, #4294967295
 800922e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009230:	687b      	ldr	r3, [r7, #4]
}
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	200000ac 	.word	0x200000ac

08009244 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800924a:	f002 f835 	bl	800b2b8 <xTaskGetSchedulerState>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d004      	beq.n	800925e <osKernelGetState+0x1a>
 8009254:	2b02      	cmp	r3, #2
 8009256:	d105      	bne.n	8009264 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8009258:	2302      	movs	r3, #2
 800925a:	607b      	str	r3, [r7, #4]
      break;
 800925c:	e00c      	b.n	8009278 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800925e:	2303      	movs	r3, #3
 8009260:	607b      	str	r3, [r7, #4]
      break;
 8009262:	e009      	b.n	8009278 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8009264:	4b07      	ldr	r3, [pc, #28]	; (8009284 <osKernelGetState+0x40>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d102      	bne.n	8009272 <osKernelGetState+0x2e>
        state = osKernelReady;
 800926c:	2301      	movs	r3, #1
 800926e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8009270:	e001      	b.n	8009276 <osKernelGetState+0x32>
        state = osKernelInactive;
 8009272:	2300      	movs	r3, #0
 8009274:	607b      	str	r3, [r7, #4]
      break;
 8009276:	bf00      	nop
  }

  return (state);
 8009278:	687b      	ldr	r3, [r7, #4]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	200000ac 	.word	0x200000ac

08009288 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800928e:	f3ef 8305 	mrs	r3, IPSR
 8009292:	603b      	str	r3, [r7, #0]
  return(result);
 8009294:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800929a:	f06f 0305 	mvn.w	r3, #5
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	e010      	b.n	80092c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80092a2:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <osKernelStart+0x48>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d109      	bne.n	80092be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80092aa:	f7ff ff9d 	bl	80091e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80092ae:	4b08      	ldr	r3, [pc, #32]	; (80092d0 <osKernelStart+0x48>)
 80092b0:	2202      	movs	r2, #2
 80092b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80092b4:	f001 fba6 	bl	800aa04 <vTaskStartScheduler>
      stat = osOK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	607b      	str	r3, [r7, #4]
 80092bc:	e002      	b.n	80092c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80092be:	f04f 33ff 	mov.w	r3, #4294967295
 80092c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092c4:	687b      	ldr	r3, [r7, #4]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	200000ac 	.word	0x200000ac

080092d4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092da:	f3ef 8305 	mrs	r3, IPSR
 80092de:	603b      	str	r3, [r7, #0]
  return(result);
 80092e0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d003      	beq.n	80092ee <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80092e6:	f001 fcaf 	bl	800ac48 <xTaskGetTickCountFromISR>
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	e002      	b.n	80092f4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80092ee:	f001 fc9b 	bl	800ac28 <xTaskGetTickCount>
 80092f2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80092f4:	687b      	ldr	r3, [r7, #4]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80092fe:	b580      	push	{r7, lr}
 8009300:	b08e      	sub	sp, #56	; 0x38
 8009302:	af04      	add	r7, sp, #16
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800930a:	2300      	movs	r3, #0
 800930c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800930e:	f3ef 8305 	mrs	r3, IPSR
 8009312:	617b      	str	r3, [r7, #20]
  return(result);
 8009314:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009316:	2b00      	cmp	r3, #0
 8009318:	d17e      	bne.n	8009418 <osThreadNew+0x11a>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d07b      	beq.n	8009418 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009320:	2380      	movs	r3, #128	; 0x80
 8009322:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009324:	2318      	movs	r3, #24
 8009326:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009328:	2300      	movs	r3, #0
 800932a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800932c:	f04f 33ff 	mov.w	r3, #4294967295
 8009330:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d045      	beq.n	80093c4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <osThreadNew+0x48>
        name = attr->name;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d002      	beq.n	8009354 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d008      	beq.n	800936c <osThreadNew+0x6e>
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	2b38      	cmp	r3, #56	; 0x38
 800935e:	d805      	bhi.n	800936c <osThreadNew+0x6e>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f003 0301 	and.w	r3, r3, #1
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <osThreadNew+0x72>
        return (NULL);
 800936c:	2300      	movs	r3, #0
 800936e:	e054      	b.n	800941a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	089b      	lsrs	r3, r3, #2
 800937e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00e      	beq.n	80093a6 <osThreadNew+0xa8>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	2b5b      	cmp	r3, #91	; 0x5b
 800938e:	d90a      	bls.n	80093a6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009394:	2b00      	cmp	r3, #0
 8009396:	d006      	beq.n	80093a6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <osThreadNew+0xa8>
        mem = 1;
 80093a0:	2301      	movs	r3, #1
 80093a2:	61bb      	str	r3, [r7, #24]
 80093a4:	e010      	b.n	80093c8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10c      	bne.n	80093c8 <osThreadNew+0xca>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d108      	bne.n	80093c8 <osThreadNew+0xca>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <osThreadNew+0xca>
          mem = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	61bb      	str	r3, [r7, #24]
 80093c2:	e001      	b.n	80093c8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d110      	bne.n	80093f0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093d6:	9202      	str	r2, [sp, #8]
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	6a3a      	ldr	r2, [r7, #32]
 80093e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f001 f937 	bl	800a658 <xTaskCreateStatic>
 80093ea:	4603      	mov	r3, r0
 80093ec:	613b      	str	r3, [r7, #16]
 80093ee:	e013      	b.n	8009418 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d110      	bne.n	8009418 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	f107 0310 	add.w	r3, r7, #16
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f001 f982 	bl	800a712 <xTaskCreate>
 800940e:	4603      	mov	r3, r0
 8009410:	2b01      	cmp	r3, #1
 8009412:	d001      	beq.n	8009418 <osThreadNew+0x11a>
            hTask = NULL;
 8009414:	2300      	movs	r3, #0
 8009416:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009418:	693b      	ldr	r3, [r7, #16]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3728      	adds	r7, #40	; 0x28
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800942a:	f3ef 8305 	mrs	r3, IPSR
 800942e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009430:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <osDelay+0x1c>
    stat = osErrorISR;
 8009436:	f06f 0305 	mvn.w	r3, #5
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	e007      	b.n	800944e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800943e:	2300      	movs	r3, #0
 8009440:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <osDelay+0x2c>
      vTaskDelay(ticks);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 faa7 	bl	800a99c <vTaskDelay>
    }
  }

  return (stat);
 800944e:	68fb      	ldr	r3, [r7, #12]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009458:	b580      	push	{r7, lr}
 800945a:	b08a      	sub	sp, #40	; 0x28
 800945c:	af02      	add	r7, sp, #8
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009468:	f3ef 8305 	mrs	r3, IPSR
 800946c:	613b      	str	r3, [r7, #16]
  return(result);
 800946e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009470:	2b00      	cmp	r3, #0
 8009472:	d175      	bne.n	8009560 <osSemaphoreNew+0x108>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d072      	beq.n	8009560 <osSemaphoreNew+0x108>
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	429a      	cmp	r2, r3
 8009480:	d86e      	bhi.n	8009560 <osSemaphoreNew+0x108>
    mem = -1;
 8009482:	f04f 33ff 	mov.w	r3, #4294967295
 8009486:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d015      	beq.n	80094ba <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d006      	beq.n	80094a4 <osSemaphoreNew+0x4c>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b4f      	cmp	r3, #79	; 0x4f
 800949c:	d902      	bls.n	80094a4 <osSemaphoreNew+0x4c>
        mem = 1;
 800949e:	2301      	movs	r3, #1
 80094a0:	61bb      	str	r3, [r7, #24]
 80094a2:	e00c      	b.n	80094be <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d108      	bne.n	80094be <osSemaphoreNew+0x66>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <osSemaphoreNew+0x66>
          mem = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	61bb      	str	r3, [r7, #24]
 80094b8:	e001      	b.n	80094be <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c4:	d04c      	beq.n	8009560 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d128      	bne.n	800951e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d10a      	bne.n	80094e8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	2203      	movs	r2, #3
 80094d8:	9200      	str	r2, [sp, #0]
 80094da:	2200      	movs	r2, #0
 80094dc:	2100      	movs	r1, #0
 80094de:	2001      	movs	r0, #1
 80094e0:	f000 fac4 	bl	8009a6c <xQueueGenericCreateStatic>
 80094e4:	61f8      	str	r0, [r7, #28]
 80094e6:	e005      	b.n	80094f4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80094e8:	2203      	movs	r2, #3
 80094ea:	2100      	movs	r1, #0
 80094ec:	2001      	movs	r0, #1
 80094ee:	f000 fb35 	bl	8009b5c <xQueueGenericCreate>
 80094f2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d022      	beq.n	8009540 <osSemaphoreNew+0xe8>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01f      	beq.n	8009540 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009500:	2300      	movs	r3, #0
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	69f8      	ldr	r0, [r7, #28]
 8009508:	f000 fbf0 	bl	8009cec <xQueueGenericSend>
 800950c:	4603      	mov	r3, r0
 800950e:	2b01      	cmp	r3, #1
 8009510:	d016      	beq.n	8009540 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009512:	69f8      	ldr	r0, [r7, #28]
 8009514:	f000 fee4 	bl	800a2e0 <vQueueDelete>
            hSemaphore = NULL;
 8009518:	2300      	movs	r3, #0
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	e010      	b.n	8009540 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d108      	bne.n	8009536 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	461a      	mov	r2, r3
 800952a:	68b9      	ldr	r1, [r7, #8]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fb72 	bl	8009c16 <xQueueCreateCountingSemaphoreStatic>
 8009532:	61f8      	str	r0, [r7, #28]
 8009534:	e004      	b.n	8009540 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 fba3 	bl	8009c84 <xQueueCreateCountingSemaphore>
 800953e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00c      	beq.n	8009560 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <osSemaphoreNew+0xfc>
          name = attr->name;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	617b      	str	r3, [r7, #20]
 8009552:	e001      	b.n	8009558 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009558:	6979      	ldr	r1, [r7, #20]
 800955a:	69f8      	ldr	r0, [r7, #28]
 800955c:	f000 fff4 	bl	800a548 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009560:	69fb      	ldr	r3, [r7, #28]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3720      	adds	r7, #32
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800956a:	b580      	push	{r7, lr}
 800956c:	b08a      	sub	sp, #40	; 0x28
 800956e:	af02      	add	r7, sp, #8
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009576:	2300      	movs	r3, #0
 8009578:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800957a:	f3ef 8305 	mrs	r3, IPSR
 800957e:	613b      	str	r3, [r7, #16]
  return(result);
 8009580:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009582:	2b00      	cmp	r3, #0
 8009584:	d15f      	bne.n	8009646 <osMessageQueueNew+0xdc>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d05c      	beq.n	8009646 <osMessageQueueNew+0xdc>
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d059      	beq.n	8009646 <osMessageQueueNew+0xdc>
    mem = -1;
 8009592:	f04f 33ff 	mov.w	r3, #4294967295
 8009596:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d029      	beq.n	80095f2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d012      	beq.n	80095cc <osMessageQueueNew+0x62>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	2b4f      	cmp	r3, #79	; 0x4f
 80095ac:	d90e      	bls.n	80095cc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695a      	ldr	r2, [r3, #20]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	fb01 f303 	mul.w	r3, r1, r3
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d302      	bcc.n	80095cc <osMessageQueueNew+0x62>
        mem = 1;
 80095c6:	2301      	movs	r3, #1
 80095c8:	61bb      	str	r3, [r7, #24]
 80095ca:	e014      	b.n	80095f6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d110      	bne.n	80095f6 <osMessageQueueNew+0x8c>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10c      	bne.n	80095f6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d108      	bne.n	80095f6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d104      	bne.n	80095f6 <osMessageQueueNew+0x8c>
          mem = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	61bb      	str	r3, [r7, #24]
 80095f0:	e001      	b.n	80095f6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d10b      	bne.n	8009614 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691a      	ldr	r2, [r3, #16]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	2100      	movs	r1, #0
 8009606:	9100      	str	r1, [sp, #0]
 8009608:	68b9      	ldr	r1, [r7, #8]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 fa2e 	bl	8009a6c <xQueueGenericCreateStatic>
 8009610:	61f8      	str	r0, [r7, #28]
 8009612:	e008      	b.n	8009626 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d105      	bne.n	8009626 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800961a:	2200      	movs	r2, #0
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fa9c 	bl	8009b5c <xQueueGenericCreate>
 8009624:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00c      	beq.n	8009646 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <osMessageQueueNew+0xd0>
        name = attr->name;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e001      	b.n	800963e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800963e:	6979      	ldr	r1, [r7, #20]
 8009640:	69f8      	ldr	r0, [r7, #28]
 8009642:	f000 ff81 	bl	800a548 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009646:	69fb      	ldr	r3, [r7, #28]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3720      	adds	r7, #32
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009650:	b580      	push	{r7, lr}
 8009652:	b088      	sub	sp, #32
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	4613      	mov	r3, r2
 800965e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009668:	f3ef 8305 	mrs	r3, IPSR
 800966c:	617b      	str	r3, [r7, #20]
  return(result);
 800966e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009670:	2b00      	cmp	r3, #0
 8009672:	d028      	beq.n	80096c6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d005      	beq.n	8009686 <osMessageQueuePut+0x36>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <osMessageQueuePut+0x36>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009686:	f06f 0303 	mvn.w	r3, #3
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e038      	b.n	8009700 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800968e:	2300      	movs	r3, #0
 8009690:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009692:	f107 0210 	add.w	r2, r7, #16
 8009696:	2300      	movs	r3, #0
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	69b8      	ldr	r0, [r7, #24]
 800969c:	f000 fc24 	bl	8009ee8 <xQueueGenericSendFromISR>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d003      	beq.n	80096ae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80096a6:	f06f 0302 	mvn.w	r3, #2
 80096aa:	61fb      	str	r3, [r7, #28]
 80096ac:	e028      	b.n	8009700 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d025      	beq.n	8009700 <osMessageQueuePut+0xb0>
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <osMessageQueuePut+0xbc>)
 80096b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	e01c      	b.n	8009700 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <osMessageQueuePut+0x82>
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d103      	bne.n	80096da <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80096d2:	f06f 0303 	mvn.w	r3, #3
 80096d6:	61fb      	str	r3, [r7, #28]
 80096d8:	e012      	b.n	8009700 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80096da:	2300      	movs	r3, #0
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	69b8      	ldr	r0, [r7, #24]
 80096e2:	f000 fb03 	bl	8009cec <xQueueGenericSend>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d009      	beq.n	8009700 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80096f2:	f06f 0301 	mvn.w	r3, #1
 80096f6:	61fb      	str	r3, [r7, #28]
 80096f8:	e002      	b.n	8009700 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80096fa:	f06f 0302 	mvn.w	r3, #2
 80096fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009700:	69fb      	ldr	r3, [r7, #28]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3720      	adds	r7, #32
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009710:	b580      	push	{r7, lr}
 8009712:	b088      	sub	sp, #32
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009722:	2300      	movs	r3, #0
 8009724:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009726:	f3ef 8305 	mrs	r3, IPSR
 800972a:	617b      	str	r3, [r7, #20]
  return(result);
 800972c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800972e:	2b00      	cmp	r3, #0
 8009730:	d028      	beq.n	8009784 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d005      	beq.n	8009744 <osMessageQueueGet+0x34>
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <osMessageQueueGet+0x34>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d003      	beq.n	800974c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009744:	f06f 0303 	mvn.w	r3, #3
 8009748:	61fb      	str	r3, [r7, #28]
 800974a:	e037      	b.n	80097bc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800974c:	2300      	movs	r3, #0
 800974e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009750:	f107 0310 	add.w	r3, r7, #16
 8009754:	461a      	mov	r2, r3
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	69b8      	ldr	r0, [r7, #24]
 800975a:	f000 fd41 	bl	800a1e0 <xQueueReceiveFromISR>
 800975e:	4603      	mov	r3, r0
 8009760:	2b01      	cmp	r3, #1
 8009762:	d003      	beq.n	800976c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009764:	f06f 0302 	mvn.w	r3, #2
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	e027      	b.n	80097bc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d024      	beq.n	80097bc <osMessageQueueGet+0xac>
 8009772:	4b15      	ldr	r3, [pc, #84]	; (80097c8 <osMessageQueueGet+0xb8>)
 8009774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	e01b      	b.n	80097bc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <osMessageQueueGet+0x80>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d103      	bne.n	8009798 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009790:	f06f 0303 	mvn.w	r3, #3
 8009794:	61fb      	str	r3, [r7, #28]
 8009796:	e011      	b.n	80097bc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	69b8      	ldr	r0, [r7, #24]
 800979e:	f000 fc3f 	bl	800a020 <xQueueReceive>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d009      	beq.n	80097bc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80097ae:	f06f 0301 	mvn.w	r3, #1
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	e002      	b.n	80097bc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80097b6:	f06f 0302 	mvn.w	r3, #2
 80097ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80097bc:	69fb      	ldr	r3, [r7, #28]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3720      	adds	r7, #32
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	e000ed04 	.word	0xe000ed04

080097cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4a07      	ldr	r2, [pc, #28]	; (80097f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80097dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	4a06      	ldr	r2, [pc, #24]	; (80097fc <vApplicationGetIdleTaskMemory+0x30>)
 80097e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2280      	movs	r2, #128	; 0x80
 80097e8:	601a      	str	r2, [r3, #0]
}
 80097ea:	bf00      	nop
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	200000b0 	.word	0x200000b0
 80097fc:	2000010c 	.word	0x2000010c

08009800 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	4a07      	ldr	r2, [pc, #28]	; (800982c <vApplicationGetTimerTaskMemory+0x2c>)
 8009810:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	4a06      	ldr	r2, [pc, #24]	; (8009830 <vApplicationGetTimerTaskMemory+0x30>)
 8009816:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800981e:	601a      	str	r2, [r3, #0]
}
 8009820:	bf00      	nop
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	2000030c 	.word	0x2000030c
 8009830:	20000368 	.word	0x20000368

08009834 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f103 0208 	add.w	r2, r3, #8
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f04f 32ff 	mov.w	r2, #4294967295
 800984c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f103 0208 	add.w	r2, r3, #8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f103 0208 	add.w	r2, r3, #8
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009882:	bf00      	nop
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800988e:	b480      	push	{r7}
 8009890:	b085      	sub	sp, #20
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	689a      	ldr	r2, [r3, #8]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	601a      	str	r2, [r3, #0]
}
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098d6:	b480      	push	{r7}
 80098d8:	b085      	sub	sp, #20
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ec:	d103      	bne.n	80098f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	e00c      	b.n	8009910 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3308      	adds	r3, #8
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	e002      	b.n	8009904 <vListInsert+0x2e>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	429a      	cmp	r2, r3
 800990e:	d2f6      	bcs.n	80098fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	1c5a      	adds	r2, r3, #1
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	601a      	str	r2, [r3, #0]
}
 800993c:	bf00      	nop
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6892      	ldr	r2, [r2, #8]
 800995e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	6852      	ldr	r2, [r2, #4]
 8009968:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	429a      	cmp	r2, r3
 8009972:	d103      	bne.n	800997c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689a      	ldr	r2, [r3, #8]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	1e5a      	subs	r2, r3, #1
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10a      	bne.n	80099c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80099c2:	bf00      	nop
 80099c4:	e7fe      	b.n	80099c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099c6:	f002 f9d5 	bl	800bd74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d2:	68f9      	ldr	r1, [r7, #12]
 80099d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099d6:	fb01 f303 	mul.w	r3, r1, r3
 80099da:	441a      	add	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f6:	3b01      	subs	r3, #1
 80099f8:	68f9      	ldr	r1, [r7, #12]
 80099fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	22ff      	movs	r2, #255	; 0xff
 8009a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	22ff      	movs	r2, #255	; 0xff
 8009a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d114      	bne.n	8009a46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01a      	beq.n	8009a5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3310      	adds	r3, #16
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 fa87 	bl	800af3c <xTaskRemoveFromEventList>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d012      	beq.n	8009a5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a34:	4b0c      	ldr	r3, [pc, #48]	; (8009a68 <xQueueGenericReset+0xcc>)
 8009a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	e009      	b.n	8009a5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3310      	adds	r3, #16
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff fef2 	bl	8009834 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3324      	adds	r3, #36	; 0x24
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7ff feed 	bl	8009834 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a5a:	f002 f9bb 	bl	800bdd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a5e:	2301      	movs	r3, #1
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08e      	sub	sp, #56	; 0x38
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10a      	bne.n	8009a96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa0:	f383 8811 	msr	BASEPRI, r3
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009aae:	bf00      	nop
 8009ab0:	e7fe      	b.n	8009ab0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <xQueueGenericCreateStatic+0x52>
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <xQueueGenericCreateStatic+0x56>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e000      	b.n	8009ac4 <xQueueGenericCreateStatic+0x58>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	623b      	str	r3, [r7, #32]
}
 8009ada:	bf00      	nop
 8009adc:	e7fe      	b.n	8009adc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <xQueueGenericCreateStatic+0x7e>
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <xQueueGenericCreateStatic+0x82>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e000      	b.n	8009af0 <xQueueGenericCreateStatic+0x84>
 8009aee:	2300      	movs	r3, #0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10a      	bne.n	8009b0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	61fb      	str	r3, [r7, #28]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b0a:	2350      	movs	r3, #80	; 0x50
 8009b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2b50      	cmp	r3, #80	; 0x50
 8009b12:	d00a      	beq.n	8009b2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	61bb      	str	r3, [r7, #24]
}
 8009b26:	bf00      	nop
 8009b28:	e7fe      	b.n	8009b28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00d      	beq.n	8009b52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	4613      	mov	r3, r2
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f83f 	bl	8009bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3730      	adds	r7, #48	; 0x30
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08a      	sub	sp, #40	; 0x28
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	4613      	mov	r3, r2
 8009b68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10a      	bne.n	8009b86 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	613b      	str	r3, [r7, #16]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	fb02 f303 	mul.w	r3, r2, r3
 8009b8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	3350      	adds	r3, #80	; 0x50
 8009b94:	4618      	mov	r0, r3
 8009b96:	f002 fa0f 	bl	800bfb8 <pvPortMalloc>
 8009b9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d011      	beq.n	8009bc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	3350      	adds	r3, #80	; 0x50
 8009baa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bb4:	79fa      	ldrb	r2, [r7, #7]
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 f805 	bl	8009bd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bc6:	69bb      	ldr	r3, [r7, #24]
	}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3720      	adds	r7, #32
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
 8009bdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d103      	bne.n	8009bec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	e002      	b.n	8009bf2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bfe:	2101      	movs	r1, #1
 8009c00:	69b8      	ldr	r0, [r7, #24]
 8009c02:	f7ff fecb 	bl	800999c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b08a      	sub	sp, #40	; 0x28
 8009c1a:	af02      	add	r7, sp, #8
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d10a      	bne.n	8009c3e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	61bb      	str	r3, [r7, #24]
}
 8009c3a:	bf00      	nop
 8009c3c:	e7fe      	b.n	8009c3c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d90a      	bls.n	8009c5c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	617b      	str	r3, [r7, #20]
}
 8009c58:	bf00      	nop
 8009c5a:	e7fe      	b.n	8009c5a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	2100      	movs	r1, #0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f7ff ff00 	bl	8009a6c <xQueueGenericCreateStatic>
 8009c6c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c7a:	69fb      	ldr	r3, [r7, #28]
	}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3720      	adds	r7, #32
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	613b      	str	r3, [r7, #16]
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d90a      	bls.n	8009cc8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	60fb      	str	r3, [r7, #12]
}
 8009cc4:	bf00      	nop
 8009cc6:	e7fe      	b.n	8009cc6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009cc8:	2202      	movs	r2, #2
 8009cca:	2100      	movs	r1, #0
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ff45 	bl	8009b5c <xQueueGenericCreate>
 8009cd2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ce0:	697b      	ldr	r3, [r7, #20]
	}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08e      	sub	sp, #56	; 0x38
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <xQueueGenericSend+0x32>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d103      	bne.n	8009d2c <xQueueGenericSend+0x40>
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d101      	bne.n	8009d30 <xQueueGenericSend+0x44>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e000      	b.n	8009d32 <xQueueGenericSend+0x46>
 8009d30:	2300      	movs	r3, #0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <xQueueGenericSend+0x60>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d48:	bf00      	nop
 8009d4a:	e7fe      	b.n	8009d4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d103      	bne.n	8009d5a <xQueueGenericSend+0x6e>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d101      	bne.n	8009d5e <xQueueGenericSend+0x72>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e000      	b.n	8009d60 <xQueueGenericSend+0x74>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <xQueueGenericSend+0x8e>
	__asm volatile
 8009d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d68:	f383 8811 	msr	BASEPRI, r3
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	623b      	str	r3, [r7, #32]
}
 8009d76:	bf00      	nop
 8009d78:	e7fe      	b.n	8009d78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d7a:	f001 fa9d 	bl	800b2b8 <xTaskGetSchedulerState>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <xQueueGenericSend+0x9e>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <xQueueGenericSend+0xa2>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e000      	b.n	8009d90 <xQueueGenericSend+0xa4>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10a      	bne.n	8009daa <xQueueGenericSend+0xbe>
	__asm volatile
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	f383 8811 	msr	BASEPRI, r3
 8009d9c:	f3bf 8f6f 	isb	sy
 8009da0:	f3bf 8f4f 	dsb	sy
 8009da4:	61fb      	str	r3, [r7, #28]
}
 8009da6:	bf00      	nop
 8009da8:	e7fe      	b.n	8009da8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009daa:	f001 ffe3 	bl	800bd74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d302      	bcc.n	8009dc0 <xQueueGenericSend+0xd4>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d129      	bne.n	8009e14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	68b9      	ldr	r1, [r7, #8]
 8009dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dc6:	f000 faae 	bl	800a326 <prvCopyDataToQueue>
 8009dca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d010      	beq.n	8009df6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	3324      	adds	r3, #36	; 0x24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f001 f8af 	bl	800af3c <xTaskRemoveFromEventList>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d013      	beq.n	8009e0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009de4:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <xQueueGenericSend+0x1f8>)
 8009de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dea:	601a      	str	r2, [r3, #0]
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	e00a      	b.n	8009e0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d007      	beq.n	8009e0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009dfc:	4b39      	ldr	r3, [pc, #228]	; (8009ee4 <xQueueGenericSend+0x1f8>)
 8009dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e0c:	f001 ffe2 	bl	800bdd4 <vPortExitCritical>
				return pdPASS;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e063      	b.n	8009edc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e1a:	f001 ffdb 	bl	800bdd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	e05c      	b.n	8009edc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d106      	bne.n	8009e36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e28:	f107 0314 	add.w	r3, r7, #20
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 f8e9 	bl	800b004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e32:	2301      	movs	r3, #1
 8009e34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e36:	f001 ffcd 	bl	800bdd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e3a:	f000 fe49 	bl	800aad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e3e:	f001 ff99 	bl	800bd74 <vPortEnterCritical>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e48:	b25b      	sxtb	r3, r3
 8009e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4e:	d103      	bne.n	8009e58 <xQueueGenericSend+0x16c>
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e5e:	b25b      	sxtb	r3, r3
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e64:	d103      	bne.n	8009e6e <xQueueGenericSend+0x182>
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e6e:	f001 ffb1 	bl	800bdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e72:	1d3a      	adds	r2, r7, #4
 8009e74:	f107 0314 	add.w	r3, r7, #20
 8009e78:	4611      	mov	r1, r2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 f8d8 	bl	800b030 <xTaskCheckForTimeOut>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d124      	bne.n	8009ed0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e88:	f000 fb45 	bl	800a516 <prvIsQueueFull>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d018      	beq.n	8009ec4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	3310      	adds	r3, #16
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4611      	mov	r1, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 fffe 	bl	800ae9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ea2:	f000 fad0 	bl	800a446 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ea6:	f000 fe21 	bl	800aaec <xTaskResumeAll>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	f47f af7c 	bne.w	8009daa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <xQueueGenericSend+0x1f8>)
 8009eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	e772      	b.n	8009daa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ec6:	f000 fabe 	bl	800a446 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009eca:	f000 fe0f 	bl	800aaec <xTaskResumeAll>
 8009ece:	e76c      	b.n	8009daa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ed2:	f000 fab8 	bl	800a446 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ed6:	f000 fe09 	bl	800aaec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009eda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3738      	adds	r7, #56	; 0x38
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	e000ed04 	.word	0xe000ed04

08009ee8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b090      	sub	sp, #64	; 0x40
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d103      	bne.n	8009f24 <xQueueGenericSendFromISR+0x3c>
 8009f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <xQueueGenericSendFromISR+0x40>
 8009f24:	2301      	movs	r3, #1
 8009f26:	e000      	b.n	8009f2a <xQueueGenericSendFromISR+0x42>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d10a      	bne.n	8009f44 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f40:	bf00      	nop
 8009f42:	e7fe      	b.n	8009f42 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d103      	bne.n	8009f52 <xQueueGenericSendFromISR+0x6a>
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d101      	bne.n	8009f56 <xQueueGenericSendFromISR+0x6e>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e000      	b.n	8009f58 <xQueueGenericSendFromISR+0x70>
 8009f56:	2300      	movs	r3, #0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10a      	bne.n	8009f72 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	623b      	str	r3, [r7, #32]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f72:	f001 ffe1 	bl	800bf38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f76:	f3ef 8211 	mrs	r2, BASEPRI
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	61fa      	str	r2, [r7, #28]
 8009f8c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f8e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f90:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d302      	bcc.n	8009fa4 <xQueueGenericSendFromISR+0xbc>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d12f      	bne.n	800a004 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fba:	f000 f9b4 	bl	800a326 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fbe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc6:	d112      	bne.n	8009fee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d016      	beq.n	8009ffe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	3324      	adds	r3, #36	; 0x24
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 ffb1 	bl	800af3c <xTaskRemoveFromEventList>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00e      	beq.n	8009ffe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	e007      	b.n	8009ffe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	b25a      	sxtb	r2, r3
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ffe:	2301      	movs	r3, #1
 800a000:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a002:	e001      	b.n	800a008 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a012:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a016:	4618      	mov	r0, r3
 800a018:	3740      	adds	r7, #64	; 0x40
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b08c      	sub	sp, #48	; 0x30
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a02c:	2300      	movs	r3, #0
 800a02e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <xQueueReceive+0x30>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	623b      	str	r3, [r7, #32]
}
 800a04c:	bf00      	nop
 800a04e:	e7fe      	b.n	800a04e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d103      	bne.n	800a05e <xQueueReceive+0x3e>
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <xQueueReceive+0x42>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <xQueueReceive+0x44>
 800a062:	2300      	movs	r3, #0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueReceive+0x5e>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	61fb      	str	r3, [r7, #28]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a07e:	f001 f91b 	bl	800b2b8 <xTaskGetSchedulerState>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <xQueueReceive+0x6e>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <xQueueReceive+0x72>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <xQueueReceive+0x74>
 800a092:	2300      	movs	r3, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueReceive+0x8e>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	61bb      	str	r3, [r7, #24]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0ae:	f001 fe61 	bl	800bd74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01f      	beq.n	800a0fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c2:	f000 f99a 	bl	800a3fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	1e5a      	subs	r2, r3, #1
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00f      	beq.n	800a0f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d8:	3310      	adds	r3, #16
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 ff2e 	bl	800af3c <xTaskRemoveFromEventList>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d007      	beq.n	800a0f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0e6:	4b3d      	ldr	r3, [pc, #244]	; (800a1dc <xQueueReceive+0x1bc>)
 800a0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0f6:	f001 fe6d 	bl	800bdd4 <vPortExitCritical>
				return pdPASS;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e069      	b.n	800a1d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d103      	bne.n	800a10c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a104:	f001 fe66 	bl	800bdd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a108:	2300      	movs	r3, #0
 800a10a:	e062      	b.n	800a1d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d106      	bne.n	800a120 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a112:	f107 0310 	add.w	r3, r7, #16
 800a116:	4618      	mov	r0, r3
 800a118:	f000 ff74 	bl	800b004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a120:	f001 fe58 	bl	800bdd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a124:	f000 fcd4 	bl	800aad0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a128:	f001 fe24 	bl	800bd74 <vPortEnterCritical>
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a132:	b25b      	sxtb	r3, r3
 800a134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a138:	d103      	bne.n	800a142 <xQueueReceive+0x122>
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a148:	b25b      	sxtb	r3, r3
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14e:	d103      	bne.n	800a158 <xQueueReceive+0x138>
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a158:	f001 fe3c 	bl	800bdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a15c:	1d3a      	adds	r2, r7, #4
 800a15e:	f107 0310 	add.w	r3, r7, #16
 800a162:	4611      	mov	r1, r2
 800a164:	4618      	mov	r0, r3
 800a166:	f000 ff63 	bl	800b030 <xTaskCheckForTimeOut>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d123      	bne.n	800a1b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a172:	f000 f9ba 	bl	800a4ea <prvIsQueueEmpty>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d017      	beq.n	800a1ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	3324      	adds	r3, #36	; 0x24
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	4611      	mov	r1, r2
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fe89 	bl	800ae9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a18a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18c:	f000 f95b 	bl	800a446 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a190:	f000 fcac 	bl	800aaec <xTaskResumeAll>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d189      	bne.n	800a0ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a19a:	4b10      	ldr	r3, [pc, #64]	; (800a1dc <xQueueReceive+0x1bc>)
 800a19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	e780      	b.n	800a0ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1ae:	f000 f94a 	bl	800a446 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1b2:	f000 fc9b 	bl	800aaec <xTaskResumeAll>
 800a1b6:	e77a      	b.n	800a0ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1ba:	f000 f944 	bl	800a446 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1be:	f000 fc95 	bl	800aaec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1c4:	f000 f991 	bl	800a4ea <prvIsQueueEmpty>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f43f af6f 	beq.w	800a0ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3730      	adds	r7, #48	; 0x30
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08e      	sub	sp, #56	; 0x38
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10a      	bne.n	800a20c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	623b      	str	r3, [r7, #32]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d103      	bne.n	800a21a <xQueueReceiveFromISR+0x3a>
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <xQueueReceiveFromISR+0x3e>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e000      	b.n	800a220 <xQueueReceiveFromISR+0x40>
 800a21e:	2300      	movs	r3, #0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	61fb      	str	r3, [r7, #28]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a23a:	f001 fe7d 	bl	800bf38 <vPortValidateInterruptPriority>
	__asm volatile
 800a23e:	f3ef 8211 	mrs	r2, BASEPRI
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	61ba      	str	r2, [r7, #24]
 800a254:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a256:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	2b00      	cmp	r3, #0
 800a264:	d02f      	beq.n	800a2c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a274:	f000 f8c1 	bl	800a3fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	1e5a      	subs	r2, r3, #1
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a280:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a288:	d112      	bne.n	800a2b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d016      	beq.n	800a2c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a294:	3310      	adds	r3, #16
 800a296:	4618      	mov	r0, r3
 800a298:	f000 fe50 	bl	800af3c <xTaskRemoveFromEventList>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00e      	beq.n	800a2c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00b      	beq.n	800a2c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	e007      	b.n	800a2c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	b25a      	sxtb	r2, r3
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a2c4:	e001      	b.n	800a2ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	f383 8811 	msr	BASEPRI, r3
}
 800a2d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3738      	adds	r7, #56	; 0x38
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <vQueueDelete+0x28>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	60bb      	str	r3, [r7, #8]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f000 f947 	bl	800a59c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f001 ff19 	bl	800c150 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a31e:	bf00      	nop
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b086      	sub	sp, #24
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a332:	2300      	movs	r3, #0
 800a334:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10d      	bne.n	800a360 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d14d      	bne.n	800a3e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	4618      	mov	r0, r3
 800a352:	f000 ffcf 	bl	800b2f4 <xTaskPriorityDisinherit>
 800a356:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	609a      	str	r2, [r3, #8]
 800a35e:	e043      	b.n	800a3e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d119      	bne.n	800a39a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6858      	ldr	r0, [r3, #4]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	461a      	mov	r2, r3
 800a370:	68b9      	ldr	r1, [r7, #8]
 800a372:	f002 f835 	bl	800c3e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	441a      	add	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d32b      	bcc.n	800a3e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	605a      	str	r2, [r3, #4]
 800a398:	e026      	b.n	800a3e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68d8      	ldr	r0, [r3, #12]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	68b9      	ldr	r1, [r7, #8]
 800a3a6:	f002 f81b 	bl	800c3e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	425b      	negs	r3, r3
 800a3b4:	441a      	add	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d207      	bcs.n	800a3d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ce:	425b      	negs	r3, r3
 800a3d0:	441a      	add	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d105      	bne.n	800a3e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	1c5a      	adds	r2, r3, #1
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a3f0:	697b      	ldr	r3, [r7, #20]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d018      	beq.n	800a43e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68da      	ldr	r2, [r3, #12]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	441a      	add	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	429a      	cmp	r2, r3
 800a424:	d303      	bcc.n	800a42e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68d9      	ldr	r1, [r3, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	461a      	mov	r2, r3
 800a438:	6838      	ldr	r0, [r7, #0]
 800a43a:	f001 ffd1 	bl	800c3e0 <memcpy>
	}
}
 800a43e:	bf00      	nop
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a44e:	f001 fc91 	bl	800bd74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a458:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a45a:	e011      	b.n	800a480 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	2b00      	cmp	r3, #0
 800a462:	d012      	beq.n	800a48a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3324      	adds	r3, #36	; 0x24
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 fd67 	bl	800af3c <xTaskRemoveFromEventList>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a474:	f000 fe3e 	bl	800b0f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a478:	7bfb      	ldrb	r3, [r7, #15]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a484:	2b00      	cmp	r3, #0
 800a486:	dce9      	bgt.n	800a45c <prvUnlockQueue+0x16>
 800a488:	e000      	b.n	800a48c <prvUnlockQueue+0x46>
					break;
 800a48a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	22ff      	movs	r2, #255	; 0xff
 800a490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a494:	f001 fc9e 	bl	800bdd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a498:	f001 fc6c 	bl	800bd74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4a4:	e011      	b.n	800a4ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d012      	beq.n	800a4d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	3310      	adds	r3, #16
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fd42 	bl	800af3c <xTaskRemoveFromEventList>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a4be:	f000 fe19 	bl	800b0f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	dce9      	bgt.n	800a4a6 <prvUnlockQueue+0x60>
 800a4d2:	e000      	b.n	800a4d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	22ff      	movs	r2, #255	; 0xff
 800a4da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a4de:	f001 fc79 	bl	800bdd4 <vPortExitCritical>
}
 800a4e2:	bf00      	nop
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4f2:	f001 fc3f 	bl	800bd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d102      	bne.n	800a504 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4fe:	2301      	movs	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	e001      	b.n	800a508 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a504:	2300      	movs	r3, #0
 800a506:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a508:	f001 fc64 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800a50c:	68fb      	ldr	r3, [r7, #12]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a51e:	f001 fc29 	bl	800bd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d102      	bne.n	800a534 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a52e:	2301      	movs	r3, #1
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e001      	b.n	800a538 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a534:	2300      	movs	r3, #0
 800a536:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a538:	f001 fc4c 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800a53c:	68fb      	ldr	r3, [r7, #12]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	e014      	b.n	800a582 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a558:	4a0f      	ldr	r2, [pc, #60]	; (800a598 <vQueueAddToRegistry+0x50>)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10b      	bne.n	800a57c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a564:	490c      	ldr	r1, [pc, #48]	; (800a598 <vQueueAddToRegistry+0x50>)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a56e:	4a0a      	ldr	r2, [pc, #40]	; (800a598 <vQueueAddToRegistry+0x50>)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	4413      	add	r3, r2
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a57a:	e006      	b.n	800a58a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3301      	adds	r3, #1
 800a580:	60fb      	str	r3, [r7, #12]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2b07      	cmp	r3, #7
 800a586:	d9e7      	bls.n	800a558 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a588:	bf00      	nop
 800a58a:	bf00      	nop
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	20009a50 	.word	0x20009a50

0800a59c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	e016      	b.n	800a5d8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a5aa:	4a10      	ldr	r2, [pc, #64]	; (800a5ec <vQueueUnregisterQueue+0x50>)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	4413      	add	r3, r2
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d10b      	bne.n	800a5d2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a5ba:	4a0c      	ldr	r2, [pc, #48]	; (800a5ec <vQueueUnregisterQueue+0x50>)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2100      	movs	r1, #0
 800a5c0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a5c4:	4a09      	ldr	r2, [pc, #36]	; (800a5ec <vQueueUnregisterQueue+0x50>)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	605a      	str	r2, [r3, #4]
				break;
 800a5d0:	e006      	b.n	800a5e0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b07      	cmp	r3, #7
 800a5dc:	d9e5      	bls.n	800a5aa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	20009a50 	.word	0x20009a50

0800a5f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a600:	f001 fbb8 	bl	800bd74 <vPortEnterCritical>
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a60a:	b25b      	sxtb	r3, r3
 800a60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a610:	d103      	bne.n	800a61a <vQueueWaitForMessageRestricted+0x2a>
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a620:	b25b      	sxtb	r3, r3
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	d103      	bne.n	800a630 <vQueueWaitForMessageRestricted+0x40>
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a630:	f001 fbd0 	bl	800bdd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d106      	bne.n	800a64a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	3324      	adds	r3, #36	; 0x24
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	68b9      	ldr	r1, [r7, #8]
 800a644:	4618      	mov	r0, r3
 800a646:	f000 fc4d 	bl	800aee4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a64a:	6978      	ldr	r0, [r7, #20]
 800a64c:	f7ff fefb 	bl	800a446 <prvUnlockQueue>
	}
 800a650:	bf00      	nop
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08e      	sub	sp, #56	; 0x38
 800a65c:	af04      	add	r7, sp, #16
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10a      	bne.n	800a682 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	623b      	str	r3, [r7, #32]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <xTaskCreateStatic+0x46>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	61fb      	str	r3, [r7, #28]
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a69e:	235c      	movs	r3, #92	; 0x5c
 800a6a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2b5c      	cmp	r3, #92	; 0x5c
 800a6a6:	d00a      	beq.n	800a6be <xTaskCreateStatic+0x66>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	61bb      	str	r3, [r7, #24]
}
 800a6ba:	bf00      	nop
 800a6bc:	e7fe      	b.n	800a6bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a6be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d01e      	beq.n	800a704 <xTaskCreateStatic+0xac>
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d01b      	beq.n	800a704 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	2202      	movs	r2, #2
 800a6da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6de:	2300      	movs	r3, #0
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	9302      	str	r3, [sp, #8]
 800a6e6:	f107 0314 	add.w	r3, r7, #20
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	68b9      	ldr	r1, [r7, #8]
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f000 f850 	bl	800a79c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6fe:	f000 f8dd 	bl	800a8bc <prvAddNewTaskToReadyList>
 800a702:	e001      	b.n	800a708 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a704:	2300      	movs	r3, #0
 800a706:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a708:	697b      	ldr	r3, [r7, #20]
	}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3728      	adds	r7, #40	; 0x28
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a712:	b580      	push	{r7, lr}
 800a714:	b08c      	sub	sp, #48	; 0x30
 800a716:	af04      	add	r7, sp, #16
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	603b      	str	r3, [r7, #0]
 800a71e:	4613      	mov	r3, r2
 800a720:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a722:	88fb      	ldrh	r3, [r7, #6]
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4618      	mov	r0, r3
 800a728:	f001 fc46 	bl	800bfb8 <pvPortMalloc>
 800a72c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00e      	beq.n	800a752 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a734:	205c      	movs	r0, #92	; 0x5c
 800a736:	f001 fc3f 	bl	800bfb8 <pvPortMalloc>
 800a73a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	631a      	str	r2, [r3, #48]	; 0x30
 800a748:	e005      	b.n	800a756 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	f001 fd00 	bl	800c150 <vPortFree>
 800a750:	e001      	b.n	800a756 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a752:	2300      	movs	r3, #0
 800a754:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d017      	beq.n	800a78c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a764:	88fa      	ldrh	r2, [r7, #6]
 800a766:	2300      	movs	r3, #0
 800a768:	9303      	str	r3, [sp, #12]
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	9302      	str	r3, [sp, #8]
 800a76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	68b9      	ldr	r1, [r7, #8]
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 f80e 	bl	800a79c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a780:	69f8      	ldr	r0, [r7, #28]
 800a782:	f000 f89b 	bl	800a8bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a786:	2301      	movs	r3, #1
 800a788:	61bb      	str	r3, [r7, #24]
 800a78a:	e002      	b.n	800a792 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a78c:	f04f 33ff 	mov.w	r3, #4294967295
 800a790:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a792:	69bb      	ldr	r3, [r7, #24]
	}
 800a794:	4618      	mov	r0, r3
 800a796:	3720      	adds	r7, #32
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	21a5      	movs	r1, #165	; 0xa5
 800a7b6:	f001 fe21 	bl	800c3fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	f023 0307 	bic.w	r3, r3, #7
 800a7d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	617b      	str	r3, [r7, #20]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d01f      	beq.n	800a83a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	61fb      	str	r3, [r7, #28]
 800a7fe:	e012      	b.n	800a826 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	4413      	add	r3, r2
 800a806:	7819      	ldrb	r1, [r3, #0]
 800a808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	4413      	add	r3, r2
 800a80e:	3334      	adds	r3, #52	; 0x34
 800a810:	460a      	mov	r2, r1
 800a812:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	4413      	add	r3, r2
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d006      	beq.n	800a82e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	3301      	adds	r3, #1
 800a824:	61fb      	str	r3, [r7, #28]
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	2b0f      	cmp	r3, #15
 800a82a:	d9e9      	bls.n	800a800 <prvInitialiseNewTask+0x64>
 800a82c:	e000      	b.n	800a830 <prvInitialiseNewTask+0x94>
			{
				break;
 800a82e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	2200      	movs	r2, #0
 800a834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a838:	e003      	b.n	800a842 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	2b37      	cmp	r3, #55	; 0x37
 800a846:	d901      	bls.n	800a84c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a848:	2337      	movs	r3, #55	; 0x37
 800a84a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a850:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a856:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	2200      	movs	r2, #0
 800a85c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a860:	3304      	adds	r3, #4
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff f806 	bl	8009874 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	3318      	adds	r3, #24
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff f801 	bl	8009874 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a876:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a886:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	2200      	movs	r2, #0
 800a88c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	68f9      	ldr	r1, [r7, #12]
 800a89a:	69b8      	ldr	r0, [r7, #24]
 800a89c:	f001 f93a 	bl	800bb14 <pxPortInitialiseStack>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8b2:	bf00      	nop
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8c4:	f001 fa56 	bl	800bd74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8c8:	4b2d      	ldr	r3, [pc, #180]	; (800a980 <prvAddNewTaskToReadyList+0xc4>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	4a2c      	ldr	r2, [pc, #176]	; (800a980 <prvAddNewTaskToReadyList+0xc4>)
 800a8d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8d2:	4b2c      	ldr	r3, [pc, #176]	; (800a984 <prvAddNewTaskToReadyList+0xc8>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d109      	bne.n	800a8ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8da:	4a2a      	ldr	r2, [pc, #168]	; (800a984 <prvAddNewTaskToReadyList+0xc8>)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8e0:	4b27      	ldr	r3, [pc, #156]	; (800a980 <prvAddNewTaskToReadyList+0xc4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d110      	bne.n	800a90a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8e8:	f000 fc28 	bl	800b13c <prvInitialiseTaskLists>
 800a8ec:	e00d      	b.n	800a90a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8ee:	4b26      	ldr	r3, [pc, #152]	; (800a988 <prvAddNewTaskToReadyList+0xcc>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d109      	bne.n	800a90a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8f6:	4b23      	ldr	r3, [pc, #140]	; (800a984 <prvAddNewTaskToReadyList+0xc8>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	429a      	cmp	r2, r3
 800a902:	d802      	bhi.n	800a90a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a904:	4a1f      	ldr	r2, [pc, #124]	; (800a984 <prvAddNewTaskToReadyList+0xc8>)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a90a:	4b20      	ldr	r3, [pc, #128]	; (800a98c <prvAddNewTaskToReadyList+0xd0>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3301      	adds	r3, #1
 800a910:	4a1e      	ldr	r2, [pc, #120]	; (800a98c <prvAddNewTaskToReadyList+0xd0>)
 800a912:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a914:	4b1d      	ldr	r3, [pc, #116]	; (800a98c <prvAddNewTaskToReadyList+0xd0>)
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a920:	4b1b      	ldr	r3, [pc, #108]	; (800a990 <prvAddNewTaskToReadyList+0xd4>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	429a      	cmp	r2, r3
 800a926:	d903      	bls.n	800a930 <prvAddNewTaskToReadyList+0x74>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	4a18      	ldr	r2, [pc, #96]	; (800a990 <prvAddNewTaskToReadyList+0xd4>)
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a934:	4613      	mov	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4a15      	ldr	r2, [pc, #84]	; (800a994 <prvAddNewTaskToReadyList+0xd8>)
 800a93e:	441a      	add	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3304      	adds	r3, #4
 800a944:	4619      	mov	r1, r3
 800a946:	4610      	mov	r0, r2
 800a948:	f7fe ffa1 	bl	800988e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a94c:	f001 fa42 	bl	800bdd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a950:	4b0d      	ldr	r3, [pc, #52]	; (800a988 <prvAddNewTaskToReadyList+0xcc>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00e      	beq.n	800a976 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a958:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <prvAddNewTaskToReadyList+0xc8>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a962:	429a      	cmp	r2, r3
 800a964:	d207      	bcs.n	800a976 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <prvAddNewTaskToReadyList+0xdc>)
 800a968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a976:	bf00      	nop
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20000c3c 	.word	0x20000c3c
 800a984:	20000768 	.word	0x20000768
 800a988:	20000c48 	.word	0x20000c48
 800a98c:	20000c58 	.word	0x20000c58
 800a990:	20000c44 	.word	0x20000c44
 800a994:	2000076c 	.word	0x2000076c
 800a998:	e000ed04 	.word	0xe000ed04

0800a99c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d017      	beq.n	800a9de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9ae:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <vTaskDelay+0x60>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00a      	beq.n	800a9cc <vTaskDelay+0x30>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	60bb      	str	r3, [r7, #8]
}
 800a9c8:	bf00      	nop
 800a9ca:	e7fe      	b.n	800a9ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a9cc:	f000 f880 	bl	800aad0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fcfc 	bl	800b3d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9d8:	f000 f888 	bl	800aaec <xTaskResumeAll>
 800a9dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d107      	bne.n	800a9f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a9e4:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <vTaskDelay+0x64>)
 800a9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9f4:	bf00      	nop
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	20000c64 	.word	0x20000c64
 800aa00:	e000ed04 	.word	0xe000ed04

0800aa04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	; 0x28
 800aa08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa12:	463a      	mov	r2, r7
 800aa14:	1d39      	adds	r1, r7, #4
 800aa16:	f107 0308 	add.w	r3, r7, #8
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fe fed6 	bl	80097cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	9202      	str	r2, [sp, #8]
 800aa28:	9301      	str	r3, [sp, #4]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	460a      	mov	r2, r1
 800aa32:	4921      	ldr	r1, [pc, #132]	; (800aab8 <vTaskStartScheduler+0xb4>)
 800aa34:	4821      	ldr	r0, [pc, #132]	; (800aabc <vTaskStartScheduler+0xb8>)
 800aa36:	f7ff fe0f 	bl	800a658 <xTaskCreateStatic>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	4a20      	ldr	r2, [pc, #128]	; (800aac0 <vTaskStartScheduler+0xbc>)
 800aa3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa40:	4b1f      	ldr	r3, [pc, #124]	; (800aac0 <vTaskStartScheduler+0xbc>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e001      	b.n	800aa52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d102      	bne.n	800aa5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa58:	f000 fd0e 	bl	800b478 <xTimerCreateTimerTask>
 800aa5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d116      	bne.n	800aa92 <vTaskStartScheduler+0x8e>
	__asm volatile
 800aa64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa68:	f383 8811 	msr	BASEPRI, r3
 800aa6c:	f3bf 8f6f 	isb	sy
 800aa70:	f3bf 8f4f 	dsb	sy
 800aa74:	613b      	str	r3, [r7, #16]
}
 800aa76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa78:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <vTaskStartScheduler+0xc0>)
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa80:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <vTaskStartScheduler+0xc4>)
 800aa82:	2201      	movs	r2, #1
 800aa84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa86:	4b11      	ldr	r3, [pc, #68]	; (800aacc <vTaskStartScheduler+0xc8>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa8c:	f001 f8d0 	bl	800bc30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa90:	e00e      	b.n	800aab0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa98:	d10a      	bne.n	800aab0 <vTaskStartScheduler+0xac>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	60fb      	str	r3, [r7, #12]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <vTaskStartScheduler+0xaa>
}
 800aab0:	bf00      	nop
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	0800d160 	.word	0x0800d160
 800aabc:	0800b10d 	.word	0x0800b10d
 800aac0:	20000c60 	.word	0x20000c60
 800aac4:	20000c5c 	.word	0x20000c5c
 800aac8:	20000c48 	.word	0x20000c48
 800aacc:	20000c40 	.word	0x20000c40

0800aad0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aad0:	b480      	push	{r7}
 800aad2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aad4:	4b04      	ldr	r3, [pc, #16]	; (800aae8 <vTaskSuspendAll+0x18>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	4a03      	ldr	r2, [pc, #12]	; (800aae8 <vTaskSuspendAll+0x18>)
 800aadc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aade:	bf00      	nop
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	20000c64 	.word	0x20000c64

0800aaec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aafa:	4b42      	ldr	r3, [pc, #264]	; (800ac04 <xTaskResumeAll+0x118>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10a      	bne.n	800ab18 <xTaskResumeAll+0x2c>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	f3bf 8f6f 	isb	sy
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	603b      	str	r3, [r7, #0]
}
 800ab14:	bf00      	nop
 800ab16:	e7fe      	b.n	800ab16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab18:	f001 f92c 	bl	800bd74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab1c:	4b39      	ldr	r3, [pc, #228]	; (800ac04 <xTaskResumeAll+0x118>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3b01      	subs	r3, #1
 800ab22:	4a38      	ldr	r2, [pc, #224]	; (800ac04 <xTaskResumeAll+0x118>)
 800ab24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab26:	4b37      	ldr	r3, [pc, #220]	; (800ac04 <xTaskResumeAll+0x118>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d162      	bne.n	800abf4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab2e:	4b36      	ldr	r3, [pc, #216]	; (800ac08 <xTaskResumeAll+0x11c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d05e      	beq.n	800abf4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab36:	e02f      	b.n	800ab98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab38:	4b34      	ldr	r3, [pc, #208]	; (800ac0c <xTaskResumeAll+0x120>)
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3318      	adds	r3, #24
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe feff 	bl	8009948 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fefa 	bl	8009948 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab58:	4b2d      	ldr	r3, [pc, #180]	; (800ac10 <xTaskResumeAll+0x124>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d903      	bls.n	800ab68 <xTaskResumeAll+0x7c>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	4a2a      	ldr	r2, [pc, #168]	; (800ac10 <xTaskResumeAll+0x124>)
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4a27      	ldr	r2, [pc, #156]	; (800ac14 <xTaskResumeAll+0x128>)
 800ab76:	441a      	add	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4610      	mov	r0, r2
 800ab80:	f7fe fe85 	bl	800988e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab88:	4b23      	ldr	r3, [pc, #140]	; (800ac18 <xTaskResumeAll+0x12c>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d302      	bcc.n	800ab98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab92:	4b22      	ldr	r3, [pc, #136]	; (800ac1c <xTaskResumeAll+0x130>)
 800ab94:	2201      	movs	r2, #1
 800ab96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab98:	4b1c      	ldr	r3, [pc, #112]	; (800ac0c <xTaskResumeAll+0x120>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1cb      	bne.n	800ab38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aba6:	f000 fb67 	bl	800b278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abaa:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <xTaskResumeAll+0x134>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d010      	beq.n	800abd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abb6:	f000 f859 	bl	800ac6c <xTaskIncrementTick>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800abc0:	4b16      	ldr	r3, [pc, #88]	; (800ac1c <xTaskResumeAll+0x130>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3b01      	subs	r3, #1
 800abca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f1      	bne.n	800abb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800abd2:	4b13      	ldr	r3, [pc, #76]	; (800ac20 <xTaskResumeAll+0x134>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abd8:	4b10      	ldr	r3, [pc, #64]	; (800ac1c <xTaskResumeAll+0x130>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d009      	beq.n	800abf4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abe0:	2301      	movs	r3, #1
 800abe2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <xTaskResumeAll+0x138>)
 800abe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abf4:	f001 f8ee 	bl	800bdd4 <vPortExitCritical>

	return xAlreadyYielded;
 800abf8:	68bb      	ldr	r3, [r7, #8]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20000c64 	.word	0x20000c64
 800ac08:	20000c3c 	.word	0x20000c3c
 800ac0c:	20000bfc 	.word	0x20000bfc
 800ac10:	20000c44 	.word	0x20000c44
 800ac14:	2000076c 	.word	0x2000076c
 800ac18:	20000768 	.word	0x20000768
 800ac1c:	20000c50 	.word	0x20000c50
 800ac20:	20000c4c 	.word	0x20000c4c
 800ac24:	e000ed04 	.word	0xe000ed04

0800ac28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <xTaskGetTickCount+0x1c>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac34:	687b      	ldr	r3, [r7, #4]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	20000c40 	.word	0x20000c40

0800ac48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac4e:	f001 f973 	bl	800bf38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ac52:	2300      	movs	r3, #0
 800ac54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ac56:	4b04      	ldr	r3, [pc, #16]	; (800ac68 <xTaskGetTickCountFromISR+0x20>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac5c:	683b      	ldr	r3, [r7, #0]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20000c40 	.word	0x20000c40

0800ac6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac76:	4b4f      	ldr	r3, [pc, #316]	; (800adb4 <xTaskIncrementTick+0x148>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f040 808f 	bne.w	800ad9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac80:	4b4d      	ldr	r3, [pc, #308]	; (800adb8 <xTaskIncrementTick+0x14c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3301      	adds	r3, #1
 800ac86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac88:	4a4b      	ldr	r2, [pc, #300]	; (800adb8 <xTaskIncrementTick+0x14c>)
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d120      	bne.n	800acd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac94:	4b49      	ldr	r3, [pc, #292]	; (800adbc <xTaskIncrementTick+0x150>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	603b      	str	r3, [r7, #0]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <xTaskIncrementTick+0x46>
 800acb4:	4b41      	ldr	r3, [pc, #260]	; (800adbc <xTaskIncrementTick+0x150>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	4b41      	ldr	r3, [pc, #260]	; (800adc0 <xTaskIncrementTick+0x154>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a3f      	ldr	r2, [pc, #252]	; (800adbc <xTaskIncrementTick+0x150>)
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	4a3f      	ldr	r2, [pc, #252]	; (800adc0 <xTaskIncrementTick+0x154>)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	4b3e      	ldr	r3, [pc, #248]	; (800adc4 <xTaskIncrementTick+0x158>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3301      	adds	r3, #1
 800acce:	4a3d      	ldr	r2, [pc, #244]	; (800adc4 <xTaskIncrementTick+0x158>)
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	f000 fad1 	bl	800b278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acd6:	4b3c      	ldr	r3, [pc, #240]	; (800adc8 <xTaskIncrementTick+0x15c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d349      	bcc.n	800ad74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ace0:	4b36      	ldr	r3, [pc, #216]	; (800adbc <xTaskIncrementTick+0x150>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d104      	bne.n	800acf4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acea:	4b37      	ldr	r3, [pc, #220]	; (800adc8 <xTaskIncrementTick+0x15c>)
 800acec:	f04f 32ff 	mov.w	r2, #4294967295
 800acf0:	601a      	str	r2, [r3, #0]
					break;
 800acf2:	e03f      	b.n	800ad74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf4:	4b31      	ldr	r3, [pc, #196]	; (800adbc <xTaskIncrementTick+0x150>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d203      	bcs.n	800ad14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad0c:	4a2e      	ldr	r2, [pc, #184]	; (800adc8 <xTaskIncrementTick+0x15c>)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad12:	e02f      	b.n	800ad74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fe fe15 	bl	8009948 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d004      	beq.n	800ad30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	3318      	adds	r3, #24
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe fe0c 	bl	8009948 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad34:	4b25      	ldr	r3, [pc, #148]	; (800adcc <xTaskIncrementTick+0x160>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d903      	bls.n	800ad44 <xTaskIncrementTick+0xd8>
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	4a22      	ldr	r2, [pc, #136]	; (800adcc <xTaskIncrementTick+0x160>)
 800ad42:	6013      	str	r3, [r2, #0]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad48:	4613      	mov	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4a1f      	ldr	r2, [pc, #124]	; (800add0 <xTaskIncrementTick+0x164>)
 800ad52:	441a      	add	r2, r3
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	3304      	adds	r3, #4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	f7fe fd97 	bl	800988e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	4b1b      	ldr	r3, [pc, #108]	; (800add4 <xTaskIncrementTick+0x168>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d3b8      	bcc.n	800ace0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad72:	e7b5      	b.n	800ace0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad74:	4b17      	ldr	r3, [pc, #92]	; (800add4 <xTaskIncrementTick+0x168>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7a:	4915      	ldr	r1, [pc, #84]	; (800add0 <xTaskIncrementTick+0x164>)
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	440b      	add	r3, r1
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d901      	bls.n	800ad90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad90:	4b11      	ldr	r3, [pc, #68]	; (800add8 <xTaskIncrementTick+0x16c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d007      	beq.n	800ada8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	617b      	str	r3, [r7, #20]
 800ad9c:	e004      	b.n	800ada8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad9e:	4b0f      	ldr	r3, [pc, #60]	; (800addc <xTaskIncrementTick+0x170>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3301      	adds	r3, #1
 800ada4:	4a0d      	ldr	r2, [pc, #52]	; (800addc <xTaskIncrementTick+0x170>)
 800ada6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ada8:	697b      	ldr	r3, [r7, #20]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3718      	adds	r7, #24
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000c64 	.word	0x20000c64
 800adb8:	20000c40 	.word	0x20000c40
 800adbc:	20000bf4 	.word	0x20000bf4
 800adc0:	20000bf8 	.word	0x20000bf8
 800adc4:	20000c54 	.word	0x20000c54
 800adc8:	20000c5c 	.word	0x20000c5c
 800adcc:	20000c44 	.word	0x20000c44
 800add0:	2000076c 	.word	0x2000076c
 800add4:	20000768 	.word	0x20000768
 800add8:	20000c50 	.word	0x20000c50
 800addc:	20000c4c 	.word	0x20000c4c

0800ade0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ade6:	4b28      	ldr	r3, [pc, #160]	; (800ae88 <vTaskSwitchContext+0xa8>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d003      	beq.n	800adf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adee:	4b27      	ldr	r3, [pc, #156]	; (800ae8c <vTaskSwitchContext+0xac>)
 800adf0:	2201      	movs	r2, #1
 800adf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800adf4:	e041      	b.n	800ae7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800adf6:	4b25      	ldr	r3, [pc, #148]	; (800ae8c <vTaskSwitchContext+0xac>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adfc:	4b24      	ldr	r3, [pc, #144]	; (800ae90 <vTaskSwitchContext+0xb0>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	e010      	b.n	800ae26 <vTaskSwitchContext+0x46>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10a      	bne.n	800ae20 <vTaskSwitchContext+0x40>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	607b      	str	r3, [r7, #4]
}
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <vTaskSwitchContext+0x3e>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	491b      	ldr	r1, [pc, #108]	; (800ae94 <vTaskSwitchContext+0xb4>)
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	440b      	add	r3, r1
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d0e4      	beq.n	800ae04 <vTaskSwitchContext+0x24>
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4a13      	ldr	r2, [pc, #76]	; (800ae94 <vTaskSwitchContext+0xb4>)
 800ae46:	4413      	add	r3, r2
 800ae48:	60bb      	str	r3, [r7, #8]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	605a      	str	r2, [r3, #4]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d104      	bne.n	800ae6a <vTaskSwitchContext+0x8a>
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	605a      	str	r2, [r3, #4]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	4a09      	ldr	r2, [pc, #36]	; (800ae98 <vTaskSwitchContext+0xb8>)
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	4a06      	ldr	r2, [pc, #24]	; (800ae90 <vTaskSwitchContext+0xb0>)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6013      	str	r3, [r2, #0]
}
 800ae7a:	bf00      	nop
 800ae7c:	3714      	adds	r7, #20
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	20000c64 	.word	0x20000c64
 800ae8c:	20000c50 	.word	0x20000c50
 800ae90:	20000c44 	.word	0x20000c44
 800ae94:	2000076c 	.word	0x2000076c
 800ae98:	20000768 	.word	0x20000768

0800ae9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	60fb      	str	r3, [r7, #12]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aec2:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <vTaskPlaceOnEventList+0x44>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3318      	adds	r3, #24
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f7fe fd03 	bl	80098d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aed0:	2101      	movs	r1, #1
 800aed2:	6838      	ldr	r0, [r7, #0]
 800aed4:	f000 fa7c 	bl	800b3d0 <prvAddCurrentTaskToDelayedList>
}
 800aed8:	bf00      	nop
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	20000768 	.word	0x20000768

0800aee4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10a      	bne.n	800af0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	617b      	str	r3, [r7, #20]
}
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af0c:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <vTaskPlaceOnEventListRestricted+0x54>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3318      	adds	r3, #24
 800af12:	4619      	mov	r1, r3
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f7fe fcba 	bl	800988e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d002      	beq.n	800af26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800af20:	f04f 33ff 	mov.w	r3, #4294967295
 800af24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	68b8      	ldr	r0, [r7, #8]
 800af2a:	f000 fa51 	bl	800b3d0 <prvAddCurrentTaskToDelayedList>
	}
 800af2e:	bf00      	nop
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20000768 	.word	0x20000768

0800af3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af56:	f383 8811 	msr	BASEPRI, r3
 800af5a:	f3bf 8f6f 	isb	sy
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	60fb      	str	r3, [r7, #12]
}
 800af64:	bf00      	nop
 800af66:	e7fe      	b.n	800af66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	3318      	adds	r3, #24
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fe fceb 	bl	8009948 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af72:	4b1e      	ldr	r3, [pc, #120]	; (800afec <xTaskRemoveFromEventList+0xb0>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d11d      	bne.n	800afb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	3304      	adds	r3, #4
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe fce2 	bl	8009948 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af88:	4b19      	ldr	r3, [pc, #100]	; (800aff0 <xTaskRemoveFromEventList+0xb4>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d903      	bls.n	800af98 <xTaskRemoveFromEventList+0x5c>
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af94:	4a16      	ldr	r2, [pc, #88]	; (800aff0 <xTaskRemoveFromEventList+0xb4>)
 800af96:	6013      	str	r3, [r2, #0]
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9c:	4613      	mov	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4a13      	ldr	r2, [pc, #76]	; (800aff4 <xTaskRemoveFromEventList+0xb8>)
 800afa6:	441a      	add	r2, r3
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	3304      	adds	r3, #4
 800afac:	4619      	mov	r1, r3
 800afae:	4610      	mov	r0, r2
 800afb0:	f7fe fc6d 	bl	800988e <vListInsertEnd>
 800afb4:	e005      	b.n	800afc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	3318      	adds	r3, #24
 800afba:	4619      	mov	r1, r3
 800afbc:	480e      	ldr	r0, [pc, #56]	; (800aff8 <xTaskRemoveFromEventList+0xbc>)
 800afbe:	f7fe fc66 	bl	800988e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc6:	4b0d      	ldr	r3, [pc, #52]	; (800affc <xTaskRemoveFromEventList+0xc0>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	429a      	cmp	r2, r3
 800afce:	d905      	bls.n	800afdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afd0:	2301      	movs	r3, #1
 800afd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afd4:	4b0a      	ldr	r3, [pc, #40]	; (800b000 <xTaskRemoveFromEventList+0xc4>)
 800afd6:	2201      	movs	r2, #1
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	e001      	b.n	800afe0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afe0:	697b      	ldr	r3, [r7, #20]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3718      	adds	r7, #24
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20000c64 	.word	0x20000c64
 800aff0:	20000c44 	.word	0x20000c44
 800aff4:	2000076c 	.word	0x2000076c
 800aff8:	20000bfc 	.word	0x20000bfc
 800affc:	20000768 	.word	0x20000768
 800b000:	20000c50 	.word	0x20000c50

0800b004 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b00c:	4b06      	ldr	r3, [pc, #24]	; (800b028 <vTaskInternalSetTimeOutState+0x24>)
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <vTaskInternalSetTimeOutState+0x28>)
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	605a      	str	r2, [r3, #4]
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr
 800b028:	20000c54 	.word	0x20000c54
 800b02c:	20000c40 	.word	0x20000c40

0800b030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10a      	bne.n	800b056 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	613b      	str	r3, [r7, #16]
}
 800b052:	bf00      	nop
 800b054:	e7fe      	b.n	800b054 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d10a      	bne.n	800b072 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	60fb      	str	r3, [r7, #12]
}
 800b06e:	bf00      	nop
 800b070:	e7fe      	b.n	800b070 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b072:	f000 fe7f 	bl	800bd74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b076:	4b1d      	ldr	r3, [pc, #116]	; (800b0ec <xTaskCheckForTimeOut+0xbc>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b08e:	d102      	bne.n	800b096 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b090:	2300      	movs	r3, #0
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	e023      	b.n	800b0de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	4b15      	ldr	r3, [pc, #84]	; (800b0f0 <xTaskCheckForTimeOut+0xc0>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d007      	beq.n	800b0b2 <xTaskCheckForTimeOut+0x82>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d302      	bcc.n	800b0b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	61fb      	str	r3, [r7, #28]
 800b0b0:	e015      	b.n	800b0de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	697a      	ldr	r2, [r7, #20]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d20b      	bcs.n	800b0d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	1ad2      	subs	r2, r2, r3
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff ff9b 	bl	800b004 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	61fb      	str	r3, [r7, #28]
 800b0d2:	e004      	b.n	800b0de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0de:	f000 fe79 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800b0e2:	69fb      	ldr	r3, [r7, #28]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3720      	adds	r7, #32
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20000c40 	.word	0x20000c40
 800b0f0:	20000c54 	.word	0x20000c54

0800b0f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0f8:	4b03      	ldr	r3, [pc, #12]	; (800b108 <vTaskMissedYield+0x14>)
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	601a      	str	r2, [r3, #0]
}
 800b0fe:	bf00      	nop
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	20000c50 	.word	0x20000c50

0800b10c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b114:	f000 f852 	bl	800b1bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b118:	4b06      	ldr	r3, [pc, #24]	; (800b134 <prvIdleTask+0x28>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d9f9      	bls.n	800b114 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b120:	4b05      	ldr	r3, [pc, #20]	; (800b138 <prvIdleTask+0x2c>)
 800b122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b130:	e7f0      	b.n	800b114 <prvIdleTask+0x8>
 800b132:	bf00      	nop
 800b134:	2000076c 	.word	0x2000076c
 800b138:	e000ed04 	.word	0xe000ed04

0800b13c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b142:	2300      	movs	r3, #0
 800b144:	607b      	str	r3, [r7, #4]
 800b146:	e00c      	b.n	800b162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4a12      	ldr	r2, [pc, #72]	; (800b19c <prvInitialiseTaskLists+0x60>)
 800b154:	4413      	add	r3, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f7fe fb6c 	bl	8009834 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3301      	adds	r3, #1
 800b160:	607b      	str	r3, [r7, #4]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b37      	cmp	r3, #55	; 0x37
 800b166:	d9ef      	bls.n	800b148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b168:	480d      	ldr	r0, [pc, #52]	; (800b1a0 <prvInitialiseTaskLists+0x64>)
 800b16a:	f7fe fb63 	bl	8009834 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b16e:	480d      	ldr	r0, [pc, #52]	; (800b1a4 <prvInitialiseTaskLists+0x68>)
 800b170:	f7fe fb60 	bl	8009834 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b174:	480c      	ldr	r0, [pc, #48]	; (800b1a8 <prvInitialiseTaskLists+0x6c>)
 800b176:	f7fe fb5d 	bl	8009834 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b17a:	480c      	ldr	r0, [pc, #48]	; (800b1ac <prvInitialiseTaskLists+0x70>)
 800b17c:	f7fe fb5a 	bl	8009834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b180:	480b      	ldr	r0, [pc, #44]	; (800b1b0 <prvInitialiseTaskLists+0x74>)
 800b182:	f7fe fb57 	bl	8009834 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b186:	4b0b      	ldr	r3, [pc, #44]	; (800b1b4 <prvInitialiseTaskLists+0x78>)
 800b188:	4a05      	ldr	r2, [pc, #20]	; (800b1a0 <prvInitialiseTaskLists+0x64>)
 800b18a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b18c:	4b0a      	ldr	r3, [pc, #40]	; (800b1b8 <prvInitialiseTaskLists+0x7c>)
 800b18e:	4a05      	ldr	r2, [pc, #20]	; (800b1a4 <prvInitialiseTaskLists+0x68>)
 800b190:	601a      	str	r2, [r3, #0]
}
 800b192:	bf00      	nop
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	2000076c 	.word	0x2000076c
 800b1a0:	20000bcc 	.word	0x20000bcc
 800b1a4:	20000be0 	.word	0x20000be0
 800b1a8:	20000bfc 	.word	0x20000bfc
 800b1ac:	20000c10 	.word	0x20000c10
 800b1b0:	20000c28 	.word	0x20000c28
 800b1b4:	20000bf4 	.word	0x20000bf4
 800b1b8:	20000bf8 	.word	0x20000bf8

0800b1bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1c2:	e019      	b.n	800b1f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1c4:	f000 fdd6 	bl	800bd74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c8:	4b10      	ldr	r3, [pc, #64]	; (800b20c <prvCheckTasksWaitingTermination+0x50>)
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe fbb7 	bl	8009948 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1da:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <prvCheckTasksWaitingTermination+0x54>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	4a0b      	ldr	r2, [pc, #44]	; (800b210 <prvCheckTasksWaitingTermination+0x54>)
 800b1e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1e4:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <prvCheckTasksWaitingTermination+0x58>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	4a0a      	ldr	r2, [pc, #40]	; (800b214 <prvCheckTasksWaitingTermination+0x58>)
 800b1ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1ee:	f000 fdf1 	bl	800bdd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f810 	bl	800b218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1f8:	4b06      	ldr	r3, [pc, #24]	; (800b214 <prvCheckTasksWaitingTermination+0x58>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1e1      	bne.n	800b1c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b200:	bf00      	nop
 800b202:	bf00      	nop
 800b204:	3708      	adds	r7, #8
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	20000c10 	.word	0x20000c10
 800b210:	20000c3c 	.word	0x20000c3c
 800b214:	20000c24 	.word	0x20000c24

0800b218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b226:	2b00      	cmp	r3, #0
 800b228:	d108      	bne.n	800b23c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 ff8e 	bl	800c150 <vPortFree>
				vPortFree( pxTCB );
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 ff8b 	bl	800c150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b23a:	e018      	b.n	800b26e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b242:	2b01      	cmp	r3, #1
 800b244:	d103      	bne.n	800b24e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 ff82 	bl	800c150 <vPortFree>
	}
 800b24c:	e00f      	b.n	800b26e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b254:	2b02      	cmp	r3, #2
 800b256:	d00a      	beq.n	800b26e <prvDeleteTCB+0x56>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	60fb      	str	r3, [r7, #12]
}
 800b26a:	bf00      	nop
 800b26c:	e7fe      	b.n	800b26c <prvDeleteTCB+0x54>
	}
 800b26e:	bf00      	nop
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b27e:	4b0c      	ldr	r3, [pc, #48]	; (800b2b0 <prvResetNextTaskUnblockTime+0x38>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d104      	bne.n	800b292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b288:	4b0a      	ldr	r3, [pc, #40]	; (800b2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b28a:	f04f 32ff 	mov.w	r2, #4294967295
 800b28e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b290:	e008      	b.n	800b2a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b292:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <prvResetNextTaskUnblockTime+0x38>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	4a04      	ldr	r2, [pc, #16]	; (800b2b4 <prvResetNextTaskUnblockTime+0x3c>)
 800b2a2:	6013      	str	r3, [r2, #0]
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	20000bf4 	.word	0x20000bf4
 800b2b4:	20000c5c 	.word	0x20000c5c

0800b2b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2be:	4b0b      	ldr	r3, [pc, #44]	; (800b2ec <xTaskGetSchedulerState+0x34>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	607b      	str	r3, [r7, #4]
 800b2ca:	e008      	b.n	800b2de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2cc:	4b08      	ldr	r3, [pc, #32]	; (800b2f0 <xTaskGetSchedulerState+0x38>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d102      	bne.n	800b2da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	607b      	str	r3, [r7, #4]
 800b2d8:	e001      	b.n	800b2de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2de:	687b      	ldr	r3, [r7, #4]
	}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	20000c48 	.word	0x20000c48
 800b2f0:	20000c64 	.word	0x20000c64

0800b2f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b300:	2300      	movs	r3, #0
 800b302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d056      	beq.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b30a:	4b2e      	ldr	r3, [pc, #184]	; (800b3c4 <xTaskPriorityDisinherit+0xd0>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	693a      	ldr	r2, [r7, #16]
 800b310:	429a      	cmp	r2, r3
 800b312:	d00a      	beq.n	800b32a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	60fb      	str	r3, [r7, #12]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10a      	bne.n	800b348 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	60bb      	str	r3, [r7, #8]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b34c:	1e5a      	subs	r2, r3, #1
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d02c      	beq.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b362:	2b00      	cmp	r3, #0
 800b364:	d128      	bne.n	800b3b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	3304      	adds	r3, #4
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe faec 	bl	8009948 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <xTaskPriorityDisinherit+0xd4>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d903      	bls.n	800b398 <xTaskPriorityDisinherit+0xa4>
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b394:	4a0c      	ldr	r2, [pc, #48]	; (800b3c8 <xTaskPriorityDisinherit+0xd4>)
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	4a09      	ldr	r2, [pc, #36]	; (800b3cc <xTaskPriorityDisinherit+0xd8>)
 800b3a6:	441a      	add	r2, r3
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f7fe fa6d 	bl	800988e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3b8:	697b      	ldr	r3, [r7, #20]
	}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000768 	.word	0x20000768
 800b3c8:	20000c44 	.word	0x20000c44
 800b3cc:	2000076c 	.word	0x2000076c

0800b3d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3da:	4b21      	ldr	r3, [pc, #132]	; (800b460 <prvAddCurrentTaskToDelayedList+0x90>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3e0:	4b20      	ldr	r3, [pc, #128]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe faae 	bl	8009948 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f2:	d10a      	bne.n	800b40a <prvAddCurrentTaskToDelayedList+0x3a>
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d007      	beq.n	800b40a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3fa:	4b1a      	ldr	r3, [pc, #104]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4619      	mov	r1, r3
 800b402:	4819      	ldr	r0, [pc, #100]	; (800b468 <prvAddCurrentTaskToDelayedList+0x98>)
 800b404:	f7fe fa43 	bl	800988e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b408:	e026      	b.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4413      	add	r3, r2
 800b410:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b412:	4b14      	ldr	r3, [pc, #80]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d209      	bcs.n	800b436 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f7fe fa51 	bl	80098d6 <vListInsert>
}
 800b434:	e010      	b.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b436:	4b0e      	ldr	r3, [pc, #56]	; (800b470 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	4b0a      	ldr	r3, [pc, #40]	; (800b464 <prvAddCurrentTaskToDelayedList+0x94>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3304      	adds	r3, #4
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7fe fa47 	bl	80098d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d202      	bcs.n	800b458 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b452:	4a08      	ldr	r2, [pc, #32]	; (800b474 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	6013      	str	r3, [r2, #0]
}
 800b458:	bf00      	nop
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20000c40 	.word	0x20000c40
 800b464:	20000768 	.word	0x20000768
 800b468:	20000c28 	.word	0x20000c28
 800b46c:	20000bf8 	.word	0x20000bf8
 800b470:	20000bf4 	.word	0x20000bf4
 800b474:	20000c5c 	.word	0x20000c5c

0800b478 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08a      	sub	sp, #40	; 0x28
 800b47c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b482:	f000 fb07 	bl	800ba94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b486:	4b1c      	ldr	r3, [pc, #112]	; (800b4f8 <xTimerCreateTimerTask+0x80>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d021      	beq.n	800b4d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b492:	2300      	movs	r3, #0
 800b494:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b496:	1d3a      	adds	r2, r7, #4
 800b498:	f107 0108 	add.w	r1, r7, #8
 800b49c:	f107 030c 	add.w	r3, r7, #12
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe f9ad 	bl	8009800 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4a6:	6879      	ldr	r1, [r7, #4]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	9202      	str	r2, [sp, #8]
 800b4ae:	9301      	str	r3, [sp, #4]
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	460a      	mov	r2, r1
 800b4b8:	4910      	ldr	r1, [pc, #64]	; (800b4fc <xTimerCreateTimerTask+0x84>)
 800b4ba:	4811      	ldr	r0, [pc, #68]	; (800b500 <xTimerCreateTimerTask+0x88>)
 800b4bc:	f7ff f8cc 	bl	800a658 <xTaskCreateStatic>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	4a10      	ldr	r2, [pc, #64]	; (800b504 <xTimerCreateTimerTask+0x8c>)
 800b4c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4c6:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <xTimerCreateTimerTask+0x8c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10a      	bne.n	800b4ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4dc:	f383 8811 	msr	BASEPRI, r3
 800b4e0:	f3bf 8f6f 	isb	sy
 800b4e4:	f3bf 8f4f 	dsb	sy
 800b4e8:	613b      	str	r3, [r7, #16]
}
 800b4ea:	bf00      	nop
 800b4ec:	e7fe      	b.n	800b4ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4ee:	697b      	ldr	r3, [r7, #20]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3718      	adds	r7, #24
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	20000c98 	.word	0x20000c98
 800b4fc:	0800d168 	.word	0x0800d168
 800b500:	0800b63d 	.word	0x0800b63d
 800b504:	20000c9c 	.word	0x20000c9c

0800b508 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	; 0x28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b516:	2300      	movs	r3, #0
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10a      	bne.n	800b536 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	623b      	str	r3, [r7, #32]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b536:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d02a      	beq.n	800b594 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b05      	cmp	r3, #5
 800b54e:	dc18      	bgt.n	800b582 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b550:	f7ff feb2 	bl	800b2b8 <xTaskGetSchedulerState>
 800b554:	4603      	mov	r3, r0
 800b556:	2b02      	cmp	r3, #2
 800b558:	d109      	bne.n	800b56e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b55a:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f107 0110 	add.w	r1, r7, #16
 800b562:	2300      	movs	r3, #0
 800b564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b566:	f7fe fbc1 	bl	8009cec <xQueueGenericSend>
 800b56a:	6278      	str	r0, [r7, #36]	; 0x24
 800b56c:	e012      	b.n	800b594 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b56e:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f107 0110 	add.w	r1, r7, #16
 800b576:	2300      	movs	r3, #0
 800b578:	2200      	movs	r2, #0
 800b57a:	f7fe fbb7 	bl	8009cec <xQueueGenericSend>
 800b57e:	6278      	str	r0, [r7, #36]	; 0x24
 800b580:	e008      	b.n	800b594 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b582:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <xTimerGenericCommand+0x98>)
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f107 0110 	add.w	r1, r7, #16
 800b58a:	2300      	movs	r3, #0
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	f7fe fcab 	bl	8009ee8 <xQueueGenericSendFromISR>
 800b592:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b596:	4618      	mov	r0, r3
 800b598:	3728      	adds	r7, #40	; 0x28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	20000c98 	.word	0x20000c98

0800b5a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ae:	4b22      	ldr	r3, [pc, #136]	; (800b638 <prvProcessExpiredTimer+0x94>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fe f9c3 	bl	8009948 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d022      	beq.n	800b616 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	18d1      	adds	r1, r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	683a      	ldr	r2, [r7, #0]
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	f000 f8d1 	bl	800b784 <prvInsertTimerInActiveList>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d01f      	beq.n	800b628 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6978      	ldr	r0, [r7, #20]
 800b5f4:	f7ff ff88 	bl	800b508 <xTimerGenericCommand>
 800b5f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d113      	bne.n	800b628 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	60fb      	str	r3, [r7, #12]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b61c:	f023 0301 	bic.w	r3, r3, #1
 800b620:	b2da      	uxtb	r2, r3
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	6978      	ldr	r0, [r7, #20]
 800b62e:	4798      	blx	r3
}
 800b630:	bf00      	nop
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	20000c90 	.word	0x20000c90

0800b63c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b644:	f107 0308 	add.w	r3, r7, #8
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 f857 	bl	800b6fc <prvGetNextExpireTime>
 800b64e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	4619      	mov	r1, r3
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f000 f803 	bl	800b660 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b65a:	f000 f8d5 	bl	800b808 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b65e:	e7f1      	b.n	800b644 <prvTimerTask+0x8>

0800b660 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b66a:	f7ff fa31 	bl	800aad0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b66e:	f107 0308 	add.w	r3, r7, #8
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f866 	bl	800b744 <prvSampleTimeNow>
 800b678:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d130      	bne.n	800b6e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <prvProcessTimerOrBlockTask+0x3c>
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d806      	bhi.n	800b69c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b68e:	f7ff fa2d 	bl	800aaec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b692:	68f9      	ldr	r1, [r7, #12]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff ff85 	bl	800b5a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b69a:	e024      	b.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d008      	beq.n	800b6b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6a2:	4b13      	ldr	r3, [pc, #76]	; (800b6f0 <prvProcessTimerOrBlockTask+0x90>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <prvProcessTimerOrBlockTask+0x50>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e000      	b.n	800b6b2 <prvProcessTimerOrBlockTask+0x52>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6b4:	4b0f      	ldr	r3, [pc, #60]	; (800b6f4 <prvProcessTimerOrBlockTask+0x94>)
 800b6b6:	6818      	ldr	r0, [r3, #0]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f7fe ff95 	bl	800a5f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6c6:	f7ff fa11 	bl	800aaec <xTaskResumeAll>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10a      	bne.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6d0:	4b09      	ldr	r3, [pc, #36]	; (800b6f8 <prvProcessTimerOrBlockTask+0x98>)
 800b6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	f3bf 8f6f 	isb	sy
}
 800b6e0:	e001      	b.n	800b6e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6e2:	f7ff fa03 	bl	800aaec <xTaskResumeAll>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000c94 	.word	0x20000c94
 800b6f4:	20000c98 	.word	0x20000c98
 800b6f8:	e000ed04 	.word	0xe000ed04

0800b6fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b704:	4b0e      	ldr	r3, [pc, #56]	; (800b740 <prvGetNextExpireTime+0x44>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <prvGetNextExpireTime+0x16>
 800b70e:	2201      	movs	r2, #1
 800b710:	e000      	b.n	800b714 <prvGetNextExpireTime+0x18>
 800b712:	2200      	movs	r2, #0
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d105      	bne.n	800b72c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b720:	4b07      	ldr	r3, [pc, #28]	; (800b740 <prvGetNextExpireTime+0x44>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	e001      	b.n	800b730 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b730:	68fb      	ldr	r3, [r7, #12]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	20000c90 	.word	0x20000c90

0800b744 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b74c:	f7ff fa6c 	bl	800ac28 <xTaskGetTickCount>
 800b750:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b752:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <prvSampleTimeNow+0x3c>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d205      	bcs.n	800b768 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b75c:	f000 f936 	bl	800b9cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	601a      	str	r2, [r3, #0]
 800b766:	e002      	b.n	800b76e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b76e:	4a04      	ldr	r2, [pc, #16]	; (800b780 <prvSampleTimeNow+0x3c>)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b774:	68fb      	ldr	r3, [r7, #12]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20000ca0 	.word	0x20000ca0

0800b784 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b792:	2300      	movs	r3, #0
 800b794:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	68ba      	ldr	r2, [r7, #8]
 800b79a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d812      	bhi.n	800b7d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d302      	bcc.n	800b7be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	e01b      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7be:	4b10      	ldr	r3, [pc, #64]	; (800b800 <prvInsertTimerInActiveList+0x7c>)
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	f7fe f884 	bl	80098d6 <vListInsert>
 800b7ce:	e012      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d206      	bcs.n	800b7e6 <prvInsertTimerInActiveList+0x62>
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d302      	bcc.n	800b7e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	e007      	b.n	800b7f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7e6:	4b07      	ldr	r3, [pc, #28]	; (800b804 <prvInsertTimerInActiveList+0x80>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	f7fe f870 	bl	80098d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7f6:	697b      	ldr	r3, [r7, #20]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20000c94 	.word	0x20000c94
 800b804:	20000c90 	.word	0x20000c90

0800b808 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08e      	sub	sp, #56	; 0x38
 800b80c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b80e:	e0ca      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	da18      	bge.n	800b848 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b816:	1d3b      	adds	r3, r7, #4
 800b818:	3304      	adds	r3, #4
 800b81a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10a      	bne.n	800b838 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	61fb      	str	r3, [r7, #28]
}
 800b834:	bf00      	nop
 800b836:	e7fe      	b.n	800b836 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b83e:	6850      	ldr	r0, [r2, #4]
 800b840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b842:	6892      	ldr	r2, [r2, #8]
 800b844:	4611      	mov	r1, r2
 800b846:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f2c0 80aa 	blt.w	800b9a4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d004      	beq.n	800b866 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	3304      	adds	r3, #4
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe f871 	bl	8009948 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b866:	463b      	mov	r3, r7
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff ff6b 	bl	800b744 <prvSampleTimeNow>
 800b86e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b09      	cmp	r3, #9
 800b874:	f200 8097 	bhi.w	800b9a6 <prvProcessReceivedCommands+0x19e>
 800b878:	a201      	add	r2, pc, #4	; (adr r2, 800b880 <prvProcessReceivedCommands+0x78>)
 800b87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87e:	bf00      	nop
 800b880:	0800b8a9 	.word	0x0800b8a9
 800b884:	0800b8a9 	.word	0x0800b8a9
 800b888:	0800b8a9 	.word	0x0800b8a9
 800b88c:	0800b91d 	.word	0x0800b91d
 800b890:	0800b931 	.word	0x0800b931
 800b894:	0800b97b 	.word	0x0800b97b
 800b898:	0800b8a9 	.word	0x0800b8a9
 800b89c:	0800b8a9 	.word	0x0800b8a9
 800b8a0:	0800b91d 	.word	0x0800b91d
 800b8a4:	0800b931 	.word	0x0800b931
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	18d1      	adds	r1, r2, r3
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8c8:	f7ff ff5c 	bl	800b784 <prvInsertTimerInActiveList>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d069      	beq.n	800b9a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d05e      	beq.n	800b9a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8e8:	68ba      	ldr	r2, [r7, #8]
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	441a      	add	r2, r3
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8fa:	f7ff fe05 	bl	800b508 <xTimerGenericCommand>
 800b8fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d14f      	bne.n	800b9a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	61bb      	str	r3, [r7, #24]
}
 800b918:	bf00      	nop
 800b91a:	e7fe      	b.n	800b91a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b922:	f023 0301 	bic.w	r3, r3, #1
 800b926:	b2da      	uxtb	r2, r3
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b92e:	e03a      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b936:	f043 0301 	orr.w	r3, r3, #1
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b946:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94a:	699b      	ldr	r3, [r3, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	617b      	str	r3, [r7, #20]
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	699a      	ldr	r2, [r3, #24]
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	18d1      	adds	r1, r2, r3
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b974:	f7ff ff06 	bl	800b784 <prvInsertTimerInActiveList>
					break;
 800b978:	e015      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b980:	f003 0302 	and.w	r3, r3, #2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d103      	bne.n	800b990 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b98a:	f000 fbe1 	bl	800c150 <vPortFree>
 800b98e:	e00a      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b996:	f023 0301 	bic.w	r3, r3, #1
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9a2:	e000      	b.n	800b9a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b9a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9a6:	4b08      	ldr	r3, [pc, #32]	; (800b9c8 <prvProcessReceivedCommands+0x1c0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	1d39      	adds	r1, r7, #4
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7fe fb36 	bl	800a020 <xQueueReceive>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f47f af2a 	bne.w	800b810 <prvProcessReceivedCommands+0x8>
	}
}
 800b9bc:	bf00      	nop
 800b9be:	bf00      	nop
 800b9c0:	3730      	adds	r7, #48	; 0x30
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000c98 	.word	0x20000c98

0800b9cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9d2:	e048      	b.n	800ba66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9d4:	4b2d      	ldr	r3, [pc, #180]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9de:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fd ffab 	bl	8009948 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a1b      	ldr	r3, [r3, #32]
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d02e      	beq.n	800ba66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	4413      	add	r3, r2
 800ba10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d90e      	bls.n	800ba38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba26:	4b19      	ldr	r3, [pc, #100]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f7fd ff50 	bl	80098d6 <vListInsert>
 800ba36:	e016      	b.n	800ba66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	2100      	movs	r1, #0
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7ff fd60 	bl	800b508 <xTimerGenericCommand>
 800ba48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	603b      	str	r3, [r7, #0]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba66:	4b09      	ldr	r3, [pc, #36]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1b1      	bne.n	800b9d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba70:	4b06      	ldr	r3, [pc, #24]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba76:	4b06      	ldr	r3, [pc, #24]	; (800ba90 <prvSwitchTimerLists+0xc4>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a04      	ldr	r2, [pc, #16]	; (800ba8c <prvSwitchTimerLists+0xc0>)
 800ba7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba7e:	4a04      	ldr	r2, [pc, #16]	; (800ba90 <prvSwitchTimerLists+0xc4>)
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	6013      	str	r3, [r2, #0]
}
 800ba84:	bf00      	nop
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	20000c90 	.word	0x20000c90
 800ba90:	20000c94 	.word	0x20000c94

0800ba94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba9a:	f000 f96b 	bl	800bd74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba9e:	4b15      	ldr	r3, [pc, #84]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d120      	bne.n	800bae8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800baa6:	4814      	ldr	r0, [pc, #80]	; (800baf8 <prvCheckForValidListAndQueue+0x64>)
 800baa8:	f7fd fec4 	bl	8009834 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800baac:	4813      	ldr	r0, [pc, #76]	; (800bafc <prvCheckForValidListAndQueue+0x68>)
 800baae:	f7fd fec1 	bl	8009834 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bab2:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <prvCheckForValidListAndQueue+0x6c>)
 800bab4:	4a10      	ldr	r2, [pc, #64]	; (800baf8 <prvCheckForValidListAndQueue+0x64>)
 800bab6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bab8:	4b12      	ldr	r3, [pc, #72]	; (800bb04 <prvCheckForValidListAndQueue+0x70>)
 800baba:	4a10      	ldr	r2, [pc, #64]	; (800bafc <prvCheckForValidListAndQueue+0x68>)
 800babc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800babe:	2300      	movs	r3, #0
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	4b11      	ldr	r3, [pc, #68]	; (800bb08 <prvCheckForValidListAndQueue+0x74>)
 800bac4:	4a11      	ldr	r2, [pc, #68]	; (800bb0c <prvCheckForValidListAndQueue+0x78>)
 800bac6:	2110      	movs	r1, #16
 800bac8:	200a      	movs	r0, #10
 800baca:	f7fd ffcf 	bl	8009a6c <xQueueGenericCreateStatic>
 800bace:	4603      	mov	r3, r0
 800bad0:	4a08      	ldr	r2, [pc, #32]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bad2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bad4:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d005      	beq.n	800bae8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800badc:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <prvCheckForValidListAndQueue+0x60>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	490b      	ldr	r1, [pc, #44]	; (800bb10 <prvCheckForValidListAndQueue+0x7c>)
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fe fd30 	bl	800a548 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bae8:	f000 f974 	bl	800bdd4 <vPortExitCritical>
}
 800baec:	bf00      	nop
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	20000c98 	.word	0x20000c98
 800baf8:	20000c68 	.word	0x20000c68
 800bafc:	20000c7c 	.word	0x20000c7c
 800bb00:	20000c90 	.word	0x20000c90
 800bb04:	20000c94 	.word	0x20000c94
 800bb08:	20000d44 	.word	0x20000d44
 800bb0c:	20000ca4 	.word	0x20000ca4
 800bb10:	0800d170 	.word	0x0800d170

0800bb14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3b04      	subs	r3, #4
 800bb24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3b04      	subs	r3, #4
 800bb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f023 0201 	bic.w	r2, r3, #1
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3b04      	subs	r3, #4
 800bb42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb44:	4a0c      	ldr	r2, [pc, #48]	; (800bb78 <pxPortInitialiseStack+0x64>)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3b14      	subs	r3, #20
 800bb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3b04      	subs	r3, #4
 800bb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f06f 0202 	mvn.w	r2, #2
 800bb62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3b20      	subs	r3, #32
 800bb68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	0800bb7d 	.word	0x0800bb7d

0800bb7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb86:	4b12      	ldr	r3, [pc, #72]	; (800bbd0 <prvTaskExitError+0x54>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8e:	d00a      	beq.n	800bba6 <prvTaskExitError+0x2a>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	60fb      	str	r3, [r7, #12]
}
 800bba2:	bf00      	nop
 800bba4:	e7fe      	b.n	800bba4 <prvTaskExitError+0x28>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	60bb      	str	r3, [r7, #8]
}
 800bbb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbba:	bf00      	nop
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0fc      	beq.n	800bbbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	3714      	adds	r7, #20
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	2000000c 	.word	0x2000000c
	...

0800bbe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbe0:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <pxCurrentTCBConst2>)
 800bbe2:	6819      	ldr	r1, [r3, #0]
 800bbe4:	6808      	ldr	r0, [r1, #0]
 800bbe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	f380 8809 	msr	PSP, r0
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f04f 0000 	mov.w	r0, #0
 800bbf6:	f380 8811 	msr	BASEPRI, r0
 800bbfa:	4770      	bx	lr
 800bbfc:	f3af 8000 	nop.w

0800bc00 <pxCurrentTCBConst2>:
 800bc00:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop

0800bc08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc08:	4808      	ldr	r0, [pc, #32]	; (800bc2c <prvPortStartFirstTask+0x24>)
 800bc0a:	6800      	ldr	r0, [r0, #0]
 800bc0c:	6800      	ldr	r0, [r0, #0]
 800bc0e:	f380 8808 	msr	MSP, r0
 800bc12:	f04f 0000 	mov.w	r0, #0
 800bc16:	f380 8814 	msr	CONTROL, r0
 800bc1a:	b662      	cpsie	i
 800bc1c:	b661      	cpsie	f
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	df00      	svc	0
 800bc28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc2a:	bf00      	nop
 800bc2c:	e000ed08 	.word	0xe000ed08

0800bc30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc36:	4b46      	ldr	r3, [pc, #280]	; (800bd50 <xPortStartScheduler+0x120>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a46      	ldr	r2, [pc, #280]	; (800bd54 <xPortStartScheduler+0x124>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d10a      	bne.n	800bc56 <xPortStartScheduler+0x26>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc56:	4b3e      	ldr	r3, [pc, #248]	; (800bd50 <xPortStartScheduler+0x120>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a3f      	ldr	r2, [pc, #252]	; (800bd58 <xPortStartScheduler+0x128>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d10a      	bne.n	800bc76 <xPortStartScheduler+0x46>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	60fb      	str	r3, [r7, #12]
}
 800bc72:	bf00      	nop
 800bc74:	e7fe      	b.n	800bc74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc76:	4b39      	ldr	r3, [pc, #228]	; (800bd5c <xPortStartScheduler+0x12c>)
 800bc78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	22ff      	movs	r2, #255	; 0xff
 800bc86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	4b31      	ldr	r3, [pc, #196]	; (800bd60 <xPortStartScheduler+0x130>)
 800bc9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc9e:	4b31      	ldr	r3, [pc, #196]	; (800bd64 <xPortStartScheduler+0x134>)
 800bca0:	2207      	movs	r2, #7
 800bca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bca4:	e009      	b.n	800bcba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bca6:	4b2f      	ldr	r3, [pc, #188]	; (800bd64 <xPortStartScheduler+0x134>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	4a2d      	ldr	r2, [pc, #180]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcba:	78fb      	ldrb	r3, [r7, #3]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc2:	2b80      	cmp	r3, #128	; 0x80
 800bcc4:	d0ef      	beq.n	800bca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcc6:	4b27      	ldr	r3, [pc, #156]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f1c3 0307 	rsb	r3, r3, #7
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d00a      	beq.n	800bce8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	60bb      	str	r3, [r7, #8]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bce8:	4b1e      	ldr	r3, [pc, #120]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	021b      	lsls	r3, r3, #8
 800bcee:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcfa:	4a1a      	ldr	r2, [pc, #104]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd06:	4b18      	ldr	r3, [pc, #96]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a17      	ldr	r2, [pc, #92]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd12:	4b15      	ldr	r3, [pc, #84]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a14      	ldr	r2, [pc, #80]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd1e:	f000 f8dd 	bl	800bedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd22:	4b12      	ldr	r3, [pc, #72]	; (800bd6c <xPortStartScheduler+0x13c>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd28:	f000 f8fc 	bl	800bf24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd2c:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <xPortStartScheduler+0x140>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a0f      	ldr	r2, [pc, #60]	; (800bd70 <xPortStartScheduler+0x140>)
 800bd32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd38:	f7ff ff66 	bl	800bc08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd3c:	f7ff f850 	bl	800ade0 <vTaskSwitchContext>
	prvTaskExitError();
 800bd40:	f7ff ff1c 	bl	800bb7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	e000ed00 	.word	0xe000ed00
 800bd54:	410fc271 	.word	0x410fc271
 800bd58:	410fc270 	.word	0x410fc270
 800bd5c:	e000e400 	.word	0xe000e400
 800bd60:	20000d94 	.word	0x20000d94
 800bd64:	20000d98 	.word	0x20000d98
 800bd68:	e000ed20 	.word	0xe000ed20
 800bd6c:	2000000c 	.word	0x2000000c
 800bd70:	e000ef34 	.word	0xe000ef34

0800bd74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	607b      	str	r3, [r7, #4]
}
 800bd8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	4a0d      	ldr	r2, [pc, #52]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd98:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d10f      	bne.n	800bdc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bda0:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <vPortEnterCritical+0x5c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	603b      	str	r3, [r7, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	e7fe      	b.n	800bdbe <vPortEnterCritical+0x4a>
	}
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	2000000c 	.word	0x2000000c
 800bdd0:	e000ed04 	.word	0xe000ed04

0800bdd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdda:	4b12      	ldr	r3, [pc, #72]	; (800be24 <vPortExitCritical+0x50>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <vPortExitCritical+0x24>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	607b      	str	r3, [r7, #4]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <vPortExitCritical+0x50>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	4a09      	ldr	r2, [pc, #36]	; (800be24 <vPortExitCritical+0x50>)
 800be00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be02:	4b08      	ldr	r3, [pc, #32]	; (800be24 <vPortExitCritical+0x50>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d105      	bne.n	800be16 <vPortExitCritical+0x42>
 800be0a:	2300      	movs	r3, #0
 800be0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	f383 8811 	msr	BASEPRI, r3
}
 800be14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be16:	bf00      	nop
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	2000000c 	.word	0x2000000c
	...

0800be30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be30:	f3ef 8009 	mrs	r0, PSP
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	4b15      	ldr	r3, [pc, #84]	; (800be90 <pxCurrentTCBConst>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	f01e 0f10 	tst.w	lr, #16
 800be40:	bf08      	it	eq
 800be42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4a:	6010      	str	r0, [r2, #0]
 800be4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be54:	f380 8811 	msr	BASEPRI, r0
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f7fe ffbe 	bl	800ade0 <vTaskSwitchContext>
 800be64:	f04f 0000 	mov.w	r0, #0
 800be68:	f380 8811 	msr	BASEPRI, r0
 800be6c:	bc09      	pop	{r0, r3}
 800be6e:	6819      	ldr	r1, [r3, #0]
 800be70:	6808      	ldr	r0, [r1, #0]
 800be72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be76:	f01e 0f10 	tst.w	lr, #16
 800be7a:	bf08      	it	eq
 800be7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be80:	f380 8809 	msr	PSP, r0
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	f3af 8000 	nop.w

0800be90 <pxCurrentTCBConst>:
 800be90:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop

0800be98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	607b      	str	r3, [r7, #4]
}
 800beb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800beb2:	f7fe fedb 	bl	800ac6c <xTaskIncrementTick>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d003      	beq.n	800bec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bebc:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <xPortSysTickHandler+0x40>)
 800bebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	2300      	movs	r3, #0
 800bec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	f383 8811 	msr	BASEPRI, r3
}
 800bece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bee0:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <vPortSetupTimerInterrupt+0x34>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bee6:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <vPortSetupTimerInterrupt+0x38>)
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800beec:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <vPortSetupTimerInterrupt+0x3c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a0a      	ldr	r2, [pc, #40]	; (800bf1c <vPortSetupTimerInterrupt+0x40>)
 800bef2:	fba2 2303 	umull	r2, r3, r2, r3
 800bef6:	099b      	lsrs	r3, r3, #6
 800bef8:	4a09      	ldr	r2, [pc, #36]	; (800bf20 <vPortSetupTimerInterrupt+0x44>)
 800befa:	3b01      	subs	r3, #1
 800befc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <vPortSetupTimerInterrupt+0x34>)
 800bf00:	2207      	movs	r2, #7
 800bf02:	601a      	str	r2, [r3, #0]
}
 800bf04:	bf00      	nop
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	e000e010 	.word	0xe000e010
 800bf14:	e000e018 	.word	0xe000e018
 800bf18:	20000000 	.word	0x20000000
 800bf1c:	10624dd3 	.word	0x10624dd3
 800bf20:	e000e014 	.word	0xe000e014

0800bf24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf34 <vPortEnableVFP+0x10>
 800bf28:	6801      	ldr	r1, [r0, #0]
 800bf2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf2e:	6001      	str	r1, [r0, #0]
 800bf30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf32:	bf00      	nop
 800bf34:	e000ed88 	.word	0xe000ed88

0800bf38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf3e:	f3ef 8305 	mrs	r3, IPSR
 800bf42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2b0f      	cmp	r3, #15
 800bf48:	d914      	bls.n	800bf74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf4a:	4a17      	ldr	r2, [pc, #92]	; (800bfa8 <vPortValidateInterruptPriority+0x70>)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf54:	4b15      	ldr	r3, [pc, #84]	; (800bfac <vPortValidateInterruptPriority+0x74>)
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	7afa      	ldrb	r2, [r7, #11]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d20a      	bcs.n	800bf74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	607b      	str	r3, [r7, #4]
}
 800bf70:	bf00      	nop
 800bf72:	e7fe      	b.n	800bf72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf74:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <vPortValidateInterruptPriority+0x78>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf7c:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <vPortValidateInterruptPriority+0x7c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d90a      	bls.n	800bf9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	603b      	str	r3, [r7, #0]
}
 800bf96:	bf00      	nop
 800bf98:	e7fe      	b.n	800bf98 <vPortValidateInterruptPriority+0x60>
	}
 800bf9a:	bf00      	nop
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	e000e3f0 	.word	0xe000e3f0
 800bfac:	20000d94 	.word	0x20000d94
 800bfb0:	e000ed0c 	.word	0xe000ed0c
 800bfb4:	20000d98 	.word	0x20000d98

0800bfb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08a      	sub	sp, #40	; 0x28
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfc4:	f7fe fd84 	bl	800aad0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfc8:	4b5b      	ldr	r3, [pc, #364]	; (800c138 <pvPortMalloc+0x180>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfd0:	f000 f920 	bl	800c214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfd4:	4b59      	ldr	r3, [pc, #356]	; (800c13c <pvPortMalloc+0x184>)
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4013      	ands	r3, r2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f040 8093 	bne.w	800c108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01d      	beq.n	800c024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bfe8:	2208      	movs	r2, #8
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4413      	add	r3, r2
 800bfee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f003 0307 	and.w	r3, r3, #7
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d014      	beq.n	800c024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f023 0307 	bic.w	r3, r3, #7
 800c000:	3308      	adds	r3, #8
 800c002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f003 0307 	and.w	r3, r3, #7
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00a      	beq.n	800c024 <pvPortMalloc+0x6c>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	617b      	str	r3, [r7, #20]
}
 800c020:	bf00      	nop
 800c022:	e7fe      	b.n	800c022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d06e      	beq.n	800c108 <pvPortMalloc+0x150>
 800c02a:	4b45      	ldr	r3, [pc, #276]	; (800c140 <pvPortMalloc+0x188>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	429a      	cmp	r2, r3
 800c032:	d869      	bhi.n	800c108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c034:	4b43      	ldr	r3, [pc, #268]	; (800c144 <pvPortMalloc+0x18c>)
 800c036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c038:	4b42      	ldr	r3, [pc, #264]	; (800c144 <pvPortMalloc+0x18c>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c03e:	e004      	b.n	800c04a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	429a      	cmp	r2, r3
 800c052:	d903      	bls.n	800c05c <pvPortMalloc+0xa4>
 800c054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1f1      	bne.n	800c040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c05c:	4b36      	ldr	r3, [pc, #216]	; (800c138 <pvPortMalloc+0x180>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c062:	429a      	cmp	r2, r3
 800c064:	d050      	beq.n	800c108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c066:	6a3b      	ldr	r3, [r7, #32]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2208      	movs	r2, #8
 800c06c:	4413      	add	r3, r2
 800c06e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	1ad2      	subs	r2, r2, r3
 800c080:	2308      	movs	r3, #8
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	429a      	cmp	r2, r3
 800c086:	d91f      	bls.n	800c0c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00a      	beq.n	800c0b0 <pvPortMalloc+0xf8>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	613b      	str	r3, [r7, #16]
}
 800c0ac:	bf00      	nop
 800c0ae:	e7fe      	b.n	800c0ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	685a      	ldr	r2, [r3, #4]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	1ad2      	subs	r2, r2, r3
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0c2:	69b8      	ldr	r0, [r7, #24]
 800c0c4:	f000 f908 	bl	800c2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0c8:	4b1d      	ldr	r3, [pc, #116]	; (800c140 <pvPortMalloc+0x188>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	4a1b      	ldr	r2, [pc, #108]	; (800c140 <pvPortMalloc+0x188>)
 800c0d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0d6:	4b1a      	ldr	r3, [pc, #104]	; (800c140 <pvPortMalloc+0x188>)
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	4b1b      	ldr	r3, [pc, #108]	; (800c148 <pvPortMalloc+0x190>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d203      	bcs.n	800c0ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0e2:	4b17      	ldr	r3, [pc, #92]	; (800c140 <pvPortMalloc+0x188>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a18      	ldr	r2, [pc, #96]	; (800c148 <pvPortMalloc+0x190>)
 800c0e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	4b13      	ldr	r3, [pc, #76]	; (800c13c <pvPortMalloc+0x184>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	431a      	orrs	r2, r3
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0fe:	4b13      	ldr	r3, [pc, #76]	; (800c14c <pvPortMalloc+0x194>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3301      	adds	r3, #1
 800c104:	4a11      	ldr	r2, [pc, #68]	; (800c14c <pvPortMalloc+0x194>)
 800c106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c108:	f7fe fcf0 	bl	800aaec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	f003 0307 	and.w	r3, r3, #7
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00a      	beq.n	800c12c <pvPortMalloc+0x174>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	60fb      	str	r3, [r7, #12]
}
 800c128:	bf00      	nop
 800c12a:	e7fe      	b.n	800c12a <pvPortMalloc+0x172>
	return pvReturn;
 800c12c:	69fb      	ldr	r3, [r7, #28]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3728      	adds	r7, #40	; 0x28
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20008da4 	.word	0x20008da4
 800c13c:	20008db8 	.word	0x20008db8
 800c140:	20008da8 	.word	0x20008da8
 800c144:	20008d9c 	.word	0x20008d9c
 800c148:	20008dac 	.word	0x20008dac
 800c14c:	20008db0 	.word	0x20008db0

0800c150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d04d      	beq.n	800c1fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c162:	2308      	movs	r3, #8
 800c164:	425b      	negs	r3, r3
 800c166:	697a      	ldr	r2, [r7, #20]
 800c168:	4413      	add	r3, r2
 800c16a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	4b24      	ldr	r3, [pc, #144]	; (800c208 <vPortFree+0xb8>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4013      	ands	r3, r2
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10a      	bne.n	800c194 <vPortFree+0x44>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	60fb      	str	r3, [r7, #12]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00a      	beq.n	800c1b2 <vPortFree+0x62>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	60bb      	str	r3, [r7, #8]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	4b14      	ldr	r3, [pc, #80]	; (800c208 <vPortFree+0xb8>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d01e      	beq.n	800c1fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d11a      	bne.n	800c1fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	685a      	ldr	r2, [r3, #4]
 800c1cc:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <vPortFree+0xb8>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	43db      	mvns	r3, r3
 800c1d2:	401a      	ands	r2, r3
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1d8:	f7fe fc7a 	bl	800aad0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	685a      	ldr	r2, [r3, #4]
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <vPortFree+0xbc>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	4a09      	ldr	r2, [pc, #36]	; (800c20c <vPortFree+0xbc>)
 800c1e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1ea:	6938      	ldr	r0, [r7, #16]
 800c1ec:	f000 f874 	bl	800c2d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1f0:	4b07      	ldr	r3, [pc, #28]	; (800c210 <vPortFree+0xc0>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	3301      	adds	r3, #1
 800c1f6:	4a06      	ldr	r2, [pc, #24]	; (800c210 <vPortFree+0xc0>)
 800c1f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1fa:	f7fe fc77 	bl	800aaec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1fe:	bf00      	nop
 800c200:	3718      	adds	r7, #24
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	20008db8 	.word	0x20008db8
 800c20c:	20008da8 	.word	0x20008da8
 800c210:	20008db4 	.word	0x20008db4

0800c214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c220:	4b27      	ldr	r3, [pc, #156]	; (800c2c0 <prvHeapInit+0xac>)
 800c222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00c      	beq.n	800c248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3307      	adds	r3, #7
 800c232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f023 0307 	bic.w	r3, r3, #7
 800c23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	1ad3      	subs	r3, r2, r3
 800c242:	4a1f      	ldr	r2, [pc, #124]	; (800c2c0 <prvHeapInit+0xac>)
 800c244:	4413      	add	r3, r2
 800c246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c24c:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <prvHeapInit+0xb0>)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c252:	4b1c      	ldr	r3, [pc, #112]	; (800c2c4 <prvHeapInit+0xb0>)
 800c254:	2200      	movs	r2, #0
 800c256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	4413      	add	r3, r2
 800c25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c260:	2208      	movs	r2, #8
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	1a9b      	subs	r3, r3, r2
 800c266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f023 0307 	bic.w	r3, r3, #7
 800c26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	4a15      	ldr	r2, [pc, #84]	; (800c2c8 <prvHeapInit+0xb4>)
 800c274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c276:	4b14      	ldr	r3, [pc, #80]	; (800c2c8 <prvHeapInit+0xb4>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2200      	movs	r2, #0
 800c27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c27e:	4b12      	ldr	r3, [pc, #72]	; (800c2c8 <prvHeapInit+0xb4>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	1ad2      	subs	r2, r2, r3
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c294:	4b0c      	ldr	r3, [pc, #48]	; (800c2c8 <prvHeapInit+0xb4>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	4a0a      	ldr	r2, [pc, #40]	; (800c2cc <prvHeapInit+0xb8>)
 800c2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	4a09      	ldr	r2, [pc, #36]	; (800c2d0 <prvHeapInit+0xbc>)
 800c2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2ac:	4b09      	ldr	r3, [pc, #36]	; (800c2d4 <prvHeapInit+0xc0>)
 800c2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2b2:	601a      	str	r2, [r3, #0]
}
 800c2b4:	bf00      	nop
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	20000d9c 	.word	0x20000d9c
 800c2c4:	20008d9c 	.word	0x20008d9c
 800c2c8:	20008da4 	.word	0x20008da4
 800c2cc:	20008dac 	.word	0x20008dac
 800c2d0:	20008da8 	.word	0x20008da8
 800c2d4:	20008db8 	.word	0x20008db8

0800c2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2e0:	4b28      	ldr	r3, [pc, #160]	; (800c384 <prvInsertBlockIntoFreeList+0xac>)
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	e002      	b.n	800c2ec <prvInsertBlockIntoFreeList+0x14>
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d8f7      	bhi.n	800c2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	4413      	add	r3, r2
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	429a      	cmp	r2, r3
 800c306:	d108      	bne.n	800c31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	441a      	add	r2, r3
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	441a      	add	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d118      	bne.n	800c360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	4b15      	ldr	r3, [pc, #84]	; (800c388 <prvInsertBlockIntoFreeList+0xb0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	429a      	cmp	r2, r3
 800c338:	d00d      	beq.n	800c356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	441a      	add	r2, r3
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	e008      	b.n	800c368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <prvInsertBlockIntoFreeList+0xb0>)
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	e003      	b.n	800c368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d002      	beq.n	800c376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c376:	bf00      	nop
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	20008d9c 	.word	0x20008d9c
 800c388:	20008da4 	.word	0x20008da4

0800c38c <__errno>:
 800c38c:	4b01      	ldr	r3, [pc, #4]	; (800c394 <__errno+0x8>)
 800c38e:	6818      	ldr	r0, [r3, #0]
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	20000010 	.word	0x20000010

0800c398 <__libc_init_array>:
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	4d0d      	ldr	r5, [pc, #52]	; (800c3d0 <__libc_init_array+0x38>)
 800c39c:	4c0d      	ldr	r4, [pc, #52]	; (800c3d4 <__libc_init_array+0x3c>)
 800c39e:	1b64      	subs	r4, r4, r5
 800c3a0:	10a4      	asrs	r4, r4, #2
 800c3a2:	2600      	movs	r6, #0
 800c3a4:	42a6      	cmp	r6, r4
 800c3a6:	d109      	bne.n	800c3bc <__libc_init_array+0x24>
 800c3a8:	4d0b      	ldr	r5, [pc, #44]	; (800c3d8 <__libc_init_array+0x40>)
 800c3aa:	4c0c      	ldr	r4, [pc, #48]	; (800c3dc <__libc_init_array+0x44>)
 800c3ac:	f000 fc9c 	bl	800cce8 <_init>
 800c3b0:	1b64      	subs	r4, r4, r5
 800c3b2:	10a4      	asrs	r4, r4, #2
 800c3b4:	2600      	movs	r6, #0
 800c3b6:	42a6      	cmp	r6, r4
 800c3b8:	d105      	bne.n	800c3c6 <__libc_init_array+0x2e>
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c0:	4798      	blx	r3
 800c3c2:	3601      	adds	r6, #1
 800c3c4:	e7ee      	b.n	800c3a4 <__libc_init_array+0xc>
 800c3c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3ca:	4798      	blx	r3
 800c3cc:	3601      	adds	r6, #1
 800c3ce:	e7f2      	b.n	800c3b6 <__libc_init_array+0x1e>
 800c3d0:	0800d2f0 	.word	0x0800d2f0
 800c3d4:	0800d2f0 	.word	0x0800d2f0
 800c3d8:	0800d2f0 	.word	0x0800d2f0
 800c3dc:	0800d2f4 	.word	0x0800d2f4

0800c3e0 <memcpy>:
 800c3e0:	440a      	add	r2, r1
 800c3e2:	4291      	cmp	r1, r2
 800c3e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3e8:	d100      	bne.n	800c3ec <memcpy+0xc>
 800c3ea:	4770      	bx	lr
 800c3ec:	b510      	push	{r4, lr}
 800c3ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3f6:	4291      	cmp	r1, r2
 800c3f8:	d1f9      	bne.n	800c3ee <memcpy+0xe>
 800c3fa:	bd10      	pop	{r4, pc}

0800c3fc <memset>:
 800c3fc:	4402      	add	r2, r0
 800c3fe:	4603      	mov	r3, r0
 800c400:	4293      	cmp	r3, r2
 800c402:	d100      	bne.n	800c406 <memset+0xa>
 800c404:	4770      	bx	lr
 800c406:	f803 1b01 	strb.w	r1, [r3], #1
 800c40a:	e7f9      	b.n	800c400 <memset+0x4>

0800c40c <sniprintf>:
 800c40c:	b40c      	push	{r2, r3}
 800c40e:	b530      	push	{r4, r5, lr}
 800c410:	4b17      	ldr	r3, [pc, #92]	; (800c470 <sniprintf+0x64>)
 800c412:	1e0c      	subs	r4, r1, #0
 800c414:	681d      	ldr	r5, [r3, #0]
 800c416:	b09d      	sub	sp, #116	; 0x74
 800c418:	da08      	bge.n	800c42c <sniprintf+0x20>
 800c41a:	238b      	movs	r3, #139	; 0x8b
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	f04f 30ff 	mov.w	r0, #4294967295
 800c422:	b01d      	add	sp, #116	; 0x74
 800c424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c428:	b002      	add	sp, #8
 800c42a:	4770      	bx	lr
 800c42c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c430:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c434:	bf14      	ite	ne
 800c436:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c43a:	4623      	moveq	r3, r4
 800c43c:	9304      	str	r3, [sp, #16]
 800c43e:	9307      	str	r3, [sp, #28]
 800c440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c444:	9002      	str	r0, [sp, #8]
 800c446:	9006      	str	r0, [sp, #24]
 800c448:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c44c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c44e:	ab21      	add	r3, sp, #132	; 0x84
 800c450:	a902      	add	r1, sp, #8
 800c452:	4628      	mov	r0, r5
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	f000 f8a3 	bl	800c5a0 <_svfiprintf_r>
 800c45a:	1c43      	adds	r3, r0, #1
 800c45c:	bfbc      	itt	lt
 800c45e:	238b      	movlt	r3, #139	; 0x8b
 800c460:	602b      	strlt	r3, [r5, #0]
 800c462:	2c00      	cmp	r4, #0
 800c464:	d0dd      	beq.n	800c422 <sniprintf+0x16>
 800c466:	9b02      	ldr	r3, [sp, #8]
 800c468:	2200      	movs	r2, #0
 800c46a:	701a      	strb	r2, [r3, #0]
 800c46c:	e7d9      	b.n	800c422 <sniprintf+0x16>
 800c46e:	bf00      	nop
 800c470:	20000010 	.word	0x20000010

0800c474 <_vsniprintf_r>:
 800c474:	b530      	push	{r4, r5, lr}
 800c476:	1e14      	subs	r4, r2, #0
 800c478:	4605      	mov	r5, r0
 800c47a:	b09b      	sub	sp, #108	; 0x6c
 800c47c:	4618      	mov	r0, r3
 800c47e:	da05      	bge.n	800c48c <_vsniprintf_r+0x18>
 800c480:	238b      	movs	r3, #139	; 0x8b
 800c482:	602b      	str	r3, [r5, #0]
 800c484:	f04f 30ff 	mov.w	r0, #4294967295
 800c488:	b01b      	add	sp, #108	; 0x6c
 800c48a:	bd30      	pop	{r4, r5, pc}
 800c48c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c490:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c494:	bf14      	ite	ne
 800c496:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c49a:	4623      	moveq	r3, r4
 800c49c:	9302      	str	r3, [sp, #8]
 800c49e:	9305      	str	r3, [sp, #20]
 800c4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4a4:	9100      	str	r1, [sp, #0]
 800c4a6:	9104      	str	r1, [sp, #16]
 800c4a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c4b0:	4669      	mov	r1, sp
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 f874 	bl	800c5a0 <_svfiprintf_r>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	bfbc      	itt	lt
 800c4bc:	238b      	movlt	r3, #139	; 0x8b
 800c4be:	602b      	strlt	r3, [r5, #0]
 800c4c0:	2c00      	cmp	r4, #0
 800c4c2:	d0e1      	beq.n	800c488 <_vsniprintf_r+0x14>
 800c4c4:	9b00      	ldr	r3, [sp, #0]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	701a      	strb	r2, [r3, #0]
 800c4ca:	e7dd      	b.n	800c488 <_vsniprintf_r+0x14>

0800c4cc <vsniprintf>:
 800c4cc:	b507      	push	{r0, r1, r2, lr}
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	460a      	mov	r2, r1
 800c4d4:	4601      	mov	r1, r0
 800c4d6:	4803      	ldr	r0, [pc, #12]	; (800c4e4 <vsniprintf+0x18>)
 800c4d8:	6800      	ldr	r0, [r0, #0]
 800c4da:	f7ff ffcb 	bl	800c474 <_vsniprintf_r>
 800c4de:	b003      	add	sp, #12
 800c4e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4e4:	20000010 	.word	0x20000010

0800c4e8 <__ssputs_r>:
 800c4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ec:	688e      	ldr	r6, [r1, #8]
 800c4ee:	429e      	cmp	r6, r3
 800c4f0:	4682      	mov	sl, r0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	4690      	mov	r8, r2
 800c4f6:	461f      	mov	r7, r3
 800c4f8:	d838      	bhi.n	800c56c <__ssputs_r+0x84>
 800c4fa:	898a      	ldrh	r2, [r1, #12]
 800c4fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c500:	d032      	beq.n	800c568 <__ssputs_r+0x80>
 800c502:	6825      	ldr	r5, [r4, #0]
 800c504:	6909      	ldr	r1, [r1, #16]
 800c506:	eba5 0901 	sub.w	r9, r5, r1
 800c50a:	6965      	ldr	r5, [r4, #20]
 800c50c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c514:	3301      	adds	r3, #1
 800c516:	444b      	add	r3, r9
 800c518:	106d      	asrs	r5, r5, #1
 800c51a:	429d      	cmp	r5, r3
 800c51c:	bf38      	it	cc
 800c51e:	461d      	movcc	r5, r3
 800c520:	0553      	lsls	r3, r2, #21
 800c522:	d531      	bpl.n	800c588 <__ssputs_r+0xa0>
 800c524:	4629      	mov	r1, r5
 800c526:	f000 fb39 	bl	800cb9c <_malloc_r>
 800c52a:	4606      	mov	r6, r0
 800c52c:	b950      	cbnz	r0, 800c544 <__ssputs_r+0x5c>
 800c52e:	230c      	movs	r3, #12
 800c530:	f8ca 3000 	str.w	r3, [sl]
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295
 800c540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c544:	6921      	ldr	r1, [r4, #16]
 800c546:	464a      	mov	r2, r9
 800c548:	f7ff ff4a 	bl	800c3e0 <memcpy>
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c556:	81a3      	strh	r3, [r4, #12]
 800c558:	6126      	str	r6, [r4, #16]
 800c55a:	6165      	str	r5, [r4, #20]
 800c55c:	444e      	add	r6, r9
 800c55e:	eba5 0509 	sub.w	r5, r5, r9
 800c562:	6026      	str	r6, [r4, #0]
 800c564:	60a5      	str	r5, [r4, #8]
 800c566:	463e      	mov	r6, r7
 800c568:	42be      	cmp	r6, r7
 800c56a:	d900      	bls.n	800c56e <__ssputs_r+0x86>
 800c56c:	463e      	mov	r6, r7
 800c56e:	4632      	mov	r2, r6
 800c570:	6820      	ldr	r0, [r4, #0]
 800c572:	4641      	mov	r1, r8
 800c574:	f000 faa8 	bl	800cac8 <memmove>
 800c578:	68a3      	ldr	r3, [r4, #8]
 800c57a:	6822      	ldr	r2, [r4, #0]
 800c57c:	1b9b      	subs	r3, r3, r6
 800c57e:	4432      	add	r2, r6
 800c580:	60a3      	str	r3, [r4, #8]
 800c582:	6022      	str	r2, [r4, #0]
 800c584:	2000      	movs	r0, #0
 800c586:	e7db      	b.n	800c540 <__ssputs_r+0x58>
 800c588:	462a      	mov	r2, r5
 800c58a:	f000 fb61 	bl	800cc50 <_realloc_r>
 800c58e:	4606      	mov	r6, r0
 800c590:	2800      	cmp	r0, #0
 800c592:	d1e1      	bne.n	800c558 <__ssputs_r+0x70>
 800c594:	6921      	ldr	r1, [r4, #16]
 800c596:	4650      	mov	r0, sl
 800c598:	f000 fab0 	bl	800cafc <_free_r>
 800c59c:	e7c7      	b.n	800c52e <__ssputs_r+0x46>
	...

0800c5a0 <_svfiprintf_r>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	4698      	mov	r8, r3
 800c5a6:	898b      	ldrh	r3, [r1, #12]
 800c5a8:	061b      	lsls	r3, r3, #24
 800c5aa:	b09d      	sub	sp, #116	; 0x74
 800c5ac:	4607      	mov	r7, r0
 800c5ae:	460d      	mov	r5, r1
 800c5b0:	4614      	mov	r4, r2
 800c5b2:	d50e      	bpl.n	800c5d2 <_svfiprintf_r+0x32>
 800c5b4:	690b      	ldr	r3, [r1, #16]
 800c5b6:	b963      	cbnz	r3, 800c5d2 <_svfiprintf_r+0x32>
 800c5b8:	2140      	movs	r1, #64	; 0x40
 800c5ba:	f000 faef 	bl	800cb9c <_malloc_r>
 800c5be:	6028      	str	r0, [r5, #0]
 800c5c0:	6128      	str	r0, [r5, #16]
 800c5c2:	b920      	cbnz	r0, 800c5ce <_svfiprintf_r+0x2e>
 800c5c4:	230c      	movs	r3, #12
 800c5c6:	603b      	str	r3, [r7, #0]
 800c5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5cc:	e0d1      	b.n	800c772 <_svfiprintf_r+0x1d2>
 800c5ce:	2340      	movs	r3, #64	; 0x40
 800c5d0:	616b      	str	r3, [r5, #20]
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d6:	2320      	movs	r3, #32
 800c5d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5e0:	2330      	movs	r3, #48	; 0x30
 800c5e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c78c <_svfiprintf_r+0x1ec>
 800c5e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5ea:	f04f 0901 	mov.w	r9, #1
 800c5ee:	4623      	mov	r3, r4
 800c5f0:	469a      	mov	sl, r3
 800c5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5f6:	b10a      	cbz	r2, 800c5fc <_svfiprintf_r+0x5c>
 800c5f8:	2a25      	cmp	r2, #37	; 0x25
 800c5fa:	d1f9      	bne.n	800c5f0 <_svfiprintf_r+0x50>
 800c5fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c600:	d00b      	beq.n	800c61a <_svfiprintf_r+0x7a>
 800c602:	465b      	mov	r3, fp
 800c604:	4622      	mov	r2, r4
 800c606:	4629      	mov	r1, r5
 800c608:	4638      	mov	r0, r7
 800c60a:	f7ff ff6d 	bl	800c4e8 <__ssputs_r>
 800c60e:	3001      	adds	r0, #1
 800c610:	f000 80aa 	beq.w	800c768 <_svfiprintf_r+0x1c8>
 800c614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c616:	445a      	add	r2, fp
 800c618:	9209      	str	r2, [sp, #36]	; 0x24
 800c61a:	f89a 3000 	ldrb.w	r3, [sl]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 80a2 	beq.w	800c768 <_svfiprintf_r+0x1c8>
 800c624:	2300      	movs	r3, #0
 800c626:	f04f 32ff 	mov.w	r2, #4294967295
 800c62a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c62e:	f10a 0a01 	add.w	sl, sl, #1
 800c632:	9304      	str	r3, [sp, #16]
 800c634:	9307      	str	r3, [sp, #28]
 800c636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c63a:	931a      	str	r3, [sp, #104]	; 0x68
 800c63c:	4654      	mov	r4, sl
 800c63e:	2205      	movs	r2, #5
 800c640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c644:	4851      	ldr	r0, [pc, #324]	; (800c78c <_svfiprintf_r+0x1ec>)
 800c646:	f7f3 fdeb 	bl	8000220 <memchr>
 800c64a:	9a04      	ldr	r2, [sp, #16]
 800c64c:	b9d8      	cbnz	r0, 800c686 <_svfiprintf_r+0xe6>
 800c64e:	06d0      	lsls	r0, r2, #27
 800c650:	bf44      	itt	mi
 800c652:	2320      	movmi	r3, #32
 800c654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c658:	0711      	lsls	r1, r2, #28
 800c65a:	bf44      	itt	mi
 800c65c:	232b      	movmi	r3, #43	; 0x2b
 800c65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c662:	f89a 3000 	ldrb.w	r3, [sl]
 800c666:	2b2a      	cmp	r3, #42	; 0x2a
 800c668:	d015      	beq.n	800c696 <_svfiprintf_r+0xf6>
 800c66a:	9a07      	ldr	r2, [sp, #28]
 800c66c:	4654      	mov	r4, sl
 800c66e:	2000      	movs	r0, #0
 800c670:	f04f 0c0a 	mov.w	ip, #10
 800c674:	4621      	mov	r1, r4
 800c676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c67a:	3b30      	subs	r3, #48	; 0x30
 800c67c:	2b09      	cmp	r3, #9
 800c67e:	d94e      	bls.n	800c71e <_svfiprintf_r+0x17e>
 800c680:	b1b0      	cbz	r0, 800c6b0 <_svfiprintf_r+0x110>
 800c682:	9207      	str	r2, [sp, #28]
 800c684:	e014      	b.n	800c6b0 <_svfiprintf_r+0x110>
 800c686:	eba0 0308 	sub.w	r3, r0, r8
 800c68a:	fa09 f303 	lsl.w	r3, r9, r3
 800c68e:	4313      	orrs	r3, r2
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	46a2      	mov	sl, r4
 800c694:	e7d2      	b.n	800c63c <_svfiprintf_r+0x9c>
 800c696:	9b03      	ldr	r3, [sp, #12]
 800c698:	1d19      	adds	r1, r3, #4
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	9103      	str	r1, [sp, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	bfbb      	ittet	lt
 800c6a2:	425b      	neglt	r3, r3
 800c6a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6a8:	9307      	strge	r3, [sp, #28]
 800c6aa:	9307      	strlt	r3, [sp, #28]
 800c6ac:	bfb8      	it	lt
 800c6ae:	9204      	strlt	r2, [sp, #16]
 800c6b0:	7823      	ldrb	r3, [r4, #0]
 800c6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6b4:	d10c      	bne.n	800c6d0 <_svfiprintf_r+0x130>
 800c6b6:	7863      	ldrb	r3, [r4, #1]
 800c6b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ba:	d135      	bne.n	800c728 <_svfiprintf_r+0x188>
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	1d1a      	adds	r2, r3, #4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	9203      	str	r2, [sp, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bfb8      	it	lt
 800c6c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6cc:	3402      	adds	r4, #2
 800c6ce:	9305      	str	r3, [sp, #20]
 800c6d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c79c <_svfiprintf_r+0x1fc>
 800c6d4:	7821      	ldrb	r1, [r4, #0]
 800c6d6:	2203      	movs	r2, #3
 800c6d8:	4650      	mov	r0, sl
 800c6da:	f7f3 fda1 	bl	8000220 <memchr>
 800c6de:	b140      	cbz	r0, 800c6f2 <_svfiprintf_r+0x152>
 800c6e0:	2340      	movs	r3, #64	; 0x40
 800c6e2:	eba0 000a 	sub.w	r0, r0, sl
 800c6e6:	fa03 f000 	lsl.w	r0, r3, r0
 800c6ea:	9b04      	ldr	r3, [sp, #16]
 800c6ec:	4303      	orrs	r3, r0
 800c6ee:	3401      	adds	r4, #1
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f6:	4826      	ldr	r0, [pc, #152]	; (800c790 <_svfiprintf_r+0x1f0>)
 800c6f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6fc:	2206      	movs	r2, #6
 800c6fe:	f7f3 fd8f 	bl	8000220 <memchr>
 800c702:	2800      	cmp	r0, #0
 800c704:	d038      	beq.n	800c778 <_svfiprintf_r+0x1d8>
 800c706:	4b23      	ldr	r3, [pc, #140]	; (800c794 <_svfiprintf_r+0x1f4>)
 800c708:	bb1b      	cbnz	r3, 800c752 <_svfiprintf_r+0x1b2>
 800c70a:	9b03      	ldr	r3, [sp, #12]
 800c70c:	3307      	adds	r3, #7
 800c70e:	f023 0307 	bic.w	r3, r3, #7
 800c712:	3308      	adds	r3, #8
 800c714:	9303      	str	r3, [sp, #12]
 800c716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c718:	4433      	add	r3, r6
 800c71a:	9309      	str	r3, [sp, #36]	; 0x24
 800c71c:	e767      	b.n	800c5ee <_svfiprintf_r+0x4e>
 800c71e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c722:	460c      	mov	r4, r1
 800c724:	2001      	movs	r0, #1
 800c726:	e7a5      	b.n	800c674 <_svfiprintf_r+0xd4>
 800c728:	2300      	movs	r3, #0
 800c72a:	3401      	adds	r4, #1
 800c72c:	9305      	str	r3, [sp, #20]
 800c72e:	4619      	mov	r1, r3
 800c730:	f04f 0c0a 	mov.w	ip, #10
 800c734:	4620      	mov	r0, r4
 800c736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c73a:	3a30      	subs	r2, #48	; 0x30
 800c73c:	2a09      	cmp	r2, #9
 800c73e:	d903      	bls.n	800c748 <_svfiprintf_r+0x1a8>
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0c5      	beq.n	800c6d0 <_svfiprintf_r+0x130>
 800c744:	9105      	str	r1, [sp, #20]
 800c746:	e7c3      	b.n	800c6d0 <_svfiprintf_r+0x130>
 800c748:	fb0c 2101 	mla	r1, ip, r1, r2
 800c74c:	4604      	mov	r4, r0
 800c74e:	2301      	movs	r3, #1
 800c750:	e7f0      	b.n	800c734 <_svfiprintf_r+0x194>
 800c752:	ab03      	add	r3, sp, #12
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	462a      	mov	r2, r5
 800c758:	4b0f      	ldr	r3, [pc, #60]	; (800c798 <_svfiprintf_r+0x1f8>)
 800c75a:	a904      	add	r1, sp, #16
 800c75c:	4638      	mov	r0, r7
 800c75e:	f3af 8000 	nop.w
 800c762:	1c42      	adds	r2, r0, #1
 800c764:	4606      	mov	r6, r0
 800c766:	d1d6      	bne.n	800c716 <_svfiprintf_r+0x176>
 800c768:	89ab      	ldrh	r3, [r5, #12]
 800c76a:	065b      	lsls	r3, r3, #25
 800c76c:	f53f af2c 	bmi.w	800c5c8 <_svfiprintf_r+0x28>
 800c770:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c772:	b01d      	add	sp, #116	; 0x74
 800c774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c778:	ab03      	add	r3, sp, #12
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	462a      	mov	r2, r5
 800c77e:	4b06      	ldr	r3, [pc, #24]	; (800c798 <_svfiprintf_r+0x1f8>)
 800c780:	a904      	add	r1, sp, #16
 800c782:	4638      	mov	r0, r7
 800c784:	f000 f87a 	bl	800c87c <_printf_i>
 800c788:	e7eb      	b.n	800c762 <_svfiprintf_r+0x1c2>
 800c78a:	bf00      	nop
 800c78c:	0800d2b4 	.word	0x0800d2b4
 800c790:	0800d2be 	.word	0x0800d2be
 800c794:	00000000 	.word	0x00000000
 800c798:	0800c4e9 	.word	0x0800c4e9
 800c79c:	0800d2ba 	.word	0x0800d2ba

0800c7a0 <_printf_common>:
 800c7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a4:	4616      	mov	r6, r2
 800c7a6:	4699      	mov	r9, r3
 800c7a8:	688a      	ldr	r2, [r1, #8]
 800c7aa:	690b      	ldr	r3, [r1, #16]
 800c7ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	bfb8      	it	lt
 800c7b4:	4613      	movlt	r3, r2
 800c7b6:	6033      	str	r3, [r6, #0]
 800c7b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7bc:	4607      	mov	r7, r0
 800c7be:	460c      	mov	r4, r1
 800c7c0:	b10a      	cbz	r2, 800c7c6 <_printf_common+0x26>
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	6033      	str	r3, [r6, #0]
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	0699      	lsls	r1, r3, #26
 800c7ca:	bf42      	ittt	mi
 800c7cc:	6833      	ldrmi	r3, [r6, #0]
 800c7ce:	3302      	addmi	r3, #2
 800c7d0:	6033      	strmi	r3, [r6, #0]
 800c7d2:	6825      	ldr	r5, [r4, #0]
 800c7d4:	f015 0506 	ands.w	r5, r5, #6
 800c7d8:	d106      	bne.n	800c7e8 <_printf_common+0x48>
 800c7da:	f104 0a19 	add.w	sl, r4, #25
 800c7de:	68e3      	ldr	r3, [r4, #12]
 800c7e0:	6832      	ldr	r2, [r6, #0]
 800c7e2:	1a9b      	subs	r3, r3, r2
 800c7e4:	42ab      	cmp	r3, r5
 800c7e6:	dc26      	bgt.n	800c836 <_printf_common+0x96>
 800c7e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7ec:	1e13      	subs	r3, r2, #0
 800c7ee:	6822      	ldr	r2, [r4, #0]
 800c7f0:	bf18      	it	ne
 800c7f2:	2301      	movne	r3, #1
 800c7f4:	0692      	lsls	r2, r2, #26
 800c7f6:	d42b      	bmi.n	800c850 <_printf_common+0xb0>
 800c7f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	4638      	mov	r0, r7
 800c800:	47c0      	blx	r8
 800c802:	3001      	adds	r0, #1
 800c804:	d01e      	beq.n	800c844 <_printf_common+0xa4>
 800c806:	6823      	ldr	r3, [r4, #0]
 800c808:	68e5      	ldr	r5, [r4, #12]
 800c80a:	6832      	ldr	r2, [r6, #0]
 800c80c:	f003 0306 	and.w	r3, r3, #6
 800c810:	2b04      	cmp	r3, #4
 800c812:	bf08      	it	eq
 800c814:	1aad      	subeq	r5, r5, r2
 800c816:	68a3      	ldr	r3, [r4, #8]
 800c818:	6922      	ldr	r2, [r4, #16]
 800c81a:	bf0c      	ite	eq
 800c81c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c820:	2500      	movne	r5, #0
 800c822:	4293      	cmp	r3, r2
 800c824:	bfc4      	itt	gt
 800c826:	1a9b      	subgt	r3, r3, r2
 800c828:	18ed      	addgt	r5, r5, r3
 800c82a:	2600      	movs	r6, #0
 800c82c:	341a      	adds	r4, #26
 800c82e:	42b5      	cmp	r5, r6
 800c830:	d11a      	bne.n	800c868 <_printf_common+0xc8>
 800c832:	2000      	movs	r0, #0
 800c834:	e008      	b.n	800c848 <_printf_common+0xa8>
 800c836:	2301      	movs	r3, #1
 800c838:	4652      	mov	r2, sl
 800c83a:	4649      	mov	r1, r9
 800c83c:	4638      	mov	r0, r7
 800c83e:	47c0      	blx	r8
 800c840:	3001      	adds	r0, #1
 800c842:	d103      	bne.n	800c84c <_printf_common+0xac>
 800c844:	f04f 30ff 	mov.w	r0, #4294967295
 800c848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c84c:	3501      	adds	r5, #1
 800c84e:	e7c6      	b.n	800c7de <_printf_common+0x3e>
 800c850:	18e1      	adds	r1, r4, r3
 800c852:	1c5a      	adds	r2, r3, #1
 800c854:	2030      	movs	r0, #48	; 0x30
 800c856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c85a:	4422      	add	r2, r4
 800c85c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c864:	3302      	adds	r3, #2
 800c866:	e7c7      	b.n	800c7f8 <_printf_common+0x58>
 800c868:	2301      	movs	r3, #1
 800c86a:	4622      	mov	r2, r4
 800c86c:	4649      	mov	r1, r9
 800c86e:	4638      	mov	r0, r7
 800c870:	47c0      	blx	r8
 800c872:	3001      	adds	r0, #1
 800c874:	d0e6      	beq.n	800c844 <_printf_common+0xa4>
 800c876:	3601      	adds	r6, #1
 800c878:	e7d9      	b.n	800c82e <_printf_common+0x8e>
	...

0800c87c <_printf_i>:
 800c87c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c880:	460c      	mov	r4, r1
 800c882:	4691      	mov	r9, r2
 800c884:	7e27      	ldrb	r7, [r4, #24]
 800c886:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c888:	2f78      	cmp	r7, #120	; 0x78
 800c88a:	4680      	mov	r8, r0
 800c88c:	469a      	mov	sl, r3
 800c88e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c892:	d807      	bhi.n	800c8a4 <_printf_i+0x28>
 800c894:	2f62      	cmp	r7, #98	; 0x62
 800c896:	d80a      	bhi.n	800c8ae <_printf_i+0x32>
 800c898:	2f00      	cmp	r7, #0
 800c89a:	f000 80d8 	beq.w	800ca4e <_printf_i+0x1d2>
 800c89e:	2f58      	cmp	r7, #88	; 0x58
 800c8a0:	f000 80a3 	beq.w	800c9ea <_printf_i+0x16e>
 800c8a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c8a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8ac:	e03a      	b.n	800c924 <_printf_i+0xa8>
 800c8ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8b2:	2b15      	cmp	r3, #21
 800c8b4:	d8f6      	bhi.n	800c8a4 <_printf_i+0x28>
 800c8b6:	a001      	add	r0, pc, #4	; (adr r0, 800c8bc <_printf_i+0x40>)
 800c8b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c8bc:	0800c915 	.word	0x0800c915
 800c8c0:	0800c929 	.word	0x0800c929
 800c8c4:	0800c8a5 	.word	0x0800c8a5
 800c8c8:	0800c8a5 	.word	0x0800c8a5
 800c8cc:	0800c8a5 	.word	0x0800c8a5
 800c8d0:	0800c8a5 	.word	0x0800c8a5
 800c8d4:	0800c929 	.word	0x0800c929
 800c8d8:	0800c8a5 	.word	0x0800c8a5
 800c8dc:	0800c8a5 	.word	0x0800c8a5
 800c8e0:	0800c8a5 	.word	0x0800c8a5
 800c8e4:	0800c8a5 	.word	0x0800c8a5
 800c8e8:	0800ca35 	.word	0x0800ca35
 800c8ec:	0800c959 	.word	0x0800c959
 800c8f0:	0800ca17 	.word	0x0800ca17
 800c8f4:	0800c8a5 	.word	0x0800c8a5
 800c8f8:	0800c8a5 	.word	0x0800c8a5
 800c8fc:	0800ca57 	.word	0x0800ca57
 800c900:	0800c8a5 	.word	0x0800c8a5
 800c904:	0800c959 	.word	0x0800c959
 800c908:	0800c8a5 	.word	0x0800c8a5
 800c90c:	0800c8a5 	.word	0x0800c8a5
 800c910:	0800ca1f 	.word	0x0800ca1f
 800c914:	680b      	ldr	r3, [r1, #0]
 800c916:	1d1a      	adds	r2, r3, #4
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	600a      	str	r2, [r1, #0]
 800c91c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c924:	2301      	movs	r3, #1
 800c926:	e0a3      	b.n	800ca70 <_printf_i+0x1f4>
 800c928:	6825      	ldr	r5, [r4, #0]
 800c92a:	6808      	ldr	r0, [r1, #0]
 800c92c:	062e      	lsls	r6, r5, #24
 800c92e:	f100 0304 	add.w	r3, r0, #4
 800c932:	d50a      	bpl.n	800c94a <_printf_i+0xce>
 800c934:	6805      	ldr	r5, [r0, #0]
 800c936:	600b      	str	r3, [r1, #0]
 800c938:	2d00      	cmp	r5, #0
 800c93a:	da03      	bge.n	800c944 <_printf_i+0xc8>
 800c93c:	232d      	movs	r3, #45	; 0x2d
 800c93e:	426d      	negs	r5, r5
 800c940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c944:	485e      	ldr	r0, [pc, #376]	; (800cac0 <_printf_i+0x244>)
 800c946:	230a      	movs	r3, #10
 800c948:	e019      	b.n	800c97e <_printf_i+0x102>
 800c94a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c94e:	6805      	ldr	r5, [r0, #0]
 800c950:	600b      	str	r3, [r1, #0]
 800c952:	bf18      	it	ne
 800c954:	b22d      	sxthne	r5, r5
 800c956:	e7ef      	b.n	800c938 <_printf_i+0xbc>
 800c958:	680b      	ldr	r3, [r1, #0]
 800c95a:	6825      	ldr	r5, [r4, #0]
 800c95c:	1d18      	adds	r0, r3, #4
 800c95e:	6008      	str	r0, [r1, #0]
 800c960:	0628      	lsls	r0, r5, #24
 800c962:	d501      	bpl.n	800c968 <_printf_i+0xec>
 800c964:	681d      	ldr	r5, [r3, #0]
 800c966:	e002      	b.n	800c96e <_printf_i+0xf2>
 800c968:	0669      	lsls	r1, r5, #25
 800c96a:	d5fb      	bpl.n	800c964 <_printf_i+0xe8>
 800c96c:	881d      	ldrh	r5, [r3, #0]
 800c96e:	4854      	ldr	r0, [pc, #336]	; (800cac0 <_printf_i+0x244>)
 800c970:	2f6f      	cmp	r7, #111	; 0x6f
 800c972:	bf0c      	ite	eq
 800c974:	2308      	moveq	r3, #8
 800c976:	230a      	movne	r3, #10
 800c978:	2100      	movs	r1, #0
 800c97a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c97e:	6866      	ldr	r6, [r4, #4]
 800c980:	60a6      	str	r6, [r4, #8]
 800c982:	2e00      	cmp	r6, #0
 800c984:	bfa2      	ittt	ge
 800c986:	6821      	ldrge	r1, [r4, #0]
 800c988:	f021 0104 	bicge.w	r1, r1, #4
 800c98c:	6021      	strge	r1, [r4, #0]
 800c98e:	b90d      	cbnz	r5, 800c994 <_printf_i+0x118>
 800c990:	2e00      	cmp	r6, #0
 800c992:	d04d      	beq.n	800ca30 <_printf_i+0x1b4>
 800c994:	4616      	mov	r6, r2
 800c996:	fbb5 f1f3 	udiv	r1, r5, r3
 800c99a:	fb03 5711 	mls	r7, r3, r1, r5
 800c99e:	5dc7      	ldrb	r7, [r0, r7]
 800c9a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9a4:	462f      	mov	r7, r5
 800c9a6:	42bb      	cmp	r3, r7
 800c9a8:	460d      	mov	r5, r1
 800c9aa:	d9f4      	bls.n	800c996 <_printf_i+0x11a>
 800c9ac:	2b08      	cmp	r3, #8
 800c9ae:	d10b      	bne.n	800c9c8 <_printf_i+0x14c>
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	07df      	lsls	r7, r3, #31
 800c9b4:	d508      	bpl.n	800c9c8 <_printf_i+0x14c>
 800c9b6:	6923      	ldr	r3, [r4, #16]
 800c9b8:	6861      	ldr	r1, [r4, #4]
 800c9ba:	4299      	cmp	r1, r3
 800c9bc:	bfde      	ittt	le
 800c9be:	2330      	movle	r3, #48	; 0x30
 800c9c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9c8:	1b92      	subs	r2, r2, r6
 800c9ca:	6122      	str	r2, [r4, #16]
 800c9cc:	f8cd a000 	str.w	sl, [sp]
 800c9d0:	464b      	mov	r3, r9
 800c9d2:	aa03      	add	r2, sp, #12
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	f7ff fee2 	bl	800c7a0 <_printf_common>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	d14c      	bne.n	800ca7a <_printf_i+0x1fe>
 800c9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e4:	b004      	add	sp, #16
 800c9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ea:	4835      	ldr	r0, [pc, #212]	; (800cac0 <_printf_i+0x244>)
 800c9ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	680e      	ldr	r6, [r1, #0]
 800c9f4:	061f      	lsls	r7, r3, #24
 800c9f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800c9fa:	600e      	str	r6, [r1, #0]
 800c9fc:	d514      	bpl.n	800ca28 <_printf_i+0x1ac>
 800c9fe:	07d9      	lsls	r1, r3, #31
 800ca00:	bf44      	itt	mi
 800ca02:	f043 0320 	orrmi.w	r3, r3, #32
 800ca06:	6023      	strmi	r3, [r4, #0]
 800ca08:	b91d      	cbnz	r5, 800ca12 <_printf_i+0x196>
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	f023 0320 	bic.w	r3, r3, #32
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	2310      	movs	r3, #16
 800ca14:	e7b0      	b.n	800c978 <_printf_i+0xfc>
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	f043 0320 	orr.w	r3, r3, #32
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	2378      	movs	r3, #120	; 0x78
 800ca20:	4828      	ldr	r0, [pc, #160]	; (800cac4 <_printf_i+0x248>)
 800ca22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca26:	e7e3      	b.n	800c9f0 <_printf_i+0x174>
 800ca28:	065e      	lsls	r6, r3, #25
 800ca2a:	bf48      	it	mi
 800ca2c:	b2ad      	uxthmi	r5, r5
 800ca2e:	e7e6      	b.n	800c9fe <_printf_i+0x182>
 800ca30:	4616      	mov	r6, r2
 800ca32:	e7bb      	b.n	800c9ac <_printf_i+0x130>
 800ca34:	680b      	ldr	r3, [r1, #0]
 800ca36:	6826      	ldr	r6, [r4, #0]
 800ca38:	6960      	ldr	r0, [r4, #20]
 800ca3a:	1d1d      	adds	r5, r3, #4
 800ca3c:	600d      	str	r5, [r1, #0]
 800ca3e:	0635      	lsls	r5, r6, #24
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	d501      	bpl.n	800ca48 <_printf_i+0x1cc>
 800ca44:	6018      	str	r0, [r3, #0]
 800ca46:	e002      	b.n	800ca4e <_printf_i+0x1d2>
 800ca48:	0671      	lsls	r1, r6, #25
 800ca4a:	d5fb      	bpl.n	800ca44 <_printf_i+0x1c8>
 800ca4c:	8018      	strh	r0, [r3, #0]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	6123      	str	r3, [r4, #16]
 800ca52:	4616      	mov	r6, r2
 800ca54:	e7ba      	b.n	800c9cc <_printf_i+0x150>
 800ca56:	680b      	ldr	r3, [r1, #0]
 800ca58:	1d1a      	adds	r2, r3, #4
 800ca5a:	600a      	str	r2, [r1, #0]
 800ca5c:	681e      	ldr	r6, [r3, #0]
 800ca5e:	6862      	ldr	r2, [r4, #4]
 800ca60:	2100      	movs	r1, #0
 800ca62:	4630      	mov	r0, r6
 800ca64:	f7f3 fbdc 	bl	8000220 <memchr>
 800ca68:	b108      	cbz	r0, 800ca6e <_printf_i+0x1f2>
 800ca6a:	1b80      	subs	r0, r0, r6
 800ca6c:	6060      	str	r0, [r4, #4]
 800ca6e:	6863      	ldr	r3, [r4, #4]
 800ca70:	6123      	str	r3, [r4, #16]
 800ca72:	2300      	movs	r3, #0
 800ca74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca78:	e7a8      	b.n	800c9cc <_printf_i+0x150>
 800ca7a:	6923      	ldr	r3, [r4, #16]
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	4649      	mov	r1, r9
 800ca80:	4640      	mov	r0, r8
 800ca82:	47d0      	blx	sl
 800ca84:	3001      	adds	r0, #1
 800ca86:	d0ab      	beq.n	800c9e0 <_printf_i+0x164>
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	079b      	lsls	r3, r3, #30
 800ca8c:	d413      	bmi.n	800cab6 <_printf_i+0x23a>
 800ca8e:	68e0      	ldr	r0, [r4, #12]
 800ca90:	9b03      	ldr	r3, [sp, #12]
 800ca92:	4298      	cmp	r0, r3
 800ca94:	bfb8      	it	lt
 800ca96:	4618      	movlt	r0, r3
 800ca98:	e7a4      	b.n	800c9e4 <_printf_i+0x168>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	4632      	mov	r2, r6
 800ca9e:	4649      	mov	r1, r9
 800caa0:	4640      	mov	r0, r8
 800caa2:	47d0      	blx	sl
 800caa4:	3001      	adds	r0, #1
 800caa6:	d09b      	beq.n	800c9e0 <_printf_i+0x164>
 800caa8:	3501      	adds	r5, #1
 800caaa:	68e3      	ldr	r3, [r4, #12]
 800caac:	9903      	ldr	r1, [sp, #12]
 800caae:	1a5b      	subs	r3, r3, r1
 800cab0:	42ab      	cmp	r3, r5
 800cab2:	dcf2      	bgt.n	800ca9a <_printf_i+0x21e>
 800cab4:	e7eb      	b.n	800ca8e <_printf_i+0x212>
 800cab6:	2500      	movs	r5, #0
 800cab8:	f104 0619 	add.w	r6, r4, #25
 800cabc:	e7f5      	b.n	800caaa <_printf_i+0x22e>
 800cabe:	bf00      	nop
 800cac0:	0800d2c5 	.word	0x0800d2c5
 800cac4:	0800d2d6 	.word	0x0800d2d6

0800cac8 <memmove>:
 800cac8:	4288      	cmp	r0, r1
 800caca:	b510      	push	{r4, lr}
 800cacc:	eb01 0402 	add.w	r4, r1, r2
 800cad0:	d902      	bls.n	800cad8 <memmove+0x10>
 800cad2:	4284      	cmp	r4, r0
 800cad4:	4623      	mov	r3, r4
 800cad6:	d807      	bhi.n	800cae8 <memmove+0x20>
 800cad8:	1e43      	subs	r3, r0, #1
 800cada:	42a1      	cmp	r1, r4
 800cadc:	d008      	beq.n	800caf0 <memmove+0x28>
 800cade:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cae6:	e7f8      	b.n	800cada <memmove+0x12>
 800cae8:	4402      	add	r2, r0
 800caea:	4601      	mov	r1, r0
 800caec:	428a      	cmp	r2, r1
 800caee:	d100      	bne.n	800caf2 <memmove+0x2a>
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cafa:	e7f7      	b.n	800caec <memmove+0x24>

0800cafc <_free_r>:
 800cafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cafe:	2900      	cmp	r1, #0
 800cb00:	d048      	beq.n	800cb94 <_free_r+0x98>
 800cb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb06:	9001      	str	r0, [sp, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb0e:	bfb8      	it	lt
 800cb10:	18e4      	addlt	r4, r4, r3
 800cb12:	f000 f8d3 	bl	800ccbc <__malloc_lock>
 800cb16:	4a20      	ldr	r2, [pc, #128]	; (800cb98 <_free_r+0x9c>)
 800cb18:	9801      	ldr	r0, [sp, #4]
 800cb1a:	6813      	ldr	r3, [r2, #0]
 800cb1c:	4615      	mov	r5, r2
 800cb1e:	b933      	cbnz	r3, 800cb2e <_free_r+0x32>
 800cb20:	6063      	str	r3, [r4, #4]
 800cb22:	6014      	str	r4, [r2, #0]
 800cb24:	b003      	add	sp, #12
 800cb26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb2a:	f000 b8cd 	b.w	800ccc8 <__malloc_unlock>
 800cb2e:	42a3      	cmp	r3, r4
 800cb30:	d90b      	bls.n	800cb4a <_free_r+0x4e>
 800cb32:	6821      	ldr	r1, [r4, #0]
 800cb34:	1862      	adds	r2, r4, r1
 800cb36:	4293      	cmp	r3, r2
 800cb38:	bf04      	itt	eq
 800cb3a:	681a      	ldreq	r2, [r3, #0]
 800cb3c:	685b      	ldreq	r3, [r3, #4]
 800cb3e:	6063      	str	r3, [r4, #4]
 800cb40:	bf04      	itt	eq
 800cb42:	1852      	addeq	r2, r2, r1
 800cb44:	6022      	streq	r2, [r4, #0]
 800cb46:	602c      	str	r4, [r5, #0]
 800cb48:	e7ec      	b.n	800cb24 <_free_r+0x28>
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	b10b      	cbz	r3, 800cb54 <_free_r+0x58>
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	d9fa      	bls.n	800cb4a <_free_r+0x4e>
 800cb54:	6811      	ldr	r1, [r2, #0]
 800cb56:	1855      	adds	r5, r2, r1
 800cb58:	42a5      	cmp	r5, r4
 800cb5a:	d10b      	bne.n	800cb74 <_free_r+0x78>
 800cb5c:	6824      	ldr	r4, [r4, #0]
 800cb5e:	4421      	add	r1, r4
 800cb60:	1854      	adds	r4, r2, r1
 800cb62:	42a3      	cmp	r3, r4
 800cb64:	6011      	str	r1, [r2, #0]
 800cb66:	d1dd      	bne.n	800cb24 <_free_r+0x28>
 800cb68:	681c      	ldr	r4, [r3, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	6053      	str	r3, [r2, #4]
 800cb6e:	4421      	add	r1, r4
 800cb70:	6011      	str	r1, [r2, #0]
 800cb72:	e7d7      	b.n	800cb24 <_free_r+0x28>
 800cb74:	d902      	bls.n	800cb7c <_free_r+0x80>
 800cb76:	230c      	movs	r3, #12
 800cb78:	6003      	str	r3, [r0, #0]
 800cb7a:	e7d3      	b.n	800cb24 <_free_r+0x28>
 800cb7c:	6825      	ldr	r5, [r4, #0]
 800cb7e:	1961      	adds	r1, r4, r5
 800cb80:	428b      	cmp	r3, r1
 800cb82:	bf04      	itt	eq
 800cb84:	6819      	ldreq	r1, [r3, #0]
 800cb86:	685b      	ldreq	r3, [r3, #4]
 800cb88:	6063      	str	r3, [r4, #4]
 800cb8a:	bf04      	itt	eq
 800cb8c:	1949      	addeq	r1, r1, r5
 800cb8e:	6021      	streq	r1, [r4, #0]
 800cb90:	6054      	str	r4, [r2, #4]
 800cb92:	e7c7      	b.n	800cb24 <_free_r+0x28>
 800cb94:	b003      	add	sp, #12
 800cb96:	bd30      	pop	{r4, r5, pc}
 800cb98:	20008dbc 	.word	0x20008dbc

0800cb9c <_malloc_r>:
 800cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb9e:	1ccd      	adds	r5, r1, #3
 800cba0:	f025 0503 	bic.w	r5, r5, #3
 800cba4:	3508      	adds	r5, #8
 800cba6:	2d0c      	cmp	r5, #12
 800cba8:	bf38      	it	cc
 800cbaa:	250c      	movcc	r5, #12
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	4606      	mov	r6, r0
 800cbb0:	db01      	blt.n	800cbb6 <_malloc_r+0x1a>
 800cbb2:	42a9      	cmp	r1, r5
 800cbb4:	d903      	bls.n	800cbbe <_malloc_r+0x22>
 800cbb6:	230c      	movs	r3, #12
 800cbb8:	6033      	str	r3, [r6, #0]
 800cbba:	2000      	movs	r0, #0
 800cbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbbe:	f000 f87d 	bl	800ccbc <__malloc_lock>
 800cbc2:	4921      	ldr	r1, [pc, #132]	; (800cc48 <_malloc_r+0xac>)
 800cbc4:	680a      	ldr	r2, [r1, #0]
 800cbc6:	4614      	mov	r4, r2
 800cbc8:	b99c      	cbnz	r4, 800cbf2 <_malloc_r+0x56>
 800cbca:	4f20      	ldr	r7, [pc, #128]	; (800cc4c <_malloc_r+0xb0>)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	b923      	cbnz	r3, 800cbda <_malloc_r+0x3e>
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	f000 f862 	bl	800cc9c <_sbrk_r>
 800cbd8:	6038      	str	r0, [r7, #0]
 800cbda:	4629      	mov	r1, r5
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f000 f85d 	bl	800cc9c <_sbrk_r>
 800cbe2:	1c43      	adds	r3, r0, #1
 800cbe4:	d123      	bne.n	800cc2e <_malloc_r+0x92>
 800cbe6:	230c      	movs	r3, #12
 800cbe8:	6033      	str	r3, [r6, #0]
 800cbea:	4630      	mov	r0, r6
 800cbec:	f000 f86c 	bl	800ccc8 <__malloc_unlock>
 800cbf0:	e7e3      	b.n	800cbba <_malloc_r+0x1e>
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	1b5b      	subs	r3, r3, r5
 800cbf6:	d417      	bmi.n	800cc28 <_malloc_r+0x8c>
 800cbf8:	2b0b      	cmp	r3, #11
 800cbfa:	d903      	bls.n	800cc04 <_malloc_r+0x68>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	441c      	add	r4, r3
 800cc00:	6025      	str	r5, [r4, #0]
 800cc02:	e004      	b.n	800cc0e <_malloc_r+0x72>
 800cc04:	6863      	ldr	r3, [r4, #4]
 800cc06:	42a2      	cmp	r2, r4
 800cc08:	bf0c      	ite	eq
 800cc0a:	600b      	streq	r3, [r1, #0]
 800cc0c:	6053      	strne	r3, [r2, #4]
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f000 f85a 	bl	800ccc8 <__malloc_unlock>
 800cc14:	f104 000b 	add.w	r0, r4, #11
 800cc18:	1d23      	adds	r3, r4, #4
 800cc1a:	f020 0007 	bic.w	r0, r0, #7
 800cc1e:	1ac2      	subs	r2, r0, r3
 800cc20:	d0cc      	beq.n	800cbbc <_malloc_r+0x20>
 800cc22:	1a1b      	subs	r3, r3, r0
 800cc24:	50a3      	str	r3, [r4, r2]
 800cc26:	e7c9      	b.n	800cbbc <_malloc_r+0x20>
 800cc28:	4622      	mov	r2, r4
 800cc2a:	6864      	ldr	r4, [r4, #4]
 800cc2c:	e7cc      	b.n	800cbc8 <_malloc_r+0x2c>
 800cc2e:	1cc4      	adds	r4, r0, #3
 800cc30:	f024 0403 	bic.w	r4, r4, #3
 800cc34:	42a0      	cmp	r0, r4
 800cc36:	d0e3      	beq.n	800cc00 <_malloc_r+0x64>
 800cc38:	1a21      	subs	r1, r4, r0
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f000 f82e 	bl	800cc9c <_sbrk_r>
 800cc40:	3001      	adds	r0, #1
 800cc42:	d1dd      	bne.n	800cc00 <_malloc_r+0x64>
 800cc44:	e7cf      	b.n	800cbe6 <_malloc_r+0x4a>
 800cc46:	bf00      	nop
 800cc48:	20008dbc 	.word	0x20008dbc
 800cc4c:	20008dc0 	.word	0x20008dc0

0800cc50 <_realloc_r>:
 800cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc52:	4607      	mov	r7, r0
 800cc54:	4614      	mov	r4, r2
 800cc56:	460e      	mov	r6, r1
 800cc58:	b921      	cbnz	r1, 800cc64 <_realloc_r+0x14>
 800cc5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc5e:	4611      	mov	r1, r2
 800cc60:	f7ff bf9c 	b.w	800cb9c <_malloc_r>
 800cc64:	b922      	cbnz	r2, 800cc70 <_realloc_r+0x20>
 800cc66:	f7ff ff49 	bl	800cafc <_free_r>
 800cc6a:	4625      	mov	r5, r4
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc70:	f000 f830 	bl	800ccd4 <_malloc_usable_size_r>
 800cc74:	42a0      	cmp	r0, r4
 800cc76:	d20f      	bcs.n	800cc98 <_realloc_r+0x48>
 800cc78:	4621      	mov	r1, r4
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	f7ff ff8e 	bl	800cb9c <_malloc_r>
 800cc80:	4605      	mov	r5, r0
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d0f2      	beq.n	800cc6c <_realloc_r+0x1c>
 800cc86:	4631      	mov	r1, r6
 800cc88:	4622      	mov	r2, r4
 800cc8a:	f7ff fba9 	bl	800c3e0 <memcpy>
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4638      	mov	r0, r7
 800cc92:	f7ff ff33 	bl	800cafc <_free_r>
 800cc96:	e7e9      	b.n	800cc6c <_realloc_r+0x1c>
 800cc98:	4635      	mov	r5, r6
 800cc9a:	e7e7      	b.n	800cc6c <_realloc_r+0x1c>

0800cc9c <_sbrk_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4d06      	ldr	r5, [pc, #24]	; (800ccb8 <_sbrk_r+0x1c>)
 800cca0:	2300      	movs	r3, #0
 800cca2:	4604      	mov	r4, r0
 800cca4:	4608      	mov	r0, r1
 800cca6:	602b      	str	r3, [r5, #0]
 800cca8:	f7f5 fe84 	bl	80029b4 <_sbrk>
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	d102      	bne.n	800ccb6 <_sbrk_r+0x1a>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	b103      	cbz	r3, 800ccb6 <_sbrk_r+0x1a>
 800ccb4:	6023      	str	r3, [r4, #0]
 800ccb6:	bd38      	pop	{r3, r4, r5, pc}
 800ccb8:	20009a90 	.word	0x20009a90

0800ccbc <__malloc_lock>:
 800ccbc:	4801      	ldr	r0, [pc, #4]	; (800ccc4 <__malloc_lock+0x8>)
 800ccbe:	f000 b811 	b.w	800cce4 <__retarget_lock_acquire_recursive>
 800ccc2:	bf00      	nop
 800ccc4:	20009a98 	.word	0x20009a98

0800ccc8 <__malloc_unlock>:
 800ccc8:	4801      	ldr	r0, [pc, #4]	; (800ccd0 <__malloc_unlock+0x8>)
 800ccca:	f000 b80c 	b.w	800cce6 <__retarget_lock_release_recursive>
 800ccce:	bf00      	nop
 800ccd0:	20009a98 	.word	0x20009a98

0800ccd4 <_malloc_usable_size_r>:
 800ccd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccd8:	1f18      	subs	r0, r3, #4
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	bfbc      	itt	lt
 800ccde:	580b      	ldrlt	r3, [r1, r0]
 800cce0:	18c0      	addlt	r0, r0, r3
 800cce2:	4770      	bx	lr

0800cce4 <__retarget_lock_acquire_recursive>:
 800cce4:	4770      	bx	lr

0800cce6 <__retarget_lock_release_recursive>:
 800cce6:	4770      	bx	lr

0800cce8 <_init>:
 800cce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccea:	bf00      	nop
 800ccec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccee:	bc08      	pop	{r3}
 800ccf0:	469e      	mov	lr, r3
 800ccf2:	4770      	bx	lr

0800ccf4 <_fini>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	bf00      	nop
 800ccf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfa:	bc08      	pop	{r3}
 800ccfc:	469e      	mov	lr, r3
 800ccfe:	4770      	bx	lr
